{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":0},{"_id":"themes/nextTheme/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/scroll.png","path":"images/scroll.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/title.png","path":"images/title.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-flat-top.min.css","path":"lib/pace/pace-theme-flat-top.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-material.min.css","path":"lib/pace/pace-theme-material.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/reading_progress/renovate.json","path":"lib/reading_progress/renovate.json","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/renovate.json","path":"lib/three/renovate.json","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_drafts/git 初阶add-commit-push ~2.md","hash":"22bd8f9547bb8f5c8c4a7e930a3b92610a32cea2","modified":1605023675813},{"_id":"source/_posts/12-go-指针和引用.md","hash":"e3eef04eb0c9c774b9231bbf26ce53b6fd1786f5","modified":1605538740510},{"_id":"source/_posts/11-hexo-主题-评论-进度条-背景效果.md","hash":"cf7e8b7d03d60ab7fe82d7b963d7f9697ad8efce","modified":1605538740510},{"_id":"source/_posts/17-chrome headless.md","hash":"4c275501de8285231c684f44568081a59b06b6d8","modified":1605538740526},{"_id":"source/_posts/13-Linux-进程.md","hash":"58296c82af361c5556c69fd52b315007d3979353","modified":1605538740520},{"_id":"source/_posts/16-go源码words归纳.md","hash":"6b40ae89692d08504b1f38a3f84e051a6bc1d340","modified":1605538740525},{"_id":"source/_posts/10-go-mutex解读.md","hash":"58ccbc0cebf117f85d355ac031961a3a247c6f70","modified":1605538740505},{"_id":"source/_posts/18-GPM-1-初识.md","hash":"fbdb3c51b670dd01f652d8a4a81901b4f30b93ee","modified":1605538740529},{"_id":"source/_posts/15-Plan9-汇编小记.md","hash":"d39d73ce357acb980631cfa205156a1efdb6ce9f","modified":1605538740522},{"_id":"source/_posts/19-GPM-2-调度流程.md","hash":"a0fb99f7636fe73fc4cd395e2b6e33f260008811","modified":1605538740531},{"_id":"source/_posts/2-vscode-常见问题.md","hash":"7e9e00f39ea8ec1ee44e3a65120fa860d2374bac","modified":1605538740533},{"_id":"source/_posts/20-博客诡异事件.md","hash":"681f1b66b7cc7321e2c986a76674754310f030d7","modified":1605576582363},{"_id":"source/_posts/4-Git常用技巧.md","hash":"b47ab4d59565ca060d66f56c34dde9bd4f90b5ad","modified":1605538740535},{"_id":"source/_posts/14-hexo-安装-插件.md","hash":"e49610bf4dcab0538e6b6f6436c0d4a7eb82f14a","modified":1605538740512},{"_id":"source/_posts/3-git-cz规范提交.md","hash":"7483a75e179cbbf679a3eaeeefa0a3e41b12eb2f","modified":1605538740534},{"_id":"source/_posts/5-Git-GPG签署工作.md","hash":"15fb0b38a07c2f6e5526ec1bae5d0768cb84cbaf","modified":1605538740535},{"_id":"source/_posts/9-Go-reflect-DeepEqual.md","hash":"17ca8773a3195c3531a9bcf60ee78ed8e085380a","modified":1605538740556},{"_id":"source/_posts/1-重拾那份折腾之心，坚定脚步.md","hash":"14bc853693555127dfd885d5239665927b0cf065","modified":1605538740508},{"_id":"source/_posts/7-Go-Context包使用.md","hash":"dd6693bfa3a0e2f649c2a0ff3008e40251e3b110","modified":1605538740553},{"_id":"source/_posts/6-git 初阶:安装配置 ～1.md","hash":"af6dbb761ce761325d53c176f054c048a8dea5a6","modified":1605538740537},{"_id":"source/_posts/8-go-rwmutex解读.md","hash":"214ed88e9b98d92cfc0fa45c52d416be4fdda476","modified":1605538740554},{"_id":"source/categories/index.md","hash":"958a5f0f58e4b3d7351ad170d43d812bda6ce739","modified":1598976492700},{"_id":"source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1600819922413},{"_id":"source/tags/index.md","hash":"1d844ace792d6fa481eb42d64cfb6cecf93f3fbb","modified":1598976492701},{"_id":"source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1600819922413},{"_id":"source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1600819922413},{"_id":"source/lib/reading_progress/README.md","hash":"d370ea928bad9e91fd8f1590e23e279b9a959516","modified":1600819922413},{"_id":"source/lib/reading_progress/package.json","hash":"b48a3293b45d8cab41e0ab61a64104a854f6dc94","modified":1600819922413},{"_id":"source/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1600819922414},{"_id":"source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1600819922414},{"_id":"source/lib/reading_progress/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1600819922414},{"_id":"source/lib/reading_progress/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1600819922413},{"_id":"themes/nextTheme/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1598976492701},{"_id":"themes/nextTheme/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1598976492701},{"_id":"themes/nextTheme/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1598976492701},{"_id":"themes/nextTheme/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1598976492704},{"_id":"themes/nextTheme/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1598976492705},{"_id":"themes/nextTheme/_config.yml","hash":"82ab9cec55430656a430bcf7a51088d932799a63","modified":1605576564640},{"_id":"themes/nextTheme/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1598976492705},{"_id":"themes/nextTheme/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1598976492705},{"_id":"themes/nextTheme/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1598976492723},{"_id":"themes/nextTheme/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1598976492706},{"_id":"themes/nextTheme/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1598976492710},{"_id":"themes/nextTheme/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1598976492702},{"_id":"themes/nextTheme/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1598976492702},{"_id":"themes/nextTheme/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1598976492703},{"_id":"themes/nextTheme/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1598976492703},{"_id":"themes/nextTheme/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1598976492703},{"_id":"themes/nextTheme/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1598976492704},{"_id":"themes/nextTheme/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1598976492703},{"_id":"themes/nextTheme/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1598976492704},{"_id":"themes/nextTheme/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1598976492710},{"_id":"themes/nextTheme/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1598976492710},{"_id":"themes/nextTheme/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1598976492710},{"_id":"themes/nextTheme/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1598976492710},{"_id":"themes/nextTheme/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1598976492710},{"_id":"themes/nextTheme/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1598976492704},{"_id":"themes/nextTheme/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1598976492704},{"_id":"themes/nextTheme/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1598976492704},{"_id":"themes/nextTheme/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1598976492711},{"_id":"themes/nextTheme/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1598976492711},{"_id":"themes/nextTheme/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1598976492711},{"_id":"themes/nextTheme/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1598976492711},{"_id":"themes/nextTheme/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1598976492711},{"_id":"themes/nextTheme/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1598976492711},{"_id":"themes/nextTheme/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1598976492711},{"_id":"themes/nextTheme/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1598976492712},{"_id":"themes/nextTheme/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1598976492712},{"_id":"themes/nextTheme/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1598976492712},{"_id":"themes/nextTheme/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1598976492712},{"_id":"themes/nextTheme/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1598976492713},{"_id":"themes/nextTheme/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1598976492713},{"_id":"themes/nextTheme/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1598976492713},{"_id":"themes/nextTheme/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1598976492713},{"_id":"themes/nextTheme/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1598976492713},{"_id":"themes/nextTheme/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1598976492713},{"_id":"themes/nextTheme/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1598976492713},{"_id":"themes/nextTheme/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1598976492722},{"_id":"themes/nextTheme/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1598976492722},{"_id":"themes/nextTheme/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1598976492722},{"_id":"themes/nextTheme/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1598976492723},{"_id":"themes/nextTheme/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1598976492723},{"_id":"themes/nextTheme/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1598976492723},{"_id":"themes/nextTheme/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1598976492706},{"_id":"themes/nextTheme/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1598976492706},{"_id":"themes/nextTheme/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1598976492706},{"_id":"themes/nextTheme/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1598976492707},{"_id":"themes/nextTheme/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1598976492707},{"_id":"themes/nextTheme/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1598976492707},{"_id":"themes/nextTheme/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1598976492726},{"_id":"themes/nextTheme/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1598976492707},{"_id":"themes/nextTheme/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1598976492707},{"_id":"themes/nextTheme/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1598976492707},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1598976492703},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1598976492702},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1598976492703},{"_id":"themes/nextTheme/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1598976492714},{"_id":"themes/nextTheme/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1598976492714},{"_id":"themes/nextTheme/layout/_macro/post.swig","hash":"57bf4fd898e70d7b03de5a8ad38181613cdb924f","modified":1605023408016},{"_id":"themes/nextTheme/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1598976492714},{"_id":"themes/nextTheme/layout/_partials/footer.swig","hash":"7efaa171a11f65ecaef8a5d689be2d4f4024b694","modified":1605576362652},{"_id":"themes/nextTheme/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1598976492716},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1598976492703},{"_id":"themes/nextTheme/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1598976492717},{"_id":"themes/nextTheme/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1598976492717},{"_id":"themes/nextTheme/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1598976492717},{"_id":"themes/nextTheme/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1598976492718},{"_id":"themes/nextTheme/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1598976492718},{"_id":"themes/nextTheme/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1598976492718},{"_id":"themes/nextTheme/source/.DS_Store","hash":"163994d04019fa7ae30dcbe4dfa46d84064a58b9","modified":1605537995723},{"_id":"themes/nextTheme/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1598976492721},{"_id":"themes/nextTheme/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1598976492708},{"_id":"themes/nextTheme/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1598976492708},{"_id":"themes/nextTheme/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1598976492708},{"_id":"themes/nextTheme/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1598976492708},{"_id":"themes/nextTheme/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1598976492708},{"_id":"themes/nextTheme/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1598976492708},{"_id":"themes/nextTheme/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1598976492709},{"_id":"themes/nextTheme/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1598976492709},{"_id":"themes/nextTheme/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1598976492709},{"_id":"themes/nextTheme/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1598976492709},{"_id":"themes/nextTheme/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1598976492709},{"_id":"themes/nextTheme/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1598976492709},{"_id":"themes/nextTheme/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1598976492723},{"_id":"themes/nextTheme/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1598976492710},{"_id":"themes/nextTheme/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1598976492725},{"_id":"themes/nextTheme/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1598976492725},{"_id":"themes/nextTheme/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1598976492725},{"_id":"themes/nextTheme/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1598976492725},{"_id":"themes/nextTheme/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1598976492725},{"_id":"themes/nextTheme/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1598976492725},{"_id":"themes/nextTheme/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1598976492725},{"_id":"themes/nextTheme/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1598976492725},{"_id":"themes/nextTheme/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1598976492726},{"_id":"themes/nextTheme/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1598976492726},{"_id":"themes/nextTheme/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1598976492726},{"_id":"themes/nextTheme/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1598976492726},{"_id":"themes/nextTheme/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1598976492726},{"_id":"themes/nextTheme/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1598976492727},{"_id":"themes/nextTheme/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1598976492727},{"_id":"themes/nextTheme/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1598976492727},{"_id":"themes/nextTheme/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1598976492727},{"_id":"themes/nextTheme/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1598976492727},{"_id":"themes/nextTheme/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1598976492727},{"_id":"themes/nextTheme/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1598976492727},{"_id":"themes/nextTheme/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1598976492739},{"_id":"themes/nextTheme/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1598976492743},{"_id":"themes/nextTheme/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598976492743},{"_id":"themes/nextTheme/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598976492743},{"_id":"themes/nextTheme/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598976492744},{"_id":"themes/nextTheme/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598976492744},{"_id":"themes/nextTheme/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598976492744},{"_id":"themes/nextTheme/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598976492744},{"_id":"themes/nextTheme/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598976492744},{"_id":"themes/nextTheme/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598976492745},{"_id":"themes/nextTheme/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598976492745},{"_id":"themes/nextTheme/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598976492745},{"_id":"themes/nextTheme/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598976492745},{"_id":"themes/nextTheme/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598976492745},{"_id":"themes/nextTheme/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598976492745},{"_id":"themes/nextTheme/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1598976492746},{"_id":"themes/nextTheme/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1598976492746},{"_id":"themes/nextTheme/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1598976492746},{"_id":"themes/nextTheme/source/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1601471230781},{"_id":"themes/nextTheme/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1598976492746},{"_id":"themes/nextTheme/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1598976492746},{"_id":"themes/nextTheme/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1598976492747},{"_id":"themes/nextTheme/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598976492747},{"_id":"themes/nextTheme/layout/_partials/head/head.swig","hash":"82f370a5f9ec7590f2e2acf63f8d9782de151f04","modified":1599051058634},{"_id":"themes/nextTheme/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1598976492714},{"_id":"themes/nextTheme/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1598976492715},{"_id":"themes/nextTheme/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1598976492716},{"_id":"themes/nextTheme/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1598976492717},{"_id":"themes/nextTheme/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1598976492717},{"_id":"themes/nextTheme/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1598976492717},{"_id":"themes/nextTheme/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1598976492718},{"_id":"themes/nextTheme/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1598976492718},{"_id":"themes/nextTheme/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1598976492718},{"_id":"themes/nextTheme/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1598976492718},{"_id":"themes/nextTheme/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1598976492719},{"_id":"themes/nextTheme/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1598976492720},{"_id":"themes/nextTheme/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1598976492721},{"_id":"themes/nextTheme/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1598976492722},{"_id":"themes/nextTheme/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1598976492722},{"_id":"themes/nextTheme/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1598976492722},{"_id":"themes/nextTheme/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1598976492722},{"_id":"themes/nextTheme/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1598976492722},{"_id":"themes/nextTheme/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1598976492723},{"_id":"themes/nextTheme/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1598976492723},{"_id":"themes/nextTheme/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1598976492724},{"_id":"themes/nextTheme/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1598976492724},{"_id":"themes/nextTheme/source/css/_custom/custom.styl","hash":"bcde120a2039212cb3f6f88ff18e49a79dbc0fb1","modified":1605023447587},{"_id":"themes/nextTheme/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1598976492742},{"_id":"themes/nextTheme/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1598976492743},{"_id":"themes/nextTheme/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1598976492743},{"_id":"themes/nextTheme/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1598976492742},{"_id":"themes/nextTheme/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1598976492743},{"_id":"themes/nextTheme/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1598976492746},{"_id":"themes/nextTheme/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1598976492746},{"_id":"themes/nextTheme/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1600818192623},{"_id":"themes/nextTheme/source/lib/canvas-nest/README.md","hash":"0ba5a24a483f36166f0cb871bd30f4c7467f3593","modified":1600818192623},{"_id":"themes/nextTheme/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1600818192623},{"_id":"themes/nextTheme/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1600818192624},{"_id":"themes/nextTheme/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1600820014132},{"_id":"themes/nextTheme/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1600820014131},{"_id":"themes/nextTheme/source/lib/canvas-ribbon/README.md","hash":"3a18d68b0673c0e79faecc8503268ac7bec7d30e","modified":1600820014132},{"_id":"themes/nextTheme/source/lib/pace/README.md","hash":"168f57bb63563b9671d0c4f10c0940e7eec261f0","modified":1600820953965},{"_id":"themes/nextTheme/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1600820953964},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1600820953965},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1600820953965},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1600820953965},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1600820953966},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1600820953967},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1600820953967},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1600820953967},{"_id":"themes/nextTheme/source/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1600820953967},{"_id":"themes/nextTheme/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1600820953967},{"_id":"themes/nextTheme/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1600819957442},{"_id":"themes/nextTheme/source/lib/reading_progress/README.md","hash":"d370ea928bad9e91fd8f1590e23e279b9a959516","modified":1600819957442},{"_id":"themes/nextTheme/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1600819957442},{"_id":"themes/nextTheme/source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1600819957443},{"_id":"themes/nextTheme/source/lib/reading_progress/package.json","hash":"b48a3293b45d8cab41e0ab61a64104a854f6dc94","modified":1600819957442},{"_id":"themes/nextTheme/source/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1600819957442},{"_id":"themes/nextTheme/source/lib/reading_progress/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1600819957443},{"_id":"themes/nextTheme/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1600819994481},{"_id":"themes/nextTheme/source/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1600819994482},{"_id":"themes/nextTheme/source/lib/three/README.md","hash":"1e31051ce404eaa86df192b7000442bacd31e2b4","modified":1600819994481},{"_id":"themes/nextTheme/source/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1600819994482},{"_id":"themes/nextTheme/source/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1600819994483},{"_id":"themes/nextTheme/source/lib/three/package.json","hash":"af5089f910e1041b316def5512a23443f0ffaadc","modified":1600819994484},{"_id":"themes/nextTheme/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598976492749},{"_id":"themes/nextTheme/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598976492749},{"_id":"themes/nextTheme/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1598976492728},{"_id":"themes/nextTheme/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1598976492728},{"_id":"themes/nextTheme/source/lib/three/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1600819994484},{"_id":"themes/nextTheme/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1598976492728},{"_id":"themes/nextTheme/source/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1600819994485},{"_id":"themes/nextTheme/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1598976492737},{"_id":"themes/nextTheme/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1598976492737},{"_id":"themes/nextTheme/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1598976492737},{"_id":"themes/nextTheme/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1598976492739},{"_id":"themes/nextTheme/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1598976492739},{"_id":"themes/nextTheme/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1598976492739},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1598976492740},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1598976492741},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1598976492742},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1598976492741},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1598976492741},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1598976492742},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1598976492741},{"_id":"themes/nextTheme/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1598976492741},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1598976492741},{"_id":"themes/nextTheme/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1598976492748},{"_id":"themes/nextTheme/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1598976492748},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1598976492742},{"_id":"themes/nextTheme/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1600819994484},{"_id":"themes/nextTheme/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1600819994484},{"_id":"themes/nextTheme/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1600819994483},{"_id":"themes/nextTheme/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1598976492728},{"_id":"themes/nextTheme/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1600819994484},{"_id":"themes/nextTheme/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1598976492729},{"_id":"themes/nextTheme/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1598976492729},{"_id":"themes/nextTheme/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1598976492729},{"_id":"themes/nextTheme/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1598976492729},{"_id":"themes/nextTheme/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1598976492729},{"_id":"themes/nextTheme/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1598976492729},{"_id":"themes/nextTheme/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1598976492730},{"_id":"themes/nextTheme/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1600819994484},{"_id":"themes/nextTheme/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1598976492730},{"_id":"themes/nextTheme/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1598976492732},{"_id":"themes/nextTheme/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1598976492732},{"_id":"themes/nextTheme/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1598976492732},{"_id":"themes/nextTheme/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1598976492732},{"_id":"themes/nextTheme/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1598976492732},{"_id":"themes/nextTheme/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1598976492731},{"_id":"themes/nextTheme/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1598976492733},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1598976492734},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1598976492734},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1598976492734},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1598976492734},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1598976492735},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1598976492735},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1598976492735},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1598976492735},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1598976492735},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1598976492735},{"_id":"themes/nextTheme/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1598976492736},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1598976492737},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1598976492737},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1598976492738},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1598976492738},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1598976492738},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1598976492738},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1598976492738},{"_id":"themes/nextTheme/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1598976492748},{"_id":"themes/nextTheme/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1598976492748},{"_id":"themes/nextTheme/source/images/title.png","hash":"dd71bccd228979507ac95da62626cc6af087cfc5","modified":1605538332282},{"_id":"themes/nextTheme/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1600819994487},{"_id":"public/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1605576607381},{"_id":"public/lib/reading_progress/package.json","hash":"8d6815f29afe52968881f536aee8d9267ba53bd2","modified":1605576607381},{"_id":"public/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1605576607381},{"_id":"public/lib/reading_progress/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1605576607381},{"_id":"public/baidusitemap.xml","hash":"32299fcfb2ce0eca552f61662744fdc54196028e","modified":1605576607381},{"_id":"public/sitemap.xml","hash":"367a3b5e839c12abcfe165f7918ba9e1ea263330","modified":1605576607381},{"_id":"public/search.xml","hash":"9dadfd5fad66abee80d1bf5c3eb8470f41950c76","modified":1605576607381},{"_id":"public/lib/reading_progress/README.html","hash":"6ff33b53c88fc18841c23c4f206d9370cc6dc8b2","modified":1605576607381},{"_id":"public/categories/index.html","hash":"153cd3baef8778d5f2a61488351253cd08864a83","modified":1605576607381},{"_id":"public/tags/index.html","hash":"085de0945daba3cf731d6e576416c1ee3cc26884","modified":1605576607381},{"_id":"public/archives/5ce14ff5.html","hash":"164b1afe4c50d0b4f38d05a416a78b9160453019","modified":1605576607381},{"_id":"public/archives/5c6a362f.html","hash":"716470d93dd6e5cbfb927a6119d32aa53e10f3fc","modified":1605576607381},{"_id":"public/archives/b885f9f7.html","hash":"c12a2e45ac9a171428d4740bbec9e3c0ae5e28d0","modified":1605576607381},{"_id":"public/archives/5544baea.html","hash":"395375ee1fd8bbaca41b549a51ceb42bd7c7d141","modified":1605576607381},{"_id":"public/archives/425d5e80.html","hash":"cc1f4474f8dc41428e9a0676ed309dd454e4e280","modified":1605576607381},{"_id":"public/archives/2ce846ed.html","hash":"12fe150ed4cb980393750a543b24e44a082455ec","modified":1605576607381},{"_id":"public/archives/ae4aba0d.html","hash":"ecc85270b4c5e7079a26bb9d84016d6327bf5a61","modified":1605576607381},{"_id":"public/archives/ba455c1d.html","hash":"9680aaefcf622f45ad6f2bba3632d00d7080cf01","modified":1605576607381},{"_id":"public/archives/1191d613.html","hash":"36c56688e172bc4cae9320966358aefa5f7ccdc7","modified":1605576607381},{"_id":"public/archives/e18c94ab.html","hash":"f91930b8806f03257fecef6171a71e1b129a5b78","modified":1605576607381},{"_id":"public/archives/ff0d6c2b.html","hash":"15d6d3ecf0d140b03ac92eb19b199cd49c6d5826","modified":1605576607381},{"_id":"public/archives/e2e7cc4e.html","hash":"d64f430066587cbf247539d505fa0af5ddaa31a2","modified":1605576607381},{"_id":"public/archives/3038b6c3.html","hash":"07b28d6bbe0c05361cb14942198f6e8b9e0a7528","modified":1605576607381},{"_id":"public/archives/410dfaec.html","hash":"308d62f4ab826f57763e48bcbe2d36b1b75d71f0","modified":1605576607381},{"_id":"public/archives/bddc30f6.html","hash":"8ec7c68543a7d6376c9a7d6e420570b4622d83bd","modified":1605576607381},{"_id":"public/archives/580377d0.html","hash":"4e3f2abfb3f5440714864a8cdad7e6275101882a","modified":1605576607381},{"_id":"public/archives/3c1dd822.html","hash":"5e26c8e24e4a650cc164d3170ab128974e854e33","modified":1605576607381},{"_id":"public/archives/458b44c2.html","hash":"99be76ceb563788e074891a88bf70a6dc3af928d","modified":1605576607381},{"_id":"public/archives/8cf3cbca.html","hash":"1bd06b5ed21e947a2a6f450fec6096489445b45f","modified":1605576607381},{"_id":"public/archives/640b5696.html","hash":"edcb1ac3c94f5ba6c1e3749bf8d974a33a82a465","modified":1605576607381},{"_id":"public/archives/index.html","hash":"200d792c362eecff698864851ce205f8eb48d05f","modified":1605576607381},{"_id":"public/archives/page/2/index.html","hash":"b0a3191d7c49a488e0b5d9a448fd2982dd89f31a","modified":1605576607381},{"_id":"public/archives/2020/index.html","hash":"5f85b9694a4fe8e667ba5dbb0119716f8a95d564","modified":1605576607381},{"_id":"public/archives/2020/page/2/index.html","hash":"e330a8a3d3f3e87edda6560b10a6443c5d5b9439","modified":1605576607381},{"_id":"public/archives/2020/08/index.html","hash":"dbbec7ae4e3cf031f5611a5d9d96cf63678e0b02","modified":1605576607381},{"_id":"public/archives/2020/09/index.html","hash":"0b541d47ad3120f74833c1dd8ea1f265ae318dc5","modified":1605576607381},{"_id":"public/archives/2020/09/page/2/index.html","hash":"686e66156559c52c31794d8b2bb01c87b95c5192","modified":1605576607381},{"_id":"public/archives/2020/10/index.html","hash":"9a281e930fb8c7068f8e16a139581b687610f7cd","modified":1605576607381},{"_id":"public/archives/2020/11/index.html","hash":"80a4d5211e62ca21b1a4ca708ce9534f829b1c3f","modified":1605576607381},{"_id":"public/index.html","hash":"cbb716c452d1104ed14107d74d011237fca4d409","modified":1605576607381},{"_id":"public/page/2/index.html","hash":"c8b07f6653bb2c301b318fb0c704d1151bfefe5a","modified":1605576607381},{"_id":"public/tags/Git/index.html","hash":"ce0959f201356b7129da02514f0721a357487336","modified":1605576607381},{"_id":"public/tags/life/index.html","hash":"ac700c951866ce858ee6ffab1b6094cc673fe62d","modified":1605576607381},{"_id":"public/tags/Go/index.html","hash":"4f27b0c6c261eca66f8ef69509a80f0fa7bf306e","modified":1605576607381},{"_id":"public/tags/Go源码/index.html","hash":"c808e7dfc6afdb6dd7c75552b9f52aa937a6e723","modified":1605576607381},{"_id":"public/tags/Go-Package/index.html","hash":"61ac0125f543b35c8b5d2655b3be991f7c2d3216","modified":1605576607381},{"_id":"public/tags/锁/index.html","hash":"118ca4df8dd4364fc55a1b446af62aa8f5b3145b","modified":1605576607381},{"_id":"public/tags/hexo/index.html","hash":"cb9e296a93f8c68ea2ab886bbe798d686f07673e","modified":1605576607381},{"_id":"public/tags/hexo插件/index.html","hash":"7091701f6a1658a1c792e386ffe68684d87e421a","modified":1605576607381},{"_id":"public/tags/Day/index.html","hash":"fc6c3e0d978a8b851ac16562b63053af5faa88a6","modified":1605576607381},{"_id":"public/tags/Linux/index.html","hash":"b4b0374920da0c598a5ee27a6195e13ef6723ebb","modified":1605576607381},{"_id":"public/tags/进程/index.html","hash":"546e0b934496d1c85c2e6961ef7749061c6c6e1d","modified":1605576607381},{"_id":"public/tags/chrome/index.html","hash":"08d4c052ccbeb7b023413e80cdfe24eced16344c","modified":1605576607381},{"_id":"public/tags/Plan9/index.html","hash":"2e9ae42d7f4d54c2199b76a2e5fefd10c8c1fce9","modified":1605576607381},{"_id":"public/tags/GPM/index.html","hash":"ccd9d6a4e95960d751c476af117bf75279f22afe","modified":1605576607381},{"_id":"public/tags/vscode/index.html","hash":"4c8d0020c8bacf5f7f639eff9cedaa8bd5da30ee","modified":1605576607381},{"_id":"public/tags/工具/index.html","hash":"c334745ffcd34cf32f7a49ebd446dec0809a4648","modified":1605576607381},{"_id":"public/tags/博客/index.html","hash":"10f5963215f8e74d483d621ddb3b14e29671fbad","modified":1605576607381},{"_id":"public/tags/Go-reflect/index.html","hash":"179698c77c0455acf95c6242364888b54f1457bf","modified":1605576607381},{"_id":"public/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1605576607381},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1605576607381},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1605576607381},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1605576607381},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1605576607381},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1605576607381},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1605576607381},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1605576607381},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1605576607381},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1605576607381},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1605576607381},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1605576607381},{"_id":"public/images/scroll.png","hash":"443930af0ee54778babad7724291bfed9b431dd5","modified":1605576607381},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1605576607381},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1605576607381},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1605576607381},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1605576607381},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1605576607381},{"_id":"public/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1605576607381},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1605576607381},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1605576607381},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1605576607381},{"_id":"public/css/main.css","hash":"ae8ac92ce7b3f66ffa82f8b5ee99ffd90147bcfe","modified":1605576607381},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1605576607381},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1605576607381},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1605576607381},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1605576607381},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1605576607381},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1605576607381},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1605576607381},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1605576607381},{"_id":"public/lib/canvas-nest/README.html","hash":"1540408b951f5fab35f77c66b94b4167cbf906c9","modified":1605576607381},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1605576607381},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1605576607381},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"65b1a8f12d04b15d7ed6eeb9d11dec760a799c5f","modified":1605576607381},{"_id":"public/lib/canvas-ribbon/README.html","hash":"6454f207412553c84f9b1851f9aca312ecb3e24c","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1605576607381},{"_id":"public/lib/pace/README.html","hash":"b9bd70142385866a86de27c5312a42fb1a08cb00","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-flat-top.min.css","hash":"5e1c97e232b46e48592a8e4983ae5a89e0a7da6a","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1605576607381},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1605576607381},{"_id":"public/lib/three/README.html","hash":"2eb166c7b8400151729974fd196478bd4579ff03","modified":1605576607381},{"_id":"public/lib/three/gulpfile.js","hash":"e0e9e7051d9d82a37c2aba1df396d8b3916323c4","modified":1605576607381},{"_id":"public/lib/three/renovate.json","hash":"94990e0ad04ce4a7c6f0ac3543318d9e02db1264","modified":1605576607381},{"_id":"public/lib/three/package.json","hash":"3e6a0c56ec47a38c0bf7b404f6e46965ec7d2e3d","modified":1605576607381},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1605576607381},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1605576607381},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1605576607381},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1605576607381},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1605576607381},{"_id":"public/lib/pace/pace-theme-material.min.css","hash":"f1ff83985c090f3a3236554c5ef69542dcceb049","modified":1605576607381},{"_id":"public/lib/three/canvas_lines.min.js","hash":"ae6584edc0418d68731cab82c1494f26bd77c07d","modified":1605576607381},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"186c3bd6ae352d336cdbd0e555ee76a844854c94","modified":1605576607381},{"_id":"public/lib/three/three-waves.min.js","hash":"329483be97cdda030779da9a6cd1e3eae645cf4f","modified":1605576607381},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1605576607381},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1605576607381},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1605576607381},{"_id":"public/images/title.png","hash":"dd71bccd228979507ac95da62626cc6af087cfc5","modified":1605576607381},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1605576607381},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1605576607381}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2020-09-01T06:02:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-09-01 14:02:45\ntype: \"categories\"\n---\n","updated":"2020-09-01T16:08:12.700Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckhlauvke0000hyi7fjomac3c","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"tags","date":"2020-09-01T06:01:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-01 14:01:56\ntype: \"tags\"\n---\n","updated":"2020-09-01T16:08:12.701Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckhlauvkj0002hyi789ad51to","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"_content":"<h1 align=\"center\">Reading Progress for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\nreading_progress:\n  enable: true\n  color: \"#37c6c0\"\n  height: 2px\n```\n\n**And, if you wants to use the CDN, then need to set:**\n\n```yml\nvendors:\n  ...\n  reading_progress: //cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/reading_progress\n$ git pull\n```\n","source":"lib/reading_progress/README.md","raw":"<h1 align=\"center\">Reading Progress for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\nChange dir to **NexT** directory. There must be `layout`, `source`, `languages` and other directories:\n\n```sh\n$ cd themes/next\n$ ls\nbower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  source  test\n```\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\nInstall module to `source/lib` directory:\n\n```sh\n$ git clone https://github.com/theme-next/theme-next-reading-progress source/lib/reading_progress\n```\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\nEnable module in **NexT** `_config.yml` file:\n\n```yml\nreading_progress:\n  enable: true\n  color: \"#37c6c0\"\n  height: 2px\n```\n\n**And, if you wants to use the CDN, then need to set:**\n\n```yml\nvendors:\n  ...\n  reading_progress: //cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js\n```\n\n<h1 align=\"center\">Update</h1>\n\n```sh\n$ cd themes/next/source/lib/reading_progress\n$ git pull\n```\n","date":"2020-09-23T00:12:02.413Z","updated":"2020-09-23T00:12:02.413Z","path":"lib/reading_progress/README.html","title":"","comments":1,"layout":"page","_id":"ckhlauvkm0005hyi76lwgafnp","content":"<h1 align=\"center\">Reading Progress for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-reading-progress <span class=\"built_in\">source</span>/lib/reading_progress</span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#37c6c0&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">2px</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">reading_progress:</span> <span class=\"string\">//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/<span class=\"built_in\">source</span>/lib/reading_progress</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 align=\"center\">Reading Progress for <a href=\"https://github.com/theme-next\">NexT</a></h1>\n\n<h1 align=\"center\">Installation</h1>\n\n<h2>If you want to use the CDN instead of clone this repo, please jump to the Step 3.</h2>\n\n<h2 align=\"center\">Step 1 &rarr; Go to NexT dir</h2>\n\n<p>Change dir to <strong>NexT</strong> directory. There must be <code>layout</code>, <code>source</code>, <code>languages</code> and other directories:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next</span><br><span class=\"line\">$ ls</span><br><span class=\"line\">bower.json  _config.yml  docs  gulpfile.coffee  languages  layout  LICENSE.md  package.json  README.md  scripts  <span class=\"built_in\">source</span>  <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 2 &rarr; Get module</h2>\n\n<p>Install module to <code>source/lib</code> directory:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/theme-next-reading-progress <span class=\"built_in\">source</span>/lib/reading_progress</span><br></pre></td></tr></table></figure>\n\n<h2 align=\"center\">Step 3 &rarr; Set it up</h2>\n\n<p>Enable module in <strong>NexT</strong> <code>_config.yml</code> file:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">reading_progress:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">color:</span> <span class=\"string\">&quot;#37c6c0&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">height:</span> <span class=\"string\">2px</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>And, if you wants to use the CDN, then need to set:</strong></p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">vendors:</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">reading_progress:</span> <span class=\"string\">//cdn.jsdelivr.net/gh/theme-next/theme-next-reading-progress@1/reading_progress.min.js</span></span><br></pre></td></tr></table></figure>\n\n<h1 align=\"center\">Update</h1>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> themes/next/<span class=\"built_in\">source</span>/lib/reading_progress</span><br><span class=\"line\">$ git pull</span><br></pre></td></tr></table></figure>\n","length":805},{"_content":"{\n  \"name\": \"theme-next-reading-progress\",\n  \"version\": \"1.2.0\",\n  \"description\": \"<h1 align=\\\"center\\\">Reading Progress for <a href=\\\"https://github.com/theme-next\\\">NexT</a></h1>\",\n  \"main\": \"reading_progress.js\",\n  \"scripts\": {\n    \"uglify\": \"uglifyjs --compress --mangle -o reading_progress.min.js -- reading_progress.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/theme-next/theme-next-reading-progress.git\"\n  },\n  \"author\": \"theme-next\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/theme-next/theme-next-reading-progress/issues\"\n  },\n  \"homepage\": \"https://github.com/theme-next/theme-next-reading-progress#readme\",\n  \"dependencies\": {\n    \"uglify-js\": \"^3.3.9\"\n  }\n}\n","source":"lib/reading_progress/package.json","raw":"{\n  \"name\": \"theme-next-reading-progress\",\n  \"version\": \"1.2.0\",\n  \"description\": \"<h1 align=\\\"center\\\">Reading Progress for <a href=\\\"https://github.com/theme-next\\\">NexT</a></h1>\",\n  \"main\": \"reading_progress.js\",\n  \"scripts\": {\n    \"uglify\": \"uglifyjs --compress --mangle -o reading_progress.min.js -- reading_progress.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/theme-next/theme-next-reading-progress.git\"\n  },\n  \"author\": \"theme-next\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/theme-next/theme-next-reading-progress/issues\"\n  },\n  \"homepage\": \"https://github.com/theme-next/theme-next-reading-progress#readme\",\n  \"dependencies\": {\n    \"uglify-js\": \"^3.3.9\"\n  }\n}\n","date":"2020-09-23T00:12:02.413Z","updated":"2020-09-23T00:12:02.413Z","path":"lib/reading_progress/package.json","layout":"false","title":"","comments":1,"_id":"ckhlauvkn0007hyi771v90re8","content":"{\"name\":\"theme-next-reading-progress\",\"version\":\"1.2.0\",\"description\":\"<h1 align=\\\"center\\\">Reading Progress for <a href=\\\"https://github.com/theme-next\\\">NexT</a></h1>\",\"main\":\"reading_progress.js\",\"scripts\":{\"uglify\":\"uglifyjs --compress --mangle -o reading_progress.min.js -- reading_progress.js\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/theme-next/theme-next-reading-progress.git\"},\"author\":\"theme-next\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/theme-next/theme-next-reading-progress/issues\"},\"homepage\":\"https://github.com/theme-next/theme-next-reading-progress#readme\",\"dependencies\":{\"uglify-js\":\"^3.3.9\"}}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"theme-next-reading-progress\",\"version\":\"1.2.0\",\"description\":\"<h1 align=\\\"center\\\">Reading Progress for <a href=\\\"https://github.com/theme-next\\\">NexT</a></h1>\",\"main\":\"reading_progress.js\",\"scripts\":{\"uglify\":\"uglifyjs --compress --mangle -o reading_progress.min.js -- reading_progress.js\"},\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/theme-next/theme-next-reading-progress.git\"},\"author\":\"theme-next\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/theme-next/theme-next-reading-progress/issues\"},\"homepage\":\"https://github.com/theme-next/theme-next-reading-progress#readme\",\"dependencies\":{\"uglify-js\":\"^3.3.9\"}}","length":558},{"_content":";(function() {\n\tvar $bar = $('.reading-progress-bar')\n\tif (!$bar.length) return //no progress bar found\n\tvar supportsPassive = false\n\ttry {\n\t\tvar opts = Object.defineProperty({}, 'passive', {\n\t\t\tget: function() {\n\t\t\t\tsupportsPassive = true\n\t\t\t}\n\t\t})\n\t\twindow.addEventListener('test', $.noop, opts)\n\t\twindow.removeEventListener('test', $.noop)\n\t} catch (e) {}\n\tvar $w = $(window)\n\tvar $d = $(document)\n\t$d.ready(function() {\n\t\twindow.addEventListener(\n\t\t\t'scroll',\n\t\t\tfunction() {\n\t\t\t\tvar wh = $w.height()\n\t\t\t\tvar dh = $d.height()\n\t\t\t\tvar st = $w.scrollTop()\n\t\t\t\tvar percent = (st / (dh - wh)) * 100\n\t\t\t\tpercent = percent > 100 ? 100 : percent < 0 ? 0 : percent\n\t\t\t\t$bar.css('width', percent + '%')\n\t\t\t},\n\t\t\tsupportsPassive ? { passive: true } : false\n\t\t)\n\t})\n})()\n","source":"lib/reading_progress/reading_progress.js","raw":";(function() {\n\tvar $bar = $('.reading-progress-bar')\n\tif (!$bar.length) return //no progress bar found\n\tvar supportsPassive = false\n\ttry {\n\t\tvar opts = Object.defineProperty({}, 'passive', {\n\t\t\tget: function() {\n\t\t\t\tsupportsPassive = true\n\t\t\t}\n\t\t})\n\t\twindow.addEventListener('test', $.noop, opts)\n\t\twindow.removeEventListener('test', $.noop)\n\t} catch (e) {}\n\tvar $w = $(window)\n\tvar $d = $(document)\n\t$d.ready(function() {\n\t\twindow.addEventListener(\n\t\t\t'scroll',\n\t\t\tfunction() {\n\t\t\t\tvar wh = $w.height()\n\t\t\t\tvar dh = $d.height()\n\t\t\t\tvar st = $w.scrollTop()\n\t\t\t\tvar percent = (st / (dh - wh)) * 100\n\t\t\t\tpercent = percent > 100 ? 100 : percent < 0 ? 0 : percent\n\t\t\t\t$bar.css('width', percent + '%')\n\t\t\t},\n\t\t\tsupportsPassive ? { passive: true } : false\n\t\t)\n\t})\n})()\n","date":"2020-09-23T00:12:02.414Z","updated":"2020-09-23T00:12:02.414Z","path":"lib/reading_progress/reading_progress.js","layout":"false","title":"","comments":1,"_id":"ckhlauvko0009hyi767wy93vf","content":";(function() {\n\tvar $bar = $('.reading-progress-bar')\n\tif (!$bar.length) return //no progress bar found\n\tvar supportsPassive = false\n\ttry {\n\t\tvar opts = Object.defineProperty({}, 'passive', {\n\t\t\tget: function() {\n\t\t\t\tsupportsPassive = true\n\t\t\t}\n\t\t})\n\t\twindow.addEventListener('test', $.noop, opts)\n\t\twindow.removeEventListener('test', $.noop)\n\t} catch (e) {}\n\tvar $w = $(window)\n\tvar $d = $(document)\n\t$d.ready(function() {\n\t\twindow.addEventListener(\n\t\t\t'scroll',\n\t\t\tfunction() {\n\t\t\t\tvar wh = $w.height()\n\t\t\t\tvar dh = $d.height()\n\t\t\t\tvar st = $w.scrollTop()\n\t\t\t\tvar percent = (st / (dh - wh)) * 100\n\t\t\t\tpercent = percent > 100 ? 100 : percent < 0 ? 0 : percent\n\t\t\t\t$bar.css('width', percent + '%')\n\t\t\t},\n\t\t\tsupportsPassive ? { passive: true } : false\n\t\t)\n\t})\n})()\n","site":{"data":{}},"excerpt":"","more":";(function() {\n\tvar $bar = $('.reading-progress-bar')\n\tif (!$bar.length) return //no progress bar found\n\tvar supportsPassive = false\n\ttry {\n\t\tvar opts = Object.defineProperty({}, 'passive', {\n\t\t\tget: function() {\n\t\t\t\tsupportsPassive = true\n\t\t\t}\n\t\t})\n\t\twindow.addEventListener('test', $.noop, opts)\n\t\twindow.removeEventListener('test', $.noop)\n\t} catch (e) {}\n\tvar $w = $(window)\n\tvar $d = $(document)\n\t$d.ready(function() {\n\t\twindow.addEventListener(\n\t\t\t'scroll',\n\t\t\tfunction() {\n\t\t\t\tvar wh = $w.height()\n\t\t\t\tvar dh = $d.height()\n\t\t\t\tvar st = $w.scrollTop()\n\t\t\t\tvar percent = (st / (dh - wh)) * 100\n\t\t\t\tpercent = percent > 100 ? 100 : percent < 0 ? 0 : percent\n\t\t\t\t$bar.css('width', percent + '%')\n\t\t\t},\n\t\t\tsupportsPassive ? { passive: true } : false\n\t\t)\n\t})\n})()\n","length":588},{"_content":"!function(){var e=$(\".reading-progress-bar\");if(e.length){var n=!1;try{var t=Object.defineProperty({},\"passive\",{get:function(){n=!0}});window.addEventListener(\"test\",$.noop,t),window.removeEventListener(\"test\",$.noop)}catch(e){}var i=$(window),o=$(document);o.ready(function(){window.addEventListener(\"scroll\",function(){var n=i.height(),t=o.height(),r=i.scrollTop()/(t-n)*100;r=r>100?100:r<0?0:r,e.css(\"width\",r+\"%\")},!!n&&{passive:!0})})}}();","source":"lib/reading_progress/reading_progress.min.js","raw":"!function(){var e=$(\".reading-progress-bar\");if(e.length){var n=!1;try{var t=Object.defineProperty({},\"passive\",{get:function(){n=!0}});window.addEventListener(\"test\",$.noop,t),window.removeEventListener(\"test\",$.noop)}catch(e){}var i=$(window),o=$(document);o.ready(function(){window.addEventListener(\"scroll\",function(){var n=i.height(),t=o.height(),r=i.scrollTop()/(t-n)*100;r=r>100?100:r<0?0:r,e.css(\"width\",r+\"%\")},!!n&&{passive:!0})})}}();","date":"2020-09-23T00:12:02.414Z","updated":"2020-09-23T00:12:02.414Z","path":"lib/reading_progress/reading_progress.min.js","layout":"false","title":"","comments":1,"_id":"ckhlauvkp000dhyi70xje4st7","content":"!function(){var e=$(\".reading-progress-bar\");if(e.length){var n=!1;try{var t=Object.defineProperty({},\"passive\",{get:function(){n=!0}});window.addEventListener(\"test\",$.noop,t),window.removeEventListener(\"test\",$.noop)}catch(e){}var i=$(window),o=$(document);o.ready(function(){window.addEventListener(\"scroll\",function(){var n=i.height(),t=o.height(),r=i.scrollTop()/(t-n)*100;r=r>100?100:r<0?0:r,e.css(\"width\",r+\"%\")},!!n&&{passive:!0})})}}();","site":{"data":{}},"excerpt":"","more":"!function(){var e=$(\".reading-progress-bar\");if(e.length){var n=!1;try{var t=Object.defineProperty({},\"passive\",{get:function(){n=!0}});window.addEventListener(\"test\",$.noop,t),window.removeEventListener(\"test\",$.noop)}catch(e){}var i=$(window),o=$(document);o.ready(function(){window.addEventListener(\"scroll\",function(){var n=i.height(),t=o.height(),r=i.scrollTop()/(t-n)*100;r=r>100?100:r<0?0:r,e.css(\"width\",r+\"%\")},!!n&&{passive:!0})})}}();","length":386},{"_content":"{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n","source":"lib/reading_progress/renovate.json","raw":"{\n  \"extends\": [\n    \"config:base\"\n  ]\n}\n","date":"2020-09-23T00:12:02.414Z","updated":"2020-09-23T00:12:02.414Z","path":"lib/reading_progress/renovate.json","layout":"false","title":"","comments":1,"_id":"ckhlauvkr000fhyi7hh1xaoby","content":"{\"extends\":[\"config:base\"]}","site":{"data":{}},"excerpt":"","more":"{\"extends\":[\"config:base\"]}","length":27}],"Post":[{"title":"git 初阶:add/commit/push ~2","date":"2020-09-02T17:10:01.000Z","_content":"\n>上节提要：[Git初阶：安装配置～1](http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more)属于Git搭建的基础。\n\n\n>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。\n\n### 掌握目标\n\n<!-- more -->\n\n### add/commit/push使用\n\n```\ngit add XXX\ngit commit -m \"commit说明\"\ngit push origin master \n```\n\n### 常见的场景及策略\n\n\n","source":"_drafts/git 初阶add-commit-push ~2.md","raw":"---\ntitle: 'git 初阶:add/commit/push ~2'\ndate: 2020-09-03 01:10:01\ntags:\n    - Git\n---\n\n>上节提要：[Git初阶：安装配置～1](http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more)属于Git搭建的基础。\n\n\n>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。\n\n### 掌握目标\n\n<!-- more -->\n\n### add/commit/push使用\n\n```\ngit add XXX\ngit commit -m \"commit说明\"\ngit push origin master \n```\n\n### 常见的场景及策略\n\n\n","slug":"git 初阶add-commit-push ~2","published":0,"updated":"2020-11-10T15:54:35.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkh0001hyi776vo0h4t","content":"<blockquote>\n<p>上节提要：<a href=\"http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more\">Git初阶：安装配置～1</a>属于Git搭建的基础。</p>\n</blockquote>\n<blockquote>\n<p>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。</p>\n</blockquote>\n<h3 id=\"掌握目标\"><a href=\"#掌握目标\" class=\"headerlink\" title=\"掌握目标\"></a>掌握目标</h3><a id=\"more\"></a>\n\n<h3 id=\"add-commit-push使用\"><a href=\"#add-commit-push使用\" class=\"headerlink\" title=\"add/commit/push使用\"></a>add/commit/push使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add XXX</span><br><span class=\"line\">git commit -m &quot;commit说明&quot;</span><br><span class=\"line\">git push origin master </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见的场景及策略\"><a href=\"#常见的场景及策略\" class=\"headerlink\" title=\"常见的场景及策略\"></a>常见的场景及策略</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>上节提要：<a href=\"http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more\">Git初阶：安装配置～1</a>属于Git搭建的基础。</p>\n</blockquote>\n<blockquote>\n<p>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。</p>\n</blockquote>\n<h3 id=\"掌握目标\"><a href=\"#掌握目标\" class=\"headerlink\" title=\"掌握目标\"></a>掌握目标</h3>","more":"<h3 id=\"add-commit-push使用\"><a href=\"#add-commit-push使用\" class=\"headerlink\" title=\"add/commit/push使用\"></a>add/commit/push使用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add XXX</span><br><span class=\"line\">git commit -m &quot;commit说明&quot;</span><br><span class=\"line\">git push origin master </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见的场景及策略\"><a href=\"#常见的场景及策略\" class=\"headerlink\" title=\"常见的场景及策略\"></a>常见的场景及策略</h3>","length":163},{"title":"「1」重拾那份折腾之心，坚定脚步","date":"2020-08-31T00:48:48.000Z","updated":"2020-08-31T00:48:48.000Z","keywords":"折腾,后端博客,golang","abbrlink":"640b5696","_content":"\n    从前，现在，将来...","source":"_posts/1-重拾那份折腾之心，坚定脚步.md","raw":"---\ntitle: 「1」重拾那份折腾之心，坚定脚步\ndate: '2020/08/31 08:48:48'\nupdated: '2020/08/31 08:48:48'\nkeywords: '折腾,后端博客,golang'\ntags:\n  - life\nabbrlink: 640b5696\n---\n\n    从前，现在，将来...","slug":"1-重拾那份折腾之心，坚定脚步","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkk0003hyi7954s7a21","content":"<pre><code>从前，现在，将来...</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>从前，现在，将来...</code></pre>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Aug 31 2020 08:48:48 GMT+0800 (中国标准时间)","title":"「1」重拾那份折腾之心，坚定脚步","path":"archives/640b5696.html","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-08-31T00:48:48.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-31T00:48:48.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["life"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":11},{"title":"「10」go mutex解读","date":"2020-09-21T15:06:32.000Z","updated":"2020-09-22T05:20:32.000Z","keywords":"golang,go 源码,go 锁, mutex 解读","abbrlink":"ff0d6c2b","_content":"\n上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：\n<!-- more -->\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/mutex.png)\n\n>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。\n\n### 前序\n>开始看代码或者分析之前，先看下文档说明及其相关的资料。\n\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### src/sync/mutex.go\n```go\nconst (\n\tmutexLocked = 1 << iota // mutex is locked      state & mutexLocked 1==加锁  0==未加锁\n\n\t\n\n\tmutexWoken                                      //state & mutexWoken 1==唤醒  0==未唤醒\n\tmutexStarving                                   // state & mutexStarving 1==饥饿状态   0==正常状态\n\tmutexWaiterShift = iota                         // state >> mutexWaiterShift得到当前的goroutine数量\n\n\t// Mutex fairness.\n\t// 两种模式：正常或饥饿\n    // Mutex can be in 2 modes of operations: normal and starvation.\n    //  正常模式就是FIFO队列。\n\t// In normal mode waiters are queued in FIFO order, but a woken up waiter\n\t// does not own the mutex and competes with new arriving goroutines over\n\t// the ownership. New arriving goroutines have an advantage -- they are\n\t// already running on CPU and there can be lots of them, so a woken up\n\t// waiter has good chances of losing. In such case it is queued at front\n\t// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式\n\t// it switches mutex to the starvation mode.\n\t//\n\t// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。\n\t// the unlocking goroutine to the waiter at the front of the queue.\n\t// New arriving goroutines don't try to acquire the mutex even if it appears\n\t// to be unlocked, and don't try to spin. Instead they queue themselves at\n\t// the tail of the wait queue.\n\t//\n\t// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式\n\t// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,\n\t// it switches mutex back to normal operation mode.\n\t//\n\t// Normal mode has considerably better performance as a goroutine can acquire\n\t// a mutex several times in a row even if there are blocked waiters.\n\t// Starvation mode is important to prevent pathological cases of tail latency.\n\tstarvationThresholdNs = 1e6\n)\n```\n### 加锁流程\n>加锁过程图如上图提到的流程。\n\n>加锁代码具体流程：\n\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}\n\nfunc (m *Mutex) lockSlow() {\n\tvar waitStartTime int64 //等待时间\n\tstarving := false       //是否处于饥饿状态\n\tawoke := false          //唤醒状态\n\titer := 0               //自旋次数\n\told := m.state          //当前状态copy\n\tfor {\n\t\t// Don't spin in starvation mode, ownership is handed off to waiters\n        // so we won't be able to acquire the mutex anyway.\n        //加锁且能够自旋\n\t\tif old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) {\n\t\t\t// Active spinning makes sense.\n\t\t\t// Try to set mutexWoken flag to inform Unlock\n            // to not wake other blocked goroutines.\n            //自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒\n\t\t\tif !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 &&\n\t\t\t\tatomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) {\n\t\t\t\tawoke = true\n\t\t\t}\n\t\t\truntime_doSpin()    //自旋\n\t\t\titer++              \n\t\t\told = m.state       //状态重置\n\t\t\tcontinue\n        }\n        //更新状态\n\t\tnew := old\n        // Don't try to acquire starving mutex, new arriving goroutines must queue.\n        //非饥饿模式，则置锁\n\t\tif old&mutexStarving == 0 {\n\t\t\tnew |= mutexLocked\n        }\n        // 处于饥饿模式下，新来的goroutine进入队列中\n\t\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\t\tnew += 1 << mutexWaiterShift\n\t\t}\n\t\t// The current goroutine switches mutex to starvation mode.\n\t\t// But if the mutex is currently unlocked, don't do the switch.\n\t\t// Unlock expects that starving mutex has waiters, which will not\n        // be true in this case.\n        //切换到饥饿模式下\n\t\tif starving && old&mutexLocked != 0 {\n\t\t\tnew |= mutexStarving\n        }\n        //当前处于唤醒状态，则重置清除唤醒状态。\n\t\tif awoke {\n\t\t\t// The goroutine has been woken from sleep,\n\t\t\t// so we need to reset the flag in either case.\n\t\t\tif new&mutexWoken == 0 {\n\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t}\n\t\t\tnew &^= mutexWoken\n        }\n        //CAS更新状态。\n\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n            //获取到锁\n\t\t\tif old&(mutexLocked|mutexStarving) == 0 {\n\t\t\t\tbreak // locked the mutex with CAS\n\t\t\t}\n            // If we were already waiting before, queue at the front of the queue.\n            //等待队列的时间\n\t\t\tqueueLifo := waitStartTime != 0\n\t\t\tif waitStartTime == 0 {\n\t\t\t\twaitStartTime = runtime_nanotime()\n            }\n            //acquire阻塞队列....\n            // 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待\n            // 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部\n\t\t\truntime_SemacquireMutex(&m.sema, queueLifo, 1)\n\t\t\tstarving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs\n            old = m.state\n            //处于饥饿模式\n\t\t\tif old&mutexStarving != 0 {\n\t\t\t\t// If this goroutine was woken and mutex is in starvation mode,\n\t\t\t\t// ownership was handed off to us but mutex is in somewhat\n\t\t\t\t// inconsistent state: mutexLocked is not set and we are still\n\t\t\t\t// accounted as waiter. Fix that.\n\t\t\t\tif old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {\n\t\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n                }\n                //等待的goroutine-1\n                delta := int32(mutexLocked - 1<<mutexWaiterShift)\n                // 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。\n\t\t\t\tif !starving || old>>mutexWaiterShift == 1 {\n\t\t\t\t\t// Exit starvation mode.\n\t\t\t\t\t// Critical to do it here and consider wait time.\n\t\t\t\t\t// Starvation mode is so inefficient, that two goroutines\n\t\t\t\t\t// can go lock-step infinitely once they switch mutex\n\t\t\t\t\t// to starvation mode.\n\t\t\t\t\tdelta -= mutexStarving\n                }\n                //更新状态\n\t\t\t\tatomic.AddInt32(&m.state, delta)\n\t\t\t\tbreak\n            }\n            //重置迭代器和唤醒表示，继续获取锁\n\t\t\tawoke = true\n\t\t\titer = 0\n\t\t} else {\n            //CAS失败，则更新状态，继续获取。\n\t\t\told = m.state\n\t\t}\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n}\n\n```\n### 解锁过程\n\n用一个流程图来表示解锁过程：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/mutex-unlock.png)\n\n```go\nfunc (m *Mutex) Unlock() {\n    //state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic\n    new := atomic.AddInt32(&m.state, -mutexLocked)\n    if (new+mutexLocked)&mutexLocked == 0 {\n        throw(\"sync: unlock of unlocked mutex\")\n    }\n\n    // 释放锁，并通知其它等待者\n    // 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁\n    // mutex 正常模式\n    if new&mutexStarving == 0 {\n        old := new\n        for {\n            // 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式\n            // 直接返回.\n            if old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n                return\n            }\n            // 将等待的 goroutine-1，并设置 woken 标识\n            new = (old - 1<<mutexWaiterShift) | mutexWoken\n            // 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.\n            if atomic.CompareAndSwapInt32(&m.state, old, new) {\n                runtime_Semrelease(&m.sema, false)\n                return\n            }\n            old = m.state\n        }\n    } else {\n        // mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine\n        // 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。\n        // 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，\n        // 新来的 goroutine 不会把锁抢过去.\n        runtime_Semrelease(&m.sema, true)\n    }\n}\n\n```\n\n### 关键点\n\n* 不要重复锁定互斥锁\n* 不要忘记解锁互斥锁\n* 不要在多个函数之间直接传递互斥锁\n\n### END","source":"_posts/10-go-mutex解读.md","raw":"---\ntitle: 「10」go mutex解读\ndate: '2020/09/21 23:06:32'\nupdated: '2020/09/22 13:20:32'\nkeywords: 'golang,go 源码,go 锁, mutex 解读'\ntags:\n  - Go\n  - Go源码\n  - Go Package\n  - 锁\nabbrlink: ff0d6c2b\n---\n\n上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：\n<!-- more -->\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/mutex.png)\n\n>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。\n\n### 前序\n>开始看代码或者分析之前，先看下文档说明及其相关的资料。\n\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### src/sync/mutex.go\n```go\nconst (\n\tmutexLocked = 1 << iota // mutex is locked      state & mutexLocked 1==加锁  0==未加锁\n\n\t\n\n\tmutexWoken                                      //state & mutexWoken 1==唤醒  0==未唤醒\n\tmutexStarving                                   // state & mutexStarving 1==饥饿状态   0==正常状态\n\tmutexWaiterShift = iota                         // state >> mutexWaiterShift得到当前的goroutine数量\n\n\t// Mutex fairness.\n\t// 两种模式：正常或饥饿\n    // Mutex can be in 2 modes of operations: normal and starvation.\n    //  正常模式就是FIFO队列。\n\t// In normal mode waiters are queued in FIFO order, but a woken up waiter\n\t// does not own the mutex and competes with new arriving goroutines over\n\t// the ownership. New arriving goroutines have an advantage -- they are\n\t// already running on CPU and there can be lots of them, so a woken up\n\t// waiter has good chances of losing. In such case it is queued at front\n\t// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式\n\t// it switches mutex to the starvation mode.\n\t//\n\t// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。\n\t// the unlocking goroutine to the waiter at the front of the queue.\n\t// New arriving goroutines don't try to acquire the mutex even if it appears\n\t// to be unlocked, and don't try to spin. Instead they queue themselves at\n\t// the tail of the wait queue.\n\t//\n\t// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式\n\t// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,\n\t// it switches mutex back to normal operation mode.\n\t//\n\t// Normal mode has considerably better performance as a goroutine can acquire\n\t// a mutex several times in a row even if there are blocked waiters.\n\t// Starvation mode is important to prevent pathological cases of tail latency.\n\tstarvationThresholdNs = 1e6\n)\n```\n### 加锁流程\n>加锁过程图如上图提到的流程。\n\n>加锁代码具体流程：\n\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}\n\nfunc (m *Mutex) lockSlow() {\n\tvar waitStartTime int64 //等待时间\n\tstarving := false       //是否处于饥饿状态\n\tawoke := false          //唤醒状态\n\titer := 0               //自旋次数\n\told := m.state          //当前状态copy\n\tfor {\n\t\t// Don't spin in starvation mode, ownership is handed off to waiters\n        // so we won't be able to acquire the mutex anyway.\n        //加锁且能够自旋\n\t\tif old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) {\n\t\t\t// Active spinning makes sense.\n\t\t\t// Try to set mutexWoken flag to inform Unlock\n            // to not wake other blocked goroutines.\n            //自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒\n\t\t\tif !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 &&\n\t\t\t\tatomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) {\n\t\t\t\tawoke = true\n\t\t\t}\n\t\t\truntime_doSpin()    //自旋\n\t\t\titer++              \n\t\t\told = m.state       //状态重置\n\t\t\tcontinue\n        }\n        //更新状态\n\t\tnew := old\n        // Don't try to acquire starving mutex, new arriving goroutines must queue.\n        //非饥饿模式，则置锁\n\t\tif old&mutexStarving == 0 {\n\t\t\tnew |= mutexLocked\n        }\n        // 处于饥饿模式下，新来的goroutine进入队列中\n\t\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\t\tnew += 1 << mutexWaiterShift\n\t\t}\n\t\t// The current goroutine switches mutex to starvation mode.\n\t\t// But if the mutex is currently unlocked, don't do the switch.\n\t\t// Unlock expects that starving mutex has waiters, which will not\n        // be true in this case.\n        //切换到饥饿模式下\n\t\tif starving && old&mutexLocked != 0 {\n\t\t\tnew |= mutexStarving\n        }\n        //当前处于唤醒状态，则重置清除唤醒状态。\n\t\tif awoke {\n\t\t\t// The goroutine has been woken from sleep,\n\t\t\t// so we need to reset the flag in either case.\n\t\t\tif new&mutexWoken == 0 {\n\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t}\n\t\t\tnew &^= mutexWoken\n        }\n        //CAS更新状态。\n\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n            //获取到锁\n\t\t\tif old&(mutexLocked|mutexStarving) == 0 {\n\t\t\t\tbreak // locked the mutex with CAS\n\t\t\t}\n            // If we were already waiting before, queue at the front of the queue.\n            //等待队列的时间\n\t\t\tqueueLifo := waitStartTime != 0\n\t\t\tif waitStartTime == 0 {\n\t\t\t\twaitStartTime = runtime_nanotime()\n            }\n            //acquire阻塞队列....\n            // 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待\n            // 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部\n\t\t\truntime_SemacquireMutex(&m.sema, queueLifo, 1)\n\t\t\tstarving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs\n            old = m.state\n            //处于饥饿模式\n\t\t\tif old&mutexStarving != 0 {\n\t\t\t\t// If this goroutine was woken and mutex is in starvation mode,\n\t\t\t\t// ownership was handed off to us but mutex is in somewhat\n\t\t\t\t// inconsistent state: mutexLocked is not set and we are still\n\t\t\t\t// accounted as waiter. Fix that.\n\t\t\t\tif old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {\n\t\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n                }\n                //等待的goroutine-1\n                delta := int32(mutexLocked - 1<<mutexWaiterShift)\n                // 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。\n\t\t\t\tif !starving || old>>mutexWaiterShift == 1 {\n\t\t\t\t\t// Exit starvation mode.\n\t\t\t\t\t// Critical to do it here and consider wait time.\n\t\t\t\t\t// Starvation mode is so inefficient, that two goroutines\n\t\t\t\t\t// can go lock-step infinitely once they switch mutex\n\t\t\t\t\t// to starvation mode.\n\t\t\t\t\tdelta -= mutexStarving\n                }\n                //更新状态\n\t\t\t\tatomic.AddInt32(&m.state, delta)\n\t\t\t\tbreak\n            }\n            //重置迭代器和唤醒表示，继续获取锁\n\t\t\tawoke = true\n\t\t\titer = 0\n\t\t} else {\n            //CAS失败，则更新状态，继续获取。\n\t\t\told = m.state\n\t\t}\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n}\n\n```\n### 解锁过程\n\n用一个流程图来表示解锁过程：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/mutex-unlock.png)\n\n```go\nfunc (m *Mutex) Unlock() {\n    //state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic\n    new := atomic.AddInt32(&m.state, -mutexLocked)\n    if (new+mutexLocked)&mutexLocked == 0 {\n        throw(\"sync: unlock of unlocked mutex\")\n    }\n\n    // 释放锁，并通知其它等待者\n    // 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁\n    // mutex 正常模式\n    if new&mutexStarving == 0 {\n        old := new\n        for {\n            // 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式\n            // 直接返回.\n            if old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n                return\n            }\n            // 将等待的 goroutine-1，并设置 woken 标识\n            new = (old - 1<<mutexWaiterShift) | mutexWoken\n            // 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.\n            if atomic.CompareAndSwapInt32(&m.state, old, new) {\n                runtime_Semrelease(&m.sema, false)\n                return\n            }\n            old = m.state\n        }\n    } else {\n        // mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine\n        // 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。\n        // 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，\n        // 新来的 goroutine 不会把锁抢过去.\n        runtime_Semrelease(&m.sema, true)\n    }\n}\n\n```\n\n### 关键点\n\n* 不要重复锁定互斥锁\n* 不要忘记解锁互斥锁\n* 不要在多个函数之间直接传递互斥锁\n\n### END","slug":"10-go-mutex解读","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkm0006hyi70psi6xl2","content":"<p>上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。<br>这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：</p>\n<a id=\"more\"></a>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/mutex.png\"></p>\n<blockquote>\n<p>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。</p>\n</blockquote>\n<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><blockquote>\n<p>开始看代码或者分析之前，先看下文档说明及其相关的资料。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-sync-mutex-go\"><a href=\"#src-sync-mutex-go\" class=\"headerlink\" title=\"src/sync/mutex.go\"></a>src/sync/mutex.go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tmutexLocked = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">// mutex is locked      state &amp; mutexLocked 1==加锁  0==未加锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutexWoken                                      <span class=\"comment\">//state &amp; mutexWoken 1==唤醒  0==未唤醒</span></span><br><span class=\"line\">\tmutexStarving                                   <span class=\"comment\">// state &amp; mutexStarving 1==饥饿状态   0==正常状态</span></span><br><span class=\"line\">\tmutexWaiterShift = <span class=\"literal\">iota</span>                         <span class=\"comment\">// state &gt;&gt; mutexWaiterShift得到当前的goroutine数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Mutex fairness.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 两种模式：正常或饥饿</span></span><br><span class=\"line\">    <span class=\"comment\">// Mutex can be in 2 modes of operations: normal and starvation.</span></span><br><span class=\"line\">    <span class=\"comment\">//  正常模式就是FIFO队列。</span></span><br><span class=\"line\">\t<span class=\"comment\">// In normal mode waiters are queued in FIFO order, but a woken up waiter</span></span><br><span class=\"line\">\t<span class=\"comment\">// does not own the mutex and competes with new arriving goroutines over</span></span><br><span class=\"line\">\t<span class=\"comment\">// the ownership. New arriving goroutines have an advantage -- they are</span></span><br><span class=\"line\">\t<span class=\"comment\">// already running on CPU and there can be lots of them, so a woken up</span></span><br><span class=\"line\">\t<span class=\"comment\">// waiter has good chances of losing. In such case it is queued at front</span></span><br><span class=\"line\">\t<span class=\"comment\">// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex to the starvation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。</span></span><br><span class=\"line\">\t<span class=\"comment\">// the unlocking goroutine to the waiter at the front of the queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">// New arriving goroutines don&#x27;t try to acquire the mutex even if it appears</span></span><br><span class=\"line\">\t<span class=\"comment\">// to be unlocked, and don&#x27;t try to spin. Instead they queue themselves at</span></span><br><span class=\"line\">\t<span class=\"comment\">// the tail of the wait queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex back to normal operation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Normal mode has considerably better performance as a goroutine can acquire</span></span><br><span class=\"line\">\t<span class=\"comment\">// a mutex several times in a row even if there are blocked waiters.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Starvation mode is important to prevent pathological cases of tail latency.</span></span><br><span class=\"line\">\tstarvationThresholdNs = <span class=\"number\">1e6</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁流程\"><a href=\"#加锁流程\" class=\"headerlink\" title=\"加锁流程\"></a>加锁流程</h3><blockquote>\n<p>加锁过程图如上图提到的流程。</p>\n</blockquote>\n<blockquote>\n<p>加锁代码具体流程：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Fast path: grab unlocked mutex.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class=\"number\">0</span>, mutexLocked) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Slow path (outlined so that the fast path can be inlined)</span></span><br><span class=\"line\">\tm.lockSlow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">lockSlow</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> waitStartTime <span class=\"keyword\">int64</span> <span class=\"comment\">//等待时间</span></span><br><span class=\"line\">\tstarving := <span class=\"literal\">false</span>       <span class=\"comment\">//是否处于饥饿状态</span></span><br><span class=\"line\">\tawoke := <span class=\"literal\">false</span>          <span class=\"comment\">//唤醒状态</span></span><br><span class=\"line\">\titer := <span class=\"number\">0</span>               <span class=\"comment\">//自旋次数</span></span><br><span class=\"line\">\told := m.state          <span class=\"comment\">//当前状态copy</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span></span><br><span class=\"line\">        <span class=\"comment\">// so we won&#x27;t be able to acquire the mutex anyway.</span></span><br><span class=\"line\">        <span class=\"comment\">//加锁且能够自旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Active spinning makes sense.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to set mutexWoken flag to inform Unlock</span></span><br><span class=\"line\">            <span class=\"comment\">// to not wake other blocked goroutines.</span></span><br><span class=\"line\">            <span class=\"comment\">//自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class=\"number\">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\tatomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;</span><br><span class=\"line\">\t\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\truntime_doSpin()    <span class=\"comment\">//自旋</span></span><br><span class=\"line\">\t\t\titer++              </span><br><span class=\"line\">\t\t\told = m.state       <span class=\"comment\">//状态重置</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">new</span> := old</span><br><span class=\"line\">        <span class=\"comment\">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span></span><br><span class=\"line\">        <span class=\"comment\">//非饥饿模式，则置锁</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexLocked</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 处于饥饿模式下，新来的goroutine进入队列中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> += <span class=\"number\">1</span> &lt;&lt; mutexWaiterShift</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The current goroutine switches mutex to starvation mode.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Unlock expects that starving mutex has waiters, which will not</span></span><br><span class=\"line\">        <span class=\"comment\">// be true in this case.</span></span><br><span class=\"line\">        <span class=\"comment\">//切换到饥饿模式下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexStarving</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前处于唤醒状态，则重置清除唤醒状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> awoke &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The goroutine has been woken from sleep,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// so we need to reset the flag in either case.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexWoken == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> &amp;^= mutexWoken</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//CAS更新状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到锁</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span> <span class=\"comment\">// locked the mutex with CAS</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">// If we were already waiting before, queue at the front of the queue.</span></span><br><span class=\"line\">            <span class=\"comment\">//等待队列的时间</span></span><br><span class=\"line\">\t\t\tqueueLifo := waitStartTime != <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> waitStartTime == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\twaitStartTime = runtime_nanotime()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//acquire阻塞队列....</span></span><br><span class=\"line\">            <span class=\"comment\">// 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待</span></span><br><span class=\"line\">            <span class=\"comment\">// 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部</span></span><br><span class=\"line\">\t\t\truntime_SemacquireMutex(&amp;m.sema, queueLifo, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tstarving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">            <span class=\"comment\">//处于饥饿模式</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// If this goroutine was woken and mutex is in starvation mode,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ownership was handed off to us but mutex is in somewhat</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// inconsistent state: mutexLocked is not set and we are still</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// accounted as waiter. Fix that.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexWoken) != <span class=\"number\">0</span> || old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//等待的goroutine-1</span></span><br><span class=\"line\">                delta := <span class=\"keyword\">int32</span>(mutexLocked - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift)</span><br><span class=\"line\">                <span class=\"comment\">// 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Exit starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Critical to do it here and consider wait time.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Starvation mode is so inefficient, that two goroutines</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// can go lock-step infinitely once they switch mutex</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// to starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\tdelta -= mutexStarving</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t\t\tatomic.AddInt32(&amp;m.state, delta)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重置迭代器和唤醒表示，继续获取锁</span></span><br><span class=\"line\">\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\titer = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//CAS失败，则更新状态，继续获取。</span></span><br><span class=\"line\">\t\t\told = m.state</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁过程\"><a href=\"#解锁过程\" class=\"headerlink\" title=\"解锁过程\"></a>解锁过程</h3><p>用一个流程图来表示解锁过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/mutex-unlock.png\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic</span></span><br><span class=\"line\">    <span class=\"built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        throw(<span class=\"string\">&quot;sync: unlock of unlocked mutex&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放锁，并通知其它等待者</span></span><br><span class=\"line\">    <span class=\"comment\">// 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁</span></span><br><span class=\"line\">    <span class=\"comment\">// mutex 正常模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        old := <span class=\"built_in\">new</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接返回.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将等待的 goroutine-1，并设置 woken 标识</span></span><br><span class=\"line\">            <span class=\"built_in\">new</span> = (old - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken</span><br><span class=\"line\">            <span class=\"comment\">// 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">                runtime_Semrelease(&amp;m.sema, <span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。</span></span><br><span class=\"line\">        <span class=\"comment\">// 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 新来的 goroutine 不会把锁抢过去.</span></span><br><span class=\"line\">        runtime_Semrelease(&amp;m.sema, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li>不要重复锁定互斥锁</li>\n<li>不要忘记解锁互斥锁</li>\n<li>不要在多个函数之间直接传递互斥锁</li>\n</ul>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<p>上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。<br>这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：</p>","more":"<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/mutex.png\"></p>\n<blockquote>\n<p>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。</p>\n</blockquote>\n<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><blockquote>\n<p>开始看代码或者分析之前，先看下文档说明及其相关的资料。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"src-sync-mutex-go\"><a href=\"#src-sync-mutex-go\" class=\"headerlink\" title=\"src/sync/mutex.go\"></a>src/sync/mutex.go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tmutexLocked = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">// mutex is locked      state &amp; mutexLocked 1==加锁  0==未加锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutexWoken                                      <span class=\"comment\">//state &amp; mutexWoken 1==唤醒  0==未唤醒</span></span><br><span class=\"line\">\tmutexStarving                                   <span class=\"comment\">// state &amp; mutexStarving 1==饥饿状态   0==正常状态</span></span><br><span class=\"line\">\tmutexWaiterShift = <span class=\"literal\">iota</span>                         <span class=\"comment\">// state &gt;&gt; mutexWaiterShift得到当前的goroutine数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Mutex fairness.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 两种模式：正常或饥饿</span></span><br><span class=\"line\">    <span class=\"comment\">// Mutex can be in 2 modes of operations: normal and starvation.</span></span><br><span class=\"line\">    <span class=\"comment\">//  正常模式就是FIFO队列。</span></span><br><span class=\"line\">\t<span class=\"comment\">// In normal mode waiters are queued in FIFO order, but a woken up waiter</span></span><br><span class=\"line\">\t<span class=\"comment\">// does not own the mutex and competes with new arriving goroutines over</span></span><br><span class=\"line\">\t<span class=\"comment\">// the ownership. New arriving goroutines have an advantage -- they are</span></span><br><span class=\"line\">\t<span class=\"comment\">// already running on CPU and there can be lots of them, so a woken up</span></span><br><span class=\"line\">\t<span class=\"comment\">// waiter has good chances of losing. In such case it is queued at front</span></span><br><span class=\"line\">\t<span class=\"comment\">// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex to the starvation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。</span></span><br><span class=\"line\">\t<span class=\"comment\">// the unlocking goroutine to the waiter at the front of the queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">// New arriving goroutines don&#x27;t try to acquire the mutex even if it appears</span></span><br><span class=\"line\">\t<span class=\"comment\">// to be unlocked, and don&#x27;t try to spin. Instead they queue themselves at</span></span><br><span class=\"line\">\t<span class=\"comment\">// the tail of the wait queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex back to normal operation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Normal mode has considerably better performance as a goroutine can acquire</span></span><br><span class=\"line\">\t<span class=\"comment\">// a mutex several times in a row even if there are blocked waiters.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Starvation mode is important to prevent pathological cases of tail latency.</span></span><br><span class=\"line\">\tstarvationThresholdNs = <span class=\"number\">1e6</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁流程\"><a href=\"#加锁流程\" class=\"headerlink\" title=\"加锁流程\"></a>加锁流程</h3><blockquote>\n<p>加锁过程图如上图提到的流程。</p>\n</blockquote>\n<blockquote>\n<p>加锁代码具体流程：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Fast path: grab unlocked mutex.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class=\"number\">0</span>, mutexLocked) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Slow path (outlined so that the fast path can be inlined)</span></span><br><span class=\"line\">\tm.lockSlow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">lockSlow</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> waitStartTime <span class=\"keyword\">int64</span> <span class=\"comment\">//等待时间</span></span><br><span class=\"line\">\tstarving := <span class=\"literal\">false</span>       <span class=\"comment\">//是否处于饥饿状态</span></span><br><span class=\"line\">\tawoke := <span class=\"literal\">false</span>          <span class=\"comment\">//唤醒状态</span></span><br><span class=\"line\">\titer := <span class=\"number\">0</span>               <span class=\"comment\">//自旋次数</span></span><br><span class=\"line\">\told := m.state          <span class=\"comment\">//当前状态copy</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span></span><br><span class=\"line\">        <span class=\"comment\">// so we won&#x27;t be able to acquire the mutex anyway.</span></span><br><span class=\"line\">        <span class=\"comment\">//加锁且能够自旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Active spinning makes sense.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to set mutexWoken flag to inform Unlock</span></span><br><span class=\"line\">            <span class=\"comment\">// to not wake other blocked goroutines.</span></span><br><span class=\"line\">            <span class=\"comment\">//自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class=\"number\">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\tatomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;</span><br><span class=\"line\">\t\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\truntime_doSpin()    <span class=\"comment\">//自旋</span></span><br><span class=\"line\">\t\t\titer++              </span><br><span class=\"line\">\t\t\told = m.state       <span class=\"comment\">//状态重置</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">new</span> := old</span><br><span class=\"line\">        <span class=\"comment\">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span></span><br><span class=\"line\">        <span class=\"comment\">//非饥饿模式，则置锁</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexLocked</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 处于饥饿模式下，新来的goroutine进入队列中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> += <span class=\"number\">1</span> &lt;&lt; mutexWaiterShift</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The current goroutine switches mutex to starvation mode.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Unlock expects that starving mutex has waiters, which will not</span></span><br><span class=\"line\">        <span class=\"comment\">// be true in this case.</span></span><br><span class=\"line\">        <span class=\"comment\">//切换到饥饿模式下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexStarving</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前处于唤醒状态，则重置清除唤醒状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> awoke &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The goroutine has been woken from sleep,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// so we need to reset the flag in either case.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexWoken == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> &amp;^= mutexWoken</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//CAS更新状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到锁</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span> <span class=\"comment\">// locked the mutex with CAS</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">// If we were already waiting before, queue at the front of the queue.</span></span><br><span class=\"line\">            <span class=\"comment\">//等待队列的时间</span></span><br><span class=\"line\">\t\t\tqueueLifo := waitStartTime != <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> waitStartTime == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\twaitStartTime = runtime_nanotime()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//acquire阻塞队列....</span></span><br><span class=\"line\">            <span class=\"comment\">// 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待</span></span><br><span class=\"line\">            <span class=\"comment\">// 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部</span></span><br><span class=\"line\">\t\t\truntime_SemacquireMutex(&amp;m.sema, queueLifo, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tstarving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">            <span class=\"comment\">//处于饥饿模式</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// If this goroutine was woken and mutex is in starvation mode,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ownership was handed off to us but mutex is in somewhat</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// inconsistent state: mutexLocked is not set and we are still</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// accounted as waiter. Fix that.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexWoken) != <span class=\"number\">0</span> || old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//等待的goroutine-1</span></span><br><span class=\"line\">                delta := <span class=\"keyword\">int32</span>(mutexLocked - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift)</span><br><span class=\"line\">                <span class=\"comment\">// 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Exit starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Critical to do it here and consider wait time.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Starvation mode is so inefficient, that two goroutines</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// can go lock-step infinitely once they switch mutex</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// to starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\tdelta -= mutexStarving</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t\t\tatomic.AddInt32(&amp;m.state, delta)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重置迭代器和唤醒表示，继续获取锁</span></span><br><span class=\"line\">\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\titer = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//CAS失败，则更新状态，继续获取。</span></span><br><span class=\"line\">\t\t\told = m.state</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁过程\"><a href=\"#解锁过程\" class=\"headerlink\" title=\"解锁过程\"></a>解锁过程</h3><p>用一个流程图来表示解锁过程：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/mutex-unlock.png\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic</span></span><br><span class=\"line\">    <span class=\"built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        throw(<span class=\"string\">&quot;sync: unlock of unlocked mutex&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放锁，并通知其它等待者</span></span><br><span class=\"line\">    <span class=\"comment\">// 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁</span></span><br><span class=\"line\">    <span class=\"comment\">// mutex 正常模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        old := <span class=\"built_in\">new</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接返回.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将等待的 goroutine-1，并设置 woken 标识</span></span><br><span class=\"line\">            <span class=\"built_in\">new</span> = (old - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken</span><br><span class=\"line\">            <span class=\"comment\">// 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">                runtime_Semrelease(&amp;m.sema, <span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。</span></span><br><span class=\"line\">        <span class=\"comment\">// 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 新来的 goroutine 不会把锁抢过去.</span></span><br><span class=\"line\">        runtime_Semrelease(&amp;m.sema, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关键点\"><a href=\"#关键点\" class=\"headerlink\" title=\"关键点\"></a>关键点</h3><ul>\n<li>不要重复锁定互斥锁</li>\n<li>不要忘记解锁互斥锁</li>\n<li>不要在多个函数之间直接传递互斥锁</li>\n</ul>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/mutex.png","popularPost_tmp_gaData":{"updated":"Tue Sep 22 2020 13:20:32 GMT+0800 (中国标准时间)","title":"「10」go mutex解读","path":"archives/ff0d6c2b.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/mutex.png","excerpt":"<p>上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。<br>这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：</p>","date":{"_isAMomentObject":true,"_i":"2020-09-21T15:06:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-21T15:06:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Go Package","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6281},{"title":"「11」hexo 主题&评论&进度条&背景效果","date":"2020-09-22T17:10:02.000Z","updated":"2020-09-22T17:10:02.000Z","keywords":"hexo,hexo主题,hexo评论,next主题评论,hexo阅读进度条","abbrlink":"e18c94ab","_content":"\n晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。\n记录下折腾史：\n\n### gitalk评论插件\n\n#### 步骤：\n##### 申请id和secret\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png)\n\n<!-- more -->\n\n#### 配置文件：\n\n```\ngitalk:\n  enable: true\n  github_id: crab21 # GitHub repo owner\n  repo: blog # Repository name to store issues\n  client_id: XXX # GitHub Application Client ID\n  client_secret: XXX # GitHub Application Client Secret\n  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  perPage: 15 #每页多少个评论\n  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）\n  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。\n  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.\n\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n```\n\n### pac阅读进度百分比\n1、github地址： https://github.com/HubSpot/pace，可以看下介绍\n2、修改值：\n    修改主题下面的_config.yml：\n    ```go\n    pace:\n        enable: true\n        # Themes list:\n        # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple\n        # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal\n        theme: minimal\n    ```\n\n### reading_progress\n\ngithub地址：https://github.com/theme-next/theme-next-reading-progress\n\n包含使用说明和具体的步骤，就不搬运了，及时调整。\n\n### 文章字数和阅读时间统计：\n\nhexo配置文件中修改：\n    `symbols_count_time` 为true.\n\n### back2top\n开启模式\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: true\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n### 持续更新...\n\n### END\n","source":"_posts/11-hexo-主题-评论-进度条-背景效果.md","raw":"---\ntitle: 「11」hexo 主题&评论&进度条&背景效果\ndate: '2020/09/23 01:10:02'\nupdated: '2020/09/23 01:10:02'\nkeywords: 'hexo,hexo主题,hexo评论,next主题评论,hexo阅读进度条'\ntags:\n  - hexo\n  - hexo插件\nabbrlink: e18c94ab\n---\n\n晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。\n记录下折腾史：\n\n### gitalk评论插件\n\n#### 步骤：\n##### 申请id和secret\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png)\n\n<!-- more -->\n\n#### 配置文件：\n\n```\ngitalk:\n  enable: true\n  github_id: crab21 # GitHub repo owner\n  repo: blog # Repository name to store issues\n  client_id: XXX # GitHub Application Client ID\n  client_secret: XXX # GitHub Application Client Secret\n  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  perPage: 15 #每页多少个评论\n  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）\n  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。\n  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.\n\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n```\n\n### pac阅读进度百分比\n1、github地址： https://github.com/HubSpot/pace，可以看下介绍\n2、修改值：\n    修改主题下面的_config.yml：\n    ```go\n    pace:\n        enable: true\n        # Themes list:\n        # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple\n        # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal\n        theme: minimal\n    ```\n\n### reading_progress\n\ngithub地址：https://github.com/theme-next/theme-next-reading-progress\n\n包含使用说明和具体的步骤，就不搬运了，及时调整。\n\n### 文章字数和阅读时间统计：\n\nhexo配置文件中修改：\n    `symbols_count_time` 为true.\n\n### back2top\n开启模式\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: true\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n### 持续更新...\n\n### END\n","slug":"11-hexo-主题-评论-进度条-背景效果","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvko0008hyi7akgh8hwh","content":"<p>晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。<br>记录下折腾史：</p>\n<h3 id=\"gitalk评论插件\"><a href=\"#gitalk评论插件\" class=\"headerlink\" title=\"gitalk评论插件\"></a>gitalk评论插件</h3><h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><h5 id=\"申请id和secret\"><a href=\"#申请id和secret\" class=\"headerlink\" title=\"申请id和secret\"></a>申请id和secret</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png\"></p>\n<a id=\"more\"></a>\n\n<h4 id=\"配置文件：\"><a href=\"#配置文件：\" class=\"headerlink\" title=\"配置文件：\"></a>配置文件：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  github_id: crab21 # GitHub repo owner</span><br><span class=\"line\">  repo: blog # Repository name to store issues</span><br><span class=\"line\">  client_id: XXX # GitHub Application Client ID</span><br><span class=\"line\">  client_secret: XXX # GitHub Application Client Secret</span><br><span class=\"line\">  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class=\"line\">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class=\"line\">  perPage: 15 #每页多少个评论</span><br><span class=\"line\">  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）</span><br><span class=\"line\">  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span><br><span class=\"line\">  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class=\"line\">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class=\"line\">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class=\"line\">  language:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pac阅读进度百分比\"><a href=\"#pac阅读进度百分比\" class=\"headerlink\" title=\"pac阅读进度百分比\"></a>pac阅读进度百分比</h3><p>1、github地址： <a href=\"https://github.com/HubSpot/pace%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%8B%E4%BB%8B%E7%BB%8D\">https://github.com/HubSpot/pace，可以看下介绍</a><br>2、修改值：<br>    修改主题下面的_config.yml：<br>    <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pace:</span><br><span class=\"line\">    enable: <span class=\"literal\">true</span></span><br><span class=\"line\">    # Themes list:</span><br><span class=\"line\">    # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class=\"line\">    # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class=\"line\">    theme: minimal</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reading-progress\"><a href=\"#reading-progress\" class=\"headerlink\" title=\"reading_progress\"></a>reading_progress</h3><p>github地址：<a href=\"https://github.com/theme-next/theme-next-reading-progress\">https://github.com/theme-next/theme-next-reading-progress</a></p>\n<p>包含使用说明和具体的步骤，就不搬运了，及时调整。</p>\n<h3 id=\"文章字数和阅读时间统计：\"><a href=\"#文章字数和阅读时间统计：\" class=\"headerlink\" title=\"文章字数和阅读时间统计：\"></a>文章字数和阅读时间统计：</h3><p>hexo配置文件中修改：<br>    <code>symbols_count_time</code> 为true.</p>\n<h3 id=\"back2top\"><a href=\"#back2top\" class=\"headerlink\" title=\"back2top\"></a>back2top</h3><p>开启模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a href=\"#持续更新…\" class=\"headerlink\" title=\"持续更新…\"></a>持续更新…</h3><h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<p>晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。<br>记录下折腾史：</p>\n<h3 id=\"gitalk评论插件\"><a href=\"#gitalk评论插件\" class=\"headerlink\" title=\"gitalk评论插件\"></a>gitalk评论插件</h3><h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><h5 id=\"申请id和secret\"><a href=\"#申请id和secret\" class=\"headerlink\" title=\"申请id和secret\"></a>申请id和secret</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png\"></p>","more":"<h4 id=\"配置文件：\"><a href=\"#配置文件：\" class=\"headerlink\" title=\"配置文件：\"></a>配置文件：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  github_id: crab21 # GitHub repo owner</span><br><span class=\"line\">  repo: blog # Repository name to store issues</span><br><span class=\"line\">  client_id: XXX # GitHub Application Client ID</span><br><span class=\"line\">  client_secret: XXX # GitHub Application Client Secret</span><br><span class=\"line\">  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class=\"line\">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class=\"line\">  perPage: 15 #每页多少个评论</span><br><span class=\"line\">  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）</span><br><span class=\"line\">  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span><br><span class=\"line\">  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Gitalk&#39;s display language depends on user&#39;s browser or system environment</span><br><span class=\"line\">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class=\"line\">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class=\"line\">  language:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pac阅读进度百分比\"><a href=\"#pac阅读进度百分比\" class=\"headerlink\" title=\"pac阅读进度百分比\"></a>pac阅读进度百分比</h3><p>1、github地址： <a href=\"https://github.com/HubSpot/pace%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E4%B8%8B%E4%BB%8B%E7%BB%8D\">https://github.com/HubSpot/pace，可以看下介绍</a><br>2、修改值：<br>    修改主题下面的_config.yml：<br>    <figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pace:</span><br><span class=\"line\">    enable: <span class=\"literal\">true</span></span><br><span class=\"line\">    # Themes list:</span><br><span class=\"line\">    # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class=\"line\">    # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class=\"line\">    theme: minimal</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reading-progress\"><a href=\"#reading-progress\" class=\"headerlink\" title=\"reading_progress\"></a>reading_progress</h3><p>github地址：<a href=\"https://github.com/theme-next/theme-next-reading-progress\">https://github.com/theme-next/theme-next-reading-progress</a></p>\n<p>包含使用说明和具体的步骤，就不搬运了，及时调整。</p>\n<h3 id=\"文章字数和阅读时间统计：\"><a href=\"#文章字数和阅读时间统计：\" class=\"headerlink\" title=\"文章字数和阅读时间统计：\"></a>文章字数和阅读时间统计：</h3><p>hexo配置文件中修改：<br>    <code>symbols_count_time</code> 为true.</p>\n<h3 id=\"back2top\"><a href=\"#back2top\" class=\"headerlink\" title=\"back2top\"></a>back2top</h3><p>开启模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a href=\"#持续更新…\" class=\"headerlink\" title=\"持续更新…\"></a>持续更新…</h3><h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png","popularPost_tmp_gaData":{"updated":"Wed Sep 23 2020 01:10:02 GMT+0800 (中国标准时间)","title":"「11」hexo 主题&评论&进度条&背景效果","path":"archives/e18c94ab.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png","excerpt":"<p>晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。<br>记录下折腾史：</p>\n<h3 id=\"gitalk评论插件\"><a href=\"#gitalk评论插件\" class=\"headerlink\" title=\"gitalk评论插件\"></a>gitalk评论插件</h3><h4 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h4><h5 id=\"申请id和secret\"><a href=\"#申请id和secret\" class=\"headerlink\" title=\"申请id和secret\"></a>申请id和secret</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/36f31671-8ada-4cbe-b60b-d1595dd701ee.png\"></p>","date":{"_isAMomentObject":true,"_i":"2020-09-22T17:10:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-22T17:10:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["hexo","hexo插件"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1452},{"title":"「12」go 指针和引用","date":"2020-09-23T13:13:51.000Z","updated":"2020-09-23T14:21:52.000Z","keywords":"golang,go,chan,map,指针,引用,interface,slice","abbrlink":"1191d613","_content":"\n\n今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？\n\n如何解决这个问题？\n\n* 官方查文档\n* 看源码\n* google看看有没有好的见解\n* 思考🤔+冥想🧘‍♂️\n\n（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）\n<!--more-->\n\n### 查资料\n[官网指南之Slice](https://golang.google.cn/doc/effective_go.html#slices)\n有一段是这么描述：\n*Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.*\n\n### 查源码\n\n#### /src/runtime/slice.go\n```go\ntype slice struct {\n\tarray unsafe.Pointer  //指针类型哦\n\tlen   int\n\tcap   int\n}\n```\n\n### 思考\n\n>原来下层是用过array这个指针，指向具体的数据的\n\n>那么其他的引用类型呢？\n\n```\nMap?\nchan?\ninterface?\n//Slice?\n```\n\n### 引用类型之Map\n\n#### 看源码 /src/runtime/map.go：\n```go\n\n// A header for a Go map.\ntype hmap struct {\n\t// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.\n\t// Make sure this stays in sync with the compiler's definition.\n\tcount     int // # live cells == size of map.  Must be first (used by len() builtin)\n\tflags     uint8\n\tB         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)\n\tnoverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details\n\thash0     uint32 // hash seed\n\n    //通过此指针类型\n\tbuckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.\n\toldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing\n\tnevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)\n\n\textra *mapextra // optional fields\n}\n```\n\n### 引用类型之Chan\n#### 源码:/src/runtime/chan.go\n\n```go\ntype hchan struct {\n\tqcount   uint           // total data in the queue\n    dataqsiz uint           // size of the circular queue\n    //通过此指针类型来处理\n\tbuf      unsafe.Pointer // points to an array of dataqsiz elements\n\telemsize uint16\n\tclosed   uint32\n\telemtype *_type // element type\n\tsendx    uint   // send index\n\trecvx    uint   // receive index\n\trecvq    waitq  // list of recv waiters\n\tsendq    waitq  // list of send waiters\n\n\t// lock protects all fields in hchan, as well as several\n\t// fields in sudogs blocked on this channel.\n\t//\n\t// Do not change another G's status while holding this lock\n\t// (in particular, do not ready a G), as this can deadlock\n\t// with stack shrinking.\n\tlock mutex\n}\n```\n\n### 引用类型之Interface\n\n#### 源码/src/runtime/runtime2.go\n```go\ntype iface struct {\n    tab  *itab\n    //指针类型\n\tdata unsafe.Pointer\n}\n\ntype eface struct {\n    _type *_type\n    //指针类型\n\tdata  unsafe.Pointer\n}\n```\n\n### 结论？通过指针？\n\n从上述源码看来，内部结构中都是用指针类型来指向具体的值，\n>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。\n\n其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.\n\n[睡觉了～最近有点乏～ZZzzz...]\n### END","source":"_posts/12-go-指针和引用.md","raw":"---\ntitle: 「12」go 指针和引用\ndate: '2020/09/23 21:13:51'\nupdated: '2020/09/23 22:21:52'\nkeywords: 'golang,go,chan,map,指针,引用,interface,slice'\ntags:\n  - Go\n  - Go Package\n  - Day\nabbrlink: 1191d613\n---\n\n\n今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？\n\n如何解决这个问题？\n\n* 官方查文档\n* 看源码\n* google看看有没有好的见解\n* 思考🤔+冥想🧘‍♂️\n\n（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）\n<!--more-->\n\n### 查资料\n[官网指南之Slice](https://golang.google.cn/doc/effective_go.html#slices)\n有一段是这么描述：\n*Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.*\n\n### 查源码\n\n#### /src/runtime/slice.go\n```go\ntype slice struct {\n\tarray unsafe.Pointer  //指针类型哦\n\tlen   int\n\tcap   int\n}\n```\n\n### 思考\n\n>原来下层是用过array这个指针，指向具体的数据的\n\n>那么其他的引用类型呢？\n\n```\nMap?\nchan?\ninterface?\n//Slice?\n```\n\n### 引用类型之Map\n\n#### 看源码 /src/runtime/map.go：\n```go\n\n// A header for a Go map.\ntype hmap struct {\n\t// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.\n\t// Make sure this stays in sync with the compiler's definition.\n\tcount     int // # live cells == size of map.  Must be first (used by len() builtin)\n\tflags     uint8\n\tB         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)\n\tnoverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details\n\thash0     uint32 // hash seed\n\n    //通过此指针类型\n\tbuckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.\n\toldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing\n\tnevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)\n\n\textra *mapextra // optional fields\n}\n```\n\n### 引用类型之Chan\n#### 源码:/src/runtime/chan.go\n\n```go\ntype hchan struct {\n\tqcount   uint           // total data in the queue\n    dataqsiz uint           // size of the circular queue\n    //通过此指针类型来处理\n\tbuf      unsafe.Pointer // points to an array of dataqsiz elements\n\telemsize uint16\n\tclosed   uint32\n\telemtype *_type // element type\n\tsendx    uint   // send index\n\trecvx    uint   // receive index\n\trecvq    waitq  // list of recv waiters\n\tsendq    waitq  // list of send waiters\n\n\t// lock protects all fields in hchan, as well as several\n\t// fields in sudogs blocked on this channel.\n\t//\n\t// Do not change another G's status while holding this lock\n\t// (in particular, do not ready a G), as this can deadlock\n\t// with stack shrinking.\n\tlock mutex\n}\n```\n\n### 引用类型之Interface\n\n#### 源码/src/runtime/runtime2.go\n```go\ntype iface struct {\n    tab  *itab\n    //指针类型\n\tdata unsafe.Pointer\n}\n\ntype eface struct {\n    _type *_type\n    //指针类型\n\tdata  unsafe.Pointer\n}\n```\n\n### 结论？通过指针？\n\n从上述源码看来，内部结构中都是用指针类型来指向具体的值，\n>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。\n\n其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.\n\n[睡觉了～最近有点乏～ZZzzz...]\n### END","slug":"12-go-指针和引用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkp000ahyi7en3074zp","content":"<p>今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？</p>\n<p>如何解决这个问题？</p>\n<ul>\n<li>官方查文档</li>\n<li>看源码</li>\n<li>google看看有没有好的见解</li>\n<li>思考🤔+冥想🧘‍♂️</li>\n</ul>\n<p>（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）</p>\n<a id=\"more\"></a>\n\n<h3 id=\"查资料\"><a href=\"#查资料\" class=\"headerlink\" title=\"查资料\"></a>查资料</h3><p><a href=\"https://golang.google.cn/doc/effective_go.html#slices\">官网指南之Slice</a><br>有一段是这么描述：<br><em>Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.</em></p>\n<h3 id=\"查源码\"><a href=\"#查源码\" class=\"headerlink\" title=\"查源码\"></a>查源码</h3><h4 id=\"src-runtime-slice-go\"><a href=\"#src-runtime-slice-go\" class=\"headerlink\" title=\"/src/runtime/slice.go\"></a>/src/runtime/slice.go</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tarray unsafe.Pointer  <span class=\"comment\">//指针类型哦</span></span><br><span class=\"line\">\t<span class=\"built_in\">len</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"built_in\">cap</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><blockquote>\n<p>原来下层是用过array这个指针，指向具体的数据的</p>\n</blockquote>\n<blockquote>\n<p>那么其他的引用类型呢？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map?</span><br><span class=\"line\">chan?</span><br><span class=\"line\">interface?</span><br><span class=\"line\">&#x2F;&#x2F;Slice?</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型之Map\"><a href=\"#引用类型之Map\" class=\"headerlink\" title=\"引用类型之Map\"></a>引用类型之Map</h3><h4 id=\"看源码-src-runtime-map-go：\"><a href=\"#看源码-src-runtime-map-go：\" class=\"headerlink\" title=\"看源码 /src/runtime/map.go：\"></a>看源码 /src/runtime/map.go：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A header for a Go map.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> hmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Make sure this stays in sync with the compiler&#x27;s definition.</span></span><br><span class=\"line\">\tcount     <span class=\"keyword\">int</span> <span class=\"comment\">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class=\"line\">\tflags     <span class=\"keyword\">uint8</span></span><br><span class=\"line\">\tB         <span class=\"keyword\">uint8</span>  <span class=\"comment\">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class=\"line\">\tnoverflow <span class=\"keyword\">uint16</span> <span class=\"comment\">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class=\"line\">\thash0     <span class=\"keyword\">uint32</span> <span class=\"comment\">// hash seed</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型</span></span><br><span class=\"line\">\tbuckets    unsafe.Pointer <span class=\"comment\">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class=\"line\">\toldbuckets unsafe.Pointer <span class=\"comment\">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class=\"line\">\tnevacuate  <span class=\"keyword\">uintptr</span>        <span class=\"comment\">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\textra *mapextra <span class=\"comment\">// optional fields</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型之Chan\"><a href=\"#引用类型之Chan\" class=\"headerlink\" title=\"引用类型之Chan\"></a>引用类型之Chan</h3><h4 id=\"源码-src-runtime-chan-go\"><a href=\"#源码-src-runtime-chan-go\" class=\"headerlink\" title=\"源码:/src/runtime/chan.go\"></a>源码:/src/runtime/chan.go</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> hchan <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tqcount   <span class=\"keyword\">uint</span>           <span class=\"comment\">// total data in the queue</span></span><br><span class=\"line\">    dataqsiz <span class=\"keyword\">uint</span>           <span class=\"comment\">// size of the circular queue</span></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型来处理</span></span><br><span class=\"line\">\tbuf      unsafe.Pointer <span class=\"comment\">// points to an array of dataqsiz elements</span></span><br><span class=\"line\">\telemsize <span class=\"keyword\">uint16</span></span><br><span class=\"line\">\tclosed   <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\telemtype *_type <span class=\"comment\">// element type</span></span><br><span class=\"line\">\tsendx    <span class=\"keyword\">uint</span>   <span class=\"comment\">// send index</span></span><br><span class=\"line\">\trecvx    <span class=\"keyword\">uint</span>   <span class=\"comment\">// receive index</span></span><br><span class=\"line\">\trecvq    waitq  <span class=\"comment\">// list of recv waiters</span></span><br><span class=\"line\">\tsendq    waitq  <span class=\"comment\">// list of send waiters</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lock protects all fields in hchan, as well as several</span></span><br><span class=\"line\">\t<span class=\"comment\">// fields in sudogs blocked on this channel.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class=\"line\">\t<span class=\"comment\">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class=\"line\">\t<span class=\"comment\">// with stack shrinking.</span></span><br><span class=\"line\">\tlock mutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型之Interface\"><a href=\"#引用类型之Interface\" class=\"headerlink\" title=\"引用类型之Interface\"></a>引用类型之Interface</h3><h4 id=\"源码-src-runtime-runtime2-go\"><a href=\"#源码-src-runtime-runtime2-go\" class=\"headerlink\" title=\"源码/src/runtime/runtime2.go\"></a>源码/src/runtime/runtime2.go</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> iface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    tab  *itab</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> eface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    _type *_type</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata  unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结论？通过指针？\"><a href=\"#结论？通过指针？\" class=\"headerlink\" title=\"结论？通过指针？\"></a>结论？通过指针？</h3><p>从上述源码看来，内部结构中都是用指针类型来指向具体的值，</p>\n<blockquote>\n<p>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。</p>\n</blockquote>\n<p>其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.</p>\n<p>[睡觉了～最近有点乏～ZZzzz…]</p>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<p>今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？</p>\n<p>如何解决这个问题？</p>\n<ul>\n<li>官方查文档</li>\n<li>看源码</li>\n<li>google看看有没有好的见解</li>\n<li>思考🤔+冥想🧘‍♂️</li>\n</ul>\n<p>（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）</p>","more":"<h3 id=\"查资料\"><a href=\"#查资料\" class=\"headerlink\" title=\"查资料\"></a>查资料</h3><p><a href=\"https://golang.google.cn/doc/effective_go.html#slices\">官网指南之Slice</a><br>有一段是这么描述：<br><em>Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.</em></p>\n<h3 id=\"查源码\"><a href=\"#查源码\" class=\"headerlink\" title=\"查源码\"></a>查源码</h3><h4 id=\"src-runtime-slice-go\"><a href=\"#src-runtime-slice-go\" class=\"headerlink\" title=\"/src/runtime/slice.go\"></a>/src/runtime/slice.go</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tarray unsafe.Pointer  <span class=\"comment\">//指针类型哦</span></span><br><span class=\"line\">\t<span class=\"built_in\">len</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">\t<span class=\"built_in\">cap</span>   <span class=\"keyword\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><blockquote>\n<p>原来下层是用过array这个指针，指向具体的数据的</p>\n</blockquote>\n<blockquote>\n<p>那么其他的引用类型呢？</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map?</span><br><span class=\"line\">chan?</span><br><span class=\"line\">interface?</span><br><span class=\"line\">&#x2F;&#x2F;Slice?</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型之Map\"><a href=\"#引用类型之Map\" class=\"headerlink\" title=\"引用类型之Map\"></a>引用类型之Map</h3><h4 id=\"看源码-src-runtime-map-go：\"><a href=\"#看源码-src-runtime-map-go：\" class=\"headerlink\" title=\"看源码 /src/runtime/map.go：\"></a>看源码 /src/runtime/map.go：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A header for a Go map.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> hmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Make sure this stays in sync with the compiler&#x27;s definition.</span></span><br><span class=\"line\">\tcount     <span class=\"keyword\">int</span> <span class=\"comment\">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class=\"line\">\tflags     <span class=\"keyword\">uint8</span></span><br><span class=\"line\">\tB         <span class=\"keyword\">uint8</span>  <span class=\"comment\">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class=\"line\">\tnoverflow <span class=\"keyword\">uint16</span> <span class=\"comment\">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class=\"line\">\thash0     <span class=\"keyword\">uint32</span> <span class=\"comment\">// hash seed</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型</span></span><br><span class=\"line\">\tbuckets    unsafe.Pointer <span class=\"comment\">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class=\"line\">\toldbuckets unsafe.Pointer <span class=\"comment\">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class=\"line\">\tnevacuate  <span class=\"keyword\">uintptr</span>        <span class=\"comment\">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\textra *mapextra <span class=\"comment\">// optional fields</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型之Chan\"><a href=\"#引用类型之Chan\" class=\"headerlink\" title=\"引用类型之Chan\"></a>引用类型之Chan</h3><h4 id=\"源码-src-runtime-chan-go\"><a href=\"#源码-src-runtime-chan-go\" class=\"headerlink\" title=\"源码:/src/runtime/chan.go\"></a>源码:/src/runtime/chan.go</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> hchan <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tqcount   <span class=\"keyword\">uint</span>           <span class=\"comment\">// total data in the queue</span></span><br><span class=\"line\">    dataqsiz <span class=\"keyword\">uint</span>           <span class=\"comment\">// size of the circular queue</span></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型来处理</span></span><br><span class=\"line\">\tbuf      unsafe.Pointer <span class=\"comment\">// points to an array of dataqsiz elements</span></span><br><span class=\"line\">\telemsize <span class=\"keyword\">uint16</span></span><br><span class=\"line\">\tclosed   <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\telemtype *_type <span class=\"comment\">// element type</span></span><br><span class=\"line\">\tsendx    <span class=\"keyword\">uint</span>   <span class=\"comment\">// send index</span></span><br><span class=\"line\">\trecvx    <span class=\"keyword\">uint</span>   <span class=\"comment\">// receive index</span></span><br><span class=\"line\">\trecvq    waitq  <span class=\"comment\">// list of recv waiters</span></span><br><span class=\"line\">\tsendq    waitq  <span class=\"comment\">// list of send waiters</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lock protects all fields in hchan, as well as several</span></span><br><span class=\"line\">\t<span class=\"comment\">// fields in sudogs blocked on this channel.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class=\"line\">\t<span class=\"comment\">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class=\"line\">\t<span class=\"comment\">// with stack shrinking.</span></span><br><span class=\"line\">\tlock mutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用类型之Interface\"><a href=\"#引用类型之Interface\" class=\"headerlink\" title=\"引用类型之Interface\"></a>引用类型之Interface</h3><h4 id=\"源码-src-runtime-runtime2-go\"><a href=\"#源码-src-runtime-runtime2-go\" class=\"headerlink\" title=\"源码/src/runtime/runtime2.go\"></a>源码/src/runtime/runtime2.go</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> iface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    tab  *itab</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> eface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    _type *_type</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata  unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结论？通过指针？\"><a href=\"#结论？通过指针？\" class=\"headerlink\" title=\"结论？通过指针？\"></a>结论？通过指针？</h3><p>从上述源码看来，内部结构中都是用指针类型来指向具体的值，</p>\n<blockquote>\n<p>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。</p>\n</blockquote>\n<p>其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.</p>\n<p>[睡觉了～最近有点乏～ZZzzz…]</p>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Sep 23 2020 22:21:52 GMT+0800 (中国标准时间)","title":"「12」go 指针和引用","path":"archives/1191d613.html","eyeCatchImage":null,"excerpt":"<p>今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？</p>\n<p>如何解决这个问题？</p>\n<ul>\n<li>官方查文档</li>\n<li>看源码</li>\n<li>google看看有没有好的见解</li>\n<li>思考🤔+冥想🧘‍♂️</li>\n</ul>\n<p>（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）</p>","date":{"_isAMomentObject":true,"_i":"2020-09-23T13:13:51.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-23T13:13:51.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go Package","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2057},{"title":"「13」Linux 进程","date":"2020-09-24T11:09:49.000Z","updated":"2020-09-24T12:00:00.000Z","keywords":"Linux,Linux 进程","top":true,"sticky":4,"abbrlink":"ba455c1d","_content":"\n进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。\n\n今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。\n主要从以下几个角度了解下进程：\n* 来源\n* 定义\n* 特征\n* 多进程如何工作？\n* 通信\n\n<!--more-->\n\n### 来源\n\n抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。\n\n### 定义\n\n进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。\n\nps:[线程：程序执行的最小单位。]\n\n组成：程序、数据、控制块组成。\n\n### 特征\n\n* 动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。\n* 并发性 ： 任何进程可以和其它进程并发执行。\n* 独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。\n* 异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。\n\n### 多进程工作：\n\n#### 进程的状态：\n>3种状态：\n* 就绪\n* 运行\n* 阻塞\n\n##### 3态图：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_3.1.png)\n\n##### 5态图：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/linux_p3.png)\n\n##### 7态图：\n\n新增两种状态：\n* 挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。\n* 挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。\n\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_7.png)\n\n### 进程间通信\n\n#### 共享内存\n\n映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。\n\n#### 管道\n\n实质就是一个缓冲区。\n管道限制：\n\n* 半双工\n* 只能在亲缘进程间通信\n\n**特点:**\n```\n写满时，不能再写，读空时，不能再读\n没写满，不能读，没读空，不能写\n```\n\n#### 消息队列\n\n是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。\n\n#### 信号\n\n通知和接受进程某个事件已经发生了的。\n\n#### 信号量\n\n实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。\n\n#### 套接字（Socket）\n\n进程间通信的一种机制，多用于不同机器进程间的通信。\n\n#### 优缺点：\n\n```go\n1、管道：速度慢，容量有限，只有父子进程能通讯.\n2、FIFO：任何进程间都能通讯，但速度慢.\n3、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.\n4、信号量：不能传递复杂消息，只能用来同步.\n5、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.\n```\n\n### END","source":"_posts/13-Linux-进程.md","raw":"---\ntitle: 「13」Linux 进程\ndate: '2020/09/24 19:09:49'\nupdated: '2020/09/24 20:00:00'\nkeywords: 'Linux,Linux 进程'\ntop: true\nsticky: 4\ntags:\n  - Linux\n  - 进程\nabbrlink: ba455c1d\n---\n\n进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。\n\n今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。\n主要从以下几个角度了解下进程：\n* 来源\n* 定义\n* 特征\n* 多进程如何工作？\n* 通信\n\n<!--more-->\n\n### 来源\n\n抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。\n\n### 定义\n\n进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。\n\nps:[线程：程序执行的最小单位。]\n\n组成：程序、数据、控制块组成。\n\n### 特征\n\n* 动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。\n* 并发性 ： 任何进程可以和其它进程并发执行。\n* 独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。\n* 异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。\n\n### 多进程工作：\n\n#### 进程的状态：\n>3种状态：\n* 就绪\n* 运行\n* 阻塞\n\n##### 3态图：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_3.1.png)\n\n##### 5态图：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/linux_p3.png)\n\n##### 7态图：\n\n新增两种状态：\n* 挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。\n* 挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。\n\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_7.png)\n\n### 进程间通信\n\n#### 共享内存\n\n映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。\n\n#### 管道\n\n实质就是一个缓冲区。\n管道限制：\n\n* 半双工\n* 只能在亲缘进程间通信\n\n**特点:**\n```\n写满时，不能再写，读空时，不能再读\n没写满，不能读，没读空，不能写\n```\n\n#### 消息队列\n\n是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。\n\n#### 信号\n\n通知和接受进程某个事件已经发生了的。\n\n#### 信号量\n\n实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。\n\n#### 套接字（Socket）\n\n进程间通信的一种机制，多用于不同机器进程间的通信。\n\n#### 优缺点：\n\n```go\n1、管道：速度慢，容量有限，只有父子进程能通讯.\n2、FIFO：任何进程间都能通讯，但速度慢.\n3、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.\n4、信号量：不能传递复杂消息，只能用来同步.\n5、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.\n```\n\n### END","slug":"13-Linux-进程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkq000ehyi70jz14lc2","content":"<p>进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。</p>\n<p>今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。<br>主要从以下几个角度了解下进程：</p>\n<ul>\n<li>来源</li>\n<li>定义</li>\n<li>特征</li>\n<li>多进程如何工作？</li>\n<li>通信</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p>抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。</p>\n<p>ps:[线程：程序执行的最小单位。]</p>\n<p>组成：程序、数据、控制块组成。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><ul>\n<li>动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。</li>\n<li>并发性 ： 任何进程可以和其它进程并发执行。</li>\n<li>独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。</li>\n<li>异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。</li>\n</ul>\n<h3 id=\"多进程工作：\"><a href=\"#多进程工作：\" class=\"headerlink\" title=\"多进程工作：\"></a>多进程工作：</h3><h4 id=\"进程的状态：\"><a href=\"#进程的状态：\" class=\"headerlink\" title=\"进程的状态：\"></a>进程的状态：</h4><blockquote>\n<p>3种状态：</p>\n</blockquote>\n<ul>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n</ul>\n<h5 id=\"3态图：\"><a href=\"#3态图：\" class=\"headerlink\" title=\"3态图：\"></a>3态图：</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_3.1.png\"></p>\n<h5 id=\"5态图：\"><a href=\"#5态图：\" class=\"headerlink\" title=\"5态图：\"></a>5态图：</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_p3.png\"></p>\n<h5 id=\"7态图：\"><a href=\"#7态图：\" class=\"headerlink\" title=\"7态图：\"></a>7态图：</h5><p>新增两种状态：</p>\n<ul>\n<li>挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。</li>\n<li>挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_7.png\"></p>\n<h3 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h3><h4 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h4><p>映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。</p>\n<h4 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h4><p>实质就是一个缓冲区。<br>管道限制：</p>\n<ul>\n<li>半双工</li>\n<li>只能在亲缘进程间通信</li>\n</ul>\n<p><strong>特点:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写满时，不能再写，读空时，不能再读</span><br><span class=\"line\">没写满，不能读，没读空，不能写</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h4><p>是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。</p>\n<h4 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>通知和接受进程某个事件已经发生了的。</p>\n<h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><p>实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。</p>\n<h4 id=\"套接字（Socket）\"><a href=\"#套接字（Socket）\" class=\"headerlink\" title=\"套接字（Socket）\"></a>套接字（Socket）</h4><p>进程间通信的一种机制，多用于不同机器进程间的通信。</p>\n<h4 id=\"优缺点：\"><a href=\"#优缺点：\" class=\"headerlink\" title=\"优缺点：\"></a>优缺点：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、管道：速度慢，容量有限，只有父子进程能通讯.</span><br><span class=\"line\"><span class=\"number\">2</span>、FIFO：任何进程间都能通讯，但速度慢.</span><br><span class=\"line\"><span class=\"number\">3</span>、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.</span><br><span class=\"line\"><span class=\"number\">4</span>、信号量：不能传递复杂消息，只能用来同步.</span><br><span class=\"line\"><span class=\"number\">5</span>、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<p>进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。</p>\n<p>今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。<br>主要从以下几个角度了解下进程：</p>\n<ul>\n<li>来源</li>\n<li>定义</li>\n<li>特征</li>\n<li>多进程如何工作？</li>\n<li>通信</li>\n</ul>","more":"<h3 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h3><p>抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。</p>\n<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。</p>\n<p>ps:[线程：程序执行的最小单位。]</p>\n<p>组成：程序、数据、控制块组成。</p>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><ul>\n<li>动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。</li>\n<li>并发性 ： 任何进程可以和其它进程并发执行。</li>\n<li>独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。</li>\n<li>异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。</li>\n</ul>\n<h3 id=\"多进程工作：\"><a href=\"#多进程工作：\" class=\"headerlink\" title=\"多进程工作：\"></a>多进程工作：</h3><h4 id=\"进程的状态：\"><a href=\"#进程的状态：\" class=\"headerlink\" title=\"进程的状态：\"></a>进程的状态：</h4><blockquote>\n<p>3种状态：</p>\n</blockquote>\n<ul>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n</ul>\n<h5 id=\"3态图：\"><a href=\"#3态图：\" class=\"headerlink\" title=\"3态图：\"></a>3态图：</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_3.1.png\"></p>\n<h5 id=\"5态图：\"><a href=\"#5态图：\" class=\"headerlink\" title=\"5态图：\"></a>5态图：</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_p3.png\"></p>\n<h5 id=\"7态图：\"><a href=\"#7态图：\" class=\"headerlink\" title=\"7态图：\"></a>7态图：</h5><p>新增两种状态：</p>\n<ul>\n<li>挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。</li>\n<li>挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_7.png\"></p>\n<h3 id=\"进程间通信\"><a href=\"#进程间通信\" class=\"headerlink\" title=\"进程间通信\"></a>进程间通信</h3><h4 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h4><p>映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。</p>\n<h4 id=\"管道\"><a href=\"#管道\" class=\"headerlink\" title=\"管道\"></a>管道</h4><p>实质就是一个缓冲区。<br>管道限制：</p>\n<ul>\n<li>半双工</li>\n<li>只能在亲缘进程间通信</li>\n</ul>\n<p><strong>特点:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写满时，不能再写，读空时，不能再读</span><br><span class=\"line\">没写满，不能读，没读空，不能写</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h4><p>是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。</p>\n<h4 id=\"信号\"><a href=\"#信号\" class=\"headerlink\" title=\"信号\"></a>信号</h4><p>通知和接受进程某个事件已经发生了的。</p>\n<h4 id=\"信号量\"><a href=\"#信号量\" class=\"headerlink\" title=\"信号量\"></a>信号量</h4><p>实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。</p>\n<h4 id=\"套接字（Socket）\"><a href=\"#套接字（Socket）\" class=\"headerlink\" title=\"套接字（Socket）\"></a>套接字（Socket）</h4><p>进程间通信的一种机制，多用于不同机器进程间的通信。</p>\n<h4 id=\"优缺点：\"><a href=\"#优缺点：\" class=\"headerlink\" title=\"优缺点：\"></a>优缺点：</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、管道：速度慢，容量有限，只有父子进程能通讯.</span><br><span class=\"line\"><span class=\"number\">2</span>、FIFO：任何进程间都能通讯，但速度慢.</span><br><span class=\"line\"><span class=\"number\">3</span>、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.</span><br><span class=\"line\"><span class=\"number\">4</span>、信号量：不能传递复杂消息，只能用来同步.</span><br><span class=\"line\"><span class=\"number\">5</span>、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_3.1.png","popularPost_tmp_gaData":{"updated":"Thu Sep 24 2020 20:00:00 GMT+0800 (中国标准时间)","title":"「13」Linux 进程","path":"archives/ba455c1d.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/linux_process_3.1.png","excerpt":"<p>进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。</p>\n<p>今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。<br>主要从以下几个角度了解下进程：</p>\n<ul>\n<li>来源</li>\n<li>定义</li>\n<li>特征</li>\n<li>多进程如何工作？</li>\n<li>通信</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2020-09-24T11:09:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-24T11:09:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Linux","进程"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1033},{"title":"「17」chrome headless「截图/PDF/DOM...」","keywords":"chrome,chrome headless","abbrlink":"5544baea","date":"2020-11-10T11:25:32.000Z","updated":"2020-11-10T11:25:32.000Z","_content":"\n>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。\n然而事情并没有这么简单；\n\n### 难点：\n```go\n    1、服务器中不能装chrome\n    2、chrome必须打在docker里面\n    3、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。\n    4、不能启动新的服务\n```\n\n<!--more-->\n### 切入点：\n```go \ndocker && chrome\n```\n\n>so先去搜一把有没有现成的可用？\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-193745.png)\n\n分析分析吧：\n\n* [browserless](https://github.com/browserless/chrome)\n* [puppeteer](https://github.com/puppeteer/puppeteer)\n* [prisma-archive](https://github.com/prisma-archive/chromeless)\n..........\n    * 适合启动服务，然后进行测试或者跑服务\n    * 入参数为url\n\n>所以上述的基本不符合需求，再寻找.....\n\n### [Zenika/alpine-chrome](https://github.com/Zenika/alpine-chrome)\n\n>看起来可行：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194452.png)\n\n\n这个经过验证总会有一个错误：\n```\n[1110/031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory\n[1110/031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031549.073431:ERROR:headless_shell.cc(591)] Writing to file code/ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED\n```\n\n文件没权限哦，尴尬了,再修正：\n>发现源码有一段添加了用户，汗，太搞了.\n\n[点击查看](https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38)\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194711.png)\n\n\n```\n很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,\n这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。\n\n最直接的，去掉就好了。\n\n果然去掉后，跑docker就可以了\n```\n\n[docker镜像地址](https://hub.docker.com/r/zenika/alpine-chrome)\n\n这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。\n\n\n### 再尝试「自己搞个docker images」\n\n>别人都能搞，为何我不可以勒\n\n### 分析：\n* 本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的\n* 那可以搞个linux系统，再装个chrome\n* 最后把字体装完就ok了\n* 最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。\n\n\n### 思路：\n* 1、搞个docker debain系统\n* 2、想办法把chrome装上\n* 3、在里面跑一个测试，看能否生成图片\n* 4、安装缺失的字体\n* 5、container跑起来\n* 6、导出container，再导入到本地的images；让container变成images\n* 7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来\n* 8、再把搞好的images导出来用就可以了。\n\n### 步骤：\n#### 1\n```\ndocker pull debian\n```\n\n#### 2/3/4/5\n```\n1、进入系统\ndocker exec -it XXXXX /bin/bash\n2、更新源\napt-get update\n3、下载wget\napt-get install wget\n4、下载chrome linux版本的\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n5、安装chrome\n dpkg -i ******.deb\n 解决依赖关系：\n    apt-get -f install\n6、跑一把发现汉字变问好「？」了\n7、安装缺失的字体\napt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy\n```\n\n#### 6导出container\n```\n1、导出container\ndocker export container_name > chrome.tar\n2、导入到images中\ndocker load < chrome.tar\n```\n\n#### 7自己搞Dockerfile,预留「RUN」接口\n\nDockerfile文件：\n```\n#这个是上一步导入的images\nFROM gogoowang/chrome:v1\nRUN mkdir -p /home\nWORKDIR /home\nENTRYPOINT [\"chrome\",\"--headless\",\"--disable-gpu\"]\n```\n\n>构建成镜像：docker build -t gogoo/chrome:v2 . \n\nPS:「/home」的含义就是这个images的工作目录是/home文件夹下面\n\n#### 8跑一把，收工\n\n### 注意点：\n#### PS-1\n```\n1、错误❌\ndocker container run -it --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot --hide-scrollbars /XXXX/XXXX.html\n2、正确\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了\n```\n\n#### PS-2\n\n```\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n1、关于这个-v的问题,后面就固定了，具体见Dockerfile中\n2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是/home下面了\n```\n","source":"_posts/17-chrome headless.md","raw":"---\ntitle: 「17」chrome headless「截图/PDF/DOM...」\nkeywords: 'chrome,chrome headless'\ntags:\n  - chrome\n  - Day\nabbrlink: 5544baea\ndate: 2020-11-10 19:25:32\nupdated: 2020-11-10 19:25:32\n---\n\n>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。\n然而事情并没有这么简单；\n\n### 难点：\n```go\n    1、服务器中不能装chrome\n    2、chrome必须打在docker里面\n    3、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。\n    4、不能启动新的服务\n```\n\n<!--more-->\n### 切入点：\n```go \ndocker && chrome\n```\n\n>so先去搜一把有没有现成的可用？\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-193745.png)\n\n分析分析吧：\n\n* [browserless](https://github.com/browserless/chrome)\n* [puppeteer](https://github.com/puppeteer/puppeteer)\n* [prisma-archive](https://github.com/prisma-archive/chromeless)\n..........\n    * 适合启动服务，然后进行测试或者跑服务\n    * 入参数为url\n\n>所以上述的基本不符合需求，再寻找.....\n\n### [Zenika/alpine-chrome](https://github.com/Zenika/alpine-chrome)\n\n>看起来可行：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194452.png)\n\n\n这个经过验证总会有一个错误：\n```\n[1110/031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory\n[1110/031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031549.073431:ERROR:headless_shell.cc(591)] Writing to file code/ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED\n```\n\n文件没权限哦，尴尬了,再修正：\n>发现源码有一段添加了用户，汗，太搞了.\n\n[点击查看](https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38)\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194711.png)\n\n\n```\n很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,\n这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。\n\n最直接的，去掉就好了。\n\n果然去掉后，跑docker就可以了\n```\n\n[docker镜像地址](https://hub.docker.com/r/zenika/alpine-chrome)\n\n这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。\n\n\n### 再尝试「自己搞个docker images」\n\n>别人都能搞，为何我不可以勒\n\n### 分析：\n* 本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的\n* 那可以搞个linux系统，再装个chrome\n* 最后把字体装完就ok了\n* 最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。\n\n\n### 思路：\n* 1、搞个docker debain系统\n* 2、想办法把chrome装上\n* 3、在里面跑一个测试，看能否生成图片\n* 4、安装缺失的字体\n* 5、container跑起来\n* 6、导出container，再导入到本地的images；让container变成images\n* 7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来\n* 8、再把搞好的images导出来用就可以了。\n\n### 步骤：\n#### 1\n```\ndocker pull debian\n```\n\n#### 2/3/4/5\n```\n1、进入系统\ndocker exec -it XXXXX /bin/bash\n2、更新源\napt-get update\n3、下载wget\napt-get install wget\n4、下载chrome linux版本的\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n5、安装chrome\n dpkg -i ******.deb\n 解决依赖关系：\n    apt-get -f install\n6、跑一把发现汉字变问好「？」了\n7、安装缺失的字体\napt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy\n```\n\n#### 6导出container\n```\n1、导出container\ndocker export container_name > chrome.tar\n2、导入到images中\ndocker load < chrome.tar\n```\n\n#### 7自己搞Dockerfile,预留「RUN」接口\n\nDockerfile文件：\n```\n#这个是上一步导入的images\nFROM gogoowang/chrome:v1\nRUN mkdir -p /home\nWORKDIR /home\nENTRYPOINT [\"chrome\",\"--headless\",\"--disable-gpu\"]\n```\n\n>构建成镜像：docker build -t gogoo/chrome:v2 . \n\nPS:「/home」的含义就是这个images的工作目录是/home文件夹下面\n\n#### 8跑一把，收工\n\n### 注意点：\n#### PS-1\n```\n1、错误❌\ndocker container run -it --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot --hide-scrollbars /XXXX/XXXX.html\n2、正确\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了\n```\n\n#### PS-2\n\n```\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n1、关于这个-v的问题,后面就固定了，具体见Dockerfile中\n2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是/home下面了\n```\n","slug":"17-chrome headless","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkr000ghyi70ez9hllp","content":"<blockquote>\n<p>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。<br>说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。<br>然而事情并没有这么简单；</p>\n</blockquote>\n<h3 id=\"难点：\"><a href=\"#难点：\" class=\"headerlink\" title=\"难点：\"></a>难点：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务器中不能装chrome</span><br><span class=\"line\"><span class=\"number\">2</span>、chrome必须打在docker里面</span><br><span class=\"line\"><span class=\"number\">3</span>、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。</span><br><span class=\"line\"><span class=\"number\">4</span>、不能启动新的服务</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n<h3 id=\"切入点：\"><a href=\"#切入点：\" class=\"headerlink\" title=\"切入点：\"></a>切入点：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker &amp;&amp; chrome</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>so先去搜一把有没有现成的可用？</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-193745.png\"></p>\n<p>分析分析吧：</p>\n<ul>\n<li><a href=\"https://github.com/browserless/chrome\">browserless</a></li>\n<li><a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a></li>\n<li><a href=\"https://github.com/prisma-archive/chromeless\">prisma-archive</a><br>……….<ul>\n<li>适合启动服务，然后进行测试或者跑服务</li>\n<li>入参数为url</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所以上述的基本不符合需求，再寻找…..</p>\n</blockquote>\n<h3 id=\"Zenika-alpine-chrome\"><a href=\"#Zenika-alpine-chrome\" class=\"headerlink\" title=\"Zenika/alpine-chrome\"></a><a href=\"https://github.com/Zenika/alpine-chrome\">Zenika/alpine-chrome</a></h3><blockquote>\n<p>看起来可行：</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194452.png\"></p>\n<p>这个经过验证总会有一个错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1110&#x2F;031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket &#x2F;var&#x2F;run&#x2F;dbus&#x2F;system_bus_socket: No such file or directory</span><br><span class=\"line\">[1110&#x2F;031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110&#x2F;031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110&#x2F;031549.073431:ERROR:headless_shell.cc(591)] Writing to file code&#x2F;ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED</span><br></pre></td></tr></table></figure>\n\n<p>文件没权限哦，尴尬了,再修正：</p>\n<blockquote>\n<p>发现源码有一段添加了用户，汗，太搞了.</p>\n</blockquote>\n<p><a href=\"https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38\">点击查看</a></p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194711.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,</span><br><span class=\"line\">这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。</span><br><span class=\"line\"></span><br><span class=\"line\">最直接的，去掉就好了。</span><br><span class=\"line\"></span><br><span class=\"line\">果然去掉后，跑docker就可以了</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://hub.docker.com/r/zenika/alpine-chrome\">docker镜像地址</a></p>\n<p>这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。</p>\n<h3 id=\"再尝试「自己搞个docker-images」\"><a href=\"#再尝试「自己搞个docker-images」\" class=\"headerlink\" title=\"再尝试「自己搞个docker images」\"></a>再尝试「自己搞个docker images」</h3><blockquote>\n<p>别人都能搞，为何我不可以勒</p>\n</blockquote>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><ul>\n<li>本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的</li>\n<li>那可以搞个linux系统，再装个chrome</li>\n<li>最后把字体装完就ok了</li>\n<li>最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。</li>\n</ul>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ul>\n<li>1、搞个docker debain系统</li>\n<li>2、想办法把chrome装上</li>\n<li>3、在里面跑一个测试，看能否生成图片</li>\n<li>4、安装缺失的字体</li>\n<li>5、container跑起来</li>\n<li>6、导出container，再导入到本地的images；让container变成images</li>\n<li>7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来</li>\n<li>8、再把搞好的images导出来用就可以了。</li>\n</ul>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull debian</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-4-5\"><a href=\"#2-3-4-5\" class=\"headerlink\" title=\"2/3/4/5\"></a>2/3/4/5</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、进入系统</span><br><span class=\"line\">docker exec -it XXXXX &#x2F;bin&#x2F;bash</span><br><span class=\"line\">2、更新源</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">3、下载wget</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">4、下载chrome linux版本的</span><br><span class=\"line\">wget https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;direct&#x2F;google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">5、安装chrome</span><br><span class=\"line\"> dpkg -i ******.deb</span><br><span class=\"line\"> 解决依赖关系：</span><br><span class=\"line\">    apt-get -f install</span><br><span class=\"line\">6、跑一把发现汉字变问好「？」了</span><br><span class=\"line\">7、安装缺失的字体</span><br><span class=\"line\">apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6导出container\"><a href=\"#6导出container\" class=\"headerlink\" title=\"6导出container\"></a>6导出container</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、导出container</span><br><span class=\"line\">docker export container_name &gt; chrome.tar</span><br><span class=\"line\">2、导入到images中</span><br><span class=\"line\">docker load &lt; chrome.tar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7自己搞Dockerfile-预留「RUN」接口\"><a href=\"#7自己搞Dockerfile-预留「RUN」接口\" class=\"headerlink\" title=\"7自己搞Dockerfile,预留「RUN」接口\"></a>7自己搞Dockerfile,预留「RUN」接口</h4><p>Dockerfile文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这个是上一步导入的images</span><br><span class=\"line\">FROM gogoowang&#x2F;chrome:v1</span><br><span class=\"line\">RUN mkdir -p &#x2F;home</span><br><span class=\"line\">WORKDIR &#x2F;home</span><br><span class=\"line\">ENTRYPOINT [&quot;chrome&quot;,&quot;--headless&quot;,&quot;--disable-gpu&quot;]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构建成镜像：docker build -t gogoo/chrome:v2 . </p>\n</blockquote>\n<p>PS:「/home」的含义就是这个images的工作目录是/home文件夹下面</p>\n<h4 id=\"8跑一把，收工\"><a href=\"#8跑一把，收工\" class=\"headerlink\" title=\"8跑一把，收工\"></a>8跑一把，收工</h4><h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><h4 id=\"PS-1\"><a href=\"#PS-1\" class=\"headerlink\" title=\"PS-1\"></a>PS-1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、错误❌</span><br><span class=\"line\">docker container run -it --rm -v &#x2F;tmp:&#x2F;home gogoowang&#x2F;chrome:v1 --no-sandbox --screenshot --hide-scrollbars &#x2F;XXXX&#x2F;XXXX.html</span><br><span class=\"line\">2、正确</span><br><span class=\"line\">docker container run -i --rm -v &#x2F;tmp:&#x2F;home gogoowang&#x2F;chrome:v1 --no-sandbox --screenshot&#x3D;&#x2F;home&#x2F;xx.png --hide-scrollbars &#x2F;XXXX&#x2F;XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PS-2\"><a href=\"#PS-2\" class=\"headerlink\" title=\"PS-2\"></a>PS-2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -i --rm -v &#x2F;tmp:&#x2F;home gogoowang&#x2F;chrome:v1 --no-sandbox --screenshot&#x3D;&#x2F;home&#x2F;xx.png --hide-scrollbars &#x2F;XXXX&#x2F;XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">1、关于这个-v的问题,后面就固定了，具体见Dockerfile中</span><br><span class=\"line\">2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是&#x2F;home下面了</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。<br>说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。<br>然而事情并没有这么简单；</p>\n</blockquote>\n<h3 id=\"难点：\"><a href=\"#难点：\" class=\"headerlink\" title=\"难点：\"></a>难点：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务器中不能装chrome</span><br><span class=\"line\"><span class=\"number\">2</span>、chrome必须打在docker里面</span><br><span class=\"line\"><span class=\"number\">3</span>、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。</span><br><span class=\"line\"><span class=\"number\">4</span>、不能启动新的服务</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"切入点：\"><a href=\"#切入点：\" class=\"headerlink\" title=\"切入点：\"></a>切入点：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker &amp;&amp; chrome</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>so先去搜一把有没有现成的可用？</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-193745.png\"></p>\n<p>分析分析吧：</p>\n<ul>\n<li><a href=\"https://github.com/browserless/chrome\">browserless</a></li>\n<li><a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a></li>\n<li><a href=\"https://github.com/prisma-archive/chromeless\">prisma-archive</a><br>……….<ul>\n<li>适合启动服务，然后进行测试或者跑服务</li>\n<li>入参数为url</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所以上述的基本不符合需求，再寻找…..</p>\n</blockquote>\n<h3 id=\"Zenika-alpine-chrome\"><a href=\"#Zenika-alpine-chrome\" class=\"headerlink\" title=\"Zenika/alpine-chrome\"></a><a href=\"https://github.com/Zenika/alpine-chrome\">Zenika/alpine-chrome</a></h3><blockquote>\n<p>看起来可行：</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194452.png\"></p>\n<p>这个经过验证总会有一个错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1110&#x2F;031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket &#x2F;var&#x2F;run&#x2F;dbus&#x2F;system_bus_socket: No such file or directory</span><br><span class=\"line\">[1110&#x2F;031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110&#x2F;031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110&#x2F;031549.073431:ERROR:headless_shell.cc(591)] Writing to file code&#x2F;ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED</span><br></pre></td></tr></table></figure>\n\n<p>文件没权限哦，尴尬了,再修正：</p>\n<blockquote>\n<p>发现源码有一段添加了用户，汗，太搞了.</p>\n</blockquote>\n<p><a href=\"https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38\">点击查看</a></p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-194711.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,</span><br><span class=\"line\">这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。</span><br><span class=\"line\"></span><br><span class=\"line\">最直接的，去掉就好了。</span><br><span class=\"line\"></span><br><span class=\"line\">果然去掉后，跑docker就可以了</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://hub.docker.com/r/zenika/alpine-chrome\">docker镜像地址</a></p>\n<p>这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。</p>\n<h3 id=\"再尝试「自己搞个docker-images」\"><a href=\"#再尝试「自己搞个docker-images」\" class=\"headerlink\" title=\"再尝试「自己搞个docker images」\"></a>再尝试「自己搞个docker images」</h3><blockquote>\n<p>别人都能搞，为何我不可以勒</p>\n</blockquote>\n<h3 id=\"分析：\"><a href=\"#分析：\" class=\"headerlink\" title=\"分析：\"></a>分析：</h3><ul>\n<li>本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的</li>\n<li>那可以搞个linux系统，再装个chrome</li>\n<li>最后把字体装完就ok了</li>\n<li>最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。</li>\n</ul>\n<h3 id=\"思路：\"><a href=\"#思路：\" class=\"headerlink\" title=\"思路：\"></a>思路：</h3><ul>\n<li>1、搞个docker debain系统</li>\n<li>2、想办法把chrome装上</li>\n<li>3、在里面跑一个测试，看能否生成图片</li>\n<li>4、安装缺失的字体</li>\n<li>5、container跑起来</li>\n<li>6、导出container，再导入到本地的images；让container变成images</li>\n<li>7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来</li>\n<li>8、再把搞好的images导出来用就可以了。</li>\n</ul>\n<h3 id=\"步骤：\"><a href=\"#步骤：\" class=\"headerlink\" title=\"步骤：\"></a>步骤：</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull debian</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-3-4-5\"><a href=\"#2-3-4-5\" class=\"headerlink\" title=\"2/3/4/5\"></a>2/3/4/5</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、进入系统</span><br><span class=\"line\">docker exec -it XXXXX &#x2F;bin&#x2F;bash</span><br><span class=\"line\">2、更新源</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">3、下载wget</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">4、下载chrome linux版本的</span><br><span class=\"line\">wget https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;direct&#x2F;google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">5、安装chrome</span><br><span class=\"line\"> dpkg -i ******.deb</span><br><span class=\"line\"> 解决依赖关系：</span><br><span class=\"line\">    apt-get -f install</span><br><span class=\"line\">6、跑一把发现汉字变问好「？」了</span><br><span class=\"line\">7、安装缺失的字体</span><br><span class=\"line\">apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6导出container\"><a href=\"#6导出container\" class=\"headerlink\" title=\"6导出container\"></a>6导出container</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、导出container</span><br><span class=\"line\">docker export container_name &gt; chrome.tar</span><br><span class=\"line\">2、导入到images中</span><br><span class=\"line\">docker load &lt; chrome.tar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7自己搞Dockerfile-预留「RUN」接口\"><a href=\"#7自己搞Dockerfile-预留「RUN」接口\" class=\"headerlink\" title=\"7自己搞Dockerfile,预留「RUN」接口\"></a>7自己搞Dockerfile,预留「RUN」接口</h4><p>Dockerfile文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这个是上一步导入的images</span><br><span class=\"line\">FROM gogoowang&#x2F;chrome:v1</span><br><span class=\"line\">RUN mkdir -p &#x2F;home</span><br><span class=\"line\">WORKDIR &#x2F;home</span><br><span class=\"line\">ENTRYPOINT [&quot;chrome&quot;,&quot;--headless&quot;,&quot;--disable-gpu&quot;]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>构建成镜像：docker build -t gogoo/chrome:v2 . </p>\n</blockquote>\n<p>PS:「/home」的含义就是这个images的工作目录是/home文件夹下面</p>\n<h4 id=\"8跑一把，收工\"><a href=\"#8跑一把，收工\" class=\"headerlink\" title=\"8跑一把，收工\"></a>8跑一把，收工</h4><h3 id=\"注意点：\"><a href=\"#注意点：\" class=\"headerlink\" title=\"注意点：\"></a>注意点：</h3><h4 id=\"PS-1\"><a href=\"#PS-1\" class=\"headerlink\" title=\"PS-1\"></a>PS-1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、错误❌</span><br><span class=\"line\">docker container run -it --rm -v &#x2F;tmp:&#x2F;home gogoowang&#x2F;chrome:v1 --no-sandbox --screenshot --hide-scrollbars &#x2F;XXXX&#x2F;XXXX.html</span><br><span class=\"line\">2、正确</span><br><span class=\"line\">docker container run -i --rm -v &#x2F;tmp:&#x2F;home gogoowang&#x2F;chrome:v1 --no-sandbox --screenshot&#x3D;&#x2F;home&#x2F;xx.png --hide-scrollbars &#x2F;XXXX&#x2F;XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"PS-2\"><a href=\"#PS-2\" class=\"headerlink\" title=\"PS-2\"></a>PS-2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -i --rm -v &#x2F;tmp:&#x2F;home gogoowang&#x2F;chrome:v1 --no-sandbox --screenshot&#x3D;&#x2F;home&#x2F;xx.png --hide-scrollbars &#x2F;XXXX&#x2F;XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">1、关于这个-v的问题,后面就固定了，具体见Dockerfile中</span><br><span class=\"line\">2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是&#x2F;home下面了</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-193745.png","popularPost_tmp_gaData":{"updated":"Tue Nov 10 2020 19:25:32 GMT+0800 (中国标准时间)","title":"「17」chrome headless「截图/PDF/DOM...」","path":"archives/5544baea.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20201110-193745.png","excerpt":"<blockquote>\n<p>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。<br>说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。<br>然而事情并没有这么简单；</p>\n</blockquote>\n<h3 id=\"难点：\"><a href=\"#难点：\" class=\"headerlink\" title=\"难点：\"></a>难点：</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务器中不能装chrome</span><br><span class=\"line\"><span class=\"number\">2</span>、chrome必须打在docker里面</span><br><span class=\"line\"><span class=\"number\">3</span>、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。</span><br><span class=\"line\"><span class=\"number\">4</span>、不能启动新的服务</span><br></pre></td></tr></table></figure>","date":{"_isAMomentObject":true,"_i":"2020-11-10T11:25:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-10T11:25:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2867},{"title":"「15」Plan9 汇编小记","date":"2020-10-09T05:47:39.000Z","updated":"2020-10-09T05:47:39.000Z","keywords":"汇编,Go,Plan9","top":true,"sticky":3,"abbrlink":"2ce846ed","_content":"#### 前序\n>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。\n#### 如何得到汇编结果？\n\n* 官网文档\n* Google\n\n##### 3种方式：\n>第一种\n<!-- more -->\n```go\ngo tool compile -N -l -S ***.go\n```\n>第二种\n\n```go\n1、先编译：\n    go tool compile -N -l ***.go\n2、再反编译：\n    go tool objdump ***.o\n```\n\n>第三种\n\n```go\ngo build -gcflags -S ***.go\n```\n\n\n#### 常用寄存器\n##### AX BX CX DX BP SI SP IP\n\n|寄存器|16位|32位|64位|\n|:----|:----|:----|:----|\n|累加寄存器|AX|EAX|RAX|\n|基址寄存器|BX|EBX|RBX|\n|计数寄存器|CX|ECX|RCX|\n|数据寄存器|DX|EDX|RDX|\n|堆栈基指针|BP|EBP|RBP|\n|变址寄存器|SI|ESI|RSI|\n|堆栈顶指针|SP|ESP|RSP|\n|指令寄存器|IP|EIP|RIP|\n\n##### MOV\n\n>movb（8位）、movw（16位）、movl（32位）、movq（64位）\n\n```go\nMOVSS: 移动单精度浮点数\n```\n\n#### 查询地址\n\n[MOVSS](https://c9x.me/x86/html/file_module_x86_id_205.html)\n[Intel汇编指令查询](https://www.felixcloutier.com/x86/index.html)\n[Plan9查询](https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c)\n\n#### 持续更新....","source":"_posts/15-Plan9-汇编小记.md","raw":"---\ntitle: 「15」Plan9 汇编小记\ndate: '2020/10/09 13:47:39'\nupdated: '2020/10/09 13:47:39'\nkeywords: '汇编,Go,Plan9'\ntop: true\nsticky: 3\ntags:\n  - Plan9\n  - Go\n  - Day\nabbrlink: 2ce846ed\n---\n#### 前序\n>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。\n#### 如何得到汇编结果？\n\n* 官网文档\n* Google\n\n##### 3种方式：\n>第一种\n<!-- more -->\n```go\ngo tool compile -N -l -S ***.go\n```\n>第二种\n\n```go\n1、先编译：\n    go tool compile -N -l ***.go\n2、再反编译：\n    go tool objdump ***.o\n```\n\n>第三种\n\n```go\ngo build -gcflags -S ***.go\n```\n\n\n#### 常用寄存器\n##### AX BX CX DX BP SI SP IP\n\n|寄存器|16位|32位|64位|\n|:----|:----|:----|:----|\n|累加寄存器|AX|EAX|RAX|\n|基址寄存器|BX|EBX|RBX|\n|计数寄存器|CX|ECX|RCX|\n|数据寄存器|DX|EDX|RDX|\n|堆栈基指针|BP|EBP|RBP|\n|变址寄存器|SI|ESI|RSI|\n|堆栈顶指针|SP|ESP|RSP|\n|指令寄存器|IP|EIP|RIP|\n\n##### MOV\n\n>movb（8位）、movw（16位）、movl（32位）、movq（64位）\n\n```go\nMOVSS: 移动单精度浮点数\n```\n\n#### 查询地址\n\n[MOVSS](https://c9x.me/x86/html/file_module_x86_id_205.html)\n[Intel汇编指令查询](https://www.felixcloutier.com/x86/index.html)\n[Plan9查询](https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c)\n\n#### 持续更新....","slug":"15-Plan9-汇编小记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvks000ihyi7e4sphrug","content":"<h4 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h4><blockquote>\n<p>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。</p>\n</blockquote>\n<h4 id=\"如何得到汇编结果？\"><a href=\"#如何得到汇编结果？\" class=\"headerlink\" title=\"如何得到汇编结果？\"></a>如何得到汇编结果？</h4><ul>\n<li>官网文档</li>\n<li>Google</li>\n</ul>\n<h5 id=\"3种方式：\"><a href=\"#3种方式：\" class=\"headerlink\" title=\"3种方式：\"></a>3种方式：</h5><blockquote>\n<p>第一种</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> tool compile -N -l -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、先编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool compile -N -l ***.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"number\">2</span>、再反编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool objdump ***.o</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第三种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> build -gcflags -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"常用寄存器\"><a href=\"#常用寄存器\" class=\"headerlink\" title=\"常用寄存器\"></a>常用寄存器</h4><h5 id=\"AX-BX-CX-DX-BP-SI-SP-IP\"><a href=\"#AX-BX-CX-DX-BP-SI-SP-IP\" class=\"headerlink\" title=\"AX BX CX DX BP SI SP IP\"></a>AX BX CX DX BP SI SP IP</h5><table>\n<thead>\n<tr>\n<th align=\"left\">寄存器</th>\n<th align=\"left\">16位</th>\n<th align=\"left\">32位</th>\n<th align=\"left\">64位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">累加寄存器</td>\n<td align=\"left\">AX</td>\n<td align=\"left\">EAX</td>\n<td align=\"left\">RAX</td>\n</tr>\n<tr>\n<td align=\"left\">基址寄存器</td>\n<td align=\"left\">BX</td>\n<td align=\"left\">EBX</td>\n<td align=\"left\">RBX</td>\n</tr>\n<tr>\n<td align=\"left\">计数寄存器</td>\n<td align=\"left\">CX</td>\n<td align=\"left\">ECX</td>\n<td align=\"left\">RCX</td>\n</tr>\n<tr>\n<td align=\"left\">数据寄存器</td>\n<td align=\"left\">DX</td>\n<td align=\"left\">EDX</td>\n<td align=\"left\">RDX</td>\n</tr>\n<tr>\n<td align=\"left\">堆栈基指针</td>\n<td align=\"left\">BP</td>\n<td align=\"left\">EBP</td>\n<td align=\"left\">RBP</td>\n</tr>\n<tr>\n<td align=\"left\">变址寄存器</td>\n<td align=\"left\">SI</td>\n<td align=\"left\">ESI</td>\n<td align=\"left\">RSI</td>\n</tr>\n<tr>\n<td align=\"left\">堆栈顶指针</td>\n<td align=\"left\">SP</td>\n<td align=\"left\">ESP</td>\n<td align=\"left\">RSP</td>\n</tr>\n<tr>\n<td align=\"left\">指令寄存器</td>\n<td align=\"left\">IP</td>\n<td align=\"left\">EIP</td>\n<td align=\"left\">RIP</td>\n</tr>\n</tbody></table>\n<h5 id=\"MOV\"><a href=\"#MOV\" class=\"headerlink\" title=\"MOV\"></a>MOV</h5><blockquote>\n<p>movb（8位）、movw（16位）、movl（32位）、movq（64位）</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOVSS: 移动单精度浮点数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询地址\"><a href=\"#查询地址\" class=\"headerlink\" title=\"查询地址\"></a>查询地址</h4><p><a href=\"https://c9x.me/x86/html/file_module_x86_id_205.html\">MOVSS</a><br><a href=\"https://www.felixcloutier.com/x86/index.html\">Intel汇编指令查询</a><br><a href=\"https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c\">Plan9查询</a></p>\n<h4 id=\"持续更新…\"><a href=\"#持续更新…\" class=\"headerlink\" title=\"持续更新….\"></a>持续更新….</h4>","site":{"data":{}},"excerpt":"<h4 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h4><blockquote>\n<p>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。</p>\n</blockquote>\n<h4 id=\"如何得到汇编结果？\"><a href=\"#如何得到汇编结果？\" class=\"headerlink\" title=\"如何得到汇编结果？\"></a>如何得到汇编结果？</h4><ul>\n<li>官网文档</li>\n<li>Google</li>\n</ul>\n<h5 id=\"3种方式：\"><a href=\"#3种方式：\" class=\"headerlink\" title=\"3种方式：\"></a>3种方式：</h5><blockquote>\n<p>第一种</p>\n</blockquote>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> tool compile -N -l -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、先编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool compile -N -l ***.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"number\">2</span>、再反编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool objdump ***.o</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>第三种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> build -gcflags -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"常用寄存器\"><a href=\"#常用寄存器\" class=\"headerlink\" title=\"常用寄存器\"></a>常用寄存器</h4><h5 id=\"AX-BX-CX-DX-BP-SI-SP-IP\"><a href=\"#AX-BX-CX-DX-BP-SI-SP-IP\" class=\"headerlink\" title=\"AX BX CX DX BP SI SP IP\"></a>AX BX CX DX BP SI SP IP</h5><table>\n<thead>\n<tr>\n<th align=\"left\">寄存器</th>\n<th align=\"left\">16位</th>\n<th align=\"left\">32位</th>\n<th align=\"left\">64位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">累加寄存器</td>\n<td align=\"left\">AX</td>\n<td align=\"left\">EAX</td>\n<td align=\"left\">RAX</td>\n</tr>\n<tr>\n<td align=\"left\">基址寄存器</td>\n<td align=\"left\">BX</td>\n<td align=\"left\">EBX</td>\n<td align=\"left\">RBX</td>\n</tr>\n<tr>\n<td align=\"left\">计数寄存器</td>\n<td align=\"left\">CX</td>\n<td align=\"left\">ECX</td>\n<td align=\"left\">RCX</td>\n</tr>\n<tr>\n<td align=\"left\">数据寄存器</td>\n<td align=\"left\">DX</td>\n<td align=\"left\">EDX</td>\n<td align=\"left\">RDX</td>\n</tr>\n<tr>\n<td align=\"left\">堆栈基指针</td>\n<td align=\"left\">BP</td>\n<td align=\"left\">EBP</td>\n<td align=\"left\">RBP</td>\n</tr>\n<tr>\n<td align=\"left\">变址寄存器</td>\n<td align=\"left\">SI</td>\n<td align=\"left\">ESI</td>\n<td align=\"left\">RSI</td>\n</tr>\n<tr>\n<td align=\"left\">堆栈顶指针</td>\n<td align=\"left\">SP</td>\n<td align=\"left\">ESP</td>\n<td align=\"left\">RSP</td>\n</tr>\n<tr>\n<td align=\"left\">指令寄存器</td>\n<td align=\"left\">IP</td>\n<td align=\"left\">EIP</td>\n<td align=\"left\">RIP</td>\n</tr>\n</tbody></table>\n<h5 id=\"MOV\"><a href=\"#MOV\" class=\"headerlink\" title=\"MOV\"></a>MOV</h5><blockquote>\n<p>movb（8位）、movw（16位）、movl（32位）、movq（64位）</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOVSS: 移动单精度浮点数</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查询地址\"><a href=\"#查询地址\" class=\"headerlink\" title=\"查询地址\"></a>查询地址</h4><p><a href=\"https://c9x.me/x86/html/file_module_x86_id_205.html\">MOVSS</a><br><a href=\"https://www.felixcloutier.com/x86/index.html\">Intel汇编指令查询</a><br><a href=\"https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c\">Plan9查询</a></p>\n<h4 id=\"持续更新…\"><a href=\"#持续更新…\" class=\"headerlink\" title=\"持续更新….\"></a>持续更新….</h4>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Oct 09 2020 13:47:39 GMT+0800 (中国标准时间)","title":"「15」Plan9 汇编小记","path":"archives/2ce846ed.html","eyeCatchImage":null,"excerpt":"<h4 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h4><blockquote>\n<p>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。</p>\n</blockquote>\n<h4 id=\"如何得到汇编结果？\"><a href=\"#如何得到汇编结果？\" class=\"headerlink\" title=\"如何得到汇编结果？\"></a>如何得到汇编结果？</h4><ul>\n<li>官网文档</li>\n<li>Google</li>\n</ul>\n<h5 id=\"3种方式：\"><a href=\"#3种方式：\" class=\"headerlink\" title=\"3种方式：\"></a>3种方式：</h5><blockquote>\n<p>第一种</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-10-09T05:47:39.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-10-09T05:47:39.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Plan9"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":464},{"title":"「16」go源码words归纳","date":"2020-11-03T02:45:07.000Z","updated":"2020-11-03T02:45:07.000Z","keywords":"汇编,Go,Plan9","abbrlink":"425d5e80","_content":"### 前序\n\n好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了.....「身体还是很重要的!」\n\n当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」\n\n>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。\n\n不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。\n\n### Words\n\n#### 全称\n<!--more-->\n```go\n「11/3」\nPreempt  v 抢占、掠夺                                   --> /proc.go\nretake   v 重新获取「重新分配」                           --> /proc.go\nsyscall  v 系统调用                                     --> /proc.go\ndecrement v 递减                                       --> /proc.go\npretending  v 假装、伪装                                --> /proc.go\ncontended  v 竞争                                      --> /proc.go\nprocresize  v 扩大                                     --> /proc.go \ncorruption  n 腐败，译：损坏\n\n「11/5」\nassembly  n  装配                                      --> /proc.go\namortizes  v  缓冲                                     --> /proc.go\n```\n\n\n#### 简写\n\n```go\n「11/3」\nsysmon -> system monitor 系统监控                                               /proc.go\nincidlelocked  --> increment idle locked   增加空闲锁                           /proc.go\nsysmontick  --> system monitor ticket   系统监控数量                            /proc.go\n```\n\n### 持续更新....\n","source":"_posts/16-go源码words归纳.md","raw":"---\ntitle: 「16」go源码words归纳\ndate: '2020/11/03 10:45:07'\nupdated: '2020/11/03 10:45:07'\nkeywords: '汇编,Go,Plan9'\ntags:\n  - Go\n  - Day\nabbrlink: 425d5e80\n---\n### 前序\n\n好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了.....「身体还是很重要的!」\n\n当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」\n\n>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。\n\n不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。\n\n### Words\n\n#### 全称\n<!--more-->\n```go\n「11/3」\nPreempt  v 抢占、掠夺                                   --> /proc.go\nretake   v 重新获取「重新分配」                           --> /proc.go\nsyscall  v 系统调用                                     --> /proc.go\ndecrement v 递减                                       --> /proc.go\npretending  v 假装、伪装                                --> /proc.go\ncontended  v 竞争                                      --> /proc.go\nprocresize  v 扩大                                     --> /proc.go \ncorruption  n 腐败，译：损坏\n\n「11/5」\nassembly  n  装配                                      --> /proc.go\namortizes  v  缓冲                                     --> /proc.go\n```\n\n\n#### 简写\n\n```go\n「11/3」\nsysmon -> system monitor 系统监控                                               /proc.go\nincidlelocked  --> increment idle locked   增加空闲锁                           /proc.go\nsysmontick  --> system monitor ticket   系统监控数量                            /proc.go\n```\n\n### 持续更新....\n","slug":"16-go源码words归纳","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkt000khyi7hhp74rqo","content":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了…..「身体还是很重要的!」</p>\n<p>当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」</p>\n<blockquote>\n<p>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。</p>\n</blockquote>\n<p>不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。</p>\n<h3 id=\"Words\"><a href=\"#Words\" class=\"headerlink\" title=\"Words\"></a>Words</h3><h4 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h4><a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">Preempt  v 抢占、掠夺                                   --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">retake   v 重新获取「重新分配」                           --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">syscall  v 系统调用                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">decrement v 递减                                       --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">pretending  v 假装、伪装                                --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">contended  v 竞争                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">procresize  v 扩大                                     --&gt; /proc.<span class=\"keyword\">go</span> </span><br><span class=\"line\">corruption  n 腐败，译：损坏</span><br><span class=\"line\"></span><br><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">5</span>」</span><br><span class=\"line\">assembly  n  装配                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">amortizes  v  缓冲                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">sysmon -&gt; system monitor 系统监控                                               /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">incidlelocked  --&gt; increment idle locked   增加空闲锁                           /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">sysmontick  --&gt; system monitor ticket   系统监控数量                            /proc.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持续更新…\"><a href=\"#持续更新…\" class=\"headerlink\" title=\"持续更新….\"></a>持续更新….</h3>","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了…..「身体还是很重要的!」</p>\n<p>当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」</p>\n<blockquote>\n<p>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。</p>\n</blockquote>\n<p>不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。</p>\n<h3 id=\"Words\"><a href=\"#Words\" class=\"headerlink\" title=\"Words\"></a>Words</h3><h4 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h4>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">Preempt  v 抢占、掠夺                                   --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">retake   v 重新获取「重新分配」                           --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">syscall  v 系统调用                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">decrement v 递减                                       --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">pretending  v 假装、伪装                                --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">contended  v 竞争                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">procresize  v 扩大                                     --&gt; /proc.<span class=\"keyword\">go</span> </span><br><span class=\"line\">corruption  n 腐败，译：损坏</span><br><span class=\"line\"></span><br><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">5</span>」</span><br><span class=\"line\">assembly  n  装配                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">amortizes  v  缓冲                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">sysmon -&gt; system monitor 系统监控                                               /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">incidlelocked  --&gt; increment idle locked   增加空闲锁                           /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">sysmontick  --&gt; system monitor ticket   系统监控数量                            /proc.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持续更新…\"><a href=\"#持续更新…\" class=\"headerlink\" title=\"持续更新….\"></a>持续更新….</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Nov 03 2020 10:45:07 GMT+0800 (中国标准时间)","title":"「16」go源码words归纳","path":"archives/425d5e80.html","eyeCatchImage":null,"excerpt":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了…..「身体还是很重要的!」</p>\n<p>当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」</p>\n<blockquote>\n<p>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。</p>\n</blockquote>\n<p>不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。</p>\n<h3 id=\"Words\"><a href=\"#Words\" class=\"headerlink\" title=\"Words\"></a>Words</h3><h4 id=\"全称\"><a href=\"#全称\" class=\"headerlink\" title=\"全称\"></a>全称</h4>","date":{"_isAMomentObject":true,"_i":"2020-11-03T02:45:07.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-03T02:45:07.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":669},{"title":"「14」hexo-安装&插件","date":"2020-09-30T11:24:32.000Z","updated":"2020-09-30T11:24:32.000Z","abbrlink":"ae4aba0d","_content":"\nhexo安装及其第三方插件包下载总结，以便后续CI一次到位。\n<!--more-->\n```go\n npm install -g hexo-cli\n npm install hexo-renderer-sass --save\n npm install hexo-generator-searchdb --save\n npm install hexo-generator-sitemap --save\n npm install hexo-generator-baidu-sitemap --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install md5 --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install cheerio --save\n npm install blueimp-md5 --save\n npm install hexo-abbrlink --save\n npm audit fix\n\n npm uninstall hexo-generator-index --save\n npm install hexo-generator-index-pin-top --save\n npm audit fix\n \nnpm install hexo-neat --save\n npm audit fix\n```\n\n>未完待续......","source":"_posts/14-hexo-安装-插件.md","raw":"---\ntitle: 「14」hexo-安装&插件\ndate: '2020/09/30 19:24:32'\nupdated: '2020/09/30 19:24:32'\ntags:\n  - hexo\nabbrlink: ae4aba0d\n---\n\nhexo安装及其第三方插件包下载总结，以便后续CI一次到位。\n<!--more-->\n```go\n npm install -g hexo-cli\n npm install hexo-renderer-sass --save\n npm install hexo-generator-searchdb --save\n npm install hexo-generator-sitemap --save\n npm install hexo-generator-baidu-sitemap --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install md5 --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install cheerio --save\n npm install blueimp-md5 --save\n npm install hexo-abbrlink --save\n npm audit fix\n\n npm uninstall hexo-generator-index --save\n npm install hexo-generator-index-pin-top --save\n npm audit fix\n \nnpm install hexo-neat --save\n npm audit fix\n```\n\n>未完待续......","slug":"14-hexo-安装-插件","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvku000mhyi7f3ta8xr0","content":"<p>hexo安装及其第三方插件包下载总结，以便后续CI一次到位。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> npm install -g hexo-cli</span><br><span class=\"line\"> npm install hexo-renderer-sass --save</span><br><span class=\"line\"> npm install hexo-generator-searchdb --save</span><br><span class=\"line\"> npm install hexo-generator-sitemap --save</span><br><span class=\"line\"> npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install md5 --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install cheerio --save</span><br><span class=\"line\"> npm install blueimp-md5 --save</span><br><span class=\"line\"> npm install hexo-abbrlink --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"> npm uninstall hexo-generator-index --save</span><br><span class=\"line\"> npm install hexo-generator-index-pin-top --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> </span><br><span class=\"line\">npm install hexo-neat --save</span><br><span class=\"line\"> npm audit fix</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>未完待续……</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>hexo安装及其第三方插件包下载总结，以便后续CI一次到位。</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> npm install -g hexo-cli</span><br><span class=\"line\"> npm install hexo-renderer-sass --save</span><br><span class=\"line\"> npm install hexo-generator-searchdb --save</span><br><span class=\"line\"> npm install hexo-generator-sitemap --save</span><br><span class=\"line\"> npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install md5 --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install cheerio --save</span><br><span class=\"line\"> npm install blueimp-md5 --save</span><br><span class=\"line\"> npm install hexo-abbrlink --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"> npm uninstall hexo-generator-index --save</span><br><span class=\"line\"> npm install hexo-generator-index-pin-top --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> </span><br><span class=\"line\">npm install hexo-neat --save</span><br><span class=\"line\"> npm audit fix</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>未完待续……</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Sep 30 2020 19:24:32 GMT+0800 (中国标准时间)","title":"「14」hexo-安装&插件","path":"archives/ae4aba0d.html","eyeCatchImage":null,"excerpt":"<p>hexo安装及其第三方插件包下载总结，以便后续CI一次到位。</p>","date":{"_isAMomentObject":true,"_i":"2020-09-30T11:24:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-30T11:24:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["hexo"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":628},{"title":"「18」GPM-1-[初识/设计]","date":"2020-11-14T05:09:17.000Z","updated":"2020-11-14T05:09:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"b885f9f7","_content":"\n### 前序\n\n学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。\n\nGPM调度算是在Go中比较经典的了，有必要深入学习下。\n\n>[Go GPM设计文档](https://golang.org/s/go11sched)\n\n### GPM设计的由来\n\n一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：\n\n<!--more-->\n\n#### 现有的问题：\n```\n1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).\n2. Goroutine (G) hand-off (G.nextg). Worker threads (M's) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.\n3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M's, while they need to be associated only with M's running Go code (an M blocked inside of syscall does not need mcache). A ratio between M's running Go code and all M's can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.\n4. Aggressive thread blocking/unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.\n\n\n1、单一的全局锁和集中的状态.此锁所有g的操作。\n2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。\n3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。\n4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。\n\n```\n\n\n### 设计改变\n\n>以前的设计：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-1.png)\n\n>新增Processor\n\n ![](https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-2.png)\n\n\n ### 实现计划\n\n ```\n1. Introduce the P struct (empty for now); implement allp/idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.\n2. Move G freelist to P.\n3. Move mcache to P.\n4. Move stackalloc to P.\n5. Move ncgocall/gcstats to P.\n// work-steal工作窃取模式,仍然在全局锁下。\n6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.\n\n// 移除全局锁，实现分散的检测。\n7. Remove global mutex, implement distributed termination detection, LockOSThread.\n\n// 实现自旋替代提示锁「普通锁」。\n8. Implement spinning instead of prompt blocking/unblocking.\nThe plan may turn out to not work, there are a lot of unexplored details.\n ```\n\n ### Potential Improvement\n\n```\n# 后进先出计划。提供公平和优雅的处理g。\n1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.\n\n# 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。\n2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.\n\n# 更好的G-P。尝试入队未锁定的G到P，从上一次运行。\n4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.\n\n# 更好的P-M。尝试执行p，在同样的M最后一次运行。\n5. Better locality of P-to-M. Try to execute P on the same M it was last running.\n\n# M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。\n6. Throttling of M creation. The scheduler can be easily forced to create thousands of M's per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.\n\n```\n\n\n### 参考：\n\n* [GPM g11设计文档](https://golang.org/s/go11scheds)\n\n* [work steal模式](http://supertech.csail.mit.edu/papers/steal.pdf)","source":"_posts/18-GPM-1-初识.md","raw":"---\ntitle: '「18」GPM-1-[初识/设计]'\ndate: '2020/11/14 13:09:17'\nupdated: '2020/11/14 13:09:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: b885f9f7\n---\n\n### 前序\n\n学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。\n\nGPM调度算是在Go中比较经典的了，有必要深入学习下。\n\n>[Go GPM设计文档](https://golang.org/s/go11sched)\n\n### GPM设计的由来\n\n一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：\n\n<!--more-->\n\n#### 现有的问题：\n```\n1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).\n2. Goroutine (G) hand-off (G.nextg). Worker threads (M's) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.\n3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M's, while they need to be associated only with M's running Go code (an M blocked inside of syscall does not need mcache). A ratio between M's running Go code and all M's can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.\n4. Aggressive thread blocking/unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.\n\n\n1、单一的全局锁和集中的状态.此锁所有g的操作。\n2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。\n3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。\n4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。\n\n```\n\n\n### 设计改变\n\n>以前的设计：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-1.png)\n\n>新增Processor\n\n ![](https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-2.png)\n\n\n ### 实现计划\n\n ```\n1. Introduce the P struct (empty for now); implement allp/idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.\n2. Move G freelist to P.\n3. Move mcache to P.\n4. Move stackalloc to P.\n5. Move ncgocall/gcstats to P.\n// work-steal工作窃取模式,仍然在全局锁下。\n6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.\n\n// 移除全局锁，实现分散的检测。\n7. Remove global mutex, implement distributed termination detection, LockOSThread.\n\n// 实现自旋替代提示锁「普通锁」。\n8. Implement spinning instead of prompt blocking/unblocking.\nThe plan may turn out to not work, there are a lot of unexplored details.\n ```\n\n ### Potential Improvement\n\n```\n# 后进先出计划。提供公平和优雅的处理g。\n1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.\n\n# 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。\n2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.\n\n# 更好的G-P。尝试入队未锁定的G到P，从上一次运行。\n4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.\n\n# 更好的P-M。尝试执行p，在同样的M最后一次运行。\n5. Better locality of P-to-M. Try to execute P on the same M it was last running.\n\n# M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。\n6. Throttling of M creation. The scheduler can be easily forced to create thousands of M's per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.\n\n```\n\n\n### 参考：\n\n* [GPM g11设计文档](https://golang.org/s/go11scheds)\n\n* [work steal模式](http://supertech.csail.mit.edu/papers/steal.pdf)","slug":"18-GPM-1-初识","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvku000nhyi770ta2iq8","content":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。</p>\n<p>GPM调度算是在Go中比较经典的了，有必要深入学习下。</p>\n<blockquote>\n<p><a href=\"https://golang.org/s/go11sched\">Go GPM设计文档</a></p>\n</blockquote>\n<h3 id=\"GPM设计的由来\"><a href=\"#GPM设计的由来\" class=\"headerlink\" title=\"GPM设计的由来\"></a>GPM设计的由来</h3><p>一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：</p>\n<a id=\"more\"></a>\n\n<h4 id=\"现有的问题：\"><a href=\"#现有的问题：\" class=\"headerlink\" title=\"现有的问题：\"></a>现有的问题：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).</span><br><span class=\"line\">2. Goroutine (G) hand-off (G.nextg). Worker threads (M&#39;s) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.</span><br><span class=\"line\">3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M&#39;s, while they need to be associated only with M&#39;s running Go code (an M blocked inside of syscall does not need mcache). A ratio between M&#39;s running Go code and all M&#39;s can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.</span><br><span class=\"line\">4. Aggressive thread blocking&#x2F;unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1、单一的全局锁和集中的状态.此锁所有g的操作。</span><br><span class=\"line\">2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。</span><br><span class=\"line\">3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。</span><br><span class=\"line\">4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"设计改变\"><a href=\"#设计改变\" class=\"headerlink\" title=\"设计改变\"></a>设计改变</h3><blockquote>\n<p>以前的设计：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-1.png\"></p>\n</blockquote>\n<blockquote>\n<p>新增Processor</p>\n</blockquote>\n<p> <img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-2.png\"></p>\n<h3 id=\"实现计划\"><a href=\"#实现计划\" class=\"headerlink\" title=\"实现计划\"></a>实现计划</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Introduce the P struct (empty for now); implement allp&#x2F;idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.</span><br><span class=\"line\">2. Move G freelist to P.</span><br><span class=\"line\">3. Move mcache to P.</span><br><span class=\"line\">4. Move stackalloc to P.</span><br><span class=\"line\">5. Move ncgocall&#x2F;gcstats to P.</span><br><span class=\"line\">&#x2F;&#x2F; work-steal工作窃取模式,仍然在全局锁下。</span><br><span class=\"line\">6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 移除全局锁，实现分散的检测。</span><br><span class=\"line\">7. Remove global mutex, implement distributed termination detection, LockOSThread.</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 实现自旋替代提示锁「普通锁」。</span><br><span class=\"line\">8. Implement spinning instead of prompt blocking&#x2F;unblocking.</span><br><span class=\"line\">The plan may turn out to not work, there are a lot of unexplored details.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Potential-Improvement\"><a href=\"#Potential-Improvement\" class=\"headerlink\" title=\"Potential Improvement\"></a>Potential Improvement</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 后进先出计划。提供公平和优雅的处理g。</span><br><span class=\"line\">1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.</span><br><span class=\"line\"></span><br><span class=\"line\"># 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。</span><br><span class=\"line\">2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的G-P。尝试入队未锁定的G到P，从上一次运行。</span><br><span class=\"line\">4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的P-M。尝试执行p，在同样的M最后一次运行。</span><br><span class=\"line\">5. Better locality of P-to-M. Try to execute P on the same M it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。</span><br><span class=\"line\">6. Throttling of M creation. The scheduler can be easily forced to create thousands of M&#39;s per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><ul>\n<li><p><a href=\"https://golang.org/s/go11scheds\">GPM g11设计文档</a></p>\n</li>\n<li><p><a href=\"http://supertech.csail.mit.edu/papers/steal.pdf\">work steal模式</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。</p>\n<p>GPM调度算是在Go中比较经典的了，有必要深入学习下。</p>\n<blockquote>\n<p><a href=\"https://golang.org/s/go11sched\">Go GPM设计文档</a></p>\n</blockquote>\n<h3 id=\"GPM设计的由来\"><a href=\"#GPM设计的由来\" class=\"headerlink\" title=\"GPM设计的由来\"></a>GPM设计的由来</h3><p>一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：</p>","more":"<h4 id=\"现有的问题：\"><a href=\"#现有的问题：\" class=\"headerlink\" title=\"现有的问题：\"></a>现有的问题：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).</span><br><span class=\"line\">2. Goroutine (G) hand-off (G.nextg). Worker threads (M&#39;s) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.</span><br><span class=\"line\">3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M&#39;s, while they need to be associated only with M&#39;s running Go code (an M blocked inside of syscall does not need mcache). A ratio between M&#39;s running Go code and all M&#39;s can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.</span><br><span class=\"line\">4. Aggressive thread blocking&#x2F;unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1、单一的全局锁和集中的状态.此锁所有g的操作。</span><br><span class=\"line\">2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。</span><br><span class=\"line\">3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。</span><br><span class=\"line\">4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"设计改变\"><a href=\"#设计改变\" class=\"headerlink\" title=\"设计改变\"></a>设计改变</h3><blockquote>\n<p>以前的设计：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-1.png\"></p>\n</blockquote>\n<blockquote>\n<p>新增Processor</p>\n</blockquote>\n<p> <img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-2.png\"></p>\n<h3 id=\"实现计划\"><a href=\"#实现计划\" class=\"headerlink\" title=\"实现计划\"></a>实现计划</h3> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Introduce the P struct (empty for now); implement allp&#x2F;idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.</span><br><span class=\"line\">2. Move G freelist to P.</span><br><span class=\"line\">3. Move mcache to P.</span><br><span class=\"line\">4. Move stackalloc to P.</span><br><span class=\"line\">5. Move ncgocall&#x2F;gcstats to P.</span><br><span class=\"line\">&#x2F;&#x2F; work-steal工作窃取模式,仍然在全局锁下。</span><br><span class=\"line\">6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 移除全局锁，实现分散的检测。</span><br><span class=\"line\">7. Remove global mutex, implement distributed termination detection, LockOSThread.</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 实现自旋替代提示锁「普通锁」。</span><br><span class=\"line\">8. Implement spinning instead of prompt blocking&#x2F;unblocking.</span><br><span class=\"line\">The plan may turn out to not work, there are a lot of unexplored details.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Potential-Improvement\"><a href=\"#Potential-Improvement\" class=\"headerlink\" title=\"Potential Improvement\"></a>Potential Improvement</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 后进先出计划。提供公平和优雅的处理g。</span><br><span class=\"line\">1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.</span><br><span class=\"line\"></span><br><span class=\"line\"># 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。</span><br><span class=\"line\">2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的G-P。尝试入队未锁定的G到P，从上一次运行。</span><br><span class=\"line\">4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的P-M。尝试执行p，在同样的M最后一次运行。</span><br><span class=\"line\">5. Better locality of P-to-M. Try to execute P on the same M it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。</span><br><span class=\"line\">6. Throttling of M creation. The scheduler can be easily forced to create thousands of M&#39;s per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><ul>\n<li><p><a href=\"https://golang.org/s/go11scheds\">GPM g11设计文档</a></p>\n</li>\n<li><p><a href=\"http://supertech.csail.mit.edu/papers/steal.pdf\">work steal模式</a></p>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-1.png","popularPost_tmp_gaData":{"updated":"Sat Nov 14 2020 13:09:17 GMT+0800 (中国标准时间)","title":"「18」GPM-1-[初识/设计]","path":"archives/b885f9f7.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/GPM-1.png","excerpt":"<h3 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h3><p>学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。</p>\n<p>GPM调度算是在Go中比较经典的了，有必要深入学习下。</p>\n<blockquote>\n<p><a href=\"https://golang.org/s/go11sched\">Go GPM设计文档</a></p>\n</blockquote>\n<h3 id=\"GPM设计的由来\"><a href=\"#GPM设计的由来\" class=\"headerlink\" title=\"GPM设计的由来\"></a>GPM设计的由来</h3><p>一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：</p>","date":{"_isAMomentObject":true,"_i":"2020-11-14T05:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-14T05:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","GPM"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2869},{"title":"「19」GPM-2.1-调度流程","date":"2020-11-16T13:09:17.000Z","updated":"2020-11-16T13:09:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"5c6a362f","_content":"\n工欲善其事，必先知其所以然......\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.\n\n### 函数& 变量初识\n>[challenge]: 以下多少是一看就知道在GPM中作用的?\n\n<!--more-->\n\n#### 函数\n\n> /proc.go\n* main\n* sysmon\n* findrunnable\n* gopark「1.1」\n* gosched 「1.2」\n* mstart\n* wakep\n* schedule\n* cpuinit\n* schedinit\n* ready\n* readgstatus\n* startm\n* pollWork\n* injectglist\n* park_m\n* goyield\n* retake\n* globrunqput\n* globrunqputbatch\n* globrunqputhead\n\n#### 变量\n\n> /proc.go\n* m0\n* g0\n* allgs\n* allglock\n\n\n> /runtime2.go\n* g\n* p\n* m\n* allglen\n* allm\n* allp\n* allpLock\n* gomaxprocs\n* sched\n\n\n\n> /runtime2.go 常量\n* _Grunnable/_Grunning/_Gwaiting.....\n\n### 上述这些函数/变量/常量 what？\n\n写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：\n\n* GPM为何会有这么多的状态\n* 这些状态之间是如何配合和协调的\n* 著名的工作偷取「P」是怎么操作的\n* 如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」\n\n### 切入点\n* main:入口函数\n* sysmon：监控调度线程\n* schedule：真实的调度器逻辑\n* m0/g0：特殊的存在体\n\n\n### 如何开始？\n\n>简单点，从main开始.\n\n\n### 瞎扯\n\n```\n看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，\n更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。\n\n考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。\n```\n\n### 未完待续.","source":"_posts/19-GPM-2-调度流程.md","raw":"---\ntitle: 「19」GPM-2.1-调度流程\ndate: '2020/11/16 21:09:17'\nupdated: '2020/11/16 21:09:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: 5c6a362f\n---\n\n工欲善其事，必先知其所以然......\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.\n\n### 函数& 变量初识\n>[challenge]: 以下多少是一看就知道在GPM中作用的?\n\n<!--more-->\n\n#### 函数\n\n> /proc.go\n* main\n* sysmon\n* findrunnable\n* gopark「1.1」\n* gosched 「1.2」\n* mstart\n* wakep\n* schedule\n* cpuinit\n* schedinit\n* ready\n* readgstatus\n* startm\n* pollWork\n* injectglist\n* park_m\n* goyield\n* retake\n* globrunqput\n* globrunqputbatch\n* globrunqputhead\n\n#### 变量\n\n> /proc.go\n* m0\n* g0\n* allgs\n* allglock\n\n\n> /runtime2.go\n* g\n* p\n* m\n* allglen\n* allm\n* allp\n* allpLock\n* gomaxprocs\n* sched\n\n\n\n> /runtime2.go 常量\n* _Grunnable/_Grunning/_Gwaiting.....\n\n### 上述这些函数/变量/常量 what？\n\n写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：\n\n* GPM为何会有这么多的状态\n* 这些状态之间是如何配合和协调的\n* 著名的工作偷取「P」是怎么操作的\n* 如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」\n\n### 切入点\n* main:入口函数\n* sysmon：监控调度线程\n* schedule：真实的调度器逻辑\n* m0/g0：特殊的存在体\n\n\n### 如何开始？\n\n>简单点，从main开始.\n\n\n### 瞎扯\n\n```\n看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，\n更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。\n\n考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。\n```\n\n### 未完待续.","slug":"19-GPM-2-调度流程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkv000phyi7gpvp7rh8","content":"<p>工欲善其事，必先知其所以然……<br>学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.</p>\n<h3 id=\"函数-amp-变量初识\"><a href=\"#函数-amp-变量初识\" class=\"headerlink\" title=\"函数&amp; 变量初识\"></a>函数&amp; 变量初识</h3><blockquote>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>main</li>\n<li>sysmon</li>\n<li>findrunnable</li>\n<li>gopark「1.1」</li>\n<li>gosched 「1.2」</li>\n<li>mstart</li>\n<li>wakep</li>\n<li>schedule</li>\n<li>cpuinit</li>\n<li>schedinit</li>\n<li>ready</li>\n<li>readgstatus</li>\n<li>startm</li>\n<li>pollWork</li>\n<li>injectglist</li>\n<li>park_m</li>\n<li>goyield</li>\n<li>retake</li>\n<li>globrunqput</li>\n<li>globrunqputbatch</li>\n<li>globrunqputhead</li>\n</ul>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>m0</li>\n<li>g0</li>\n<li>allgs</li>\n<li>allglock</li>\n</ul>\n<blockquote>\n<p>/runtime2.go</p>\n</blockquote>\n<ul>\n<li>g</li>\n<li>p</li>\n<li>m</li>\n<li>allglen</li>\n<li>allm</li>\n<li>allp</li>\n<li>allpLock</li>\n<li>gomaxprocs</li>\n<li>sched</li>\n</ul>\n<blockquote>\n<p>/runtime2.go 常量</p>\n</blockquote>\n<ul>\n<li>_Grunnable/_Grunning/_Gwaiting…..</li>\n</ul>\n<h3 id=\"上述这些函数-变量-常量-what？\"><a href=\"#上述这些函数-变量-常量-what？\" class=\"headerlink\" title=\"上述这些函数/变量/常量 what？\"></a>上述这些函数/变量/常量 what？</h3><p>写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：</p>\n<ul>\n<li>GPM为何会有这么多的状态</li>\n<li>这些状态之间是如何配合和协调的</li>\n<li>著名的工作偷取「P」是怎么操作的</li>\n<li>如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」</li>\n</ul>\n<h3 id=\"切入点\"><a href=\"#切入点\" class=\"headerlink\" title=\"切入点\"></a>切入点</h3><ul>\n<li>main:入口函数</li>\n<li>sysmon：监控调度线程</li>\n<li>schedule：真实的调度器逻辑</li>\n<li>m0/g0：特殊的存在体</li>\n</ul>\n<h3 id=\"如何开始？\"><a href=\"#如何开始？\" class=\"headerlink\" title=\"如何开始？\"></a>如何开始？</h3><blockquote>\n<p>简单点，从main开始.</p>\n</blockquote>\n<h3 id=\"瞎扯\"><a href=\"#瞎扯\" class=\"headerlink\" title=\"瞎扯\"></a>瞎扯</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，</span><br><span class=\"line\">更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。</span><br><span class=\"line\"></span><br><span class=\"line\">考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续.\"></a>未完待续.</h3>","site":{"data":{}},"excerpt":"<p>工欲善其事，必先知其所以然……<br>学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.</p>\n<h3 id=\"函数-amp-变量初识\"><a href=\"#函数-amp-变量初识\" class=\"headerlink\" title=\"函数&amp; 变量初识\"></a>函数&amp; 变量初识</h3><blockquote>\n</blockquote>","more":"<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>main</li>\n<li>sysmon</li>\n<li>findrunnable</li>\n<li>gopark「1.1」</li>\n<li>gosched 「1.2」</li>\n<li>mstart</li>\n<li>wakep</li>\n<li>schedule</li>\n<li>cpuinit</li>\n<li>schedinit</li>\n<li>ready</li>\n<li>readgstatus</li>\n<li>startm</li>\n<li>pollWork</li>\n<li>injectglist</li>\n<li>park_m</li>\n<li>goyield</li>\n<li>retake</li>\n<li>globrunqput</li>\n<li>globrunqputbatch</li>\n<li>globrunqputhead</li>\n</ul>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>m0</li>\n<li>g0</li>\n<li>allgs</li>\n<li>allglock</li>\n</ul>\n<blockquote>\n<p>/runtime2.go</p>\n</blockquote>\n<ul>\n<li>g</li>\n<li>p</li>\n<li>m</li>\n<li>allglen</li>\n<li>allm</li>\n<li>allp</li>\n<li>allpLock</li>\n<li>gomaxprocs</li>\n<li>sched</li>\n</ul>\n<blockquote>\n<p>/runtime2.go 常量</p>\n</blockquote>\n<ul>\n<li>_Grunnable/_Grunning/_Gwaiting…..</li>\n</ul>\n<h3 id=\"上述这些函数-变量-常量-what？\"><a href=\"#上述这些函数-变量-常量-what？\" class=\"headerlink\" title=\"上述这些函数/变量/常量 what？\"></a>上述这些函数/变量/常量 what？</h3><p>写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：</p>\n<ul>\n<li>GPM为何会有这么多的状态</li>\n<li>这些状态之间是如何配合和协调的</li>\n<li>著名的工作偷取「P」是怎么操作的</li>\n<li>如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」</li>\n</ul>\n<h3 id=\"切入点\"><a href=\"#切入点\" class=\"headerlink\" title=\"切入点\"></a>切入点</h3><ul>\n<li>main:入口函数</li>\n<li>sysmon：监控调度线程</li>\n<li>schedule：真实的调度器逻辑</li>\n<li>m0/g0：特殊的存在体</li>\n</ul>\n<h3 id=\"如何开始？\"><a href=\"#如何开始？\" class=\"headerlink\" title=\"如何开始？\"></a>如何开始？</h3><blockquote>\n<p>简单点，从main开始.</p>\n</blockquote>\n<h3 id=\"瞎扯\"><a href=\"#瞎扯\" class=\"headerlink\" title=\"瞎扯\"></a>瞎扯</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，</span><br><span class=\"line\">更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。</span><br><span class=\"line\"></span><br><span class=\"line\">考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续.\"></a>未完待续.</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Nov 16 2020 21:09:17 GMT+0800 (中国标准时间)","title":"「19」GPM-2.1-调度流程","path":"archives/5c6a362f.html","eyeCatchImage":null,"excerpt":"<p>工欲善其事，必先知其所以然……<br>学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.</p>\n<h3 id=\"函数-amp-变量初识\"><a href=\"#函数-amp-变量初识\" class=\"headerlink\" title=\"函数&amp; 变量初识\"></a>函数&amp; 变量初识</h3><blockquote>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-11-16T13:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-16T13:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","GPM"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":735},{"title":"「2」vscode 常见插件及其使用","date":"2020-08-31T05:09:17.000Z","updated":"2020-08-31T05:09:17.000Z","keywords":"vscode,vscode插件。","abbrlink":"8cf3cbca","_content":"\n>vscode中一些常见的坑点...\n\n### 插件\n\n\n#### 样式方面：\n\n* Indent Rainbo\n* Bracket Pair Colorizer # 括号颜色\n* Chinese Language       # 汉化\n<!-- more -->\n\n#### 功能方面\n\n* Git Blame              # Git提交查看\n* Code Spell Checker     # 拼写检查\n* Reload                 # 重新加载\n* Todo Tree              # 代办事项\n* Settings Sync          # 设置同步","source":"_posts/2-vscode-常见问题.md","raw":"---\ntitle: 「2」vscode 常见插件及其使用\ndate: '2020/08/31 13:09:17'\nupdated: '2020/08/31 13:09:17'\nkeywords: 'vscode,vscode插件。'\ntags:\n  - vscode\n  - 工具\nabbrlink: 8cf3cbca\n---\n\n>vscode中一些常见的坑点...\n\n### 插件\n\n\n#### 样式方面：\n\n* Indent Rainbo\n* Bracket Pair Colorizer # 括号颜色\n* Chinese Language       # 汉化\n<!-- more -->\n\n#### 功能方面\n\n* Git Blame              # Git提交查看\n* Code Spell Checker     # 拼写检查\n* Reload                 # 重新加载\n* Todo Tree              # 代办事项\n* Settings Sync          # 设置同步","slug":"2-vscode-常见问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkw000qhyi74wb90r6z","content":"<blockquote>\n<p>vscode中一些常见的坑点…</p>\n</blockquote>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><h4 id=\"样式方面：\"><a href=\"#样式方面：\" class=\"headerlink\" title=\"样式方面：\"></a>样式方面：</h4><ul>\n<li>Indent Rainbo</li>\n<li>Bracket Pair Colorizer # 括号颜色</li>\n<li>Chinese Language       # 汉化<a id=\"more\"></a>\n\n</li>\n</ul>\n<h4 id=\"功能方面\"><a href=\"#功能方面\" class=\"headerlink\" title=\"功能方面\"></a>功能方面</h4><ul>\n<li>Git Blame              # Git提交查看</li>\n<li>Code Spell Checker     # 拼写检查</li>\n<li>Reload                 # 重新加载</li>\n<li>Todo Tree              # 代办事项</li>\n<li>Settings Sync          # 设置同步</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>vscode中一些常见的坑点…</p>\n</blockquote>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><h4 id=\"样式方面：\"><a href=\"#样式方面：\" class=\"headerlink\" title=\"样式方面：\"></a>样式方面：</h4><ul>\n<li>Indent Rainbo</li>\n<li>Bracket Pair Colorizer # 括号颜色</li>\n<li>Chinese Language       # 汉化","more":"</li>\n</ul>\n<h4 id=\"功能方面\"><a href=\"#功能方面\" class=\"headerlink\" title=\"功能方面\"></a>功能方面</h4><ul>\n<li>Git Blame              # Git提交查看</li>\n<li>Code Spell Checker     # 拼写检查</li>\n<li>Reload                 # 重新加载</li>\n<li>Todo Tree              # 代办事项</li>\n<li>Settings Sync          # 设置同步</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Aug 31 2020 13:09:17 GMT+0800 (中国标准时间)","title":"「2」vscode 常见插件及其使用","path":"archives/8cf3cbca.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>vscode中一些常见的坑点…</p>\n</blockquote>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><h4 id=\"样式方面：\"><a href=\"#样式方面：\" class=\"headerlink\" title=\"样式方面：\"></a>样式方面：</h4><ul>\n<li>Indent Rainbo</li>\n<li>Bracket Pair Colorizer # 括号颜色</li>\n<li>Chinese Language       # 汉化","date":{"_isAMomentObject":true,"_i":"2020-08-31T05:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-31T05:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["vscode","工具"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":159},{"title":"「20」博客诡异事件","date":"2020-11-16T16:09:17.000Z","updated":"2020-11-16T16:09:17.000Z","keywords":"博客","abbrlink":"5ce14ff5","_content":"\n\n\n### 博客CI CD崩了\n>就在刚才修改了部分的config配置，后打了tag push了上去,\n\n>oh......GG了\n<!--more-->\n\n```\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\nout: INFO  Start processing\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\n```\n\n简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。\n\n先删了js，本地跑ok了，远端挂了，又提示另一个js错误。\n再删一个错误的js,再跑....又挂了!\n\n\n### 排查...\n\n>初步定位为文件没有更到最新\n\n本地ok,服务器部署不起来.....\n\n查下文件scp copy的工作流\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/企业微信20201117-000817@2x.png)\n\n看起来很简单，也很好用，但是呢，大坑来了..........\n当时没有选择是否选择覆盖文件：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/企业微信20201117-001054@2x.png)\n\n### 问题点\n\n没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。\n\nPS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己....\n\n### 参考：\n[copy workflow Github](https://github.com/appleboy/scp-action/blob/master/action.yml#L44)\n[scp copy workflow](https://github.com/marketplace/actions/scp-files)","source":"_posts/20-博客诡异事件.md","raw":"---\ntitle: 「20」博客诡异事件\ndate: '2020/11/17 00:09:17'\nupdated: '2020/11/17 00:09:17'\nkeywords: 博客\ntags:\n  - 博客\n  - Day\nabbrlink: 5ce14ff5\n---\n\n\n\n### 博客CI CD崩了\n>就在刚才修改了部分的config配置，后打了tag push了上去,\n\n>oh......GG了\n<!--more-->\n\n```\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\nout: INFO  Start processing\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\n```\n\n简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。\n\n先删了js，本地跑ok了，远端挂了，又提示另一个js错误。\n再删一个错误的js,再跑....又挂了!\n\n\n### 排查...\n\n>初步定位为文件没有更到最新\n\n本地ok,服务器部署不起来.....\n\n查下文件scp copy的工作流\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/企业微信20201117-000817@2x.png)\n\n看起来很简单，也很好用，但是呢，大坑来了..........\n当时没有选择是否选择覆盖文件：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/企业微信20201117-001054@2x.png)\n\n### 问题点\n\n没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。\n\nPS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己....\n\n### 参考：\n[copy workflow Github](https://github.com/appleboy/scp-action/blob/master/action.yml#L44)\n[scp copy workflow](https://github.com/marketplace/actions/scp-files)","slug":"20-博客诡异事件","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkw000rhyi7984ebowz","content":"<h3 id=\"博客CI-CD崩了\"><a href=\"#博客CI-CD崩了\" class=\"headerlink\" title=\"博客CI CD崩了\"></a>博客CI CD崩了</h3><blockquote>\n<p>就在刚才修改了部分的config配置，后打了tag push了上去,</p>\n</blockquote>\n<blockquote>\n<p>oh……GG了</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err: FATAL Something&#39;s wrong. Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#39;enable&#39; of undefined</span><br><span class=\"line\">err:     at ***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;filters&#x2F;comment&#x2F;disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;extend&#x2F;filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;lib&#x2F;injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:399:8)</span><br><span class=\"line\">err:     at &#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:559:17)</span><br><span class=\"line\">out: INFO  Start processing</span><br><span class=\"line\">err: FATAL Something&#39;s wrong. Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#39;enable&#39; of undefined</span><br><span class=\"line\">err:     at ***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;filters&#x2F;comment&#x2F;disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;extend&#x2F;filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;lib&#x2F;injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:399:8)</span><br><span class=\"line\">err:     at &#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:559:17)</span><br></pre></td></tr></table></figure>\n\n<p>简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。</p>\n<p>先删了js，本地跑ok了，远端挂了，又提示另一个js错误。<br>再删一个错误的js,再跑….又挂了!</p>\n<h3 id=\"排查…\"><a href=\"#排查…\" class=\"headerlink\" title=\"排查…\"></a>排查…</h3><blockquote>\n<p>初步定位为文件没有更到最新</p>\n</blockquote>\n<p>本地ok,服务器部署不起来…..</p>\n<p>查下文件scp copy的工作流</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png\"></p>\n<p>看起来很简单，也很好用，但是呢，大坑来了……….<br>当时没有选择是否选择覆盖文件：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-001054@2x.png\"></p>\n<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。</p>\n<p>PS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己….</p>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://github.com/appleboy/scp-action/blob/master/action.yml#L44\">copy workflow Github</a><br><a href=\"https://github.com/marketplace/actions/scp-files\">scp copy workflow</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"博客CI-CD崩了\"><a href=\"#博客CI-CD崩了\" class=\"headerlink\" title=\"博客CI CD崩了\"></a>博客CI CD崩了</h3><blockquote>\n<p>就在刚才修改了部分的config配置，后打了tag push了上去,</p>\n</blockquote>\n<blockquote>\n<p>oh……GG了</p>\n</blockquote>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err: FATAL Something&#39;s wrong. Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#39;enable&#39; of undefined</span><br><span class=\"line\">err:     at ***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;filters&#x2F;comment&#x2F;disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;extend&#x2F;filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;lib&#x2F;injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:399:8)</span><br><span class=\"line\">err:     at &#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:559:17)</span><br><span class=\"line\">out: INFO  Start processing</span><br><span class=\"line\">err: FATAL Something&#39;s wrong. Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#39;enable&#39; of undefined</span><br><span class=\"line\">err:     at ***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;filters&#x2F;comment&#x2F;disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;extend&#x2F;filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;lib&#x2F;injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***&#x2F;themes&#x2F;nextTheme&#x2F;scripts&#x2F;events&#x2F;index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (&#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:399:8)</span><br><span class=\"line\">err:     at &#x2F;***&#x2F;node_modules&#x2F;hexo&#x2F;lib&#x2F;hexo&#x2F;index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (&#x2F;***&#x2F;node_modules&#x2F;bluebird&#x2F;js&#x2F;release&#x2F;promise.js:559:17)</span><br></pre></td></tr></table></figure>\n\n<p>简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。</p>\n<p>先删了js，本地跑ok了，远端挂了，又提示另一个js错误。<br>再删一个错误的js,再跑….又挂了!</p>\n<h3 id=\"排查…\"><a href=\"#排查…\" class=\"headerlink\" title=\"排查…\"></a>排查…</h3><blockquote>\n<p>初步定位为文件没有更到最新</p>\n</blockquote>\n<p>本地ok,服务器部署不起来…..</p>\n<p>查下文件scp copy的工作流</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png\"></p>\n<p>看起来很简单，也很好用，但是呢，大坑来了……….<br>当时没有选择是否选择覆盖文件：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-001054@2x.png\"></p>\n<h3 id=\"问题点\"><a href=\"#问题点\" class=\"headerlink\" title=\"问题点\"></a>问题点</h3><p>没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。</p>\n<p>PS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己….</p>\n<h3 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h3><p><a href=\"https://github.com/appleboy/scp-action/blob/master/action.yml#L44\">copy workflow Github</a><br><a href=\"https://github.com/marketplace/actions/scp-files\">scp copy workflow</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png","popularPost_tmp_gaData":{"updated":"Tue Nov 17 2020 00:09:17 GMT+0800 (中国标准时间)","title":"「20」博客诡异事件","path":"archives/5ce14ff5.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png","excerpt":"<h3 id=\"博客CI-CD崩了\"><a href=\"#博客CI-CD崩了\" class=\"headerlink\" title=\"博客CI CD崩了\"></a>博客CI CD崩了</h3><blockquote>\n<p>就在刚才修改了部分的config配置，后打了tag push了上去,</p>\n</blockquote>\n<blockquote>\n<p>oh……GG了</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-11-16T16:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-16T16:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","博客"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5525},{"title":"「3」git cz规范提交","date":"2020-08-31T12:14:33.000Z","updated":"2020-08-31T12:14:33.000Z","keywords":"git,git commit,git提交规范","abbrlink":"458b44c2","_content":"\n### 定义\n\n[官方 specification](https://github.com/commitizen/cz-cli)\n简单的说为了代码提交更加规范\n\n### 场景\ngit commit使用\nhttps://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\n\n### 使用步骤\n* 安装nodejs，版本建议最新.[官网](https://nodejs.org/zh-cn/) \n* 打开你的命令行：\n<!-- more -->\n```\n        输入：npm install -g commitizen\n        windows应该是cmd吧。\n        mac用终端或者iterm2都可以。\n```\n>提示以下信息即成功。\n```\n        -> % sudo npm install -g commitizen\n        Password:\n        npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\n        npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\n        /usr/local/bin/cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/git-cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/commitizen -> /usr/local/lib/node_modules/commitizen/bin/commitizen\n        + commitizen@4.2.1\n        updated 1 package in 8.132s\n```\n3、进入git项目中，执行下面命令初始化环境。\n```commitizen init cz-conventional-changelog --save --save-exact```\n\n4、在提交代码时使用\n>git cz 替换 git commit命令\n\n### 注意事项\n\n* 安装方式可选择全局安装\n```\nnpm install -g commitizen cz-conventional-changelog\necho '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n\n```","source":"_posts/3-git-cz规范提交.md","raw":"---\ntitle: 「3」git cz规范提交\ndate: '2020/08/31 20:14:33'\nupdated: '2020/08/31 20:14:33'\nkeywords: 'git,git commit,git提交规范'\ntags:\n  - Git\nabbrlink: 458b44c2\n---\n\n### 定义\n\n[官方 specification](https://github.com/commitizen/cz-cli)\n简单的说为了代码提交更加规范\n\n### 场景\ngit commit使用\nhttps://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\n\n### 使用步骤\n* 安装nodejs，版本建议最新.[官网](https://nodejs.org/zh-cn/) \n* 打开你的命令行：\n<!-- more -->\n```\n        输入：npm install -g commitizen\n        windows应该是cmd吧。\n        mac用终端或者iterm2都可以。\n```\n>提示以下信息即成功。\n```\n        -> % sudo npm install -g commitizen\n        Password:\n        npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\n        npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\n        /usr/local/bin/cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/git-cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/commitizen -> /usr/local/lib/node_modules/commitizen/bin/commitizen\n        + commitizen@4.2.1\n        updated 1 package in 8.132s\n```\n3、进入git项目中，执行下面命令初始化环境。\n```commitizen init cz-conventional-changelog --save --save-exact```\n\n4、在提交代码时使用\n>git cz 替换 git commit命令\n\n### 注意事项\n\n* 安装方式可选择全局安装\n```\nnpm install -g commitizen cz-conventional-changelog\necho '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n\n```","slug":"3-git-cz规范提交","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkx000thyi7bkzw405q","content":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><a href=\"https://github.com/commitizen/cz-cli\">官方 specification</a><br>简单的说为了代码提交更加规范</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>git commit使用<br><a href=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\">https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png</a></p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><ul>\n<li>安装nodejs，版本建议最新.<a href=\"https://nodejs.org/zh-cn/\">官网</a> </li>\n<li>打开你的命令行：<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：npm install -g commitizen</span><br><span class=\"line\">windows应该是cmd吧。</span><br><span class=\"line\">mac用终端或者iterm2都可以。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提示以下信息即成功。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; % sudo npm install -g commitizen</span><br><span class=\"line\">Password:</span><br><span class=\"line\">npm WARN deprecated resolve-url@0.2.1: https:&#x2F;&#x2F;github.com&#x2F;lydell&#x2F;resolve-url#deprecated</span><br><span class=\"line\">npm WARN deprecated urix@0.1.0: Please see https:&#x2F;&#x2F;github.com&#x2F;lydell&#x2F;urix#deprecated</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cz -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;commitizen&#x2F;bin&#x2F;git-cz</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;git-cz -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;commitizen&#x2F;bin&#x2F;git-cz</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;commitizen -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;commitizen&#x2F;bin&#x2F;commitizen</span><br><span class=\"line\">+ commitizen@4.2.1</span><br><span class=\"line\">updated 1 package in 8.132s</span><br></pre></td></tr></table></figure>\n3、进入git项目中，执行下面命令初始化环境。<br><code>commitizen init cz-conventional-changelog --save --save-exact</code></li>\n</ul>\n<p>4、在提交代码时使用</p>\n<blockquote>\n<p>git cz 替换 git commit命令</p>\n</blockquote>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>安装方式可选择全局安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen cz-conventional-changelog</span><br><span class=\"line\">echo &#39;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#39; &gt; ~&#x2F;.czrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><a href=\"https://github.com/commitizen/cz-cli\">官方 specification</a><br>简单的说为了代码提交更加规范</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>git commit使用<br><a href=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\">https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png</a></p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><ul>\n<li>安装nodejs，版本建议最新.<a href=\"https://nodejs.org/zh-cn/\">官网</a> </li>\n<li>打开你的命令行：","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：npm install -g commitizen</span><br><span class=\"line\">windows应该是cmd吧。</span><br><span class=\"line\">mac用终端或者iterm2都可以。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提示以下信息即成功。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; % sudo npm install -g commitizen</span><br><span class=\"line\">Password:</span><br><span class=\"line\">npm WARN deprecated resolve-url@0.2.1: https:&#x2F;&#x2F;github.com&#x2F;lydell&#x2F;resolve-url#deprecated</span><br><span class=\"line\">npm WARN deprecated urix@0.1.0: Please see https:&#x2F;&#x2F;github.com&#x2F;lydell&#x2F;urix#deprecated</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;cz -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;commitizen&#x2F;bin&#x2F;git-cz</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;git-cz -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;commitizen&#x2F;bin&#x2F;git-cz</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;commitizen -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;commitizen&#x2F;bin&#x2F;commitizen</span><br><span class=\"line\">+ commitizen@4.2.1</span><br><span class=\"line\">updated 1 package in 8.132s</span><br></pre></td></tr></table></figure>\n3、进入git项目中，执行下面命令初始化环境。<br><code>commitizen init cz-conventional-changelog --save --save-exact</code></li>\n</ul>\n<p>4、在提交代码时使用</p>\n<blockquote>\n<p>git cz 替换 git commit命令</p>\n</blockquote>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>安装方式可选择全局安装<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen cz-conventional-changelog</span><br><span class=\"line\">echo &#39;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#39; &gt; ~&#x2F;.czrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Aug 31 2020 20:14:33 GMT+0800 (中国标准时间)","title":"「3」git cz规范提交","path":"archives/458b44c2.html","eyeCatchImage":null,"excerpt":"<h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><a href=\"https://github.com/commitizen/cz-cli\">官方 specification</a><br>简单的说为了代码提交更加规范</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p>git commit使用<br><a href=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\">https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png</a></p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><ul>\n<li>安装nodejs，版本建议最新.<a href=\"https://nodejs.org/zh-cn/\">官网</a> </li>\n<li>打开你的命令行：","date":{"_isAMomentObject":true,"_i":"2020-08-31T12:14:33.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-31T12:14:33.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1178},{"title":"「4」Git常用技巧","date":"2020-09-01T11:22:02.000Z","updated":"2020-11-10T11:22:02.000Z","keywords":"git,git技巧,git常用技巧","abbrlink":"3c1dd822","_content":"### 学习方式\n多练多得，直接学习[官网](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)理解。\n\n以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。\n\n### Git版本：\n```\n1944 ± git version \ngit version 2.28.0\n```\n### 先说说Git的常用命令：(可跳过)\n<!-- more -->\n```\n2081 ◯  git \n用法：git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是各种场合常见的 Git 命令：\n\n开始一个工作区（参见：git help tutorial）\n   clone             克隆仓库到一个新目录\n   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库\n\n在当前变更上工作（参见：git help everyday）\n   add               添加文件内容至索引\n   mv                移动或重命名一个文件、目录或符号链接\n   restore           恢复工作区文件\n   rm                从工作区和索引中删除文件\n   sparse-checkout   初始化及修改稀疏检出\n\n检查历史和状态（参见：git help revisions）\n   bisect            通过二分查找定位引入 bug 的提交\n   diff              显示提交之间、提交和工作区之间等的差异\n   grep              输出和模式匹配的行\n   log               显示提交日志\n   show              显示各种类型的对象\n   status            显示工作区状态\n\n扩展、标记和调校您的历史记录\n   branch            列出、创建或删除分支\n   commit            记录变更到仓库\n   merge             合并两个或更多开发历史\n   rebase            在另一个分支上重新应用提交\n   reset             重置当前 HEAD 到指定状态\n   switch            切换分支\n   tag               创建、列出、删除或校验一个 GPG 签名的标签对象\n\n协同（参见：git help workflows）\n   fetch             从另外一个仓库下载对象和引用\n   pull              获取并整合另外的仓库或一个本地分支\n   push              更新远程引用和相关的对象\n\n命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些概念帮助。\n查看 'git help <命令>' 或 'git help <概念>' 以获取给定子命令或概念的\n帮助。\n有关系统的概述，查看 'git help git'\n```\n\n### Git使用：\n\n#### 生成密钥\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到`id_rsa`和`id_rsa.pub`两个文件。\n\n#### Git配置信息\n\n##### 查看配置信息\n```\n查看系统配置信息\n* git config --system --list\n\n当前用户配置\n* git config --global --list\n\n查看当前仓库配置\n* git config --local --list\n```\n\n##### 设置用户信息\n全局设置：\n```\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n```\n\n当前仓库生效：\n```\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n```\n\n\n\n#### Git Remote\n\n##### 新增remote地址\n\n```\ngit remote add upstream http://github/**remote**/test.git\ngit remote -v 可以查看具体路径\n```\n##### merge/fetch远程代码到XXX分支\n```\n1、git fetch upstream。\n2、切回到master分支。\n3、git merge upstream/master 合并远程upstream分支到本地master。\n4、解决冲突或其他问题。\n```\n\n#### Git 误删除恢复\n\n```\n1、git  fsck --lost -found :查看最近移除的文件.\n2、git show  '误删编号'：查看删除文件内容.\n3、git merge ‘误删编号’： 本地合并误删的文件内容.\n```\n\n#### Git reset撤回操作\n```\n1、git reflog\n2、git reset COMMITID    就可以回到COMMITID那个分支和版本。\n```\n\n#### Git分支\n\n##### 用法 \n>获取用法：Git branch -d --help\n\n```\n用法：git branch [<选项>] [-r | -a] [--merged | --no-merged]\n  或：git branch [<选项>] [-l] [-f] <分支名> [<起始点>]\n  或：git branch [<选项>] [-r] (-d | -D) <分支名>...\n  或：git branch [<选项>] (-m | -M) [<旧分支>] <新分支>\n  或：git branch [<选项>] (-c | -C) [<老分支>] <新分支>\n  或：git branch [<选项>] [-r | -a] [--points-at]\n  或：git branch [<选项>] [-r | -a] [--format]\n\n通用选项\n    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支\n    -q, --quiet           不显示信息\n    -t, --track           设置跟踪模式（参见 git-pull(1)）\n    -u, --set-upstream-to <上游>\n                          改变上游信息\n    --unset-upstream      取消上游信息的设置\n    --color[=<何时>]      使用彩色输出\n    -r, --remotes         作用于远程跟踪分支\n    --contains <提交>     只打印包含该提交的分支\n    --no-contains <提交>  只打印不包含该提交的分支\n    --abbrev[=<n>]        用 <n> 位数字显示 SHA-1 哈希值\n\n具体的 git-branch 动作：\n    -a, --all             列出远程跟踪及本地分支\n    -d, --delete          删除完全合并的分支\n    -D                    删除分支（即使没有合并）\n    -m, --move            移动/重命名一个分支，以及它的引用日志\n    -M                    移动/重命名一个分支，即使目标已存在\n    -c, --copy            拷贝一个分支和它的引用日志\n    -C                    拷贝一个分支，即使目标已存在\n    -l, --list            列出分支名\n    --show-current        显示当前分支名\n    --create-reflog       创建分支的引用日志\n    --edit-description    标记分支的描述\n    -f, --force           强制创建、移动/重命名、删除\n    --merged <提交>       只打印已经合并的分支\n    --no-merged <提交>    只打印尚未合并的分支\n    --column[=<风格>]     以列的方式显示分支\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的分支\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n    --format <格式>       输出格式\n```\n\n##### 获取所有分支\n```\ngit branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n```\n##### add/remove分支\n新建&切换:\n```\ngit checkout -b iss53\n\n是下面两条的简写：\ngit branch iss53\ngit checkout iss53\n```\n删除分支：\n```\ngit branch -d iss53\n```\n\n#### Git stash\n\n##### 常用：\n```\n（1）git stash save \"save message\"  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。\n（2）git stash list  ：查看stash了哪些存储\n（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}\n（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p\n（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} \n（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}\n（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储\n（8）git stash clear ：删除所有缓存的stash\n```\n\n#### Git Tag\n\n##### 常用：\n```\n2097 ± git tag -a --help\n用法：git tag [-a | -s | -u <key-id>] [-f] [-m <消息> | -F <文件>]\n\t\t<标签名> [<头>]\n  或：git tag -d <标签名>...\n  或：git tag -l [-n[<数字>]] [--contains <提交>] [--no-contains <提交>] [--points-at <对象>]\n\t\t[--format=<格式>] [--[no-]merged [<提交>]] [<模式>...]\n  或：git tag -v [--format=<格式>] <标签名>...\n\n    -l, --list            列出标签名称\n    -n[<n>]               每个标签信息打印 <n> 行\n    -d, --delete          删除标签\n    -v, --verify          验证标签\n\n标签创建选项\n    -a, --annotate        附注标签，需要一个说明\n    -m, --message <说明>  标签说明\n    -F, --file <文件>     从文件中读取提交说明\n    -e, --edit            强制编辑标签说明\n    -s, --sign            附注并附加 GPG 签名的标签\n    --cleanup <模式>      设置如何删除提交说明里的空格和#注释\n    -u, --local-user <key-id>\n                          使用另外的私钥签名该标签\n    -f, --force           如果存在，替换现有的标签\n    --create-reflog       创建引用日志\n\n标签列表选项\n    --column[=<风格>]     以列的方式显示标签列表\n    --contains <提交>     只打印包含该提交的标签\n    --no-contains <提交>  只打印不包含该提交的标签\n    --merged <提交>       只打印已经合并的标签\n    --no-merged <提交>    只打印尚未合并的标签\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的标签\n    --format <格式>       输出格式\n    --color[=<何时>]      遵照格式中的颜色输出\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n```\n\n```\ngit tag按照version排序：\ngit tag -n\n\ngit tag按照时间排序\ngit tag -n --sort=taggerdate\n```\n\n##### 打Tag\n```\ngit tag -a v0.0.1 -m \"V0.0.1\" \n```\n\n##### 删除Tag\n\n```\ngit tag -d v0.0.1\n```\n\n##### 推送Tag\n\n```\ngit push origin master --tags\n```\n\n#### Git push\n\n##### 用法\n```\n用法：git push [<选项>] [<仓库> [<引用规格>...]]\n\n    -v, --verbose         更加详细\n    -q, --quiet           更加安静\n    --repo <仓库>         仓库\n    --all                 推送所有引用\n    --mirror              镜像所有引用\n    -d, --delete          删除引用\n    --tags                推送标签（不能使用 --all or --mirror）\n    -n, --dry-run         演习\n    --porcelain           机器可读的输出\n    -f, --force           强制更新\n    --force-with-lease[=<引用名>:<期望值>]\n                          要求引用旧的取值为设定值\n    --recurse-submodules (check|on-demand|no)\n                          控制子模组的递归推送\n    --thin                使用精简打包\n    --receive-pack <receive-pack>\n                          接收包程序\n    --exec <receive-pack>\n                          接收包程序\n    -u, --set-upstream    设置 git pull/status 的上游\n    --progress            强制显示进度报告\n    --prune               清除本地删除的引用\n    --no-verify           绕过 pre-push 钩子\n    --follow-tags         推送缺失但有关的标签\n    --signed[=(yes|no|if-asked)]\n                          用 GPG 为推送签名\n    --atomic              需要远端支持原子事务\n    -o, --push-option <server-specific>\n                          传输选项\n    -4, --ipv4            只使用 IPv4 地址\n    -6, --ipv6            只使用 IPv6 地址\n```\n\n#### Git rebase\n\n##### 变基遵守的原则\n\n```\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\nTODO 后续更新此过程\n```\n\n\n##### 经典用法：\n>git rebase --help\n```\nAssume the following history exists and the current branch is \"topic\":\n\n              A---B---C topic\n             /\n        D---E---F---G master\nFrom this point, the result of either of thefollowing \n\ncommands:\n    git rebase master\n    git rebase master topic\n\n\nwould be:\n                      A'--B'--C' topic\n                     /\n        D---E---F---G master\n```\n\n##### rebase场景：\n\n[官网例子](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\n\n\n### Git 快速场景：\n其实还是对上述命令的活学活用。\n\n#### Git Reset场景\n```\n1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\ngit checkout -- filename\n\n所有文件/文件夹：\n\ngit checkout .\n \n2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\n$ rm filename / rm dir -rf\n\n所有文件/文件夹：\n\n$ git clean -xdf\n\n// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！\n\n3. 本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。\n单个文件/文件夹：\n\ngit reset HEAD filename\n\n所有文件/文件夹：\n\ngit reset HEAD .\n \n4. 本地通过git add & git commit 之后，想要撤销此次commit和代码\n\ngit reset commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改还在工作区！\n\ngit reset --hard commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码不会清除！\n\n5. git add & git commit 提交后，只想回滚commit：\n\tgit reset --soft HEAD^\n\t注意这仅仅是回滚了你的commit，代码依旧在的。\n```\n\n### 持续更新......","source":"_posts/4-Git常用技巧.md","raw":"---\ntitle: 「4」Git常用技巧\ndate: '2020/09/01 19:22:02'\nupdated: '2020/11/10 19:22:02'\nkeywords: 'git,git技巧,git常用技巧'\ntags:\n  - Git\nabbrlink: 3c1dd822\n---\n### 学习方式\n多练多得，直接学习[官网](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)理解。\n\n以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。\n\n### Git版本：\n```\n1944 ± git version \ngit version 2.28.0\n```\n### 先说说Git的常用命令：(可跳过)\n<!-- more -->\n```\n2081 ◯  git \n用法：git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是各种场合常见的 Git 命令：\n\n开始一个工作区（参见：git help tutorial）\n   clone             克隆仓库到一个新目录\n   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库\n\n在当前变更上工作（参见：git help everyday）\n   add               添加文件内容至索引\n   mv                移动或重命名一个文件、目录或符号链接\n   restore           恢复工作区文件\n   rm                从工作区和索引中删除文件\n   sparse-checkout   初始化及修改稀疏检出\n\n检查历史和状态（参见：git help revisions）\n   bisect            通过二分查找定位引入 bug 的提交\n   diff              显示提交之间、提交和工作区之间等的差异\n   grep              输出和模式匹配的行\n   log               显示提交日志\n   show              显示各种类型的对象\n   status            显示工作区状态\n\n扩展、标记和调校您的历史记录\n   branch            列出、创建或删除分支\n   commit            记录变更到仓库\n   merge             合并两个或更多开发历史\n   rebase            在另一个分支上重新应用提交\n   reset             重置当前 HEAD 到指定状态\n   switch            切换分支\n   tag               创建、列出、删除或校验一个 GPG 签名的标签对象\n\n协同（参见：git help workflows）\n   fetch             从另外一个仓库下载对象和引用\n   pull              获取并整合另外的仓库或一个本地分支\n   push              更新远程引用和相关的对象\n\n命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些概念帮助。\n查看 'git help <命令>' 或 'git help <概念>' 以获取给定子命令或概念的\n帮助。\n有关系统的概述，查看 'git help git'\n```\n\n### Git使用：\n\n#### 生成密钥\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到`id_rsa`和`id_rsa.pub`两个文件。\n\n#### Git配置信息\n\n##### 查看配置信息\n```\n查看系统配置信息\n* git config --system --list\n\n当前用户配置\n* git config --global --list\n\n查看当前仓库配置\n* git config --local --list\n```\n\n##### 设置用户信息\n全局设置：\n```\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n```\n\n当前仓库生效：\n```\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n```\n\n\n\n#### Git Remote\n\n##### 新增remote地址\n\n```\ngit remote add upstream http://github/**remote**/test.git\ngit remote -v 可以查看具体路径\n```\n##### merge/fetch远程代码到XXX分支\n```\n1、git fetch upstream。\n2、切回到master分支。\n3、git merge upstream/master 合并远程upstream分支到本地master。\n4、解决冲突或其他问题。\n```\n\n#### Git 误删除恢复\n\n```\n1、git  fsck --lost -found :查看最近移除的文件.\n2、git show  '误删编号'：查看删除文件内容.\n3、git merge ‘误删编号’： 本地合并误删的文件内容.\n```\n\n#### Git reset撤回操作\n```\n1、git reflog\n2、git reset COMMITID    就可以回到COMMITID那个分支和版本。\n```\n\n#### Git分支\n\n##### 用法 \n>获取用法：Git branch -d --help\n\n```\n用法：git branch [<选项>] [-r | -a] [--merged | --no-merged]\n  或：git branch [<选项>] [-l] [-f] <分支名> [<起始点>]\n  或：git branch [<选项>] [-r] (-d | -D) <分支名>...\n  或：git branch [<选项>] (-m | -M) [<旧分支>] <新分支>\n  或：git branch [<选项>] (-c | -C) [<老分支>] <新分支>\n  或：git branch [<选项>] [-r | -a] [--points-at]\n  或：git branch [<选项>] [-r | -a] [--format]\n\n通用选项\n    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支\n    -q, --quiet           不显示信息\n    -t, --track           设置跟踪模式（参见 git-pull(1)）\n    -u, --set-upstream-to <上游>\n                          改变上游信息\n    --unset-upstream      取消上游信息的设置\n    --color[=<何时>]      使用彩色输出\n    -r, --remotes         作用于远程跟踪分支\n    --contains <提交>     只打印包含该提交的分支\n    --no-contains <提交>  只打印不包含该提交的分支\n    --abbrev[=<n>]        用 <n> 位数字显示 SHA-1 哈希值\n\n具体的 git-branch 动作：\n    -a, --all             列出远程跟踪及本地分支\n    -d, --delete          删除完全合并的分支\n    -D                    删除分支（即使没有合并）\n    -m, --move            移动/重命名一个分支，以及它的引用日志\n    -M                    移动/重命名一个分支，即使目标已存在\n    -c, --copy            拷贝一个分支和它的引用日志\n    -C                    拷贝一个分支，即使目标已存在\n    -l, --list            列出分支名\n    --show-current        显示当前分支名\n    --create-reflog       创建分支的引用日志\n    --edit-description    标记分支的描述\n    -f, --force           强制创建、移动/重命名、删除\n    --merged <提交>       只打印已经合并的分支\n    --no-merged <提交>    只打印尚未合并的分支\n    --column[=<风格>]     以列的方式显示分支\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的分支\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n    --format <格式>       输出格式\n```\n\n##### 获取所有分支\n```\ngit branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n```\n##### add/remove分支\n新建&切换:\n```\ngit checkout -b iss53\n\n是下面两条的简写：\ngit branch iss53\ngit checkout iss53\n```\n删除分支：\n```\ngit branch -d iss53\n```\n\n#### Git stash\n\n##### 常用：\n```\n（1）git stash save \"save message\"  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。\n（2）git stash list  ：查看stash了哪些存储\n（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}\n（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p\n（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} \n（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}\n（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储\n（8）git stash clear ：删除所有缓存的stash\n```\n\n#### Git Tag\n\n##### 常用：\n```\n2097 ± git tag -a --help\n用法：git tag [-a | -s | -u <key-id>] [-f] [-m <消息> | -F <文件>]\n\t\t<标签名> [<头>]\n  或：git tag -d <标签名>...\n  或：git tag -l [-n[<数字>]] [--contains <提交>] [--no-contains <提交>] [--points-at <对象>]\n\t\t[--format=<格式>] [--[no-]merged [<提交>]] [<模式>...]\n  或：git tag -v [--format=<格式>] <标签名>...\n\n    -l, --list            列出标签名称\n    -n[<n>]               每个标签信息打印 <n> 行\n    -d, --delete          删除标签\n    -v, --verify          验证标签\n\n标签创建选项\n    -a, --annotate        附注标签，需要一个说明\n    -m, --message <说明>  标签说明\n    -F, --file <文件>     从文件中读取提交说明\n    -e, --edit            强制编辑标签说明\n    -s, --sign            附注并附加 GPG 签名的标签\n    --cleanup <模式>      设置如何删除提交说明里的空格和#注释\n    -u, --local-user <key-id>\n                          使用另外的私钥签名该标签\n    -f, --force           如果存在，替换现有的标签\n    --create-reflog       创建引用日志\n\n标签列表选项\n    --column[=<风格>]     以列的方式显示标签列表\n    --contains <提交>     只打印包含该提交的标签\n    --no-contains <提交>  只打印不包含该提交的标签\n    --merged <提交>       只打印已经合并的标签\n    --no-merged <提交>    只打印尚未合并的标签\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的标签\n    --format <格式>       输出格式\n    --color[=<何时>]      遵照格式中的颜色输出\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n```\n\n```\ngit tag按照version排序：\ngit tag -n\n\ngit tag按照时间排序\ngit tag -n --sort=taggerdate\n```\n\n##### 打Tag\n```\ngit tag -a v0.0.1 -m \"V0.0.1\" \n```\n\n##### 删除Tag\n\n```\ngit tag -d v0.0.1\n```\n\n##### 推送Tag\n\n```\ngit push origin master --tags\n```\n\n#### Git push\n\n##### 用法\n```\n用法：git push [<选项>] [<仓库> [<引用规格>...]]\n\n    -v, --verbose         更加详细\n    -q, --quiet           更加安静\n    --repo <仓库>         仓库\n    --all                 推送所有引用\n    --mirror              镜像所有引用\n    -d, --delete          删除引用\n    --tags                推送标签（不能使用 --all or --mirror）\n    -n, --dry-run         演习\n    --porcelain           机器可读的输出\n    -f, --force           强制更新\n    --force-with-lease[=<引用名>:<期望值>]\n                          要求引用旧的取值为设定值\n    --recurse-submodules (check|on-demand|no)\n                          控制子模组的递归推送\n    --thin                使用精简打包\n    --receive-pack <receive-pack>\n                          接收包程序\n    --exec <receive-pack>\n                          接收包程序\n    -u, --set-upstream    设置 git pull/status 的上游\n    --progress            强制显示进度报告\n    --prune               清除本地删除的引用\n    --no-verify           绕过 pre-push 钩子\n    --follow-tags         推送缺失但有关的标签\n    --signed[=(yes|no|if-asked)]\n                          用 GPG 为推送签名\n    --atomic              需要远端支持原子事务\n    -o, --push-option <server-specific>\n                          传输选项\n    -4, --ipv4            只使用 IPv4 地址\n    -6, --ipv6            只使用 IPv6 地址\n```\n\n#### Git rebase\n\n##### 变基遵守的原则\n\n```\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\nTODO 后续更新此过程\n```\n\n\n##### 经典用法：\n>git rebase --help\n```\nAssume the following history exists and the current branch is \"topic\":\n\n              A---B---C topic\n             /\n        D---E---F---G master\nFrom this point, the result of either of thefollowing \n\ncommands:\n    git rebase master\n    git rebase master topic\n\n\nwould be:\n                      A'--B'--C' topic\n                     /\n        D---E---F---G master\n```\n\n##### rebase场景：\n\n[官网例子](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\n\n\n### Git 快速场景：\n其实还是对上述命令的活学活用。\n\n#### Git Reset场景\n```\n1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\ngit checkout -- filename\n\n所有文件/文件夹：\n\ngit checkout .\n \n2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\n$ rm filename / rm dir -rf\n\n所有文件/文件夹：\n\n$ git clean -xdf\n\n// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！\n\n3. 本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。\n单个文件/文件夹：\n\ngit reset HEAD filename\n\n所有文件/文件夹：\n\ngit reset HEAD .\n \n4. 本地通过git add & git commit 之后，想要撤销此次commit和代码\n\ngit reset commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改还在工作区！\n\ngit reset --hard commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码不会清除！\n\n5. git add & git commit 提交后，只想回滚commit：\n\tgit reset --soft HEAD^\n\t注意这仅仅是回滚了你的commit，代码依旧在的。\n```\n\n### 持续更新......","slug":"4-Git常用技巧","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvkx000uhyi7bfiw8dm9","content":"<h3 id=\"学习方式\"><a href=\"#学习方式\" class=\"headerlink\" title=\"学习方式\"></a>学习方式</h3><p>多练多得，直接学习<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">官网</a>理解。</p>\n<p>以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。</p>\n<h3 id=\"Git版本：\"><a href=\"#Git版本：\" class=\"headerlink\" title=\"Git版本：\"></a>Git版本：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1944 ± git version </span><br><span class=\"line\">git version 2.28.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"先说说Git的常用命令：-可跳过\"><a href=\"#先说说Git的常用命令：-可跳过\" class=\"headerlink\" title=\"先说说Git的常用命令：(可跳过)\"></a>先说说Git的常用命令：(可跳过)</h3><a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2081 ◯  git </span><br><span class=\"line\">用法：git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;&#x3D;&lt;value&gt;]</span><br><span class=\"line\">           [--exec-path[&#x3D;&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir&#x3D;&lt;path&gt;] [--work-tree&#x3D;&lt;path&gt;] [--namespace&#x3D;&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">这些是各种场合常见的 Git 命令：</span><br><span class=\"line\"></span><br><span class=\"line\">开始一个工作区（参见：git help tutorial）</span><br><span class=\"line\">   clone             克隆仓库到一个新目录</span><br><span class=\"line\">   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br><span class=\"line\"></span><br><span class=\"line\">在当前变更上工作（参见：git help everyday）</span><br><span class=\"line\">   add               添加文件内容至索引</span><br><span class=\"line\">   mv                移动或重命名一个文件、目录或符号链接</span><br><span class=\"line\">   restore           恢复工作区文件</span><br><span class=\"line\">   rm                从工作区和索引中删除文件</span><br><span class=\"line\">   sparse-checkout   初始化及修改稀疏检出</span><br><span class=\"line\"></span><br><span class=\"line\">检查历史和状态（参见：git help revisions）</span><br><span class=\"line\">   bisect            通过二分查找定位引入 bug 的提交</span><br><span class=\"line\">   diff              显示提交之间、提交和工作区之间等的差异</span><br><span class=\"line\">   grep              输出和模式匹配的行</span><br><span class=\"line\">   log               显示提交日志</span><br><span class=\"line\">   show              显示各种类型的对象</span><br><span class=\"line\">   status            显示工作区状态</span><br><span class=\"line\"></span><br><span class=\"line\">扩展、标记和调校您的历史记录</span><br><span class=\"line\">   branch            列出、创建或删除分支</span><br><span class=\"line\">   commit            记录变更到仓库</span><br><span class=\"line\">   merge             合并两个或更多开发历史</span><br><span class=\"line\">   rebase            在另一个分支上重新应用提交</span><br><span class=\"line\">   reset             重置当前 HEAD 到指定状态</span><br><span class=\"line\">   switch            切换分支</span><br><span class=\"line\">   tag               创建、列出、删除或校验一个 GPG 签名的标签对象</span><br><span class=\"line\"></span><br><span class=\"line\">协同（参见：git help workflows）</span><br><span class=\"line\">   fetch             从另外一个仓库下载对象和引用</span><br><span class=\"line\">   pull              获取并整合另外的仓库或一个本地分支</span><br><span class=\"line\">   push              更新远程引用和相关的对象</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &#39;git help -a&#39; 和 &#39;git help -g&#39; 显示可用的子命令和一些概念帮助。</span><br><span class=\"line\">查看 &#39;git help &lt;命令&gt;&#39; 或 &#39;git help &lt;概念&gt;&#39; 以获取给定子命令或概念的</span><br><span class=\"line\">帮助。</span><br><span class=\"line\">有关系统的概述，查看 &#39;git help git&#39;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git使用：\"><a href=\"#Git使用：\" class=\"headerlink\" title=\"Git使用：\"></a>Git使用：</h3><h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>最后得到<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p>\n<h4 id=\"Git配置信息\"><a href=\"#Git配置信息\" class=\"headerlink\" title=\"Git配置信息\"></a>Git配置信息</h4><h5 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看系统配置信息</span><br><span class=\"line\">* git config --system --list</span><br><span class=\"line\"></span><br><span class=\"line\">当前用户配置</span><br><span class=\"line\">* git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前仓库配置</span><br><span class=\"line\">* git config --local --list</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置用户信息\"><a href=\"#设置用户信息\" class=\"headerlink\" title=\"设置用户信息\"></a>设置用户信息</h5><p>全局设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>当前仓库生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Git-Remote\"><a href=\"#Git-Remote\" class=\"headerlink\" title=\"Git Remote\"></a>Git Remote</h4><h5 id=\"新增remote地址\"><a href=\"#新增remote地址\" class=\"headerlink\" title=\"新增remote地址\"></a>新增remote地址</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream http:&#x2F;&#x2F;github&#x2F;**remote**&#x2F;test.git</span><br><span class=\"line\">git remote -v 可以查看具体路径</span><br></pre></td></tr></table></figure>\n<h5 id=\"merge-fetch远程代码到XXX分支\"><a href=\"#merge-fetch远程代码到XXX分支\" class=\"headerlink\" title=\"merge/fetch远程代码到XXX分支\"></a>merge/fetch远程代码到XXX分支</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git fetch upstream。</span><br><span class=\"line\">2、切回到master分支。</span><br><span class=\"line\">3、git merge upstream&#x2F;master 合并远程upstream分支到本地master。</span><br><span class=\"line\">4、解决冲突或其他问题。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-误删除恢复\"><a href=\"#Git-误删除恢复\" class=\"headerlink\" title=\"Git 误删除恢复\"></a>Git 误删除恢复</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git  fsck --lost -found :查看最近移除的文件.</span><br><span class=\"line\">2、git show  &#39;误删编号&#39;：查看删除文件内容.</span><br><span class=\"line\">3、git merge ‘误删编号’： 本地合并误删的文件内容.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-reset撤回操作\"><a href=\"#Git-reset撤回操作\" class=\"headerlink\" title=\"Git reset撤回操作\"></a>Git reset撤回操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git reflog</span><br><span class=\"line\">2、git reset COMMITID    就可以回到COMMITID那个分支和版本。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h4><h5 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h5><blockquote>\n<p>获取用法：Git branch -d –help</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git branch [&lt;选项&gt;] [-r | -a] [--merged | --no-merged]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-l] [-f] &lt;分支名&gt; [&lt;起始点&gt;]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r] (-d | -D) &lt;分支名&gt;...</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-m | -M) [&lt;旧分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-c | -C) [&lt;老分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--points-at]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--format]</span><br><span class=\"line\"></span><br><span class=\"line\">通用选项</span><br><span class=\"line\">    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支</span><br><span class=\"line\">    -q, --quiet           不显示信息</span><br><span class=\"line\">    -t, --track           设置跟踪模式（参见 git-pull(1)）</span><br><span class=\"line\">    -u, --set-upstream-to &lt;上游&gt;</span><br><span class=\"line\">                          改变上游信息</span><br><span class=\"line\">    --unset-upstream      取消上游信息的设置</span><br><span class=\"line\">    --color[&#x3D;&lt;何时&gt;]      使用彩色输出</span><br><span class=\"line\">    -r, --remotes         作用于远程跟踪分支</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的分支</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的分支</span><br><span class=\"line\">    --abbrev[&#x3D;&lt;n&gt;]        用 &lt;n&gt; 位数字显示 SHA-1 哈希值</span><br><span class=\"line\"></span><br><span class=\"line\">具体的 git-branch 动作：</span><br><span class=\"line\">    -a, --all             列出远程跟踪及本地分支</span><br><span class=\"line\">    -d, --delete          删除完全合并的分支</span><br><span class=\"line\">    -D                    删除分支（即使没有合并）</span><br><span class=\"line\">    -m, --move            移动&#x2F;重命名一个分支，以及它的引用日志</span><br><span class=\"line\">    -M                    移动&#x2F;重命名一个分支，即使目标已存在</span><br><span class=\"line\">    -c, --copy            拷贝一个分支和它的引用日志</span><br><span class=\"line\">    -C                    拷贝一个分支，即使目标已存在</span><br><span class=\"line\">    -l, --list            列出分支名</span><br><span class=\"line\">    --show-current        显示当前分支名</span><br><span class=\"line\">    --create-reflog       创建分支的引用日志</span><br><span class=\"line\">    --edit-description    标记分支的描述</span><br><span class=\"line\">    -f, --force           强制创建、移动&#x2F;重命名、删除</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的分支</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的分支</span><br><span class=\"line\">    --column[&#x3D;&lt;风格&gt;]     以列的方式显示分支</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的分支</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有分支\"><a href=\"#获取所有分支\" class=\"headerlink\" title=\"获取所有分支\"></a>获取所有分支</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r | grep -v &#39;\\-&gt;&#39; | while read remote; do git branch --track &quot;$&#123;remote#origin&#x2F;&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git pull --all</span><br></pre></td></tr></table></figure>\n<h5 id=\"add-remove分支\"><a href=\"#add-remove分支\" class=\"headerlink\" title=\"add/remove分支\"></a>add/remove分支</h5><p>新建&amp;切换:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b iss53</span><br><span class=\"line\"></span><br><span class=\"line\">是下面两条的简写：</span><br><span class=\"line\">git branch iss53</span><br><span class=\"line\">git checkout iss53</span><br></pre></td></tr></table></figure>\n<p>删除分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d iss53</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-stash\"><a href=\"#Git-stash\" class=\"headerlink\" title=\"Git stash\"></a>Git stash</h4><h5 id=\"常用：\"><a href=\"#常用：\" class=\"headerlink\" title=\"常用：\"></a>常用：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）git stash save &quot;save message&quot;  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</span><br><span class=\"line\">（2）git stash list  ：查看stash了哪些存储</span><br><span class=\"line\">（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@&#123;$num&#125;，比如第二个 git stash show stash@&#123;1&#125;</span><br><span class=\"line\">（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@&#123;$num&#125;  -p ，比如第二个：git stash show  stash@&#123;1&#125;  -p</span><br><span class=\"line\">（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@&#123;0&#125;，如果要使用其他个，git stash apply stash@&#123;$num&#125; ， 比如第二个：git stash apply stash@&#123;1&#125; </span><br><span class=\"line\">（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，比如应用并删除第二个：git stash pop stash@&#123;1&#125;</span><br><span class=\"line\">（7）git stash drop stash@&#123;$num&#125; ：丢弃stash@&#123;$num&#125;存储，从列表中删除这个存储</span><br><span class=\"line\">（8）git stash clear ：删除所有缓存的stash</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-Tag\"><a href=\"#Git-Tag\" class=\"headerlink\" title=\"Git Tag\"></a>Git Tag</h4><h5 id=\"常用：-1\"><a href=\"#常用：-1\" class=\"headerlink\" title=\"常用：\"></a>常用：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2097 ± git tag -a --help</span><br><span class=\"line\">用法：git tag [-a | -s | -u &lt;key-id&gt;] [-f] [-m &lt;消息&gt; | -F &lt;文件&gt;]</span><br><span class=\"line\">\t\t&lt;标签名&gt; [&lt;头&gt;]</span><br><span class=\"line\">  或：git tag -d &lt;标签名&gt;...</span><br><span class=\"line\">  或：git tag -l [-n[&lt;数字&gt;]] [--contains &lt;提交&gt;] [--no-contains &lt;提交&gt;] [--points-at &lt;对象&gt;]</span><br><span class=\"line\">\t\t[--format&#x3D;&lt;格式&gt;] [--[no-]merged [&lt;提交&gt;]] [&lt;模式&gt;...]</span><br><span class=\"line\">  或：git tag -v [--format&#x3D;&lt;格式&gt;] &lt;标签名&gt;...</span><br><span class=\"line\"></span><br><span class=\"line\">    -l, --list            列出标签名称</span><br><span class=\"line\">    -n[&lt;n&gt;]               每个标签信息打印 &lt;n&gt; 行</span><br><span class=\"line\">    -d, --delete          删除标签</span><br><span class=\"line\">    -v, --verify          验证标签</span><br><span class=\"line\"></span><br><span class=\"line\">标签创建选项</span><br><span class=\"line\">    -a, --annotate        附注标签，需要一个说明</span><br><span class=\"line\">    -m, --message &lt;说明&gt;  标签说明</span><br><span class=\"line\">    -F, --file &lt;文件&gt;     从文件中读取提交说明</span><br><span class=\"line\">    -e, --edit            强制编辑标签说明</span><br><span class=\"line\">    -s, --sign            附注并附加 GPG 签名的标签</span><br><span class=\"line\">    --cleanup &lt;模式&gt;      设置如何删除提交说明里的空格和#注释</span><br><span class=\"line\">    -u, --local-user &lt;key-id&gt;</span><br><span class=\"line\">                          使用另外的私钥签名该标签</span><br><span class=\"line\">    -f, --force           如果存在，替换现有的标签</span><br><span class=\"line\">    --create-reflog       创建引用日志</span><br><span class=\"line\"></span><br><span class=\"line\">标签列表选项</span><br><span class=\"line\">    --column[&#x3D;&lt;风格&gt;]     以列的方式显示标签列表</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的标签</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的标签</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的标签</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的标签</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的标签</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br><span class=\"line\">    --color[&#x3D;&lt;何时&gt;]      遵照格式中的颜色输出</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag按照version排序：</span><br><span class=\"line\">git tag -n</span><br><span class=\"line\"></span><br><span class=\"line\">git tag按照时间排序</span><br><span class=\"line\">git tag -n --sort&#x3D;taggerdate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打Tag\"><a href=\"#打Tag\" class=\"headerlink\" title=\"打Tag\"></a>打Tag</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.0.1 -m &quot;V0.0.1&quot; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除Tag\"><a href=\"#删除Tag\" class=\"headerlink\" title=\"删除Tag\"></a>删除Tag</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v0.0.1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"推送Tag\"><a href=\"#推送Tag\" class=\"headerlink\" title=\"推送Tag\"></a>推送Tag</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master --tags</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-push\"><a href=\"#Git-push\" class=\"headerlink\" title=\"Git push\"></a>Git push</h4><h5 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git push [&lt;选项&gt;] [&lt;仓库&gt; [&lt;引用规格&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">    -v, --verbose         更加详细</span><br><span class=\"line\">    -q, --quiet           更加安静</span><br><span class=\"line\">    --repo &lt;仓库&gt;         仓库</span><br><span class=\"line\">    --all                 推送所有引用</span><br><span class=\"line\">    --mirror              镜像所有引用</span><br><span class=\"line\">    -d, --delete          删除引用</span><br><span class=\"line\">    --tags                推送标签（不能使用 --all or --mirror）</span><br><span class=\"line\">    -n, --dry-run         演习</span><br><span class=\"line\">    --porcelain           机器可读的输出</span><br><span class=\"line\">    -f, --force           强制更新</span><br><span class=\"line\">    --force-with-lease[&#x3D;&lt;引用名&gt;:&lt;期望值&gt;]</span><br><span class=\"line\">                          要求引用旧的取值为设定值</span><br><span class=\"line\">    --recurse-submodules (check|on-demand|no)</span><br><span class=\"line\">                          控制子模组的递归推送</span><br><span class=\"line\">    --thin                使用精简打包</span><br><span class=\"line\">    --receive-pack &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    --exec &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    -u, --set-upstream    设置 git pull&#x2F;status 的上游</span><br><span class=\"line\">    --progress            强制显示进度报告</span><br><span class=\"line\">    --prune               清除本地删除的引用</span><br><span class=\"line\">    --no-verify           绕过 pre-push 钩子</span><br><span class=\"line\">    --follow-tags         推送缺失但有关的标签</span><br><span class=\"line\">    --signed[&#x3D;(yes|no|if-asked)]</span><br><span class=\"line\">                          用 GPG 为推送签名</span><br><span class=\"line\">    --atomic              需要远端支持原子事务</span><br><span class=\"line\">    -o, --push-option &lt;server-specific&gt;</span><br><span class=\"line\">                          传输选项</span><br><span class=\"line\">    -4, --ipv4            只使用 IPv4 地址</span><br><span class=\"line\">    -6, --ipv6            只使用 IPv6 地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-rebase\"><a href=\"#Git-rebase\" class=\"headerlink\" title=\"Git rebase\"></a>Git rebase</h4><h5 id=\"变基遵守的原则\"><a href=\"#变基遵守的原则\" class=\"headerlink\" title=\"变基遵守的原则\"></a>变基遵守的原则</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;zh&#x2F;v2&#x2F;Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)</span><br><span class=\"line\"></span><br><span class=\"line\">TODO 后续更新此过程</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"经典用法：\"><a href=\"#经典用法：\" class=\"headerlink\" title=\"经典用法：\"></a>经典用法：</h5><blockquote>\n<p>git rebase –help</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assume the following history exists and the current branch is &quot;topic&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">              A---B---C topic</span><br><span class=\"line\">             &#x2F;</span><br><span class=\"line\">        D---E---F---G master</span><br><span class=\"line\">From this point, the result of either of thefollowing </span><br><span class=\"line\"></span><br><span class=\"line\">commands:</span><br><span class=\"line\">    git rebase master</span><br><span class=\"line\">    git rebase master topic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">would be:</span><br><span class=\"line\">                      A&#39;--B&#39;--C&#39; topic</span><br><span class=\"line\">                     &#x2F;</span><br><span class=\"line\">        D---E---F---G master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"rebase场景：\"><a href=\"#rebase场景：\" class=\"headerlink\" title=\"rebase场景：\"></a>rebase场景：</h5><p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA\">官网例子</a></p>\n<h3 id=\"Git-快速场景：\"><a href=\"#Git-快速场景：\" class=\"headerlink\" title=\"Git 快速场景：\"></a>Git 快速场景：</h3><p>其实还是对上述命令的活学活用。</p>\n<h4 id=\"Git-Reset场景\"><a href=\"#Git-Reset场景\" class=\"headerlink\" title=\"Git Reset场景\"></a>Git Reset场景</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout .</span><br><span class=\"line\"> </span><br><span class=\"line\">2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ rm filename &#x2F; rm dir -rf</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ git clean -xdf</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！</span><br><span class=\"line\"></span><br><span class=\"line\">3. 本地修改&#x2F;新增了一堆文件，已经git add到暂存区，想放弃修改。</span><br><span class=\"line\">单个文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br><span class=\"line\"> </span><br><span class=\"line\">4. 本地通过git add &amp; git commit 之后，想要撤销此次commit和代码</span><br><span class=\"line\"></span><br><span class=\"line\">git reset commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">&#x2F;&#x2F; 撤销之后，你所做的已经commit的修改还在工作区！</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">&#x2F;&#x2F; 撤销之后，你所做的已经commit的修改将会清除，仍在工作区&#x2F;暂存区的代码不会清除！</span><br><span class=\"line\"></span><br><span class=\"line\">5. git add &amp; git commit 提交后，只想回滚commit：</span><br><span class=\"line\">\tgit reset --soft HEAD^</span><br><span class=\"line\">\t注意这仅仅是回滚了你的commit，代码依旧在的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持续更新……\"><a href=\"#持续更新……\" class=\"headerlink\" title=\"持续更新……\"></a>持续更新……</h3>","site":{"data":{}},"excerpt":"<h3 id=\"学习方式\"><a href=\"#学习方式\" class=\"headerlink\" title=\"学习方式\"></a>学习方式</h3><p>多练多得，直接学习<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">官网</a>理解。</p>\n<p>以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。</p>\n<h3 id=\"Git版本：\"><a href=\"#Git版本：\" class=\"headerlink\" title=\"Git版本：\"></a>Git版本：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1944 ± git version </span><br><span class=\"line\">git version 2.28.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"先说说Git的常用命令：-可跳过\"><a href=\"#先说说Git的常用命令：-可跳过\" class=\"headerlink\" title=\"先说说Git的常用命令：(可跳过)\"></a>先说说Git的常用命令：(可跳过)</h3>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2081 ◯  git </span><br><span class=\"line\">用法：git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;&#x3D;&lt;value&gt;]</span><br><span class=\"line\">           [--exec-path[&#x3D;&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir&#x3D;&lt;path&gt;] [--work-tree&#x3D;&lt;path&gt;] [--namespace&#x3D;&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">这些是各种场合常见的 Git 命令：</span><br><span class=\"line\"></span><br><span class=\"line\">开始一个工作区（参见：git help tutorial）</span><br><span class=\"line\">   clone             克隆仓库到一个新目录</span><br><span class=\"line\">   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br><span class=\"line\"></span><br><span class=\"line\">在当前变更上工作（参见：git help everyday）</span><br><span class=\"line\">   add               添加文件内容至索引</span><br><span class=\"line\">   mv                移动或重命名一个文件、目录或符号链接</span><br><span class=\"line\">   restore           恢复工作区文件</span><br><span class=\"line\">   rm                从工作区和索引中删除文件</span><br><span class=\"line\">   sparse-checkout   初始化及修改稀疏检出</span><br><span class=\"line\"></span><br><span class=\"line\">检查历史和状态（参见：git help revisions）</span><br><span class=\"line\">   bisect            通过二分查找定位引入 bug 的提交</span><br><span class=\"line\">   diff              显示提交之间、提交和工作区之间等的差异</span><br><span class=\"line\">   grep              输出和模式匹配的行</span><br><span class=\"line\">   log               显示提交日志</span><br><span class=\"line\">   show              显示各种类型的对象</span><br><span class=\"line\">   status            显示工作区状态</span><br><span class=\"line\"></span><br><span class=\"line\">扩展、标记和调校您的历史记录</span><br><span class=\"line\">   branch            列出、创建或删除分支</span><br><span class=\"line\">   commit            记录变更到仓库</span><br><span class=\"line\">   merge             合并两个或更多开发历史</span><br><span class=\"line\">   rebase            在另一个分支上重新应用提交</span><br><span class=\"line\">   reset             重置当前 HEAD 到指定状态</span><br><span class=\"line\">   switch            切换分支</span><br><span class=\"line\">   tag               创建、列出、删除或校验一个 GPG 签名的标签对象</span><br><span class=\"line\"></span><br><span class=\"line\">协同（参见：git help workflows）</span><br><span class=\"line\">   fetch             从另外一个仓库下载对象和引用</span><br><span class=\"line\">   pull              获取并整合另外的仓库或一个本地分支</span><br><span class=\"line\">   push              更新远程引用和相关的对象</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &#39;git help -a&#39; 和 &#39;git help -g&#39; 显示可用的子命令和一些概念帮助。</span><br><span class=\"line\">查看 &#39;git help &lt;命令&gt;&#39; 或 &#39;git help &lt;概念&gt;&#39; 以获取给定子命令或概念的</span><br><span class=\"line\">帮助。</span><br><span class=\"line\">有关系统的概述，查看 &#39;git help git&#39;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Git使用：\"><a href=\"#Git使用：\" class=\"headerlink\" title=\"Git使用：\"></a>Git使用：</h3><h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>最后得到<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p>\n<h4 id=\"Git配置信息\"><a href=\"#Git配置信息\" class=\"headerlink\" title=\"Git配置信息\"></a>Git配置信息</h4><h5 id=\"查看配置信息\"><a href=\"#查看配置信息\" class=\"headerlink\" title=\"查看配置信息\"></a>查看配置信息</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看系统配置信息</span><br><span class=\"line\">* git config --system --list</span><br><span class=\"line\"></span><br><span class=\"line\">当前用户配置</span><br><span class=\"line\">* git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前仓库配置</span><br><span class=\"line\">* git config --local --list</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"设置用户信息\"><a href=\"#设置用户信息\" class=\"headerlink\" title=\"设置用户信息\"></a>设置用户信息</h5><p>全局设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n\n<p>当前仓库生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Git-Remote\"><a href=\"#Git-Remote\" class=\"headerlink\" title=\"Git Remote\"></a>Git Remote</h4><h5 id=\"新增remote地址\"><a href=\"#新增remote地址\" class=\"headerlink\" title=\"新增remote地址\"></a>新增remote地址</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream http:&#x2F;&#x2F;github&#x2F;**remote**&#x2F;test.git</span><br><span class=\"line\">git remote -v 可以查看具体路径</span><br></pre></td></tr></table></figure>\n<h5 id=\"merge-fetch远程代码到XXX分支\"><a href=\"#merge-fetch远程代码到XXX分支\" class=\"headerlink\" title=\"merge/fetch远程代码到XXX分支\"></a>merge/fetch远程代码到XXX分支</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git fetch upstream。</span><br><span class=\"line\">2、切回到master分支。</span><br><span class=\"line\">3、git merge upstream&#x2F;master 合并远程upstream分支到本地master。</span><br><span class=\"line\">4、解决冲突或其他问题。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-误删除恢复\"><a href=\"#Git-误删除恢复\" class=\"headerlink\" title=\"Git 误删除恢复\"></a>Git 误删除恢复</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git  fsck --lost -found :查看最近移除的文件.</span><br><span class=\"line\">2、git show  &#39;误删编号&#39;：查看删除文件内容.</span><br><span class=\"line\">3、git merge ‘误删编号’： 本地合并误删的文件内容.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-reset撤回操作\"><a href=\"#Git-reset撤回操作\" class=\"headerlink\" title=\"Git reset撤回操作\"></a>Git reset撤回操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git reflog</span><br><span class=\"line\">2、git reset COMMITID    就可以回到COMMITID那个分支和版本。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git分支\"><a href=\"#Git分支\" class=\"headerlink\" title=\"Git分支\"></a>Git分支</h4><h5 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h5><blockquote>\n<p>获取用法：Git branch -d –help</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git branch [&lt;选项&gt;] [-r | -a] [--merged | --no-merged]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-l] [-f] &lt;分支名&gt; [&lt;起始点&gt;]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r] (-d | -D) &lt;分支名&gt;...</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-m | -M) [&lt;旧分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-c | -C) [&lt;老分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--points-at]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--format]</span><br><span class=\"line\"></span><br><span class=\"line\">通用选项</span><br><span class=\"line\">    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支</span><br><span class=\"line\">    -q, --quiet           不显示信息</span><br><span class=\"line\">    -t, --track           设置跟踪模式（参见 git-pull(1)）</span><br><span class=\"line\">    -u, --set-upstream-to &lt;上游&gt;</span><br><span class=\"line\">                          改变上游信息</span><br><span class=\"line\">    --unset-upstream      取消上游信息的设置</span><br><span class=\"line\">    --color[&#x3D;&lt;何时&gt;]      使用彩色输出</span><br><span class=\"line\">    -r, --remotes         作用于远程跟踪分支</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的分支</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的分支</span><br><span class=\"line\">    --abbrev[&#x3D;&lt;n&gt;]        用 &lt;n&gt; 位数字显示 SHA-1 哈希值</span><br><span class=\"line\"></span><br><span class=\"line\">具体的 git-branch 动作：</span><br><span class=\"line\">    -a, --all             列出远程跟踪及本地分支</span><br><span class=\"line\">    -d, --delete          删除完全合并的分支</span><br><span class=\"line\">    -D                    删除分支（即使没有合并）</span><br><span class=\"line\">    -m, --move            移动&#x2F;重命名一个分支，以及它的引用日志</span><br><span class=\"line\">    -M                    移动&#x2F;重命名一个分支，即使目标已存在</span><br><span class=\"line\">    -c, --copy            拷贝一个分支和它的引用日志</span><br><span class=\"line\">    -C                    拷贝一个分支，即使目标已存在</span><br><span class=\"line\">    -l, --list            列出分支名</span><br><span class=\"line\">    --show-current        显示当前分支名</span><br><span class=\"line\">    --create-reflog       创建分支的引用日志</span><br><span class=\"line\">    --edit-description    标记分支的描述</span><br><span class=\"line\">    -f, --force           强制创建、移动&#x2F;重命名、删除</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的分支</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的分支</span><br><span class=\"line\">    --column[&#x3D;&lt;风格&gt;]     以列的方式显示分支</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的分支</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"获取所有分支\"><a href=\"#获取所有分支\" class=\"headerlink\" title=\"获取所有分支\"></a>获取所有分支</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r | grep -v &#39;\\-&gt;&#39; | while read remote; do git branch --track &quot;$&#123;remote#origin&#x2F;&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git pull --all</span><br></pre></td></tr></table></figure>\n<h5 id=\"add-remove分支\"><a href=\"#add-remove分支\" class=\"headerlink\" title=\"add/remove分支\"></a>add/remove分支</h5><p>新建&amp;切换:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b iss53</span><br><span class=\"line\"></span><br><span class=\"line\">是下面两条的简写：</span><br><span class=\"line\">git branch iss53</span><br><span class=\"line\">git checkout iss53</span><br></pre></td></tr></table></figure>\n<p>删除分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d iss53</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-stash\"><a href=\"#Git-stash\" class=\"headerlink\" title=\"Git stash\"></a>Git stash</h4><h5 id=\"常用：\"><a href=\"#常用：\" class=\"headerlink\" title=\"常用：\"></a>常用：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）git stash save &quot;save message&quot;  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</span><br><span class=\"line\">（2）git stash list  ：查看stash了哪些存储</span><br><span class=\"line\">（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@&#123;$num&#125;，比如第二个 git stash show stash@&#123;1&#125;</span><br><span class=\"line\">（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@&#123;$num&#125;  -p ，比如第二个：git stash show  stash@&#123;1&#125;  -p</span><br><span class=\"line\">（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@&#123;0&#125;，如果要使用其他个，git stash apply stash@&#123;$num&#125; ， 比如第二个：git stash apply stash@&#123;1&#125; </span><br><span class=\"line\">（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，比如应用并删除第二个：git stash pop stash@&#123;1&#125;</span><br><span class=\"line\">（7）git stash drop stash@&#123;$num&#125; ：丢弃stash@&#123;$num&#125;存储，从列表中删除这个存储</span><br><span class=\"line\">（8）git stash clear ：删除所有缓存的stash</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-Tag\"><a href=\"#Git-Tag\" class=\"headerlink\" title=\"Git Tag\"></a>Git Tag</h4><h5 id=\"常用：-1\"><a href=\"#常用：-1\" class=\"headerlink\" title=\"常用：\"></a>常用：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2097 ± git tag -a --help</span><br><span class=\"line\">用法：git tag [-a | -s | -u &lt;key-id&gt;] [-f] [-m &lt;消息&gt; | -F &lt;文件&gt;]</span><br><span class=\"line\">\t\t&lt;标签名&gt; [&lt;头&gt;]</span><br><span class=\"line\">  或：git tag -d &lt;标签名&gt;...</span><br><span class=\"line\">  或：git tag -l [-n[&lt;数字&gt;]] [--contains &lt;提交&gt;] [--no-contains &lt;提交&gt;] [--points-at &lt;对象&gt;]</span><br><span class=\"line\">\t\t[--format&#x3D;&lt;格式&gt;] [--[no-]merged [&lt;提交&gt;]] [&lt;模式&gt;...]</span><br><span class=\"line\">  或：git tag -v [--format&#x3D;&lt;格式&gt;] &lt;标签名&gt;...</span><br><span class=\"line\"></span><br><span class=\"line\">    -l, --list            列出标签名称</span><br><span class=\"line\">    -n[&lt;n&gt;]               每个标签信息打印 &lt;n&gt; 行</span><br><span class=\"line\">    -d, --delete          删除标签</span><br><span class=\"line\">    -v, --verify          验证标签</span><br><span class=\"line\"></span><br><span class=\"line\">标签创建选项</span><br><span class=\"line\">    -a, --annotate        附注标签，需要一个说明</span><br><span class=\"line\">    -m, --message &lt;说明&gt;  标签说明</span><br><span class=\"line\">    -F, --file &lt;文件&gt;     从文件中读取提交说明</span><br><span class=\"line\">    -e, --edit            强制编辑标签说明</span><br><span class=\"line\">    -s, --sign            附注并附加 GPG 签名的标签</span><br><span class=\"line\">    --cleanup &lt;模式&gt;      设置如何删除提交说明里的空格和#注释</span><br><span class=\"line\">    -u, --local-user &lt;key-id&gt;</span><br><span class=\"line\">                          使用另外的私钥签名该标签</span><br><span class=\"line\">    -f, --force           如果存在，替换现有的标签</span><br><span class=\"line\">    --create-reflog       创建引用日志</span><br><span class=\"line\"></span><br><span class=\"line\">标签列表选项</span><br><span class=\"line\">    --column[&#x3D;&lt;风格&gt;]     以列的方式显示标签列表</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的标签</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的标签</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的标签</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的标签</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的标签</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br><span class=\"line\">    --color[&#x3D;&lt;何时&gt;]      遵照格式中的颜色输出</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag按照version排序：</span><br><span class=\"line\">git tag -n</span><br><span class=\"line\"></span><br><span class=\"line\">git tag按照时间排序</span><br><span class=\"line\">git tag -n --sort&#x3D;taggerdate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"打Tag\"><a href=\"#打Tag\" class=\"headerlink\" title=\"打Tag\"></a>打Tag</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.0.1 -m &quot;V0.0.1&quot; </span><br></pre></td></tr></table></figure>\n\n<h5 id=\"删除Tag\"><a href=\"#删除Tag\" class=\"headerlink\" title=\"删除Tag\"></a>删除Tag</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v0.0.1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"推送Tag\"><a href=\"#推送Tag\" class=\"headerlink\" title=\"推送Tag\"></a>推送Tag</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master --tags</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-push\"><a href=\"#Git-push\" class=\"headerlink\" title=\"Git push\"></a>Git push</h4><h5 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git push [&lt;选项&gt;] [&lt;仓库&gt; [&lt;引用规格&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">    -v, --verbose         更加详细</span><br><span class=\"line\">    -q, --quiet           更加安静</span><br><span class=\"line\">    --repo &lt;仓库&gt;         仓库</span><br><span class=\"line\">    --all                 推送所有引用</span><br><span class=\"line\">    --mirror              镜像所有引用</span><br><span class=\"line\">    -d, --delete          删除引用</span><br><span class=\"line\">    --tags                推送标签（不能使用 --all or --mirror）</span><br><span class=\"line\">    -n, --dry-run         演习</span><br><span class=\"line\">    --porcelain           机器可读的输出</span><br><span class=\"line\">    -f, --force           强制更新</span><br><span class=\"line\">    --force-with-lease[&#x3D;&lt;引用名&gt;:&lt;期望值&gt;]</span><br><span class=\"line\">                          要求引用旧的取值为设定值</span><br><span class=\"line\">    --recurse-submodules (check|on-demand|no)</span><br><span class=\"line\">                          控制子模组的递归推送</span><br><span class=\"line\">    --thin                使用精简打包</span><br><span class=\"line\">    --receive-pack &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    --exec &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    -u, --set-upstream    设置 git pull&#x2F;status 的上游</span><br><span class=\"line\">    --progress            强制显示进度报告</span><br><span class=\"line\">    --prune               清除本地删除的引用</span><br><span class=\"line\">    --no-verify           绕过 pre-push 钩子</span><br><span class=\"line\">    --follow-tags         推送缺失但有关的标签</span><br><span class=\"line\">    --signed[&#x3D;(yes|no|if-asked)]</span><br><span class=\"line\">                          用 GPG 为推送签名</span><br><span class=\"line\">    --atomic              需要远端支持原子事务</span><br><span class=\"line\">    -o, --push-option &lt;server-specific&gt;</span><br><span class=\"line\">                          传输选项</span><br><span class=\"line\">    -4, --ipv4            只使用 IPv4 地址</span><br><span class=\"line\">    -6, --ipv6            只使用 IPv6 地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-rebase\"><a href=\"#Git-rebase\" class=\"headerlink\" title=\"Git rebase\"></a>Git rebase</h4><h5 id=\"变基遵守的原则\"><a href=\"#变基遵守的原则\" class=\"headerlink\" title=\"变基遵守的原则\"></a>变基遵守的原则</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;zh&#x2F;v2&#x2F;Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)</span><br><span class=\"line\"></span><br><span class=\"line\">TODO 后续更新此过程</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"经典用法：\"><a href=\"#经典用法：\" class=\"headerlink\" title=\"经典用法：\"></a>经典用法：</h5><blockquote>\n<p>git rebase –help</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assume the following history exists and the current branch is &quot;topic&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">              A---B---C topic</span><br><span class=\"line\">             &#x2F;</span><br><span class=\"line\">        D---E---F---G master</span><br><span class=\"line\">From this point, the result of either of thefollowing </span><br><span class=\"line\"></span><br><span class=\"line\">commands:</span><br><span class=\"line\">    git rebase master</span><br><span class=\"line\">    git rebase master topic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">would be:</span><br><span class=\"line\">                      A&#39;--B&#39;--C&#39; topic</span><br><span class=\"line\">                     &#x2F;</span><br><span class=\"line\">        D---E---F---G master</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"rebase场景：\"><a href=\"#rebase场景：\" class=\"headerlink\" title=\"rebase场景：\"></a>rebase场景：</h5><p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA\">官网例子</a></p>\n<h3 id=\"Git-快速场景：\"><a href=\"#Git-快速场景：\" class=\"headerlink\" title=\"Git 快速场景：\"></a>Git 快速场景：</h3><p>其实还是对上述命令的活学活用。</p>\n<h4 id=\"Git-Reset场景\"><a href=\"#Git-Reset场景\" class=\"headerlink\" title=\"Git Reset场景\"></a>Git Reset场景</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout .</span><br><span class=\"line\"> </span><br><span class=\"line\">2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ rm filename &#x2F; rm dir -rf</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ git clean -xdf</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！</span><br><span class=\"line\"></span><br><span class=\"line\">3. 本地修改&#x2F;新增了一堆文件，已经git add到暂存区，想放弃修改。</span><br><span class=\"line\">单个文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件&#x2F;文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br><span class=\"line\"> </span><br><span class=\"line\">4. 本地通过git add &amp; git commit 之后，想要撤销此次commit和代码</span><br><span class=\"line\"></span><br><span class=\"line\">git reset commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">&#x2F;&#x2F; 撤销之后，你所做的已经commit的修改还在工作区！</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">&#x2F;&#x2F; 撤销之后，你所做的已经commit的修改将会清除，仍在工作区&#x2F;暂存区的代码不会清除！</span><br><span class=\"line\"></span><br><span class=\"line\">5. git add &amp; git commit 提交后，只想回滚commit：</span><br><span class=\"line\">\tgit reset --soft HEAD^</span><br><span class=\"line\">\t注意这仅仅是回滚了你的commit，代码依旧在的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持续更新……\"><a href=\"#持续更新……\" class=\"headerlink\" title=\"持续更新……\"></a>持续更新……</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Nov 10 2020 19:22:02 GMT+0800 (中国标准时间)","title":"「4」Git常用技巧","path":"archives/3c1dd822.html","eyeCatchImage":null,"excerpt":"<h3 id=\"学习方式\"><a href=\"#学习方式\" class=\"headerlink\" title=\"学习方式\"></a>学习方式</h3><p>多练多得，直接学习<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">官网</a>理解。</p>\n<p>以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。</p>\n<h3 id=\"Git版本：\"><a href=\"#Git版本：\" class=\"headerlink\" title=\"Git版本：\"></a>Git版本：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1944 ± git version </span><br><span class=\"line\">git version 2.28.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"先说说Git的常用命令：-可跳过\"><a href=\"#先说说Git的常用命令：-可跳过\" class=\"headerlink\" title=\"先说说Git的常用命令：(可跳过)\"></a>先说说Git的常用命令：(可跳过)</h3>","date":{"_isAMomentObject":true,"_i":"2020-09-01T11:22:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-01T11:22:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":7576},{"title":"「5」Git GPG签署工作","date":"2020-09-02T14:29:40.000Z","updated":"2020-09-02T14:29:40.000Z","keywords":"git,git签署证书,git常用","abbrlink":"580377d0","_content":"\n### GPG场景\n\n Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。\n\n 最终效果：如下图所示\n\n ![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png)\n\n### 安装过程\n\nwindows安装地址： [点击下载](https://www.gnupg.org/)\n\nmac os为例：\n<!-- more -->\n#### 安装GPG\n```\nbrew install gpg\n\n查看结果：\n± gpg --version                                                                                                                                                                                                                                     ⏎\n\ngpg (GnuPG) 2.2.22\nlibgcrypt 1.8.6\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nHome: /Users/gogoowang/.gnupg\n支持的算法：\n公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA\n密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n    CAMELLIA128, CAMELLIA192, CAMELLIA256\n散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\n压缩：  不压缩, ZIP, ZLIB, BZIP2\n\n```\n\n#### 生成密钥\n```\ngpg --full-generate-key\n```\n\n需要填写的地方：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123803.png)\n\n\n#### 查看密钥完整信息\n\n```\ngpg --list-secret-keys --keyid-format LONG\n```\n\n>secret keys（红圈地方后续用到，留意下）：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124016.png)\n\n#### 根据secret keys生成PGP\n\n```\ngpg --armor --export  7BB8CF3593CA174C\n```\n\n生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124305.png)\n\n#### Github账号中设置\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124443.png)\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124527.png)\n\n\n>将上述生成的PGP填入，点击[Add GPG Key]即可\n\n\n#### 配置本地GPG签名信息\n依次执行下面命令\n```\n1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys\n2、git config commit.gpgsign true\n3、git config --global commit.gpgsign true\n```\n\n#### Git PGP生效\n\n>再次提交commit即可生效。产生如下图的签名效果：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png)\n\n#### End","source":"_posts/5-Git-GPG签署工作.md","raw":"---\ntitle: 「5」Git GPG签署工作\ndate: '2020/09/02 22:29:40'\nupdated: '2020/09/02 22:29:40'\nkeywords: 'git,git签署证书,git常用'\ntags:\n  - Git\nabbrlink: 580377d0\n---\n\n### GPG场景\n\n Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。\n\n 最终效果：如下图所示\n\n ![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png)\n\n### 安装过程\n\nwindows安装地址： [点击下载](https://www.gnupg.org/)\n\nmac os为例：\n<!-- more -->\n#### 安装GPG\n```\nbrew install gpg\n\n查看结果：\n± gpg --version                                                                                                                                                                                                                                     ⏎\n\ngpg (GnuPG) 2.2.22\nlibgcrypt 1.8.6\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nHome: /Users/gogoowang/.gnupg\n支持的算法：\n公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA\n密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n    CAMELLIA128, CAMELLIA192, CAMELLIA256\n散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\n压缩：  不压缩, ZIP, ZLIB, BZIP2\n\n```\n\n#### 生成密钥\n```\ngpg --full-generate-key\n```\n\n需要填写的地方：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123803.png)\n\n\n#### 查看密钥完整信息\n\n```\ngpg --list-secret-keys --keyid-format LONG\n```\n\n>secret keys（红圈地方后续用到，留意下）：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124016.png)\n\n#### 根据secret keys生成PGP\n\n```\ngpg --armor --export  7BB8CF3593CA174C\n```\n\n生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124305.png)\n\n#### Github账号中设置\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124443.png)\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124527.png)\n\n\n>将上述生成的PGP填入，点击[Add GPG Key]即可\n\n\n#### 配置本地GPG签名信息\n依次执行下面命令\n```\n1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys\n2、git config commit.gpgsign true\n3、git config --global commit.gpgsign true\n```\n\n#### Git PGP生效\n\n>再次提交commit即可生效。产生如下图的签名效果：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png)\n\n#### End","slug":"5-Git-GPG签署工作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvl0000xhyi7g0f10lfm","content":"<h3 id=\"GPG场景\"><a href=\"#GPG场景\" class=\"headerlink\" title=\"GPG场景\"></a>GPG场景</h3><p> Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n<p> 最终效果：如下图所示</p>\n<p> <img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png\"></p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h3><p>windows安装地址： <a href=\"https://www.gnupg.org/\">点击下载</a></p>\n<p>mac os为例：</p>\n<a id=\"more\"></a>\n<h4 id=\"安装GPG\"><a href=\"#安装GPG\" class=\"headerlink\" title=\"安装GPG\"></a>安装GPG</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gpg</span><br><span class=\"line\"></span><br><span class=\"line\">查看结果：</span><br><span class=\"line\">± gpg --version                                                                                                                                                                                                                                     ⏎</span><br><span class=\"line\"></span><br><span class=\"line\">gpg (GnuPG) 2.2.22</span><br><span class=\"line\">libgcrypt 1.8.6</span><br><span class=\"line\">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;https:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\"></span><br><span class=\"line\">Home: &#x2F;Users&#x2F;gogoowang&#x2F;.gnupg</span><br><span class=\"line\">支持的算法：</span><br><span class=\"line\">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class=\"line\">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class=\"line\">    CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class=\"line\">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class=\"line\">压缩：  不压缩, ZIP, ZLIB, BZIP2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --full-generate-key</span><br></pre></td></tr></table></figure>\n\n<p>需要填写的地方：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123803.png\"></p>\n<h4 id=\"查看密钥完整信息\"><a href=\"#查看密钥完整信息\" class=\"headerlink\" title=\"查看密钥完整信息\"></a>查看密钥完整信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>secret keys（红圈地方后续用到，留意下）：</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124016.png\"></p>\n<h4 id=\"根据secret-keys生成PGP\"><a href=\"#根据secret-keys生成PGP\" class=\"headerlink\" title=\"根据secret keys生成PGP\"></a>根据secret keys生成PGP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --armor --export  7BB8CF3593CA174C</span><br></pre></td></tr></table></figure>\n\n<p>生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124305.png\"></p>\n<h4 id=\"Github账号中设置\"><a href=\"#Github账号中设置\" class=\"headerlink\" title=\"Github账号中设置\"></a>Github账号中设置</h4><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124443.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124527.png\"></p>\n<blockquote>\n<p>将上述生成的PGP填入，点击[Add GPG Key]即可</p>\n</blockquote>\n<h4 id=\"配置本地GPG签名信息\"><a href=\"#配置本地GPG签名信息\" class=\"headerlink\" title=\"配置本地GPG签名信息\"></a>配置本地GPG签名信息</h4><p>依次执行下面命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys</span><br><span class=\"line\">2、git config commit.gpgsign true</span><br><span class=\"line\">3、git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-PGP生效\"><a href=\"#Git-PGP生效\" class=\"headerlink\" title=\"Git PGP生效\"></a>Git PGP生效</h4><blockquote>\n<p>再次提交commit即可生效。产生如下图的签名效果：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png\"></p>\n</blockquote>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h4>","site":{"data":{}},"excerpt":"<h3 id=\"GPG场景\"><a href=\"#GPG场景\" class=\"headerlink\" title=\"GPG场景\"></a>GPG场景</h3><p> Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n<p> 最终效果：如下图所示</p>\n<p> <img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png\"></p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h3><p>windows安装地址： <a href=\"https://www.gnupg.org/\">点击下载</a></p>\n<p>mac os为例：</p>","more":"<h4 id=\"安装GPG\"><a href=\"#安装GPG\" class=\"headerlink\" title=\"安装GPG\"></a>安装GPG</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gpg</span><br><span class=\"line\"></span><br><span class=\"line\">查看结果：</span><br><span class=\"line\">± gpg --version                                                                                                                                                                                                                                     ⏎</span><br><span class=\"line\"></span><br><span class=\"line\">gpg (GnuPG) 2.2.22</span><br><span class=\"line\">libgcrypt 1.8.6</span><br><span class=\"line\">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;https:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\"></span><br><span class=\"line\">Home: &#x2F;Users&#x2F;gogoowang&#x2F;.gnupg</span><br><span class=\"line\">支持的算法：</span><br><span class=\"line\">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class=\"line\">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class=\"line\">    CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class=\"line\">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class=\"line\">压缩：  不压缩, ZIP, ZLIB, BZIP2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --full-generate-key</span><br></pre></td></tr></table></figure>\n\n<p>需要填写的地方：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123803.png\"></p>\n<h4 id=\"查看密钥完整信息\"><a href=\"#查看密钥完整信息\" class=\"headerlink\" title=\"查看密钥完整信息\"></a>查看密钥完整信息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>secret keys（红圈地方后续用到，留意下）：</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124016.png\"></p>\n<h4 id=\"根据secret-keys生成PGP\"><a href=\"#根据secret-keys生成PGP\" class=\"headerlink\" title=\"根据secret keys生成PGP\"></a>根据secret keys生成PGP</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --armor --export  7BB8CF3593CA174C</span><br></pre></td></tr></table></figure>\n\n<p>生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124305.png\"></p>\n<h4 id=\"Github账号中设置\"><a href=\"#Github账号中设置\" class=\"headerlink\" title=\"Github账号中设置\"></a>Github账号中设置</h4><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124443.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902124527.png\"></p>\n<blockquote>\n<p>将上述生成的PGP填入，点击[Add GPG Key]即可</p>\n</blockquote>\n<h4 id=\"配置本地GPG签名信息\"><a href=\"#配置本地GPG签名信息\" class=\"headerlink\" title=\"配置本地GPG签名信息\"></a>配置本地GPG签名信息</h4><p>依次执行下面命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys</span><br><span class=\"line\">2、git config commit.gpgsign true</span><br><span class=\"line\">3、git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Git-PGP生效\"><a href=\"#Git-PGP生效\" class=\"headerlink\" title=\"Git PGP生效\"></a>Git PGP生效</h4><blockquote>\n<p>再次提交commit即可生效。产生如下图的签名效果：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png\"></p>\n</blockquote>\n<h4 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h4>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png","popularPost_tmp_gaData":{"updated":"Wed Sep 02 2020 22:29:40 GMT+0800 (中国标准时间)","title":"「5」Git GPG签署工作","path":"archives/580377d0.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png","excerpt":"<h3 id=\"GPG场景\"><a href=\"#GPG场景\" class=\"headerlink\" title=\"GPG场景\"></a>GPG场景</h3><p> Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n<p> 最终效果：如下图所示</p>\n<p> <img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902123343.png\"></p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h3><p>windows安装地址： <a href=\"https://www.gnupg.org/\">点击下载</a></p>\n<p>mac os为例：</p>","date":{"_isAMomentObject":true,"_i":"2020-09-02T14:29:40.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-02T14:29:40.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1145},{"title":"「6」git 初阶:安装配置 ～1","date":"2020-09-02T14:38:44.000Z","updated":"2020-09-02T14:38:44.000Z","keywords":"git,git使用,git常用","abbrlink":"bddc30f6","_content":"\n\n>自盘古开天辟地～～～～\n>扯远了......\n>完整的分享下Git的使用和学习的知识点，之前章节中的[Git常用技巧](http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/)是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。\n\n\n## 前景\n\nSVN估计是家喻户晓了，一直被用作`'版本管理'`和`代码仓库`。（ps:不算是完整的`版本管理`.）\nGit的出现，是linus之父休假时产出的“作品”,`版本管理` & `代码仓库`的作用。总而言之，用熟练Git了，就再也回不去了。\n<!-- more -->\n\n## 掌握\b目标：\n\n>最终可以顺利的提交代码即可。\n\n## 此篇只分享两个知识点：\n\n>安装Git和Git基本配置\n\n### Git安装\n\n说安装其实就是去官网下载软件，安装到你选定地方即可。\n\n在此附上官网的下载链接： [点击进入](https://git-scm.com/download/)\n\n选择对应平台windows?linux?macos?  \n\nps:别选错了，那就very尴尬了。\n\n### 基本配置\n\n说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。\n\n#### 前期基本配置\n主要分三个地方：\n```\n1、/etc/gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。\n2、~/.gitconfig 或 ~/.config/git/config 文件： 只针对当前用户生效。 [global配置]\n3、当前使用仓库的Git配置： .git/config文件，仅仅对当前仓库配置生效。    [local配置]\n```\n\n\n>ps: 优先机制：3 > 2 > 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]\n\n##### 注意：\n```\nwindows下的~/.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称\n```\n\n##### 查看所有配置命令\n```\ngit config --list --show-origin\n```\n\n#### 生成密钥&关联Github/Gitlab\n\n##### 生成密钥\n>根据邮箱，会要求输入密码，连续3个回车即可。\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到id_rsa和id_rsa.pub两个文件。\n\n这里用到的是你的 公钥`id_rsa.pub`文件，复制文件里面的内容到github密钥的界面：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902075825.png)\n\n添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。\n\n##### 拓展\n>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902080130.png)\n\n#### global配置（全局配置）或 local配置（当前仓库配置）\n\n##### global配置（针对你只有一个git账户的情况）\n```\n查看命令：\ngit config --global --list\n\n全局配置：\n\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --global https.proxy http://127.0.0.1:1080 \n# sock\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --global --unset http.proxy\n```\n\n##### local配置 (建议本地仓库配置，这样比较灵活)\n\n```\n查看命令：\ngit config --local --list\n\n全局配置：\n\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --local https.proxy http://127.0.0.1:1080 \n# sock\ngit config --local http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --local --unset http.proxy\n```\n\n#### 配置完成，clone/commit代码\n\n##### clone仓库代码\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902081306.png)\n\n```\ngit clone https://github.com/crab21/blog.git\n```\n##### commit代码\n>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。\n\n### END","source":"_posts/6-git 初阶:安装配置 ～1.md","raw":"---\ntitle: '「6」git 初阶:安装配置 ～1'\ndate: '2020/09/02 22:38:44'\nupdated: '2020/09/02 22:38:44'\nkeywords: 'git,git使用,git常用'\ntags:\n  - Git\nabbrlink: bddc30f6\n---\n\n\n>自盘古开天辟地～～～～\n>扯远了......\n>完整的分享下Git的使用和学习的知识点，之前章节中的[Git常用技巧](http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/)是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。\n\n\n## 前景\n\nSVN估计是家喻户晓了，一直被用作`'版本管理'`和`代码仓库`。（ps:不算是完整的`版本管理`.）\nGit的出现，是linus之父休假时产出的“作品”,`版本管理` & `代码仓库`的作用。总而言之，用熟练Git了，就再也回不去了。\n<!-- more -->\n\n## 掌握\b目标：\n\n>最终可以顺利的提交代码即可。\n\n## 此篇只分享两个知识点：\n\n>安装Git和Git基本配置\n\n### Git安装\n\n说安装其实就是去官网下载软件，安装到你选定地方即可。\n\n在此附上官网的下载链接： [点击进入](https://git-scm.com/download/)\n\n选择对应平台windows?linux?macos?  \n\nps:别选错了，那就very尴尬了。\n\n### 基本配置\n\n说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。\n\n#### 前期基本配置\n主要分三个地方：\n```\n1、/etc/gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。\n2、~/.gitconfig 或 ~/.config/git/config 文件： 只针对当前用户生效。 [global配置]\n3、当前使用仓库的Git配置： .git/config文件，仅仅对当前仓库配置生效。    [local配置]\n```\n\n\n>ps: 优先机制：3 > 2 > 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]\n\n##### 注意：\n```\nwindows下的~/.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称\n```\n\n##### 查看所有配置命令\n```\ngit config --list --show-origin\n```\n\n#### 生成密钥&关联Github/Gitlab\n\n##### 生成密钥\n>根据邮箱，会要求输入密码，连续3个回车即可。\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到id_rsa和id_rsa.pub两个文件。\n\n这里用到的是你的 公钥`id_rsa.pub`文件，复制文件里面的内容到github密钥的界面：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902075825.png)\n\n添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。\n\n##### 拓展\n>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902080130.png)\n\n#### global配置（全局配置）或 local配置（当前仓库配置）\n\n##### global配置（针对你只有一个git账户的情况）\n```\n查看命令：\ngit config --global --list\n\n全局配置：\n\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --global https.proxy http://127.0.0.1:1080 \n# sock\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --global --unset http.proxy\n```\n\n##### local配置 (建议本地仓库配置，这样比较灵活)\n\n```\n查看命令：\ngit config --local --list\n\n全局配置：\n\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --local https.proxy http://127.0.0.1:1080 \n# sock\ngit config --local http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --local --unset http.proxy\n```\n\n#### 配置完成，clone/commit代码\n\n##### clone仓库代码\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200902081306.png)\n\n```\ngit clone https://github.com/crab21/blog.git\n```\n##### commit代码\n>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。\n\n### END","slug":"6-git 初阶:安装配置 ～1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvl0000zhyi7dc49c7km","content":"<blockquote>\n<p>自盘古开天辟地～～～～<br>扯远了……<br>完整的分享下Git的使用和学习的知识点，之前章节中的<a href=\"http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/\">Git常用技巧</a>是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。</p>\n</blockquote>\n<h2 id=\"前景\"><a href=\"#前景\" class=\"headerlink\" title=\"前景\"></a>前景</h2><p>SVN估计是家喻户晓了，一直被用作<code>&#39;版本管理&#39;</code>和<code>代码仓库</code>。（ps:不算是完整的<code>版本管理</code>.）<br>Git的出现，是linus之父休假时产出的“作品”,<code>版本管理</code> &amp; <code>代码仓库</code>的作用。总而言之，用熟练Git了，就再也回不去了。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"掌握目标：\"><a href=\"#掌握目标：\" class=\"headerlink\" title=\"掌握\b目标：\"></a>掌握\b目标：</h2><blockquote>\n<p>最终可以顺利的提交代码即可。</p>\n</blockquote>\n<h2 id=\"此篇只分享两个知识点：\"><a href=\"#此篇只分享两个知识点：\" class=\"headerlink\" title=\"此篇只分享两个知识点：\"></a>此篇只分享两个知识点：</h2><blockquote>\n<p>安装Git和Git基本配置</p>\n</blockquote>\n<h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>说安装其实就是去官网下载软件，安装到你选定地方即可。</p>\n<p>在此附上官网的下载链接： <a href=\"https://git-scm.com/download/\">点击进入</a></p>\n<p>选择对应平台windows?linux?macos?  </p>\n<p>ps:别选错了，那就very尴尬了。</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。</p>\n<h4 id=\"前期基本配置\"><a href=\"#前期基本配置\" class=\"headerlink\" title=\"前期基本配置\"></a>前期基本配置</h4><p>主要分三个地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、&#x2F;etc&#x2F;gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。</span><br><span class=\"line\">2、~&#x2F;.gitconfig 或 ~&#x2F;.config&#x2F;git&#x2F;config 文件： 只针对当前用户生效。 [global配置]</span><br><span class=\"line\">3、当前使用仓库的Git配置： .git&#x2F;config文件，仅仅对当前仓库配置生效。    [local配置]</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>ps: 优先机制：3 &gt; 2 &gt; 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]</p>\n</blockquote>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows下的~&#x2F;.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看所有配置命令\"><a href=\"#查看所有配置命令\" class=\"headerlink\" title=\"查看所有配置命令\"></a>查看所有配置命令</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --show-origin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成密钥-amp-关联Github-Gitlab\"><a href=\"#生成密钥-amp-关联Github-Gitlab\" class=\"headerlink\" title=\"生成密钥&amp;关联Github/Gitlab\"></a>生成密钥&amp;关联Github/Gitlab</h4><h5 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h5><blockquote>\n<p>根据邮箱，会要求输入密码，连续3个回车即可。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>最后得到id_rsa和id_rsa.pub两个文件。</p>\n<p>这里用到的是你的 公钥<code>id_rsa.pub</code>文件，复制文件里面的内容到github密钥的界面：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902075825.png\"></p>\n<p>添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。</p>\n<h5 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h5><blockquote>\n<p>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902080130.png\"></p>\n<h4 id=\"global配置（全局配置）或-local配置（当前仓库配置）\"><a href=\"#global配置（全局配置）或-local配置（当前仓库配置）\" class=\"headerlink\" title=\"global配置（全局配置）或 local配置（当前仓库配置）\"></a>global配置（全局配置）或 local配置（当前仓库配置）</h4><h5 id=\"global配置（针对你只有一个git账户的情况）\"><a href=\"#global配置（针对你只有一个git账户的情况）\" class=\"headerlink\" title=\"global配置（针对你只有一个git账户的情况）\"></a>global配置（针对你只有一个git账户的情况）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"local配置-建议本地仓库配置，这样比较灵活\"><a href=\"#local配置-建议本地仓库配置，这样比较灵活\" class=\"headerlink\" title=\"local配置 (建议本地仓库配置，这样比较灵活)\"></a>local配置 (建议本地仓库配置，这样比较灵活)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --local --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --local https.proxy http:&#x2F;&#x2F;127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --local http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --local --unset http.proxy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置完成，clone-commit代码\"><a href=\"#配置完成，clone-commit代码\" class=\"headerlink\" title=\"配置完成，clone/commit代码\"></a>配置完成，clone/commit代码</h4><h5 id=\"clone仓库代码\"><a href=\"#clone仓库代码\" class=\"headerlink\" title=\"clone仓库代码\"></a>clone仓库代码</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902081306.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;crab21&#x2F;blog.git</span><br></pre></td></tr></table></figure>\n<h5 id=\"commit代码\"><a href=\"#commit代码\" class=\"headerlink\" title=\"commit代码\"></a>commit代码</h5><blockquote>\n<p>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。</p>\n</blockquote>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<blockquote>\n<p>自盘古开天辟地～～～～<br>扯远了……<br>完整的分享下Git的使用和学习的知识点，之前章节中的<a href=\"http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/\">Git常用技巧</a>是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。</p>\n</blockquote>\n<h2 id=\"前景\"><a href=\"#前景\" class=\"headerlink\" title=\"前景\"></a>前景</h2><p>SVN估计是家喻户晓了，一直被用作<code>&#39;版本管理&#39;</code>和<code>代码仓库</code>。（ps:不算是完整的<code>版本管理</code>.）<br>Git的出现，是linus之父休假时产出的“作品”,<code>版本管理</code> &amp; <code>代码仓库</code>的作用。总而言之，用熟练Git了，就再也回不去了。</p>","more":"<h2 id=\"掌握目标：\"><a href=\"#掌握目标：\" class=\"headerlink\" title=\"掌握\b目标：\"></a>掌握\b目标：</h2><blockquote>\n<p>最终可以顺利的提交代码即可。</p>\n</blockquote>\n<h2 id=\"此篇只分享两个知识点：\"><a href=\"#此篇只分享两个知识点：\" class=\"headerlink\" title=\"此篇只分享两个知识点：\"></a>此篇只分享两个知识点：</h2><blockquote>\n<p>安装Git和Git基本配置</p>\n</blockquote>\n<h3 id=\"Git安装\"><a href=\"#Git安装\" class=\"headerlink\" title=\"Git安装\"></a>Git安装</h3><p>说安装其实就是去官网下载软件，安装到你选定地方即可。</p>\n<p>在此附上官网的下载链接： <a href=\"https://git-scm.com/download/\">点击进入</a></p>\n<p>选择对应平台windows?linux?macos?  </p>\n<p>ps:别选错了，那就very尴尬了。</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。</p>\n<h4 id=\"前期基本配置\"><a href=\"#前期基本配置\" class=\"headerlink\" title=\"前期基本配置\"></a>前期基本配置</h4><p>主要分三个地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、&#x2F;etc&#x2F;gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。</span><br><span class=\"line\">2、~&#x2F;.gitconfig 或 ~&#x2F;.config&#x2F;git&#x2F;config 文件： 只针对当前用户生效。 [global配置]</span><br><span class=\"line\">3、当前使用仓库的Git配置： .git&#x2F;config文件，仅仅对当前仓库配置生效。    [local配置]</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>ps: 优先机制：3 &gt; 2 &gt; 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]</p>\n</blockquote>\n<h5 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows下的~&#x2F;.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"查看所有配置命令\"><a href=\"#查看所有配置命令\" class=\"headerlink\" title=\"查看所有配置命令\"></a>查看所有配置命令</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --show-origin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"生成密钥-amp-关联Github-Gitlab\"><a href=\"#生成密钥-amp-关联Github-Gitlab\" class=\"headerlink\" title=\"生成密钥&amp;关联Github/Gitlab\"></a>生成密钥&amp;关联Github/Gitlab</h4><h5 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h5><blockquote>\n<p>根据邮箱，会要求输入密码，连续3个回车即可。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>最后得到id_rsa和id_rsa.pub两个文件。</p>\n<p>这里用到的是你的 公钥<code>id_rsa.pub</code>文件，复制文件里面的内容到github密钥的界面：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902075825.png\"></p>\n<p>添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。</p>\n<h5 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h5><blockquote>\n<p>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902080130.png\"></p>\n<h4 id=\"global配置（全局配置）或-local配置（当前仓库配置）\"><a href=\"#global配置（全局配置）或-local配置（当前仓库配置）\" class=\"headerlink\" title=\"global配置（全局配置）或 local配置（当前仓库配置）\"></a>global配置（全局配置）或 local配置（当前仓库配置）</h4><h5 id=\"global配置（针对你只有一个git账户的情况）\"><a href=\"#global配置（针对你只有一个git账户的情况）\" class=\"headerlink\" title=\"global配置（针对你只有一个git账户的情况）\"></a>global配置（针对你只有一个git账户的情况）</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --global https.proxy http:&#x2F;&#x2F;127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"local配置-建议本地仓库配置，这样比较灵活\"><a href=\"#local配置-建议本地仓库配置，这样比较灵活\" class=\"headerlink\" title=\"local配置 (建议本地仓库配置，这样比较灵活)\"></a>local配置 (建议本地仓库配置，这样比较灵活)</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --local --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --local https.proxy http:&#x2F;&#x2F;127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --local http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --local --unset http.proxy</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置完成，clone-commit代码\"><a href=\"#配置完成，clone-commit代码\" class=\"headerlink\" title=\"配置完成，clone/commit代码\"></a>配置完成，clone/commit代码</h4><h5 id=\"clone仓库代码\"><a href=\"#clone仓库代码\" class=\"headerlink\" title=\"clone仓库代码\"></a>clone仓库代码</h5><p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902081306.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;crab21&#x2F;blog.git</span><br></pre></td></tr></table></figure>\n<h5 id=\"commit代码\"><a href=\"#commit代码\" class=\"headerlink\" title=\"commit代码\"></a>commit代码</h5><blockquote>\n<p>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。</p>\n</blockquote>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902075825.png","popularPost_tmp_gaData":{"updated":"Wed Sep 02 2020 22:38:44 GMT+0800 (中国标准时间)","title":"「6」git 初阶:安装配置 ～1","path":"archives/bddc30f6.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200902075825.png","excerpt":"<blockquote>\n<p>自盘古开天辟地～～～～<br>扯远了……<br>完整的分享下Git的使用和学习的知识点，之前章节中的<a href=\"http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/\">Git常用技巧</a>是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。</p>\n</blockquote>\n<h2 id=\"前景\"><a href=\"#前景\" class=\"headerlink\" title=\"前景\"></a>前景</h2><p>SVN估计是家喻户晓了，一直被用作<code>&#39;版本管理&#39;</code>和<code>代码仓库</code>。（ps:不算是完整的<code>版本管理</code>.）<br>Git的出现，是linus之父休假时产出的“作品”,<code>版本管理</code> &amp; <code>代码仓库</code>的作用。总而言之，用熟练Git了，就再也回不去了。</p>","date":{"_isAMomentObject":true,"_i":"2020-09-02T14:38:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-02T14:38:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1963},{"title":"「7」Go Context包使用","date":"2020-09-07T14:21:52.000Z","updated":"2020-09-07T14:21:52.000Z","keywords":"golang,go context包,golang context WithCancel,golang context WithDeadline,go WithTimeout.","abbrlink":"410dfaec","_content":"\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 用Go的都离不开Context，引用官网的一句话来描述Context包：\n\n>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n主要掌握四个方法的使用\n```\nWithCancel\nWithDeadline\nWithTimeout\nWithValue\n```\n### 前期ready\n\n要用下面的方法，先了解下部分结构和逻辑：\n\n>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。\n<!-- more -->\n\n>具体的取消设计结构\n```\ntype cancelCtx struct {\n\tContext\n\n\tmu       sync.Mutex            // protects following fields  加锁用\n\tdone     chan struct{}         // created lazily, closed by first cancel call   控制channel\n\tchildren map[canceler]struct{} // set to nil by the first cancel call  cancel函数调用后，释放子类\n\terr      error                 // set to non-nil by the first cancel call\n}\n```\n\n>timer控制死锁时间结构：\n```\n// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to\n// implement Done and Err. It implements cancel by stopping its timer then\n// delegating to cancelCtx.cancel.\n\ntype timerCtx struct {\n\tcancelCtx  \n\ttimer *time.Timer // Under cancelCtx.mu.\n\n\tdeadline time.Time\n}\n```\n\n### WithCancel\n\n```\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {  //日常判空\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n\tc := newCancelCtx(parent) //cancelCtx new\n\tpropagateCancel(parent, &c)  //循环传播取消函数for ctx\n\treturn &c, func() { c.cancel(true, Canceled) }\n}\n```\n>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路： \nTODO \n\n引用官方的语言：\n```\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\n\n\nWithcancel 返回的是一个parent的镜像/复制，伴随一个Done channel通道。\nDone关闭状态取决于\n1、返回的cancel函数。\n2、parent的Done Channel关闭。\n这两个哪个先符合条件了。\n```\n\n### WithDeadline/WithTimeout\n\n自己梳理的逻辑执行顺序：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200907-152032.png)\n\n```\nDeadline/WithTimeout区别：\n\n* deadline:的入参是一个具体的截止时间：Time.time\n* withTimeout:入参是一个多少时间后超时：Time.Duration\n```\n\n### WithValue\n\n>Withvalue和value是成对出现的:\n\n```\n1、给ctx设置k,v：withvalue(ctx,k,v)\n2、获取ctx中k的值value(ctx,k)\n```\n### TODO\n#### timerCtx详细的设计思路和结构文档\n#### 框架图整理\n\n\n### END","source":"_posts/7-Go-Context包使用.md","raw":"---\ntitle: 「7」Go Context包使用\ndate: '2020/09/07 22:21:52'\nupdated: '2020/09/07 22:21:52'\nkeywords: >-\n  golang,go context包,golang context WithCancel,golang context WithDeadline,go\n  WithTimeout.\ntags:\n  - Go\n  - Go Package\nabbrlink: 410dfaec\n---\n\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 用Go的都离不开Context，引用官网的一句话来描述Context包：\n\n>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n主要掌握四个方法的使用\n```\nWithCancel\nWithDeadline\nWithTimeout\nWithValue\n```\n### 前期ready\n\n要用下面的方法，先了解下部分结构和逻辑：\n\n>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。\n<!-- more -->\n\n>具体的取消设计结构\n```\ntype cancelCtx struct {\n\tContext\n\n\tmu       sync.Mutex            // protects following fields  加锁用\n\tdone     chan struct{}         // created lazily, closed by first cancel call   控制channel\n\tchildren map[canceler]struct{} // set to nil by the first cancel call  cancel函数调用后，释放子类\n\terr      error                 // set to non-nil by the first cancel call\n}\n```\n\n>timer控制死锁时间结构：\n```\n// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to\n// implement Done and Err. It implements cancel by stopping its timer then\n// delegating to cancelCtx.cancel.\n\ntype timerCtx struct {\n\tcancelCtx  \n\ttimer *time.Timer // Under cancelCtx.mu.\n\n\tdeadline time.Time\n}\n```\n\n### WithCancel\n\n```\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {  //日常判空\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n\tc := newCancelCtx(parent) //cancelCtx new\n\tpropagateCancel(parent, &c)  //循环传播取消函数for ctx\n\treturn &c, func() { c.cancel(true, Canceled) }\n}\n```\n>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路： \nTODO \n\n引用官方的语言：\n```\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\n\n\nWithcancel 返回的是一个parent的镜像/复制，伴随一个Done channel通道。\nDone关闭状态取决于\n1、返回的cancel函数。\n2、parent的Done Channel关闭。\n这两个哪个先符合条件了。\n```\n\n### WithDeadline/WithTimeout\n\n自己梳理的逻辑执行顺序：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200907-152032.png)\n\n```\nDeadline/WithTimeout区别：\n\n* deadline:的入参是一个具体的截止时间：Time.time\n* withTimeout:入参是一个多少时间后超时：Time.Duration\n```\n\n### WithValue\n\n>Withvalue和value是成对出现的:\n\n```\n1、给ctx设置k,v：withvalue(ctx,k,v)\n2、获取ctx中k的值value(ctx,k)\n```\n### TODO\n#### timerCtx详细的设计思路和结构文档\n#### 框架图整理\n\n\n### END","slug":"7-Go-Context包使用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvl10012hyi76mdh4sr1","content":"<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"><a href=\"#用Go的都离不开Context，引用官网的一句话来描述Context包：\" class=\"headerlink\" title=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"></a>用Go的都离不开Context，引用官网的一句话来描述Context包：</h3><blockquote>\n<p>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote>\n<p>主要掌握四个方法的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WithCancel</span><br><span class=\"line\">WithDeadline</span><br><span class=\"line\">WithTimeout</span><br><span class=\"line\">WithValue</span><br></pre></td></tr></table></figure>\n<h3 id=\"前期ready\"><a href=\"#前期ready\" class=\"headerlink\" title=\"前期ready\"></a>前期ready</h3><p>要用下面的方法，先了解下部分结构和逻辑：</p>\n<blockquote>\n<p>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>具体的取消设计结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type cancelCtx struct &#123;</span><br><span class=\"line\">\tContext</span><br><span class=\"line\"></span><br><span class=\"line\">\tmu       sync.Mutex            &#x2F;&#x2F; protects following fields  加锁用</span><br><span class=\"line\">\tdone     chan struct&#123;&#125;         &#x2F;&#x2F; created lazily, closed by first cancel call   控制channel</span><br><span class=\"line\">\tchildren map[canceler]struct&#123;&#125; &#x2F;&#x2F; set to nil by the first cancel call  cancel函数调用后，释放子类</span><br><span class=\"line\">\terr      error                 &#x2F;&#x2F; set to non-nil by the first cancel call</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>timer控制死锁时间结构：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span><br><span class=\"line\">&#x2F;&#x2F; implement Done and Err. It implements cancel by stopping its timer then</span><br><span class=\"line\">&#x2F;&#x2F; delegating to cancelCtx.cancel.</span><br><span class=\"line\"></span><br><span class=\"line\">type timerCtx struct &#123;</span><br><span class=\"line\">\tcancelCtx  </span><br><span class=\"line\">\ttimer *time.Timer &#x2F;&#x2F; Under cancelCtx.mu.</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeadline time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WithCancel\"><a href=\"#WithCancel\" class=\"headerlink\" title=\"WithCancel\"></a>WithCancel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc) &#123;</span><br><span class=\"line\">    if parent &#x3D;&#x3D; nil &#123;  &#x2F;&#x2F;日常判空</span><br><span class=\"line\">\t\tpanic(&quot;cannot create context from nil parent&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc :&#x3D; newCancelCtx(parent) &#x2F;&#x2F;cancelCtx new</span><br><span class=\"line\">\tpropagateCancel(parent, &amp;c)  &#x2F;&#x2F;循环传播取消函数for ctx</span><br><span class=\"line\">\treturn &amp;c, func() &#123; c.cancel(true, Canceled) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路：<br>TODO </p>\n</blockquote>\n<p>引用官方的语言：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; WithCancel returns a copy of parent with a new Done channel. The returned</span><br><span class=\"line\">&#x2F;&#x2F; context&#39;s Done channel is closed when the returned cancel function is called</span><br><span class=\"line\">&#x2F;&#x2F; or when the parent context&#39;s Done channel is closed, whichever happens first.</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; Canceling this context releases resources associated with it, so code should</span><br><span class=\"line\">&#x2F;&#x2F; call cancel as soon as the operations running in this Context complete.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Withcancel 返回的是一个parent的镜像&#x2F;复制，伴随一个Done channel通道。</span><br><span class=\"line\">Done关闭状态取决于</span><br><span class=\"line\">1、返回的cancel函数。</span><br><span class=\"line\">2、parent的Done Channel关闭。</span><br><span class=\"line\">这两个哪个先符合条件了。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WithDeadline-WithTimeout\"><a href=\"#WithDeadline-WithTimeout\" class=\"headerlink\" title=\"WithDeadline/WithTimeout\"></a>WithDeadline/WithTimeout</h3><p>自己梳理的逻辑执行顺序：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200907-152032.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deadline&#x2F;WithTimeout区别：</span><br><span class=\"line\"></span><br><span class=\"line\">* deadline:的入参是一个具体的截止时间：Time.time</span><br><span class=\"line\">* withTimeout:入参是一个多少时间后超时：Time.Duration</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WithValue\"><a href=\"#WithValue\" class=\"headerlink\" title=\"WithValue\"></a>WithValue</h3><blockquote>\n<p>Withvalue和value是成对出现的:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、给ctx设置k,v：withvalue(ctx,k,v)</span><br><span class=\"line\">2、获取ctx中k的值value(ctx,k)</span><br></pre></td></tr></table></figure>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><h4 id=\"timerCtx详细的设计思路和结构文档\"><a href=\"#timerCtx详细的设计思路和结构文档\" class=\"headerlink\" title=\"timerCtx详细的设计思路和结构文档\"></a>timerCtx详细的设计思路和结构文档</h4><h4 id=\"框架图整理\"><a href=\"#框架图整理\" class=\"headerlink\" title=\"框架图整理\"></a>框架图整理</h4><h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"><a href=\"#用Go的都离不开Context，引用官网的一句话来描述Context包：\" class=\"headerlink\" title=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"></a>用Go的都离不开Context，引用官网的一句话来描述Context包：</h3><blockquote>\n<p>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote>\n<p>主要掌握四个方法的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WithCancel</span><br><span class=\"line\">WithDeadline</span><br><span class=\"line\">WithTimeout</span><br><span class=\"line\">WithValue</span><br></pre></td></tr></table></figure>\n<h3 id=\"前期ready\"><a href=\"#前期ready\" class=\"headerlink\" title=\"前期ready\"></a>前期ready</h3><p>要用下面的方法，先了解下部分结构和逻辑：</p>\n<blockquote>\n<p>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。</p>\n</blockquote>","more":"<blockquote>\n<p>具体的取消设计结构</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type cancelCtx struct &#123;</span><br><span class=\"line\">\tContext</span><br><span class=\"line\"></span><br><span class=\"line\">\tmu       sync.Mutex            &#x2F;&#x2F; protects following fields  加锁用</span><br><span class=\"line\">\tdone     chan struct&#123;&#125;         &#x2F;&#x2F; created lazily, closed by first cancel call   控制channel</span><br><span class=\"line\">\tchildren map[canceler]struct&#123;&#125; &#x2F;&#x2F; set to nil by the first cancel call  cancel函数调用后，释放子类</span><br><span class=\"line\">\terr      error                 &#x2F;&#x2F; set to non-nil by the first cancel call</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>timer控制死锁时间结构：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span><br><span class=\"line\">&#x2F;&#x2F; implement Done and Err. It implements cancel by stopping its timer then</span><br><span class=\"line\">&#x2F;&#x2F; delegating to cancelCtx.cancel.</span><br><span class=\"line\"></span><br><span class=\"line\">type timerCtx struct &#123;</span><br><span class=\"line\">\tcancelCtx  </span><br><span class=\"line\">\ttimer *time.Timer &#x2F;&#x2F; Under cancelCtx.mu.</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeadline time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WithCancel\"><a href=\"#WithCancel\" class=\"headerlink\" title=\"WithCancel\"></a>WithCancel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc) &#123;</span><br><span class=\"line\">    if parent &#x3D;&#x3D; nil &#123;  &#x2F;&#x2F;日常判空</span><br><span class=\"line\">\t\tpanic(&quot;cannot create context from nil parent&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc :&#x3D; newCancelCtx(parent) &#x2F;&#x2F;cancelCtx new</span><br><span class=\"line\">\tpropagateCancel(parent, &amp;c)  &#x2F;&#x2F;循环传播取消函数for ctx</span><br><span class=\"line\">\treturn &amp;c, func() &#123; c.cancel(true, Canceled) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路：<br>TODO </p>\n</blockquote>\n<p>引用官方的语言：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; WithCancel returns a copy of parent with a new Done channel. The returned</span><br><span class=\"line\">&#x2F;&#x2F; context&#39;s Done channel is closed when the returned cancel function is called</span><br><span class=\"line\">&#x2F;&#x2F; or when the parent context&#39;s Done channel is closed, whichever happens first.</span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; Canceling this context releases resources associated with it, so code should</span><br><span class=\"line\">&#x2F;&#x2F; call cancel as soon as the operations running in this Context complete.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Withcancel 返回的是一个parent的镜像&#x2F;复制，伴随一个Done channel通道。</span><br><span class=\"line\">Done关闭状态取决于</span><br><span class=\"line\">1、返回的cancel函数。</span><br><span class=\"line\">2、parent的Done Channel关闭。</span><br><span class=\"line\">这两个哪个先符合条件了。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WithDeadline-WithTimeout\"><a href=\"#WithDeadline-WithTimeout\" class=\"headerlink\" title=\"WithDeadline/WithTimeout\"></a>WithDeadline/WithTimeout</h3><p>自己梳理的逻辑执行顺序：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200907-152032.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deadline&#x2F;WithTimeout区别：</span><br><span class=\"line\"></span><br><span class=\"line\">* deadline:的入参是一个具体的截止时间：Time.time</span><br><span class=\"line\">* withTimeout:入参是一个多少时间后超时：Time.Duration</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"WithValue\"><a href=\"#WithValue\" class=\"headerlink\" title=\"WithValue\"></a>WithValue</h3><blockquote>\n<p>Withvalue和value是成对出现的:</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、给ctx设置k,v：withvalue(ctx,k,v)</span><br><span class=\"line\">2、获取ctx中k的值value(ctx,k)</span><br></pre></td></tr></table></figure>\n<h3 id=\"TODO\"><a href=\"#TODO\" class=\"headerlink\" title=\"TODO\"></a>TODO</h3><h4 id=\"timerCtx详细的设计思路和结构文档\"><a href=\"#timerCtx详细的设计思路和结构文档\" class=\"headerlink\" title=\"timerCtx详细的设计思路和结构文档\"></a>timerCtx详细的设计思路和结构文档</h4><h4 id=\"框架图整理\"><a href=\"#框架图整理\" class=\"headerlink\" title=\"框架图整理\"></a>框架图整理</h4><h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200907-152032.png","popularPost_tmp_gaData":{"updated":"Mon Sep 07 2020 22:21:52 GMT+0800 (中国标准时间)","title":"「7」Go Context包使用","path":"archives/410dfaec.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200907-152032.png","excerpt":"<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"><a href=\"#用Go的都离不开Context，引用官网的一句话来描述Context包：\" class=\"headerlink\" title=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"></a>用Go的都离不开Context，引用官网的一句话来描述Context包：</h3><blockquote>\n<p>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote>\n<p>主要掌握四个方法的使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WithCancel</span><br><span class=\"line\">WithDeadline</span><br><span class=\"line\">WithTimeout</span><br><span class=\"line\">WithValue</span><br></pre></td></tr></table></figure>\n<h3 id=\"前期ready\"><a href=\"#前期ready\" class=\"headerlink\" title=\"前期ready\"></a>前期ready</h3><p>要用下面的方法，先了解下部分结构和逻辑：</p>\n<blockquote>\n<p>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-09-07T14:21:52.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-07T14:21:52.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go Package"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2177},{"title":"「9」Go reflect ~ DeepEqual","date":"2020-09-18T04:35:03.000Z","updated":"2020-09-20T08:16:52.000Z","abbrlink":"e2e7cc4e","_content":"\n今天无意中看到Go101发了一个推特:\n``` go\npackage main\n\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc p(a, b interface{}) {\n  fmt.Print(\":\", reflect.DeepEqual(a, b))\n}\n\nfunc main() {\n  a := [1]func(){func(){}}\n  p(a, a)\n  p(a[:], a[:])\n  b := a\n  p(a[:], b[:])\n}\n```\n\n>输出结果？？ :true:true:false\n\n<!-- more -->\n\n>正确答案 :false:true:false\n\n### 错误来源\n\n```\n第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).\n第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。\n第三个虽然是重新初始化了，所以两个肯定不是deep相等的。\n```\n\n### 思路比对（错在哪里）\n\n查阅文档之后，发现理解错了：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200918-124746.png)\n\n\n\n### DeepEqual正确理解\n>源码也很简洁：\n\n```go\nfunc DeepEqual(x, y interface{}) bool {\n  //同nil\n\tif x == nil || y == nil {\n\t\treturn x == y\n\t}\n\tv1 := ValueOf(x)\n  v2 := ValueOf(y)\n  //属于同一类型\n\tif v1.Type() != v2.Type() {\n\t\treturn false\n\t}\n\treturn deepValueEqual(v1, v2, make(map[visit]bool), 0)\n}\n```\n\n除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：\n\n```go\n// DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.\n// Two values of identical type are deeply equal if one of the following cases applies.\n// Values of distinct types are never deeply equal.\n//  条件：数组深度相等，相应的元素都是相等的。\n// Array values are deeply equal when their corresponding elements are deeply equal.\n//  条件：结构体相对应的字段都是相等的。\n// Struct values are deeply equal if their corresponding fields,\n// both exported and unexported, are deeply equal.\n// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。\n// Func values are deeply equal if both are nil; otherwise they are not deeply equal.\n// \n// 条件：两个interface持有深度相同的值。\n// Interface values are deeply equal if they hold deeply equal concrete values.\n//\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度并且有相同的对象/key对应的值是相等的。\n// Map values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they are the same map object or their corresponding keys\n// (matched using Go equality) map to deeply equal values.\n    条件：用 == 比较或者 point的\n// Pointer values are deeply equal if they are equal using Go's == operator\n// or if they point to deeply equal values.\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。\n    注意：empty和nil slice不是深度相等的。\n// Slice values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they point to the same initial entry of the same underlying array\n// (that is, &x[0] == &y[0]) or their corresponding elements (up to length) are deeply equal.\n// Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))\n// are not deeply equal.\n//\n// Other values - numbers, bools, strings, and channels - are deeply equal\n// if they are equal using Go's == operator.\n//\n// In general DeepEqual is a recursive relaxation of Go's == operator.\n// However, this idea is impossible to implement without some inconsistency.\n// Specifically, it is possible for a value to be unequal to itself,\n// either because it is of func type (uncomparable in general)\n// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),\n// or because it is an array, struct, or interface containing\n// such a value.\n// On the other hand, pointer values are always equal to themselves,\n// even if they point at or contain such problematic values,\n// because they compare equal using Go's == operator, and that\n// is a sufficient condition to be deeply equal, regardless of content.\n// DeepEqual has been defined so that the same short-cut applies\n// to slices and maps: if x and y are the same slice or the same map,\n// they are deeply equal regardless of content.\n//\n// As DeepEqual traverses the data values it may find a cycle. The\n// second and subsequent times that DeepEqual compares two pointer\n// values that have been compared before, it treats the values as\n// equal rather than examining the values to which they point.\n// This ensures that DeepEqual terminates.\n```\n\n再看看详细的deepValueEqual,大致的过程：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200920-103516@2x.png)\n\n\n>大致分为三个过程：\n```\n1、判断类型和值\n2、hard回调\n3、按照kind分类处理\n```\n\n#### 数组：\n比较每一个元素\n```go\n    for i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n#### Slice\n* 比较为nil\n* 比较长度\n* 比较地址\n* 比较每一个元素\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Interface\n* 比较nil\n* 递归比较\n```go\n    if v1.IsNil() || v2.IsNil() {\n\t\t\treturn v1.IsNil() == v2.IsNil()\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n#### Ptr\n* 地址\n* 递归比较\n```go\n    if v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n\n#### struct\n* 比较每一个元素\n```go\n    for i, n := 0, v1.NumField(); i < n; i++ {\n\t\t\tif !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Map\n* 比较Nil\n* 比较长度\n* 地址比较\n* 每一个key对应的value\n\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor _, k := range v1.MapKeys() {\n\t\t\tval1 := v1.MapIndex(k)\n\t\t\tval2 := v2.MapIndex(k)\n\t\t\tif !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Func\n* 非nil，为不等。\n```go\n    if v1.IsNil() && v2.IsNil() {\n\t\t\treturn true\n\t\t}\n\t\t// Can't do better than this:\n\t\treturn false\n```\n\n### painc注意点：\n deepValueEqual函数：\n```go\n  .....\n  ....\n  ...\n  ..\n  .\n  递归次数超过10次则会painc....\n  // if depth > 10 { panic(\"deepValueEqual\") }\t// for debugging\n\n\t// We want to avoid putting more in the visited map than we need to.\n\t// For any possible reference cycle that might be encountered,\n\t// hard(v1, v2) needs to return true for at least one of the types in the cycle,\n\t// and it's safe and valid to get Value's internal pointer.\n\thard := func(v1, v2 Value) bool {\n\t\tswitch v1.Kind() {\n\t\tcase Map, Slice, Ptr, Interface:\n\t\t\t// Nil pointers cannot be cyclic. Avoid putting them in the visited map.\n\t\t\treturn !v1.IsNil() && !v2.IsNil()\n\t\t}\n\t\treturn false\n  }\n  .\n  ..\n  ...\n  ....\n  .....\n  ......\n```\n### END","source":"_posts/9-Go-reflect-DeepEqual.md","raw":"---\ntitle: 「9」Go reflect ~ DeepEqual\ndate: '2020/09/18 12:35:03'\nupdated: '2020/09/20 16:16:52'\ntags:\n  - Go\n  - Go reflect\n  - Go Package\n  - Day\nabbrlink: e2e7cc4e\n---\n\n今天无意中看到Go101发了一个推特:\n``` go\npackage main\n\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc p(a, b interface{}) {\n  fmt.Print(\":\", reflect.DeepEqual(a, b))\n}\n\nfunc main() {\n  a := [1]func(){func(){}}\n  p(a, a)\n  p(a[:], a[:])\n  b := a\n  p(a[:], b[:])\n}\n```\n\n>输出结果？？ :true:true:false\n\n<!-- more -->\n\n>正确答案 :false:true:false\n\n### 错误来源\n\n```\n第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).\n第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。\n第三个虽然是重新初始化了，所以两个肯定不是deep相等的。\n```\n\n### 思路比对（错在哪里）\n\n查阅文档之后，发现理解错了：\n\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200918-124746.png)\n\n\n\n### DeepEqual正确理解\n>源码也很简洁：\n\n```go\nfunc DeepEqual(x, y interface{}) bool {\n  //同nil\n\tif x == nil || y == nil {\n\t\treturn x == y\n\t}\n\tv1 := ValueOf(x)\n  v2 := ValueOf(y)\n  //属于同一类型\n\tif v1.Type() != v2.Type() {\n\t\treturn false\n\t}\n\treturn deepValueEqual(v1, v2, make(map[visit]bool), 0)\n}\n```\n\n除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：\n\n```go\n// DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.\n// Two values of identical type are deeply equal if one of the following cases applies.\n// Values of distinct types are never deeply equal.\n//  条件：数组深度相等，相应的元素都是相等的。\n// Array values are deeply equal when their corresponding elements are deeply equal.\n//  条件：结构体相对应的字段都是相等的。\n// Struct values are deeply equal if their corresponding fields,\n// both exported and unexported, are deeply equal.\n// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。\n// Func values are deeply equal if both are nil; otherwise they are not deeply equal.\n// \n// 条件：两个interface持有深度相同的值。\n// Interface values are deeply equal if they hold deeply equal concrete values.\n//\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度并且有相同的对象/key对应的值是相等的。\n// Map values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they are the same map object or their corresponding keys\n// (matched using Go equality) map to deeply equal values.\n    条件：用 == 比较或者 point的\n// Pointer values are deeply equal if they are equal using Go's == operator\n// or if they point to deeply equal values.\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。\n    注意：empty和nil slice不是深度相等的。\n// Slice values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they point to the same initial entry of the same underlying array\n// (that is, &x[0] == &y[0]) or their corresponding elements (up to length) are deeply equal.\n// Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))\n// are not deeply equal.\n//\n// Other values - numbers, bools, strings, and channels - are deeply equal\n// if they are equal using Go's == operator.\n//\n// In general DeepEqual is a recursive relaxation of Go's == operator.\n// However, this idea is impossible to implement without some inconsistency.\n// Specifically, it is possible for a value to be unequal to itself,\n// either because it is of func type (uncomparable in general)\n// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),\n// or because it is an array, struct, or interface containing\n// such a value.\n// On the other hand, pointer values are always equal to themselves,\n// even if they point at or contain such problematic values,\n// because they compare equal using Go's == operator, and that\n// is a sufficient condition to be deeply equal, regardless of content.\n// DeepEqual has been defined so that the same short-cut applies\n// to slices and maps: if x and y are the same slice or the same map,\n// they are deeply equal regardless of content.\n//\n// As DeepEqual traverses the data values it may find a cycle. The\n// second and subsequent times that DeepEqual compares two pointer\n// values that have been compared before, it treats the values as\n// equal rather than examining the values to which they point.\n// This ensures that DeepEqual terminates.\n```\n\n再看看详细的deepValueEqual,大致的过程：\n![](https://raw.githubusercontent.com/crab21/Images/master/blog/20200920-103516@2x.png)\n\n\n>大致分为三个过程：\n```\n1、判断类型和值\n2、hard回调\n3、按照kind分类处理\n```\n\n#### 数组：\n比较每一个元素\n```go\n    for i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n#### Slice\n* 比较为nil\n* 比较长度\n* 比较地址\n* 比较每一个元素\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Interface\n* 比较nil\n* 递归比较\n```go\n    if v1.IsNil() || v2.IsNil() {\n\t\t\treturn v1.IsNil() == v2.IsNil()\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n#### Ptr\n* 地址\n* 递归比较\n```go\n    if v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n\n#### struct\n* 比较每一个元素\n```go\n    for i, n := 0, v1.NumField(); i < n; i++ {\n\t\t\tif !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Map\n* 比较Nil\n* 比较长度\n* 地址比较\n* 每一个key对应的value\n\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor _, k := range v1.MapKeys() {\n\t\t\tval1 := v1.MapIndex(k)\n\t\t\tval2 := v2.MapIndex(k)\n\t\t\tif !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Func\n* 非nil，为不等。\n```go\n    if v1.IsNil() && v2.IsNil() {\n\t\t\treturn true\n\t\t}\n\t\t// Can't do better than this:\n\t\treturn false\n```\n\n### painc注意点：\n deepValueEqual函数：\n```go\n  .....\n  ....\n  ...\n  ..\n  .\n  递归次数超过10次则会painc....\n  // if depth > 10 { panic(\"deepValueEqual\") }\t// for debugging\n\n\t// We want to avoid putting more in the visited map than we need to.\n\t// For any possible reference cycle that might be encountered,\n\t// hard(v1, v2) needs to return true for at least one of the types in the cycle,\n\t// and it's safe and valid to get Value's internal pointer.\n\thard := func(v1, v2 Value) bool {\n\t\tswitch v1.Kind() {\n\t\tcase Map, Slice, Ptr, Interface:\n\t\t\t// Nil pointers cannot be cyclic. Avoid putting them in the visited map.\n\t\t\treturn !v1.IsNil() && !v2.IsNil()\n\t\t}\n\t\treturn false\n  }\n  .\n  ..\n  ...\n  ....\n  .....\n  ......\n```\n### END","slug":"9-Go-reflect-DeepEqual","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvl20014hyi70j8v4fz2","content":"<p>今天无意中看到Go101发了一个推特:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">p</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">&quot;:&quot;</span>, reflect.DeepEqual(a, b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">1</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;&#125;&#125;</span><br><span class=\"line\">  p(a, a)</span><br><span class=\"line\">  p(a[:], a[:])</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  p(a[:], b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出结果？？ :true:true:false</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>正确答案 :false:true:false</p>\n</blockquote>\n<h3 id=\"错误来源\"><a href=\"#错误来源\" class=\"headerlink\" title=\"错误来源\"></a>错误来源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).</span><br><span class=\"line\">第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。</span><br><span class=\"line\">第三个虽然是重新初始化了，所以两个肯定不是deep相等的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路比对（错在哪里）\"><a href=\"#思路比对（错在哪里）\" class=\"headerlink\" title=\"思路比对（错在哪里）\"></a>思路比对（错在哪里）</h3><p>查阅文档之后，发现理解错了：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200918-124746.png\"></p>\n<h3 id=\"DeepEqual正确理解\"><a href=\"#DeepEqual正确理解\" class=\"headerlink\" title=\"DeepEqual正确理解\"></a>DeepEqual正确理解</h3><blockquote>\n<p>源码也很简洁：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeepEqual</span><span class=\"params\">(x, y <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//同nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"literal\">nil</span> || y == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x == y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv1 := ValueOf(x)</span><br><span class=\"line\">  v2 := ValueOf(y)</span><br><span class=\"line\">  <span class=\"comment\">//属于同一类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v1.Type() != v2.Type() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> deepValueEqual(v1, v2, <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[visit]<span class=\"keyword\">bool</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DeepEqual reports whether x and y are ``deeply equal,&#x27;&#x27; defined as follows.</span></span><br><span class=\"line\"><span class=\"comment\">// Two values of identical type are deeply equal if one of the following cases applies.</span></span><br><span class=\"line\"><span class=\"comment\">// Values of distinct types are never deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：数组深度相等，相应的元素都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Array values are deeply equal when their corresponding elements are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：结构体相对应的字段都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Struct values are deeply equal if their corresponding fields,</span></span><br><span class=\"line\"><span class=\"comment\">// both exported and unexported, are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Func values are deeply equal if both are nil; otherwise they are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// 条件：两个interface持有深度相同的值。</span></span><br><span class=\"line\"><span class=\"comment\">// Interface values are deeply equal if they hold deeply equal concrete values.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度并且有相同的对象/key对应的值是相等的。</span><br><span class=\"line\"><span class=\"comment\">// Map values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they are the same map object or their corresponding keys</span></span><br><span class=\"line\"><span class=\"comment\">// (matched using Go equality) map to deeply equal values.</span></span><br><span class=\"line\">    条件：用 == 比较或者 point的</span><br><span class=\"line\"><span class=\"comment\">// Pointer values are deeply equal if they are equal using Go&#x27;s == operator</span></span><br><span class=\"line\"><span class=\"comment\">// or if they point to deeply equal values.</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。</span><br><span class=\"line\">    注意：empty和<span class=\"literal\">nil</span> slice不是深度相等的。</span><br><span class=\"line\"><span class=\"comment\">// Slice values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they point to the same initial entry of the same underlying array</span></span><br><span class=\"line\"><span class=\"comment\">// (that is, &amp;x[0] == &amp;y[0]) or their corresponding elements (up to length) are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that a non-nil empty slice and a nil slice (for example, []byte&#123;&#125; and []byte(nil))</span></span><br><span class=\"line\"><span class=\"comment\">// are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Other values - numbers, bools, strings, and channels - are deeply equal</span></span><br><span class=\"line\"><span class=\"comment\">// if they are equal using Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In general DeepEqual is a recursive relaxation of Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">// However, this idea is impossible to implement without some inconsistency.</span></span><br><span class=\"line\"><span class=\"comment\">// Specifically, it is possible for a value to be unequal to itself,</span></span><br><span class=\"line\"><span class=\"comment\">// either because it is of func type (uncomparable in general)</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is an array, struct, or interface containing</span></span><br><span class=\"line\"><span class=\"comment\">// such a value.</span></span><br><span class=\"line\"><span class=\"comment\">// On the other hand, pointer values are always equal to themselves,</span></span><br><span class=\"line\"><span class=\"comment\">// even if they point at or contain such problematic values,</span></span><br><span class=\"line\"><span class=\"comment\">// because they compare equal using Go&#x27;s == operator, and that</span></span><br><span class=\"line\"><span class=\"comment\">// is a sufficient condition to be deeply equal, regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">// DeepEqual has been defined so that the same short-cut applies</span></span><br><span class=\"line\"><span class=\"comment\">// to slices and maps: if x and y are the same slice or the same map,</span></span><br><span class=\"line\"><span class=\"comment\">// they are deeply equal regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// As DeepEqual traverses the data values it may find a cycle. The</span></span><br><span class=\"line\"><span class=\"comment\">// second and subsequent times that DeepEqual compares two pointer</span></span><br><span class=\"line\"><span class=\"comment\">// values that have been compared before, it treats the values as</span></span><br><span class=\"line\"><span class=\"comment\">// equal rather than examining the values to which they point.</span></span><br><span class=\"line\"><span class=\"comment\">// This ensures that DeepEqual terminates.</span></span><br></pre></td></tr></table></figure>\n\n<p>再看看详细的deepValueEqual,大致的过程：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200920-103516@2x.png\"></p>\n<blockquote>\n<p>大致分为三个过程：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、判断类型和值</span><br><span class=\"line\">2、hard回调</span><br><span class=\"line\">3、按照kind分类处理</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h4><p>比较每一个元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Slice\"><a href=\"#Slice\" class=\"headerlink\" title=\"Slice\"></a>Slice</h4><ul>\n<li>比较为nil</li>\n<li>比较长度</li>\n<li>比较地址</li>\n<li>比较每一个元素<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h4><ul>\n<li>比较nil</li>\n<li>递归比较<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() || v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.IsNil() == v2.IsNil()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ptr\"><a href=\"#Ptr\" class=\"headerlink\" title=\"Ptr\"></a>Ptr</h4></li>\n<li>地址</li>\n<li>递归比较<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"struct\"><a href=\"#struct\" class=\"headerlink\" title=\"struct\"></a>struct</h4><ul>\n<li>比较每一个元素<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i, n := <span class=\"number\">0</span>, v1.NumField(); i &lt; n; i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><ul>\n<li>比较Nil</li>\n<li>比较长度</li>\n<li>地址比较</li>\n<li>每一个key对应的value</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, k := <span class=\"keyword\">range</span> v1.MapKeys() &#123;</span><br><span class=\"line\">\tval1 := v1.MapIndex(k)</span><br><span class=\"line\">\tval2 := v2.MapIndex(k)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Func\"><a href=\"#Func\" class=\"headerlink\" title=\"Func\"></a>Func</h4><ul>\n<li>非nil，为不等。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() &amp;&amp; v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Can&#x27;t do better than this:</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"painc注意点：\"><a href=\"#painc注意点：\" class=\"headerlink\" title=\"painc注意点：\"></a>painc注意点：</h3><p> deepValueEqual函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .....</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> .</span><br><span class=\"line\"> 递归次数超过<span class=\"number\">10</span>次则会painc....</span><br><span class=\"line\"> <span class=\"comment\">// if depth &gt; 10 &#123; panic(&quot;deepValueEqual&quot;) &#125;\t// for debugging</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We want to avoid putting more in the visited map than we need to.</span></span><br><span class=\"line\"><span class=\"comment\">// For any possible reference cycle that might be encountered,</span></span><br><span class=\"line\"><span class=\"comment\">// hard(v1, v2) needs to return true for at least one of the types in the cycle,</span></span><br><span class=\"line\"><span class=\"comment\">// and it&#x27;s safe and valid to get Value&#x27;s internal pointer.</span></span><br><span class=\"line\">hard := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(v1, v2 Value)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v1.Kind() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Map, Slice, Ptr, Interface:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Nil pointers cannot be cyclic. Avoid putting them in the visited map.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !v1.IsNil() &amp;&amp; !v2.IsNil()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> .....</span><br><span class=\"line\"> ......</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<p>今天无意中看到Go101发了一个推特:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">p</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">&quot;:&quot;</span>, reflect.DeepEqual(a, b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">1</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;&#125;&#125;</span><br><span class=\"line\">  p(a, a)</span><br><span class=\"line\">  p(a[:], a[:])</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  p(a[:], b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出结果？？ :true:true:false</p>\n</blockquote>","more":"<blockquote>\n<p>正确答案 :false:true:false</p>\n</blockquote>\n<h3 id=\"错误来源\"><a href=\"#错误来源\" class=\"headerlink\" title=\"错误来源\"></a>错误来源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).</span><br><span class=\"line\">第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。</span><br><span class=\"line\">第三个虽然是重新初始化了，所以两个肯定不是deep相等的。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路比对（错在哪里）\"><a href=\"#思路比对（错在哪里）\" class=\"headerlink\" title=\"思路比对（错在哪里）\"></a>思路比对（错在哪里）</h3><p>查阅文档之后，发现理解错了：</p>\n<p><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200918-124746.png\"></p>\n<h3 id=\"DeepEqual正确理解\"><a href=\"#DeepEqual正确理解\" class=\"headerlink\" title=\"DeepEqual正确理解\"></a>DeepEqual正确理解</h3><blockquote>\n<p>源码也很简洁：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeepEqual</span><span class=\"params\">(x, y <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//同nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"literal\">nil</span> || y == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x == y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv1 := ValueOf(x)</span><br><span class=\"line\">  v2 := ValueOf(y)</span><br><span class=\"line\">  <span class=\"comment\">//属于同一类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v1.Type() != v2.Type() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> deepValueEqual(v1, v2, <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[visit]<span class=\"keyword\">bool</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DeepEqual reports whether x and y are ``deeply equal,&#x27;&#x27; defined as follows.</span></span><br><span class=\"line\"><span class=\"comment\">// Two values of identical type are deeply equal if one of the following cases applies.</span></span><br><span class=\"line\"><span class=\"comment\">// Values of distinct types are never deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：数组深度相等，相应的元素都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Array values are deeply equal when their corresponding elements are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：结构体相对应的字段都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Struct values are deeply equal if their corresponding fields,</span></span><br><span class=\"line\"><span class=\"comment\">// both exported and unexported, are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Func values are deeply equal if both are nil; otherwise they are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// 条件：两个interface持有深度相同的值。</span></span><br><span class=\"line\"><span class=\"comment\">// Interface values are deeply equal if they hold deeply equal concrete values.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度并且有相同的对象/key对应的值是相等的。</span><br><span class=\"line\"><span class=\"comment\">// Map values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they are the same map object or their corresponding keys</span></span><br><span class=\"line\"><span class=\"comment\">// (matched using Go equality) map to deeply equal values.</span></span><br><span class=\"line\">    条件：用 == 比较或者 point的</span><br><span class=\"line\"><span class=\"comment\">// Pointer values are deeply equal if they are equal using Go&#x27;s == operator</span></span><br><span class=\"line\"><span class=\"comment\">// or if they point to deeply equal values.</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。</span><br><span class=\"line\">    注意：empty和<span class=\"literal\">nil</span> slice不是深度相等的。</span><br><span class=\"line\"><span class=\"comment\">// Slice values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they point to the same initial entry of the same underlying array</span></span><br><span class=\"line\"><span class=\"comment\">// (that is, &amp;x[0] == &amp;y[0]) or their corresponding elements (up to length) are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that a non-nil empty slice and a nil slice (for example, []byte&#123;&#125; and []byte(nil))</span></span><br><span class=\"line\"><span class=\"comment\">// are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Other values - numbers, bools, strings, and channels - are deeply equal</span></span><br><span class=\"line\"><span class=\"comment\">// if they are equal using Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In general DeepEqual is a recursive relaxation of Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">// However, this idea is impossible to implement without some inconsistency.</span></span><br><span class=\"line\"><span class=\"comment\">// Specifically, it is possible for a value to be unequal to itself,</span></span><br><span class=\"line\"><span class=\"comment\">// either because it is of func type (uncomparable in general)</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is an array, struct, or interface containing</span></span><br><span class=\"line\"><span class=\"comment\">// such a value.</span></span><br><span class=\"line\"><span class=\"comment\">// On the other hand, pointer values are always equal to themselves,</span></span><br><span class=\"line\"><span class=\"comment\">// even if they point at or contain such problematic values,</span></span><br><span class=\"line\"><span class=\"comment\">// because they compare equal using Go&#x27;s == operator, and that</span></span><br><span class=\"line\"><span class=\"comment\">// is a sufficient condition to be deeply equal, regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">// DeepEqual has been defined so that the same short-cut applies</span></span><br><span class=\"line\"><span class=\"comment\">// to slices and maps: if x and y are the same slice or the same map,</span></span><br><span class=\"line\"><span class=\"comment\">// they are deeply equal regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// As DeepEqual traverses the data values it may find a cycle. The</span></span><br><span class=\"line\"><span class=\"comment\">// second and subsequent times that DeepEqual compares two pointer</span></span><br><span class=\"line\"><span class=\"comment\">// values that have been compared before, it treats the values as</span></span><br><span class=\"line\"><span class=\"comment\">// equal rather than examining the values to which they point.</span></span><br><span class=\"line\"><span class=\"comment\">// This ensures that DeepEqual terminates.</span></span><br></pre></td></tr></table></figure>\n\n<p>再看看详细的deepValueEqual,大致的过程：<br><img src=\"https://raw.githubusercontent.com/crab21/Images/master/blog/20200920-103516@2x.png\"></p>\n<blockquote>\n<p>大致分为三个过程：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、判断类型和值</span><br><span class=\"line\">2、hard回调</span><br><span class=\"line\">3、按照kind分类处理</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a>数组：</h4><p>比较每一个元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Slice\"><a href=\"#Slice\" class=\"headerlink\" title=\"Slice\"></a>Slice</h4><ul>\n<li>比较为nil</li>\n<li>比较长度</li>\n<li>比较地址</li>\n<li>比较每一个元素<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Interface\"><a href=\"#Interface\" class=\"headerlink\" title=\"Interface\"></a>Interface</h4><ul>\n<li>比较nil</li>\n<li>递归比较<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() || v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.IsNil() == v2.IsNil()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ptr\"><a href=\"#Ptr\" class=\"headerlink\" title=\"Ptr\"></a>Ptr</h4></li>\n<li>地址</li>\n<li>递归比较<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"struct\"><a href=\"#struct\" class=\"headerlink\" title=\"struct\"></a>struct</h4><ul>\n<li>比较每一个元素<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i, n := <span class=\"number\">0</span>, v1.NumField(); i &lt; n; i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4><ul>\n<li>比较Nil</li>\n<li>比较长度</li>\n<li>地址比较</li>\n<li>每一个key对应的value</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, k := <span class=\"keyword\">range</span> v1.MapKeys() &#123;</span><br><span class=\"line\">\tval1 := v1.MapIndex(k)</span><br><span class=\"line\">\tval2 := v2.MapIndex(k)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Func\"><a href=\"#Func\" class=\"headerlink\" title=\"Func\"></a>Func</h4><ul>\n<li>非nil，为不等。<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() &amp;&amp; v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Can&#x27;t do better than this:</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"painc注意点：\"><a href=\"#painc注意点：\" class=\"headerlink\" title=\"painc注意点：\"></a>painc注意点：</h3><p> deepValueEqual函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .....</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> .</span><br><span class=\"line\"> 递归次数超过<span class=\"number\">10</span>次则会painc....</span><br><span class=\"line\"> <span class=\"comment\">// if depth &gt; 10 &#123; panic(&quot;deepValueEqual&quot;) &#125;\t// for debugging</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We want to avoid putting more in the visited map than we need to.</span></span><br><span class=\"line\"><span class=\"comment\">// For any possible reference cycle that might be encountered,</span></span><br><span class=\"line\"><span class=\"comment\">// hard(v1, v2) needs to return true for at least one of the types in the cycle,</span></span><br><span class=\"line\"><span class=\"comment\">// and it&#x27;s safe and valid to get Value&#x27;s internal pointer.</span></span><br><span class=\"line\">hard := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(v1, v2 Value)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v1.Kind() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Map, Slice, Ptr, Interface:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Nil pointers cannot be cyclic. Avoid putting them in the visited map.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !v1.IsNil() &amp;&amp; !v2.IsNil()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> .....</span><br><span class=\"line\"> ......</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200918-124746.png","popularPost_tmp_gaData":{"updated":"Sun Sep 20 2020 16:16:52 GMT+0800 (中国标准时间)","title":"「9」Go reflect ~ DeepEqual","path":"archives/e2e7cc4e.html","eyeCatchImage":"https://raw.githubusercontent.com/crab21/Images/master/blog/20200918-124746.png","excerpt":"<p>今天无意中看到Go101发了一个推特:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">p</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">&quot;:&quot;</span>, reflect.DeepEqual(a, b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">1</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;&#125;&#125;</span><br><span class=\"line\">  p(a, a)</span><br><span class=\"line\">  p(a[:], a[:])</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  p(a[:], b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出结果？？ :true:true:false</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-09-18T04:35:03.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-18T04:35:03.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go Package","Day","Go reflect"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5545},{"title":"「8」go rwmutex解读","date":"2020-09-16T17:24:32.000Z","updated":"2020-09-21T13:24:32.000Z","keywords":"golang,go 源码,go 读写锁, rwmutex 解读","abbrlink":"3038b6c3","_content":"    好久没有更新文章了，表达能力生疏了许多😄....\n    今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n    从锁的结构设计-->加锁的过程--->加锁的粒度---->解锁释放，整个生命周期来看rwmutex的具体实现。\n<!-- more -->\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 同向对比rwmutex锁的设计\n    java实现：AQS(AbstractQueuedSynchronizer)\n\n### 结构设计\n>原则：读写互斥，优先写。\n\n```go\ntype RWMutex struct {\n\tw           Mutex  // held if there are pending writers\n\twriterSem   uint32 // semaphore for writers to wait for completing readers  写信号量\n\treaderSem   uint32 // semaphore for readers to wait for completing writers  读信号量\n\treaderCount int32  // number of pending readers 读计数\n\treaderWait  int32  // number of departing readers   读等待（write进行）\n}\n\nconst rwmutexMaxReaders = 1 << 30   //最大读锁的个数\n```\n\n其它再分类就是四个主要的函数：\n\n```\nRLock\nRUnLock\nLock\nUnLock\n```\n### 加锁过程\n\n#### RLock过程\n\n```go\nfunc (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n    }\n    //如果写锁被获取的，则readerCount<0的，阻塞状态\n    //如果写锁没有被获取，则readerCount >0的，获取读锁，不阻塞\n\tif atomic.AddInt32(&rw.readerCount, 1) < 0 {\n        // A writer is pending, wait for it. \n        //写锁被获取了，加到G队列后面，挂起。\n\t\truntime_SemacquireMutex(&rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t}\n}\n```\n\n#### Lock过程\n\n```go\n// Lock locks rw for writing.\n// If the lock is already locked for reading or writing,\n// Lock blocks until the lock is available.\nfunc (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n    // First, resolve competition with other writers.\n    //使用mutex锁\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := atomic.AddInt32(&rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 && atomic.AddInt32(&rw.readerWait, r) != 0 {\n        //等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。\n\t\truntime_SemacquireMutex(&rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(&rw.writerSem))\n\t}\n}\n```\n\n### 加锁的粒度\n> 读 & 写 互不干扰.\n\n### 解锁释放\n\n#### RUnLock\n\n```go\nfunc (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(&rw.writerSem))\n\t\trace.Disable()\n    }\n    // 写锁等待状态，检查当前是否可以进行获取\n\tif r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n\nfunc (rw *RWMutex) rUnlockSlow(r int32) {\n    // r + 1 == 0表示直接执行RUnlock()\n\t// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()\n\tif r+1 == 0 || r+1 == -rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: RUnlock of unlocked RWMutex\")\n\t}\n    // A writer is pending.\n    // 当读锁释放完毕后，通知写锁\n\tif atomic.AddInt32(&rw.readerWait, -1) == 0 {\n\t\t// The last reader unblocks the writer.\n\t\truntime_Semrelease(&rw.writerSem, false, 1)\n\t}\n}\n```\n\n#### UnLock\n\n```go\nfunc (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(&rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n    r := atomic.AddInt32(&rw.readerCount, rwmutexMaxReaders)\n    //说明这个没有枷锁，没法再次释放\n\tif r >= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: Unlock of unlocked RWMutex\")\n\t}\n    // Unblock blocked readers, if any.\n    //释放所有的锁。\n\tfor i := 0; i < int(r); i++ {\n\t\truntime_Semrelease(&rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n```\n### 总结\n\n>读&写，互不干扰。\n\n* 读锁不能阻塞读锁，引入readerCount.\n\n* 读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.\n\n* 写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.\n\n* 写锁需要阻塞写锁，引入Metux.\n\n### END","source":"_posts/8-go-rwmutex解读.md","raw":"---\ntitle: 「8」go rwmutex解读\ndate: '2020/09/17 01:24:32'\nupdated: '2020/09/21 21:24:32'\nkeywords: 'golang,go 源码,go 读写锁, rwmutex 解读'\ntags:\n  - Go\n  - Go源码\n  - Go Package\n  - 锁\nabbrlink: 3038b6c3\n---\n    好久没有更新文章了，表达能力生疏了许多😄....\n    今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n    从锁的结构设计-->加锁的过程--->加锁的粒度---->解锁释放，整个生命周期来看rwmutex的具体实现。\n<!-- more -->\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 同向对比rwmutex锁的设计\n    java实现：AQS(AbstractQueuedSynchronizer)\n\n### 结构设计\n>原则：读写互斥，优先写。\n\n```go\ntype RWMutex struct {\n\tw           Mutex  // held if there are pending writers\n\twriterSem   uint32 // semaphore for writers to wait for completing readers  写信号量\n\treaderSem   uint32 // semaphore for readers to wait for completing writers  读信号量\n\treaderCount int32  // number of pending readers 读计数\n\treaderWait  int32  // number of departing readers   读等待（write进行）\n}\n\nconst rwmutexMaxReaders = 1 << 30   //最大读锁的个数\n```\n\n其它再分类就是四个主要的函数：\n\n```\nRLock\nRUnLock\nLock\nUnLock\n```\n### 加锁过程\n\n#### RLock过程\n\n```go\nfunc (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n    }\n    //如果写锁被获取的，则readerCount<0的，阻塞状态\n    //如果写锁没有被获取，则readerCount >0的，获取读锁，不阻塞\n\tif atomic.AddInt32(&rw.readerCount, 1) < 0 {\n        // A writer is pending, wait for it. \n        //写锁被获取了，加到G队列后面，挂起。\n\t\truntime_SemacquireMutex(&rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t}\n}\n```\n\n#### Lock过程\n\n```go\n// Lock locks rw for writing.\n// If the lock is already locked for reading or writing,\n// Lock blocks until the lock is available.\nfunc (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n    // First, resolve competition with other writers.\n    //使用mutex锁\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := atomic.AddInt32(&rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 && atomic.AddInt32(&rw.readerWait, r) != 0 {\n        //等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。\n\t\truntime_SemacquireMutex(&rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(&rw.writerSem))\n\t}\n}\n```\n\n### 加锁的粒度\n> 读 & 写 互不干扰.\n\n### 解锁释放\n\n#### RUnLock\n\n```go\nfunc (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(&rw.writerSem))\n\t\trace.Disable()\n    }\n    // 写锁等待状态，检查当前是否可以进行获取\n\tif r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n\nfunc (rw *RWMutex) rUnlockSlow(r int32) {\n    // r + 1 == 0表示直接执行RUnlock()\n\t// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()\n\tif r+1 == 0 || r+1 == -rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: RUnlock of unlocked RWMutex\")\n\t}\n    // A writer is pending.\n    // 当读锁释放完毕后，通知写锁\n\tif atomic.AddInt32(&rw.readerWait, -1) == 0 {\n\t\t// The last reader unblocks the writer.\n\t\truntime_Semrelease(&rw.writerSem, false, 1)\n\t}\n}\n```\n\n#### UnLock\n\n```go\nfunc (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(&rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n    r := atomic.AddInt32(&rw.readerCount, rwmutexMaxReaders)\n    //说明这个没有枷锁，没法再次释放\n\tif r >= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: Unlock of unlocked RWMutex\")\n\t}\n    // Unblock blocked readers, if any.\n    //释放所有的锁。\n\tfor i := 0; i < int(r); i++ {\n\t\truntime_Semrelease(&rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n```\n### 总结\n\n>读&写，互不干扰。\n\n* 读锁不能阻塞读锁，引入readerCount.\n\n* 读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.\n\n* 写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.\n\n* 写锁需要阻塞写锁，引入Metux.\n\n### END","slug":"8-go-rwmutex解读","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckhlauvl20017hyi79ckch1xi","content":"<pre><code>好久没有更新文章了，表达能力生疏了许多😄....\n今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n从锁的结构设计--&gt;加锁的过程---&gt;加锁的粒度----&gt;解锁释放，整个生命周期来看rwmutex的具体实现。</code></pre>\n<a id=\"more\"></a>\n<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同向对比rwmutex锁的设计\"><a href=\"#同向对比rwmutex锁的设计\" class=\"headerlink\" title=\"同向对比rwmutex锁的设计\"></a>同向对比rwmutex锁的设计</h3><pre><code>java实现：AQS(AbstractQueuedSynchronizer)</code></pre>\n<h3 id=\"结构设计\"><a href=\"#结构设计\" class=\"headerlink\" title=\"结构设计\"></a>结构设计</h3><blockquote>\n<p>原则：读写互斥，优先写。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RWMutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tw           Mutex  <span class=\"comment\">// held if there are pending writers</span></span><br><span class=\"line\">\twriterSem   <span class=\"keyword\">uint32</span> <span class=\"comment\">// semaphore for writers to wait for completing readers  写信号量</span></span><br><span class=\"line\">\treaderSem   <span class=\"keyword\">uint32</span> <span class=\"comment\">// semaphore for readers to wait for completing writers  读信号量</span></span><br><span class=\"line\">\treaderCount <span class=\"keyword\">int32</span>  <span class=\"comment\">// number of pending readers 读计数</span></span><br><span class=\"line\">\treaderWait  <span class=\"keyword\">int32</span>  <span class=\"comment\">// number of departing readers   读等待（write进行）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rwmutexMaxReaders = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>   <span class=\"comment\">//最大读锁的个数</span></span><br></pre></td></tr></table></figure>\n\n<p>其它再分类就是四个主要的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RLock</span><br><span class=\"line\">RUnLock</span><br><span class=\"line\">Lock</span><br><span class=\"line\">UnLock</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁过程\"><a href=\"#加锁过程\" class=\"headerlink\" title=\"加锁过程\"></a>加锁过程</h3><h4 id=\"RLock过程\"><a href=\"#RLock过程\" class=\"headerlink\" title=\"RLock过程\"></a>RLock过程</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RLock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果写锁被获取的，则readerCount&lt;0的，阻塞状态</span></span><br><span class=\"line\">    <span class=\"comment\">//如果写锁没有被获取，则readerCount &gt;0的，获取读锁，不阻塞</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A writer is pending, wait for it. </span></span><br><span class=\"line\">        <span class=\"comment\">//写锁被获取了，加到G队列后面，挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lock过程\"><a href=\"#Lock过程\" class=\"headerlink\" title=\"Lock过程\"></a>Lock过程</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Lock locks rw for writing.</span></span><br><span class=\"line\"><span class=\"comment\">// If the lock is already locked for reading or writing,</span></span><br><span class=\"line\"><span class=\"comment\">// Lock blocks until the lock is available.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// First, resolve competition with other writers.</span></span><br><span class=\"line\">    <span class=\"comment\">//使用mutex锁</span></span><br><span class=\"line\">\trw.w.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is a pending writer.</span></span><br><span class=\"line\">\tr := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders</span><br><span class=\"line\">\t<span class=\"comment\">// Wait for active readers.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r != <span class=\"number\">0</span> &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加锁的粒度\"><a href=\"#加锁的粒度\" class=\"headerlink\" title=\"加锁的粒度\"></a>加锁的粒度</h3><blockquote>\n<p>读 &amp; 写 互不干扰.</p>\n</blockquote>\n<h3 id=\"解锁释放\"><a href=\"#解锁释放\" class=\"headerlink\" title=\"解锁释放\"></a>解锁释放</h3><h4 id=\"RUnLock\"><a href=\"#RUnLock\" class=\"headerlink\" title=\"RUnLock\"></a>RUnLock</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RUnlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.ReleaseMerge(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写锁等待状态，检查当前是否可以进行获取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r := atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">-1</span>); r &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Outlined slow-path to allow the fast-path to be inlined</span></span><br><span class=\"line\">\t\trw.rUnlockSlow(r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">rUnlockSlow</span><span class=\"params\">(r <span class=\"keyword\">int32</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// r + 1 == 0表示直接执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"comment\">// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r+<span class=\"number\">1</span> == <span class=\"number\">0</span> || r+<span class=\"number\">1</span> == -rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: RUnlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// A writer is pending.</span></span><br><span class=\"line\">    <span class=\"comment\">// 当读锁释放完毕后，通知写锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerWait, <span class=\"number\">-1</span>) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The last reader unblocks the writer.</span></span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UnLock\"><a href=\"#UnLock\" class=\"headerlink\" title=\"UnLock\"></a>UnLock</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Release(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is no active writer.</span></span><br><span class=\"line\">    r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders)</span><br><span class=\"line\">    <span class=\"comment\">//说明这个没有枷锁，没法再次释放</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r &gt;= rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: Unlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// Unblock blocked readers, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">//释放所有的锁。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(r); i++ &#123;</span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Allow other writers to proceed.</span></span><br><span class=\"line\">\trw.w.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>读&amp;写，互不干扰。</p>\n</blockquote>\n<ul>\n<li><p>读锁不能阻塞读锁，引入readerCount.</p>\n</li>\n<li><p>读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.</p>\n</li>\n<li><p>写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.</p>\n</li>\n<li><p>写锁需要阻塞写锁，引入Metux.</p>\n</li>\n</ul>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","site":{"data":{}},"excerpt":"<pre><code>好久没有更新文章了，表达能力生疏了许多😄....\n今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n从锁的结构设计--&gt;加锁的过程---&gt;加锁的粒度----&gt;解锁释放，整个生命周期来看rwmutex的具体实现。</code></pre>","more":"<h3 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"同向对比rwmutex锁的设计\"><a href=\"#同向对比rwmutex锁的设计\" class=\"headerlink\" title=\"同向对比rwmutex锁的设计\"></a>同向对比rwmutex锁的设计</h3><pre><code>java实现：AQS(AbstractQueuedSynchronizer)</code></pre>\n<h3 id=\"结构设计\"><a href=\"#结构设计\" class=\"headerlink\" title=\"结构设计\"></a>结构设计</h3><blockquote>\n<p>原则：读写互斥，优先写。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RWMutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tw           Mutex  <span class=\"comment\">// held if there are pending writers</span></span><br><span class=\"line\">\twriterSem   <span class=\"keyword\">uint32</span> <span class=\"comment\">// semaphore for writers to wait for completing readers  写信号量</span></span><br><span class=\"line\">\treaderSem   <span class=\"keyword\">uint32</span> <span class=\"comment\">// semaphore for readers to wait for completing writers  读信号量</span></span><br><span class=\"line\">\treaderCount <span class=\"keyword\">int32</span>  <span class=\"comment\">// number of pending readers 读计数</span></span><br><span class=\"line\">\treaderWait  <span class=\"keyword\">int32</span>  <span class=\"comment\">// number of departing readers   读等待（write进行）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rwmutexMaxReaders = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>   <span class=\"comment\">//最大读锁的个数</span></span><br></pre></td></tr></table></figure>\n\n<p>其它再分类就是四个主要的函数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RLock</span><br><span class=\"line\">RUnLock</span><br><span class=\"line\">Lock</span><br><span class=\"line\">UnLock</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁过程\"><a href=\"#加锁过程\" class=\"headerlink\" title=\"加锁过程\"></a>加锁过程</h3><h4 id=\"RLock过程\"><a href=\"#RLock过程\" class=\"headerlink\" title=\"RLock过程\"></a>RLock过程</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RLock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果写锁被获取的，则readerCount&lt;0的，阻塞状态</span></span><br><span class=\"line\">    <span class=\"comment\">//如果写锁没有被获取，则readerCount &gt;0的，获取读锁，不阻塞</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A writer is pending, wait for it. </span></span><br><span class=\"line\">        <span class=\"comment\">//写锁被获取了，加到G队列后面，挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Lock过程\"><a href=\"#Lock过程\" class=\"headerlink\" title=\"Lock过程\"></a>Lock过程</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Lock locks rw for writing.</span></span><br><span class=\"line\"><span class=\"comment\">// If the lock is already locked for reading or writing,</span></span><br><span class=\"line\"><span class=\"comment\">// Lock blocks until the lock is available.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Lock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// First, resolve competition with other writers.</span></span><br><span class=\"line\">    <span class=\"comment\">//使用mutex锁</span></span><br><span class=\"line\">\trw.w.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is a pending writer.</span></span><br><span class=\"line\">\tr := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders</span><br><span class=\"line\">\t<span class=\"comment\">// Wait for active readers.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r != <span class=\"number\">0</span> &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"加锁的粒度\"><a href=\"#加锁的粒度\" class=\"headerlink\" title=\"加锁的粒度\"></a>加锁的粒度</h3><blockquote>\n<p>读 &amp; 写 互不干扰.</p>\n</blockquote>\n<h3 id=\"解锁释放\"><a href=\"#解锁释放\" class=\"headerlink\" title=\"解锁释放\"></a>解锁释放</h3><h4 id=\"RUnLock\"><a href=\"#RUnLock\" class=\"headerlink\" title=\"RUnLock\"></a>RUnLock</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">RUnlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.ReleaseMerge(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写锁等待状态，检查当前是否可以进行获取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r := atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">-1</span>); r &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Outlined slow-path to allow the fast-path to be inlined</span></span><br><span class=\"line\">\t\trw.rUnlockSlow(r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">rUnlockSlow</span><span class=\"params\">(r <span class=\"keyword\">int32</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// r + 1 == 0表示直接执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"comment\">// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r+<span class=\"number\">1</span> == <span class=\"number\">0</span> || r+<span class=\"number\">1</span> == -rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: RUnlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// A writer is pending.</span></span><br><span class=\"line\">    <span class=\"comment\">// 当读锁释放完毕后，通知写锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerWait, <span class=\"number\">-1</span>) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The last reader unblocks the writer.</span></span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"UnLock\"><a href=\"#UnLock\" class=\"headerlink\" title=\"UnLock\"></a>UnLock</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span> <span class=\"title\">Unlock</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Release(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is no active writer.</span></span><br><span class=\"line\">    r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders)</span><br><span class=\"line\">    <span class=\"comment\">//说明这个没有枷锁，没法再次释放</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r &gt;= rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: Unlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// Unblock blocked readers, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">//释放所有的锁。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">int</span>(r); i++ &#123;</span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Allow other writers to proceed.</span></span><br><span class=\"line\">\trw.w.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>读&amp;写，互不干扰。</p>\n</blockquote>\n<ul>\n<li><p>读锁不能阻塞读锁，引入readerCount.</p>\n</li>\n<li><p>读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.</p>\n</li>\n<li><p>写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.</p>\n</li>\n<li><p>写锁需要阻塞写锁，引入Metux.</p>\n</li>\n</ul>\n<h3 id=\"END\"><a href=\"#END\" class=\"headerlink\" title=\"END\"></a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Sep 21 2020 21:24:32 GMT+0800 (中国标准时间)","title":"「8」go rwmutex解读","path":"archives/3038b6c3.html","eyeCatchImage":null,"excerpt":"<pre><code>好久没有更新文章了，表达能力生疏了许多😄....\n今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n从锁的结构设计--&gt;加锁的过程---&gt;加锁的粒度----&gt;解锁释放，整个生命周期来看rwmutex的具体实现。</code></pre>","date":{"_isAMomentObject":true,"_i":"2020-09-16T17:24:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-16T17:24:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Go Package","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3411}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckhlauvkh0001hyi776vo0h4t","tag_id":"ckhlauvkl0004hyi7fflb32no","_id":"ckhlauvkp000chyi753wp2sr3"},{"post_id":"ckhlauvkk0003hyi7954s7a21","tag_id":"ckhlauvkp000bhyi7gfo4fdr1","_id":"ckhlauvkt000jhyi74gpm3et4"},{"post_id":"ckhlauvkx000thyi7bkzw405q","tag_id":"ckhlauvkl0004hyi7fflb32no","_id":"ckhlauvl0000whyi76v4p6pqb"},{"post_id":"ckhlauvkm0006hyi70psi6xl2","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvl0000yhyi7dthxdbmd"},{"post_id":"ckhlauvkm0006hyi70psi6xl2","tag_id":"ckhlauvkt000lhyi72p6jd0tv","_id":"ckhlauvl10011hyi7ekqh605g"},{"post_id":"ckhlauvkm0006hyi70psi6xl2","tag_id":"ckhlauvkv000ohyi73xbs7xpt","_id":"ckhlauvl20013hyi751803sk1"},{"post_id":"ckhlauvkm0006hyi70psi6xl2","tag_id":"ckhlauvkx000shyi7e54h73s9","_id":"ckhlauvl20015hyi7bghr56d0"},{"post_id":"ckhlauvkx000uhyi7bfiw8dm9","tag_id":"ckhlauvkl0004hyi7fflb32no","_id":"ckhlauvl40018hyi7fy1g7dea"},{"post_id":"ckhlauvl0000xhyi7g0f10lfm","tag_id":"ckhlauvkl0004hyi7fflb32no","_id":"ckhlauvl40019hyi71kfk1162"},{"post_id":"ckhlauvl0000zhyi7dc49c7km","tag_id":"ckhlauvkl0004hyi7fflb32no","_id":"ckhlauvl5001bhyi7a3oibjj9"},{"post_id":"ckhlauvl10012hyi76mdh4sr1","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvl5001chyi783o86dmb"},{"post_id":"ckhlauvl10012hyi76mdh4sr1","tag_id":"ckhlauvkv000ohyi73xbs7xpt","_id":"ckhlauvl6001ehyi7gsytefy1"},{"post_id":"ckhlauvko0008hyi7akgh8hwh","tag_id":"ckhlauvky000vhyi7fcgw7czh","_id":"ckhlauvl6001fhyi7dhe7ft8y"},{"post_id":"ckhlauvko0008hyi7akgh8hwh","tag_id":"ckhlauvl10010hyi70q7830g5","_id":"ckhlauvl6001hhyi7ghdt706p"},{"post_id":"ckhlauvl20017hyi79ckch1xi","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvl6001ihyi7c7p9ba9m"},{"post_id":"ckhlauvl20017hyi79ckch1xi","tag_id":"ckhlauvkt000lhyi72p6jd0tv","_id":"ckhlauvl6001khyi7aq273u6x"},{"post_id":"ckhlauvl20017hyi79ckch1xi","tag_id":"ckhlauvkv000ohyi73xbs7xpt","_id":"ckhlauvl6001lhyi738a00g1n"},{"post_id":"ckhlauvl20017hyi79ckch1xi","tag_id":"ckhlauvkx000shyi7e54h73s9","_id":"ckhlauvl7001nhyi79vqa3800"},{"post_id":"ckhlauvkp000ahyi7en3074zp","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvl7001ohyi7hrwe9fih"},{"post_id":"ckhlauvkp000ahyi7en3074zp","tag_id":"ckhlauvkv000ohyi73xbs7xpt","_id":"ckhlauvl7001phyi7eesr630h"},{"post_id":"ckhlauvkp000ahyi7en3074zp","tag_id":"ckhlauvl5001dhyi7gkuc0cl1","_id":"ckhlauvl7001rhyi7hfn8botk"},{"post_id":"ckhlauvkq000ehyi70jz14lc2","tag_id":"ckhlauvl6001ghyi78ex13fux","_id":"ckhlauvl7001shyi71dp47xj4"},{"post_id":"ckhlauvkq000ehyi70jz14lc2","tag_id":"ckhlauvl6001jhyi75bna4t3h","_id":"ckhlauvl8001uhyi7fmzf65hx"},{"post_id":"ckhlauvkr000ghyi70ez9hllp","tag_id":"ckhlauvl7001mhyi72yy2bfb8","_id":"ckhlauvl8001vhyi7h8z943zq"},{"post_id":"ckhlauvkr000ghyi70ez9hllp","tag_id":"ckhlauvl5001dhyi7gkuc0cl1","_id":"ckhlauvl8001xhyi77m4a8ifu"},{"post_id":"ckhlauvks000ihyi7e4sphrug","tag_id":"ckhlauvl7001thyi7dctggvc3","_id":"ckhlauvl9001zhyi753mdf9em"},{"post_id":"ckhlauvks000ihyi7e4sphrug","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvl90020hyi752in6wjd"},{"post_id":"ckhlauvks000ihyi7e4sphrug","tag_id":"ckhlauvl5001dhyi7gkuc0cl1","_id":"ckhlauvl90022hyi72zpo3h9d"},{"post_id":"ckhlauvkt000khyi7hhp74rqo","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvl90023hyi7aj3ncm4c"},{"post_id":"ckhlauvkt000khyi7hhp74rqo","tag_id":"ckhlauvl5001dhyi7gkuc0cl1","_id":"ckhlauvl90025hyi7huvqahkf"},{"post_id":"ckhlauvku000mhyi7f3ta8xr0","tag_id":"ckhlauvky000vhyi7fcgw7czh","_id":"ckhlauvla0026hyi77mxaghkv"},{"post_id":"ckhlauvku000nhyi770ta2iq8","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvla0028hyi7e8g88ipl"},{"post_id":"ckhlauvku000nhyi770ta2iq8","tag_id":"ckhlauvl90024hyi7hb50hbef","_id":"ckhlauvla0029hyi7c0s41rb4"},{"post_id":"ckhlauvku000nhyi770ta2iq8","tag_id":"ckhlauvkt000lhyi72p6jd0tv","_id":"ckhlauvla002bhyi7356qfh22"},{"post_id":"ckhlauvkv000phyi7gpvp7rh8","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvla002chyi777t46ew7"},{"post_id":"ckhlauvkv000phyi7gpvp7rh8","tag_id":"ckhlauvl90024hyi7hb50hbef","_id":"ckhlauvlb002ehyi79mqy7rci"},{"post_id":"ckhlauvkv000phyi7gpvp7rh8","tag_id":"ckhlauvkt000lhyi72p6jd0tv","_id":"ckhlauvlb002fhyi75jgq3i04"},{"post_id":"ckhlauvkw000qhyi74wb90r6z","tag_id":"ckhlauvla002ahyi74p111gw0","_id":"ckhlauvlb002hhyi7bg5f7d8d"},{"post_id":"ckhlauvkw000qhyi74wb90r6z","tag_id":"ckhlauvla002dhyi762wp4440","_id":"ckhlauvlb002ihyi7bjupdt2y"},{"post_id":"ckhlauvkw000rhyi7984ebowz","tag_id":"ckhlauvlb002ghyi7hsj27j4g","_id":"ckhlauvlc002lhyi7eby4f47v"},{"post_id":"ckhlauvkw000rhyi7984ebowz","tag_id":"ckhlauvl5001dhyi7gkuc0cl1","_id":"ckhlauvlc002mhyi76qsb7x4l"},{"post_id":"ckhlauvl20014hyi70j8v4fz2","tag_id":"ckhlauvks000hhyi75jqxcg1v","_id":"ckhlauvlc002ohyi73w7bb7tj"},{"post_id":"ckhlauvl20014hyi70j8v4fz2","tag_id":"ckhlauvlb002khyi79px3d25b","_id":"ckhlauvlc002phyi78h2q1xt0"},{"post_id":"ckhlauvl20014hyi70j8v4fz2","tag_id":"ckhlauvkv000ohyi73xbs7xpt","_id":"ckhlauvlc002qhyi712fg79ej"},{"post_id":"ckhlauvl20014hyi70j8v4fz2","tag_id":"ckhlauvl5001dhyi7gkuc0cl1","_id":"ckhlauvlc002rhyi7hkfb9i85"}],"Tag":[{"name":"Git","_id":"ckhlauvkl0004hyi7fflb32no"},{"name":"life","_id":"ckhlauvkp000bhyi7gfo4fdr1"},{"name":"Go","_id":"ckhlauvks000hhyi75jqxcg1v"},{"name":"Go源码","_id":"ckhlauvkt000lhyi72p6jd0tv"},{"name":"Go Package","_id":"ckhlauvkv000ohyi73xbs7xpt"},{"name":"锁","_id":"ckhlauvkx000shyi7e54h73s9"},{"name":"hexo","_id":"ckhlauvky000vhyi7fcgw7czh"},{"name":"hexo插件","_id":"ckhlauvl10010hyi70q7830g5"},{"name":"Day","_id":"ckhlauvl5001dhyi7gkuc0cl1"},{"name":"Linux","_id":"ckhlauvl6001ghyi78ex13fux"},{"name":"进程","_id":"ckhlauvl6001jhyi75bna4t3h"},{"name":"chrome","_id":"ckhlauvl7001mhyi72yy2bfb8"},{"name":"Plan9","_id":"ckhlauvl7001thyi7dctggvc3"},{"name":"GPM","_id":"ckhlauvl90024hyi7hb50hbef"},{"name":"vscode","_id":"ckhlauvla002ahyi74p111gw0"},{"name":"工具","_id":"ckhlauvla002dhyi762wp4440"},{"name":"博客","_id":"ckhlauvlb002ghyi7hsj27j4g"},{"name":"Go reflect","_id":"ckhlauvlb002khyi79px3d25b"}]}}