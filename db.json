{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/nextTheme/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/nextTheme/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"349cb0b8f6d6159bc8ab85856bceb60fe26b40fb","modified":1644399388952},{"_id":"source/_drafts/25-GPM-newm函数要点.md","hash":"5bb4d16bbe6e8681421672421eb717c0a3a05881","modified":1619169831894},{"_id":"source/_drafts/26-RabbitMQ五种工作模式.md","hash":"74cc334bb8e276ec3c83eb770de2d41dace9d118","modified":1619169831894},{"_id":"source/_drafts/2022-06-26.md","hash":"34d3937abc9e27b88cb5204e05770cf6c505e8d1","modified":1657202048029},{"_id":"source/_drafts/58-Redis-lua.md","hash":"9d7c8018accee2b8d85a240473650e50385cdf91","modified":1626768368377},{"_id":"source/_drafts/59-Redis-cluster.md","hash":"be739c9bfa406247307a415410ea1af2c33943f5","modified":1626768368516},{"_id":"source/_drafts/80-docker小记.md","hash":"b71c6a59bd65cd056d8c5adcf581ed2c67eb2e51","modified":1630989114597},{"_id":"source/_drafts/81-kspan结合jaeger使用.md","hash":"5293984833a18dfb195bd1146052c74f962e548f","modified":1633953318153},{"_id":"source/_drafts/TLS-SSL-HTTPS详解.md","hash":"609a9ac36c64a6d679a0aee80eef7b1d873bc151","modified":1619169831894},{"_id":"source/_drafts/N-正态规划.md","hash":"bd7655b85744d08cd852180e7b4de891ee693664","modified":1621217119652},{"_id":"source/_drafts/70-leetcode-动态规划.md","hash":"2027b36dd95e3633f72faefad89d091773474523","modified":1630548797953},{"_id":"source/_drafts/git 初阶add-commit-push ~2.md","hash":"204f87f2540f63751722fc5d449c287270516e42","modified":1619169831894},{"_id":"source/_drafts/bookmarks.md","hash":"dbc3719700613ff590611cbaf1f2f188515a4a4b","modified":1619169831894},{"_id":"source/_drafts/plan todo.md","hash":"4a11f2572588cac9cd05fc62e90c8cfef518d2ab","modified":1619169831894},{"_id":"source/categories/index.md","hash":"958a5f0f58e4b3d7351ad170d43d812bda6ce739","modified":1619169831900},{"_id":"source/tags/index.md","hash":"1d844ace792d6fa481eb42d64cfb6cecf93f3fbb","modified":1619169831900},{"_id":"source/_posts/1-重拾那份折腾之心，坚定脚步.md","hash":"48411661c725f9518bf4b3243232d84a4a2984bb","modified":1619169831895},{"_id":"source/_drafts/「0」Blog-plans.md","hash":"e3cc62d9a5be58793da4aa2ea339a9b8f14cfc8b","modified":1622086602787},{"_id":"source/_posts/11-hexo-主题-评论-进度条-背景效果.md","hash":"3dd1daf0ffa5c8c8ae5e2940875c750f4a1b16c8","modified":1619169831895},{"_id":"source/_posts/10-sync-mutex解读.md","hash":"a57b53673554d74504ebd6701ccd268785fe1c7c","modified":1619169831895},{"_id":"source/_discarded/info.md","hash":"b6fe5afbecfca4b97e535ae9e987e12d720f0ca6","modified":1619169831894},{"_id":"source/_posts/-1-工具集锦.md","hash":"8439ff6b984cf0af19b5e32b547c22af75a571fa","modified":1657379942493},{"_id":"source/_posts/12-go-指针和引用.md","hash":"e3eef04eb0c9c774b9231bbf26ce53b6fd1786f5","modified":1619169831895},{"_id":"source/_posts/14-hexo-安装-插件.md","hash":"16c09585dd7d4a303aa827c2d91a3fa2acd9aae6","modified":1621217119652},{"_id":"source/_posts/13-Linux-进程.md","hash":"f54ff94b9f09377af31fbc0978dd1cfd328617b6","modified":1619169831895},{"_id":"source/_posts/16-go源码words归纳.md","hash":"abba9a96e010c49ef78ba71a22cd43b99e674667","modified":1619169831895},{"_id":"source/_posts/17-chrome headless.md","hash":"a401d4142b2beda4c7cb5af693e0a086fec0fd37","modified":1619169831895},{"_id":"source/_posts/18-GPM初识.md","hash":"ca9fe6a74a09b7dbe28bb77be184972c868c1d43","modified":1619169831896},{"_id":"source/_posts/19-GPM调度流程.md","hash":"ed4e2f2e60741a86904578a7316b3f4ca1de0648","modified":1619169831896},{"_id":"source/_posts/15-Plan9-汇编小记.md","hash":"1857d3a7feaacf6d8d1bff0b3a4326fbbe9d2a39","modified":1657545116256},{"_id":"source/_posts/2-vscode-常见问题.md","hash":"7e9e00f39ea8ec1ee44e3a65120fa860d2374bac","modified":1619169831896},{"_id":"source/_posts/21-linux-select源码.md","hash":"7b7041bc8bf5091a26a89126ab6873aea76f4822","modified":1619169831896},{"_id":"source/_posts/22-GPM g0和m0.md","hash":"609229e2fd28262f08ded8da2f1045825fc5d3ca","modified":1619169831896},{"_id":"source/_posts/23-GPM-main入口函数.md","hash":"fa4f0e58d88b123292672944d966580921e133a5","modified":1619169831896},{"_id":"source/_posts/20-博客诡异事件.md","hash":"8396a75dd8128eaf17e4e6f347b1ee438cae177c","modified":1619169831896},{"_id":"source/_posts/25-GPM-sysmon函数.md","hash":"8241393532130d2da6f89c6fd0147474e09195ad","modified":1620627271756},{"_id":"source/_posts/24-GPM-newm函数.md","hash":"56a7c9d936f93974f8cc6e677e61c3bd9c6f1857","modified":1619169831896},{"_id":"source/_posts/28-sync-mutex传参复制问题.md","hash":"dd8f8407229dcbd058843afbef89649fc49f90f8","modified":1619169831897},{"_id":"source/_posts/27-Time-Zone时区详解.md","hash":"ebc55f034f5b7fa6a6c5bea3f81572b11eb5533a","modified":1619169831897},{"_id":"source/_posts/26-v1-16.md","hash":"3d32033e72120f7b1b12c6bf59fdba808c969366","modified":1620270921181},{"_id":"source/_posts/30-redis-rdb数据保存.md","hash":"12b9149caa38ebbc8567c59e195915c655cca211","modified":1619169831897},{"_id":"source/_posts/31-float类型易踩的坑.md","hash":"b0f3b1159612f8546c74cecc45b4954d98ef208f","modified":1619169831897},{"_id":"source/_posts/32-go-ticker-内存泄露.md","hash":"987d6e1d4c43c026964684221eef1f6b93dda61e","modified":1619169831897},{"_id":"source/_posts/34-Go-memory-leak-about-RSS.md","hash":"81494c7f903bb794ded59be45dd91629aba9b858","modified":1619169831898},{"_id":"source/_posts/29-map-delete-Mem不释放问题.md","hash":"0a6014ce8de726f55320eb7a94311aa225b546c0","modified":1619169831897},{"_id":"source/_posts/3-git-cz规范提交.md","hash":"52b23cf15d57a69f3be96b805385a16656d2968b","modified":1619169831897},{"_id":"source/_posts/36-defer-panic.md","hash":"245eb259de8e81470b53db4bf566843795484518","modified":1619169831898},{"_id":"source/_posts/37-Quick-sort-快速排序.md","hash":"68dd16bd551ec355284e07db4433441ae4ddb23e","modified":1619169831898},{"_id":"source/_posts/39-select源码实现分析.md","hash":"cac5de1cc395173ee21659dc023fe38ddaa211c7","modified":1619169831899},{"_id":"source/_posts/33-IEEE745-Float.md","hash":"a1d94812e9ce6b7095c706ad9f778590559477b4","modified":1619169831898},{"_id":"source/_posts/38-上亿数据的快速排序.md","hash":"d1b8b7f860c0a72d31edcf0ff96e7033ea748f02","modified":1619169831898},{"_id":"source/_posts/40-Quick-sort-plus-通用模版.md","hash":"5cb4d521a2897fcb9ed923ee633dd1d9f96e5579","modified":1619169831899},{"_id":"source/_posts/35-defer-panic-recover.md","hash":"bbdbce5bc162f38a924e5410ea1840f70a22bbf2","modified":1619169831898},{"_id":"source/_posts/41-关于go中-的使用.md","hash":"fec40bca94fa19b833e2d9e4df849de513645cf2","modified":1620625563413},{"_id":"source/_posts/42-Git-log常用场景.md","hash":"5fa6dbcaa4118e7ec279a41253c3159a3bf06c7d","modified":1620625563413},{"_id":"source/_posts/44-redis-sds源码.md","hash":"1585a44d3b1469d0e1ddf3347a13fb5635b21ce3","modified":1663233416168},{"_id":"source/_posts/45-Go-1-17新特性.md","hash":"8fd35a0ab4b57a49767aa77b46b376d7c9936840","modified":1620625563415},{"_id":"source/_posts/46-chan布局和设计「源码」.md","hash":"e82f5b160b59479a801142e023435cdb0e5717f9","modified":1620625563415},{"_id":"source/_posts/43-redis-aof持久化.md","hash":"a0582cb7ec6963ead02ee99053757d9cff393fef","modified":1620625563413},{"_id":"source/_posts/4-Git常用技巧.md","hash":"84ce9180bb1066a5ec47b8958fcd4619af82026d","modified":1648573129317},{"_id":"source/_posts/5-Git-GPG签署工作.md","hash":"a8ea8c8c513dae4eb4c2d0c66ec7b90a6e30ed62","modified":1619169831899},{"_id":"source/_posts/47-GMP-main启动.md","hash":"ee5b9f2d03deb5ef7549ce74cb976d2e1c2aec3a","modified":1620625563415},{"_id":"source/_posts/49-GPM-runtime操作.md","hash":"0f3bed923478e9861d99fc52c6b452b69edb9c6a","modified":1657379984015},{"_id":"source/_posts/51-getg-函数实现.md","hash":"8e490f11ccfc9f4157ff14f659e8140146a25cd1","modified":1621217119653},{"_id":"source/_posts/50-map影响GC问题.md","hash":"935ca3eac4e905bf47d31de766dc0add589ec869","modified":1620886642246},{"_id":"source/_posts/48-GMP-main之G-M创建.md","hash":"c73ed29c7b37b534556b44557a1bf3c151bc80c1","modified":1621217119653},{"_id":"source/_posts/53-dfs-bfs-01背包.md","hash":"2aeb8fde291e1aba02e92c8956561b3439cd0ffa","modified":1622027720895},{"_id":"source/_posts/56-list-stack-tree.md","hash":"71ef87adc2b48c1665dc92620cbc9f68dac6a51b","modified":1663233416169},{"_id":"source/_posts/54-GoSched函数.md","hash":"fae3c0e4914ebd13510a7276d4ec7976fc13d2ed","modified":1622082493168},{"_id":"source/_posts/6-git 初阶:安装配置 ～1.md","hash":"ba2b33a24c0326f4e990bb79e6d21e92298c53d8","modified":1619169831900},{"_id":"source/_posts/52-Mysql-top-N问题.md","hash":"ee9f312bf898bf2920feb7bab6a33659ad88224a","modified":1622027720894},{"_id":"source/_posts/55-Go-1-18-pre.md","hash":"81f64a8679133f5b3f4d10f2f092a5dc35f34a31","modified":1622168643036},{"_id":"source/_posts/57-算法-二-链表.md","hash":"ecfcd9a0db4da1ee32379aea6ddc1445b8abbfe3","modified":1663233416170},{"_id":"source/_posts/60-wireshark-使用.md","hash":"d3ffba840ccfbc25683e8e9f6d0dd9964fb70448","modified":1663233416171},{"_id":"source/_posts/61-redis-hash.md","hash":"31ba0f11c979cfd9ddd9bf43c85a0f43a6fe9050","modified":1663233416171},{"_id":"source/_posts/83-mysql小记.md","hash":"ec6e09cd03d3971ec4f8159c76dc742155fe3a67","modified":1663233416172},{"_id":"source/_posts/82-openwrt-折腾记.md","hash":"69a6f594fd6abac1bf6a2c04af3d0057233cb759","modified":1663233416172},{"_id":"source/_posts/7-Go-Context包使用.md","hash":"95ff1482e995f1f2b38a73344db2e7f810fdbd9e","modified":1619169831900},{"_id":"source/_posts/62-redis-rehash过程.md","hash":"b1ac43151625d19cf844ebc831500535e3d2f5ad","modified":1663230556801},{"_id":"source/_posts/9-Go-reflect-DeepEqual.md","hash":"2aab62d874ae92bd130a80cf7f83253b445002b1","modified":1619169831900},{"_id":"source/_posts/91-regex.md","hash":"bd47440fbcb883325419496413e4394da50cc09f","modified":1663233416174},{"_id":"source/_posts/8-go-rwmutex解读.md","hash":"8112aaa8bdaa9515459141d23e9b1035c76ef15f","modified":1657544846763},{"_id":"source/_posts/84-tcpdump-wireshark.md","hash":"43fd86cd7c6af745c99e95f5967275595250e4a1","modified":1663233416173},{"_id":"source/_posts/90-kubebuilder.md","hash":"41ccbf7bb54d11aa1c35c8690a9e43717ef451a7","modified":1663233416174},{"_id":"themes/nextTheme/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1663230594173},{"_id":"themes/nextTheme/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1663230594169},{"_id":"themes/nextTheme/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1663230594170},{"_id":"themes/nextTheme/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1663230594170},{"_id":"themes/nextTheme/_vendors.yml","hash":"6a7bab46b4fc9d7722e29e2dac549def0d8dcaa3","modified":1663230594174},{"_id":"themes/nextTheme/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1663230594173},{"_id":"themes/nextTheme/package.json","hash":"bbe3995c35b05028273e1def2394c3333a270654","modified":1663230594196},{"_id":"themes/nextTheme/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1663230594173},{"_id":"themes/nextTheme/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1663230594170},{"_id":"themes/nextTheme/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1663230594174},{"_id":"themes/nextTheme/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1663230594196},{"_id":"themes/nextTheme/README.md","hash":"56638e4978154a2f2a3f03ba84047b77b4a499cc","modified":1663230594173},{"_id":"themes/nextTheme/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1663230594170},{"_id":"themes/nextTheme/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1663230594170},{"_id":"themes/nextTheme/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1663230594171},{"_id":"themes/nextTheme/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1663230594171},{"_id":"themes/nextTheme/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1663230594172},{"_id":"themes/nextTheme/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1663230594172},{"_id":"themes/nextTheme/_config.yml","hash":"ab829a0733ff9f8c394692f1717c92ade094b7ff","modified":1663231146082},{"_id":"themes/nextTheme/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1663230594172},{"_id":"themes/nextTheme/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1663230594171},{"_id":"themes/nextTheme/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1663230594172},{"_id":"themes/nextTheme/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1663230594174},{"_id":"themes/nextTheme/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1663230594174},{"_id":"themes/nextTheme/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1663230594174},{"_id":"themes/nextTheme/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1663230594175},{"_id":"themes/nextTheme/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1663230594176},{"_id":"themes/nextTheme/languages/bn.yml","hash":"fccbf2855392186e11daa8590121073594037b7b","modified":1663230594176},{"_id":"themes/nextTheme/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1663230594176},{"_id":"themes/nextTheme/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1663230594176},{"_id":"themes/nextTheme/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1663230594176},{"_id":"themes/nextTheme/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1663230594176},{"_id":"themes/nextTheme/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1663230594176},{"_id":"themes/nextTheme/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1663230594176},{"_id":"themes/nextTheme/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1663230594177},{"_id":"themes/nextTheme/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1663230594177},{"_id":"themes/nextTheme/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1663230594177},{"_id":"themes/nextTheme/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1663230594177},{"_id":"themes/nextTheme/languages/ko.yml","hash":"819c19eb9d142e5411f77cf3821d90f740ee114a","modified":1663230594177},{"_id":"themes/nextTheme/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1663230594177},{"_id":"themes/nextTheme/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1663230594177},{"_id":"themes/nextTheme/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1663230594178},{"_id":"themes/nextTheme/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1663230594177},{"_id":"themes/nextTheme/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1663230594178},{"_id":"themes/nextTheme/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1663230594178},{"_id":"themes/nextTheme/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1663230594178},{"_id":"themes/nextTheme/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1663230594178},{"_id":"themes/nextTheme/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1663230594178},{"_id":"themes/nextTheme/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1663230594178},{"_id":"themes/nextTheme/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1663230594179},{"_id":"themes/nextTheme/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1663230594179},{"_id":"themes/nextTheme/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1663230594189},{"_id":"themes/nextTheme/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1663230594189},{"_id":"themes/nextTheme/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1663230594195},{"_id":"themes/nextTheme/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1663230594195},{"_id":"themes/nextTheme/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1663230594196},{"_id":"themes/nextTheme/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1663230594195},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1663230594171},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1663230594171},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1663230594171},{"_id":"themes/nextTheme/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1663230594238},{"_id":"themes/nextTheme/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1663230594172},{"_id":"themes/nextTheme/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1663230594171},{"_id":"themes/nextTheme/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1663230594172},{"_id":"themes/nextTheme/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1663230594172},{"_id":"themes/nextTheme/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1663230594173},{"_id":"themes/nextTheme/docs/ru/README.md","hash":"6c82bfd2ec8248c248da701f091b548a7a133580","modified":1663230594175},{"_id":"themes/nextTheme/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1663230594173},{"_id":"themes/nextTheme/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1663230594179},{"_id":"themes/nextTheme/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1663230594175},{"_id":"themes/nextTheme/layout/_macro/post.njk","hash":"434b3e76a040a816169e1929657e4176e7b8164c","modified":1663230594179},{"_id":"themes/nextTheme/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1663230594175},{"_id":"themes/nextTheme/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1663230594180},{"_id":"themes/nextTheme/docs/zh-CN/README.md","hash":"ccf27b9249524b9fec1c15497b4353c8d1748c6c","modified":1663230594175},{"_id":"themes/nextTheme/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1663230594179},{"_id":"themes/nextTheme/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1663230594180},{"_id":"themes/nextTheme/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1663230594183},{"_id":"themes/nextTheme/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1663230594182},{"_id":"themes/nextTheme/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1663230594181},{"_id":"themes/nextTheme/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1663230594184},{"_id":"themes/nextTheme/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1663230594184},{"_id":"themes/nextTheme/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1663230594187},{"_id":"themes/nextTheme/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1663230594187},{"_id":"themes/nextTheme/scripts/events/index.js","hash":"3ce10d4cce94e3d4c482c2e18bb6f0f0ca380d3d","modified":1663230594196},{"_id":"themes/nextTheme/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/minify.js","hash":"f160e39943e39d7276da86adb47c3f08e5f22c7a","modified":1663230594200},{"_id":"themes/nextTheme/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/post.js","hash":"30e03a1d4828259f82d46e64cbfe2955b6cff9a9","modified":1663230594200},{"_id":"themes/nextTheme/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1663230594200},{"_id":"themes/nextTheme/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1663230594200},{"_id":"themes/nextTheme/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1663230594200},{"_id":"themes/nextTheme/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1663230594200},{"_id":"themes/nextTheme/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1663230594201},{"_id":"themes/nextTheme/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1663230594201},{"_id":"themes/nextTheme/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1663230594206},{"_id":"themes/nextTheme/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1663230594201},{"_id":"themes/nextTheme/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1663230594206},{"_id":"themes/nextTheme/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1663230594206},{"_id":"themes/nextTheme/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1663230594206},{"_id":"themes/nextTheme/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1663230594207},{"_id":"themes/nextTheme/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1663230594207},{"_id":"themes/nextTheme/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1663230594207},{"_id":"themes/nextTheme/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1663230594187},{"_id":"themes/nextTheme/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1663230594207},{"_id":"themes/nextTheme/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1663230594207},{"_id":"themes/nextTheme/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1663230594207},{"_id":"themes/nextTheme/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1663230594208},{"_id":"themes/nextTheme/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1663230594208},{"_id":"themes/nextTheme/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1663230594226},{"_id":"themes/nextTheme/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1663230594230},{"_id":"themes/nextTheme/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1663230594230},{"_id":"themes/nextTheme/source/css/noscript.styl","hash":"263eddabfae40e54c0591e7baa8403ade8cdd56d","modified":1663230594230},{"_id":"themes/nextTheme/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1663230594230},{"_id":"themes/nextTheme/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1663230594230},{"_id":"themes/nextTheme/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1663230594231},{"_id":"themes/nextTheme/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1663230594231},{"_id":"themes/nextTheme/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1663230594230},{"_id":"themes/nextTheme/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1663230594231},{"_id":"themes/nextTheme/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1663230594231},{"_id":"themes/nextTheme/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1663230594231},{"_id":"themes/nextTheme/source/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1663230594232},{"_id":"themes/nextTheme/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1663230594232},{"_id":"themes/nextTheme/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1663230594232},{"_id":"themes/nextTheme/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1663230594232},{"_id":"themes/nextTheme/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1663230594232},{"_id":"themes/nextTheme/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1663230594237},{"_id":"themes/nextTheme/source/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1663230594237},{"_id":"themes/nextTheme/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1663230594238},{"_id":"themes/nextTheme/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1663230594238},{"_id":"themes/nextTheme/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1663230594238},{"_id":"themes/nextTheme/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1663230594238},{"_id":"themes/nextTheme/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1663230594238},{"_id":"themes/nextTheme/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1663230594239},{"_id":"themes/nextTheme/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1663230594240},{"_id":"themes/nextTheme/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1663230594240},{"_id":"themes/nextTheme/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1663230594240},{"_id":"themes/nextTheme/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1663230594180},{"_id":"themes/nextTheme/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1663230594180},{"_id":"themes/nextTheme/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1663230594180},{"_id":"themes/nextTheme/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1663230594180},{"_id":"themes/nextTheme/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1663230594182},{"_id":"themes/nextTheme/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1663230594182},{"_id":"themes/nextTheme/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1663230594182},{"_id":"themes/nextTheme/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1663230594181},{"_id":"themes/nextTheme/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1663230594182},{"_id":"themes/nextTheme/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1663230594182},{"_id":"themes/nextTheme/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1663230594183},{"_id":"themes/nextTheme/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1663230594183},{"_id":"themes/nextTheme/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1663230594183},{"_id":"themes/nextTheme/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1663230594183},{"_id":"themes/nextTheme/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1663230594183},{"_id":"themes/nextTheme/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1663230594183},{"_id":"themes/nextTheme/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1663230594184},{"_id":"themes/nextTheme/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1663230594184},{"_id":"themes/nextTheme/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1663230594184},{"_id":"themes/nextTheme/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1663230594184},{"_id":"themes/nextTheme/layout/_third-party/analytics/index.njk","hash":"314805f0186e9f6208c845f0757fdb7891c540f6","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1663230594185},{"_id":"themes/nextTheme/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1663230594186},{"_id":"themes/nextTheme/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1663230594187},{"_id":"themes/nextTheme/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1663230594187},{"_id":"themes/nextTheme/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1663230594187},{"_id":"themes/nextTheme/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1663230594188},{"_id":"themes/nextTheme/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1663230594188},{"_id":"themes/nextTheme/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1663230594188},{"_id":"themes/nextTheme/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1663230594188},{"_id":"themes/nextTheme/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1663230594188},{"_id":"themes/nextTheme/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1663230594188},{"_id":"themes/nextTheme/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1663230594188},{"_id":"themes/nextTheme/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1663230594196},{"_id":"themes/nextTheme/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1663230594189},{"_id":"themes/nextTheme/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1663230594197},{"_id":"themes/nextTheme/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1663230594197},{"_id":"themes/nextTheme/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1663230594198},{"_id":"themes/nextTheme/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1663230594198},{"_id":"themes/nextTheme/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1663230594198},{"_id":"themes/nextTheme/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1663230594198},{"_id":"themes/nextTheme/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1663230594198},{"_id":"themes/nextTheme/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1663230594198},{"_id":"themes/nextTheme/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/comment/disqusjs.js","hash":"62faf6b0b0020066a0dec1f0123cf1fee3198e7e","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1663230594199},{"_id":"themes/nextTheme/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1663230594199},{"_id":"themes/nextTheme/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1663230594229},{"_id":"themes/nextTheme/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1663230594229},{"_id":"themes/nextTheme/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1663230594229},{"_id":"themes/nextTheme/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1663230594229},{"_id":"themes/nextTheme/source/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1663230594232},{"_id":"themes/nextTheme/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1663230594230},{"_id":"themes/nextTheme/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1663230594235},{"_id":"themes/nextTheme/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1663230594235},{"_id":"themes/nextTheme/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1663230594235},{"_id":"themes/nextTheme/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1663230594235},{"_id":"themes/nextTheme/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1663230594211},{"_id":"themes/nextTheme/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1663230594212},{"_id":"themes/nextTheme/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1663230594221},{"_id":"themes/nextTheme/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1663230594215},{"_id":"themes/nextTheme/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1663230594221},{"_id":"themes/nextTheme/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1663230594223},{"_id":"themes/nextTheme/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1663230594223},{"_id":"themes/nextTheme/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1663230594223},{"_id":"themes/nextTheme/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1663230594224},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1663230594224},{"_id":"themes/nextTheme/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1663230594224},{"_id":"themes/nextTheme/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1663230594224},{"_id":"themes/nextTheme/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1663230594226},{"_id":"themes/nextTheme/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1663230594226},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1663230594226},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1663230594227},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1663230594227},{"_id":"themes/nextTheme/source/css/_schemes/Mist/_posts-expand.styl","hash":"be6cf377ae8f4a01ee76f9b3014e74161d4d5d17","modified":1663230594227},{"_id":"themes/nextTheme/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1663230594227},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1663230594227},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1663230594227},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1663230594228},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1663230594228},{"_id":"themes/nextTheme/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1663230594228},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1663230594228},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1663230594229},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1663230594228},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1663230594228},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1663230594229},{"_id":"themes/nextTheme/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1663230594229},{"_id":"themes/nextTheme/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1663230594233},{"_id":"themes/nextTheme/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1663230594228},{"_id":"themes/nextTheme/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1663230594233},{"_id":"themes/nextTheme/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1663230594233},{"_id":"themes/nextTheme/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1663230594233},{"_id":"themes/nextTheme/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1663230594233},{"_id":"themes/nextTheme/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1663230594233},{"_id":"themes/nextTheme/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1663230594234},{"_id":"themes/nextTheme/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1663230594235},{"_id":"themes/nextTheme/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1663230594235},{"_id":"themes/nextTheme/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1663230594235},{"_id":"themes/nextTheme/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1663230594236},{"_id":"themes/nextTheme/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1663230594236},{"_id":"themes/nextTheme/source/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1663230594236},{"_id":"themes/nextTheme/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1663230594236},{"_id":"themes/nextTheme/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1663230594237},{"_id":"themes/nextTheme/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1663230594237},{"_id":"themes/nextTheme/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1663230594220},{"_id":"themes/nextTheme/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1663230594220},{"_id":"themes/nextTheme/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1663230594220},{"_id":"themes/nextTheme/source/css/_common/outline/header/index.styl","hash":"ff642130354a0b3be0d708c43044ed4d710b5e83","modified":1663230594220},{"_id":"themes/nextTheme/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1663230594221},{"_id":"themes/nextTheme/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1663230594220},{"_id":"themes/nextTheme/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1663230594221},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1663230594221},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1663230594223},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1663230594222},{"_id":"themes/nextTheme/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1663230594223},{"_id":"themes/nextTheme/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1663230594212},{"_id":"themes/nextTheme/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1663230594212},{"_id":"themes/nextTheme/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1663230594212},{"_id":"themes/nextTheme/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1663230594212},{"_id":"themes/nextTheme/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1663230594212},{"_id":"themes/nextTheme/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1663230594213},{"_id":"themes/nextTheme/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1663230594213},{"_id":"themes/nextTheme/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1663230594213},{"_id":"themes/nextTheme/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1663230594213},{"_id":"themes/nextTheme/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1663230594213},{"_id":"themes/nextTheme/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1663230594215},{"_id":"themes/nextTheme/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1663230594215},{"_id":"themes/nextTheme/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1663230594215},{"_id":"themes/nextTheme/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1663230594215},{"_id":"themes/nextTheme/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1663230594215},{"_id":"themes/nextTheme/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1663230594216},{"_id":"themes/nextTheme/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1663230594216},{"_id":"themes/nextTheme/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1663230594216},{"_id":"themes/nextTheme/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1663230594216},{"_id":"themes/nextTheme/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1663230594216},{"_id":"themes/nextTheme/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1663230594217},{"_id":"themes/nextTheme/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1663230594219},{"_id":"themes/nextTheme/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1663230594223},{"_id":"themes/nextTheme/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1663230594224},{"_id":"themes/nextTheme/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1663230594217},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1663230594224},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1663230594225},{"_id":"themes/nextTheme/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1663230594226},{"_id":"public/baidusitemap.xml","hash":"fbff0bf879c5207c54be65aaaae6f656836cd0df","modified":1663233606335},{"_id":"public/sitemap.xml","hash":"769fb15289697cf4de99a56c404a3a9ef4cbe21c","modified":1663233606335},{"_id":"public/search.xml","hash":"b2084fb88265e17ef8281211405b3d2545381a44","modified":1663233606335},{"_id":"public/categories/index.html","hash":"86865dd7910a77ee32c2a210ea113eef570ea3e1","modified":1663233414384},{"_id":"public/tags/index.html","hash":"cb03845e2e5b9f47da9b5e9c805ec36f2af54203","modified":1663233414384},{"_id":"public/archives/ff6a07f.html","hash":"929afd06e8683d2e9441e8945de840f6912156e5","modified":1663233606335},{"_id":"public/archives/b0be3190.html","hash":"7e5de657395e332d03a85a3df1c532483e31e647","modified":1663233414384},{"_id":"public/archives/c3ee0f57.html","hash":"9ad49d5dc340730afce056c9290921fc27376dfb","modified":1663233414384},{"_id":"public/archives/2dfee217.html","hash":"916ca4f2b175efcb3f311bef53e3527cdaeb3e44","modified":1663233414384},{"_id":"public/archives/82f0ffe7.html","hash":"e42ffe0f292478173a72b238c412d5045daf7e62","modified":1663233414384},{"_id":"public/archives/8cf3cbca.html","hash":"09f40332cb0da9f4ceaa5a990f6d6d13b599b4ba","modified":1663233414384},{"_id":"public/archives/640b5696.html","hash":"f9fa90d2996af6820d5cf72a8e7c824a1638e7c3","modified":1663233414384},{"_id":"public/archives/index.html","hash":"c89c94f73ecb9d0bb5d87aab57268f1487c860d8","modified":1663233414384},{"_id":"public/archives/page/2/index.html","hash":"8be96cb7271b8670d6b3179e8b7ce203f4ce99f2","modified":1663233414384},{"_id":"public/archives/page/3/index.html","hash":"973a1f6f098cfb96830f30fdce60368103b35b07","modified":1663233414384},{"_id":"public/archives/page/4/index.html","hash":"1869ce1d867ee8b1120cf665e435217f1b914614","modified":1663233414384},{"_id":"public/archives/page/5/index.html","hash":"89e08a7ffd3fe945a39e80a392bc87bf7b0840e3","modified":1663233414384},{"_id":"public/archives/page/6/index.html","hash":"b30adf1ab71ce3934cca95bf20a94152dcc6632f","modified":1663233414384},{"_id":"public/archives/page/7/index.html","hash":"99484d2d1187c4534533aa457236163d7fc38721","modified":1663233414384},{"_id":"public/archives/2020/index.html","hash":"3934ca423e3a91e26a8f4e5085db0b5377932312","modified":1663233414384},{"_id":"public/archives/2020/page/2/index.html","hash":"adcfc6d988774062ad99019dbd11917735b41b12","modified":1663233414384},{"_id":"public/archives/2020/page/3/index.html","hash":"8073073dbe68ab6935448844f26a4b8210502c6d","modified":1663233414384},{"_id":"public/archives/2020/08/index.html","hash":"11aa764cb01a87841d71eae9947b7d85965b6446","modified":1663233414384},{"_id":"public/archives/2020/09/index.html","hash":"f71b853aaba6586b71ca426f5d74b98a4471a67d","modified":1663233414384},{"_id":"public/archives/2020/09/page/2/index.html","hash":"9d09c48acdf3432ae13b393d3626dfbafc3f232f","modified":1663233414384},{"_id":"public/archives/2020/10/index.html","hash":"161a6a731a911c912aba12404c747d7e07b3b532","modified":1663233414384},{"_id":"public/archives/2020/11/index.html","hash":"55ab1a47229ea521edd9bc3d5e9ef9962e679881","modified":1663233414384},{"_id":"public/archives/2020/12/index.html","hash":"0acca819bf1cf560bb629291a0516cea07a9b3ef","modified":1663233414384},{"_id":"public/archives/2021/index.html","hash":"1bb7ed40c10595ac6b137e2f504da8a2d0044d9a","modified":1663233414384},{"_id":"public/archives/2021/page/2/index.html","hash":"6dc5bd777439abe0e21ae9806df5f303c9dbb1d8","modified":1663233414384},{"_id":"public/archives/2021/page/3/index.html","hash":"8996d46d1dbab9607a40628cb81f2e577923f48f","modified":1663233414384},{"_id":"public/archives/2021/page/4/index.html","hash":"c333d11b8445b06fc62694b094b529a2b524ba64","modified":1663233414384},{"_id":"public/archives/2021/01/index.html","hash":"c6435bd652673f5034ec1a9444afec83aa44376a","modified":1663233414384},{"_id":"public/archives/2021/02/index.html","hash":"412776b2c9cea30e1015f4724d19e593faec5096","modified":1663233414384},{"_id":"public/archives/2021/03/index.html","hash":"1759ed157c7ba71d1f09059af458ad4214087e53","modified":1663233414384},{"_id":"public/archives/2021/04/index.html","hash":"6c1136f829256b0bc26fbb42e6dfaebd4b2262d6","modified":1663233414384},{"_id":"public/archives/2021/05/index.html","hash":"a103cad638550da7c629ee4c9c243218fb6028e9","modified":1663233414384},{"_id":"public/archives/2021/05/page/2/index.html","hash":"58fad05fd828bcd82e3d6d5425c2f72322d71c34","modified":1663233414384},{"_id":"public/archives/2021/07/index.html","hash":"78f2ecefbfd30d36f1a4fedad39993910ec508d3","modified":1663233414384},{"_id":"public/archives/2021/08/index.html","hash":"e401d30f1c33fe1e2bcd2acfe0d1db3c41b64ec6","modified":1663233414384},{"_id":"public/archives/2021/11/index.html","hash":"4754882777b6b4d0a1c7037c8a687b8400572c4d","modified":1663233414384},{"_id":"public/archives/2021/12/index.html","hash":"8507ab9a6edfd2aa9555801b5c9fb155c08ec372","modified":1663233414384},{"_id":"public/archives/2022/index.html","hash":"79ade639d150e2b6f670eda40fe3bf88de167d91","modified":1663233414384},{"_id":"public/archives/2022/02/index.html","hash":"1d06243269caf95fd226df9a3c4a1d4879670af5","modified":1663233414384},{"_id":"public/archives/2022/03/index.html","hash":"1015262b7d89ef841cbef3f9c3bbef00a20d4164","modified":1663233414384},{"_id":"public/archives/2022/08/index.html","hash":"a0276d993e6e842503c8d766924be019af6c9ac7","modified":1663233414384},{"_id":"public/tags/Go/index.html","hash":"e417984c95adf0fe4b7bbc136340a10764ad7c8c","modified":1663233414384},{"_id":"public/tags/Go/page/2/index.html","hash":"a8d6f094e2018e03cc5014b66cedda70f3a7de78","modified":1663233414384},{"_id":"public/tags/Go/page/3/index.html","hash":"e3386686de87b2419c72f482358537410d7a4033","modified":1663233414384},{"_id":"public/tags/Go/page/4/index.html","hash":"f86ce65884ec88884cb482bc7f35c8c4d91d620b","modified":1663233414384},{"_id":"public/tags/GPM/index.html","hash":"fda8887009a25cf8dc1e2f08ec1aaaa5adc7a84a","modified":1663233414384},{"_id":"public/tags/Go源码/index.html","hash":"a97e64541b564d22373a7fc3b1f0f3da17f4cacc","modified":1663233414384},{"_id":"public/tags/Go源码/page/2/index.html","hash":"6aa5b5e42db49e83cced955f4f053533d7c90183","modified":1663233414384},{"_id":"public/tags/Git/index.html","hash":"849ed32bc29a2f22d24012c15805971768dee778","modified":1663233414384},{"_id":"public/tags/life/index.html","hash":"115ef6f340236a847ef13039b8b270120c0f4f69","modified":1663233414384},{"_id":"public/tags/Go-Package/index.html","hash":"75ffab857bdebc8f801b6da70eb8cdd91bd5ba6e","modified":1663233414384},{"_id":"public/tags/锁/index.html","hash":"4ff60f0731b08406693824b23663163de9b88eec","modified":1663233414384},{"_id":"public/tags/hexo/index.html","hash":"31a47e67078a431c2871f0b5280ff1e1595ea284","modified":1663233414384},{"_id":"public/tags/hexo插件/index.html","hash":"fd8f51efb1ef020ab93189ff68faef805c3af881","modified":1663233414384},{"_id":"public/tags/Day/index.html","hash":"856d3eab1bfcaeea0ee38f4499f04319b4cbc15b","modified":1663233414384},{"_id":"public/tags/Day/page/2/index.html","hash":"f34e928fbce6572ab50086097c3a01d241b46db5","modified":1663233414384},{"_id":"public/tags/Day/page/3/index.html","hash":"cd4822c775de2107b6ea1c764920ebc7e8aba56e","modified":1663233414384},{"_id":"public/tags/Day/page/4/index.html","hash":"913921ac878cde8ed0603979fd968b8492eda2bd","modified":1663233414384},{"_id":"public/tags/Linux/index.html","hash":"72dfafb237fc7ad217f43a115db6f2e40e1384cc","modified":1663233414384},{"_id":"public/tags/进程/index.html","hash":"bc345b1cbed21137194621a8745640de8a8614f2","modified":1663233414384},{"_id":"public/tags/Plan9/index.html","hash":"e0a47ea31e06a5ff249ecf9f1c3654cc770c48b3","modified":1663233414384},{"_id":"public/tags/chrome/index.html","hash":"1881c1be83f857292725500fd08b97808d18854c","modified":1663233414384},{"_id":"public/tags/vscode/index.html","hash":"4758fc27660d75d8cd078000ce87310074820261","modified":1663233414384},{"_id":"public/tags/工具/index.html","hash":"f662f0fa8ed818dc74b9438116065c0e58c5de95","modified":1663233414384},{"_id":"public/tags/博客/index.html","hash":"a838ed1903e22c1e13500ac92aebe47d9bf7de95","modified":1663233414384},{"_id":"public/tags/Go-1-16/index.html","hash":"2c12951934ded6a820468da32dd59d110487b452","modified":1663233414384},{"_id":"public/tags/encoding-json/index.html","hash":"64e9bf0616ff738008140e1a2e620539ff2ed374","modified":1663233414384},{"_id":"public/tags/time/index.html","hash":"a38f6588662745745d687fbca8c73337e4857f26","modified":1663233414384},{"_id":"public/tags/sync/index.html","hash":"153ad15e22662674680fe695ab5f3685f6e5f099","modified":1663233414384},{"_id":"public/tags/Mutex/index.html","hash":"690a95a17e0f69c1b4086a1633c75ad607b286c1","modified":1663233414384},{"_id":"public/tags/Map/index.html","hash":"ba7b85e8c47305aa5cdc0bd36360f5a33113c7e7","modified":1663233414384},{"_id":"public/tags/Hash/index.html","hash":"99895ae276b3328c66a2196f148f8016d5db5fba","modified":1663233414384},{"_id":"public/tags/Redis/index.html","hash":"477947f347cb2c7d7360d44eeccb2bb588bb8a34","modified":1663233414384},{"_id":"public/tags/RDB/index.html","hash":"456daaba018035d79a17246d2e8e6211ab23c1d9","modified":1663233414384},{"_id":"public/tags/源码/index.html","hash":"19547e4261bbabd8be062123dc84756fd6777e42","modified":1663233414384},{"_id":"public/tags/Golang/index.html","hash":"66d96eabc3e9503ebdae934f1055b32b9d009ba4","modified":1663233414384},{"_id":"public/tags/Float/index.html","hash":"78e547568ef5707edbf216f3e2d39ec959094922","modified":1663233414384},{"_id":"public/tags/IEEE/index.html","hash":"c90d86afbc867c461cddec3e9d6ebdd6fc3f291c","modified":1663233414384},{"_id":"public/tags/ticker/index.html","hash":"e46a9fa344cfb37a1c72661487d9c5ee0d56ea65","modified":1663233414384},{"_id":"public/tags/defer/index.html","hash":"d03f1e763b94166db4668d4272802fe0ccfc18da","modified":1663233414384},{"_id":"public/tags/位运算/index.html","hash":"af7f7744b149be0b64c8a5e10ddea89590752def","modified":1663233414384},{"_id":"public/tags/Runtime/index.html","hash":"873b2c366e98085022e6db231510de8809510628","modified":1663233414384},{"_id":"public/tags/v1-16/index.html","hash":"49114998e0b8c0765df0c3016626738542d18d41","modified":1663233414384},{"_id":"public/tags/v1-14/index.html","hash":"2c942a11e7b2009f38d00148196d15d50f6c61ae","modified":1663233414384},{"_id":"public/tags/Sort/index.html","hash":"939b0178e5c670486315ba07a57b7bcaf510bf89","modified":1663233414384},{"_id":"public/tags/SDS/index.html","hash":"fe7fa676c93c63747068ce298d33115dd6385069","modified":1663233414384},{"_id":"public/tags/Go-1-17/index.html","hash":"de48a9a9c057d4aebd6f4399fda837e00204bcab","modified":1663233414384},{"_id":"public/tags/chan/index.html","hash":"96d7421b42dbe628cba113471be22202527fc8aa","modified":1663233414384},{"_id":"public/tags/MySQL/index.html","hash":"0ed486618889830795e80b1ba91b6ae67129f73e","modified":1663233414384},{"_id":"public/tags/算法/index.html","hash":"2a8e240058882160c8d65419bebcb0f841d669ef","modified":1663233414384},{"_id":"public/tags/v1-18/index.html","hash":"f3f870be3ee9fa167d28c6b053988df2622099f0","modified":1663233414384},{"_id":"public/tags/openwrt/index.html","hash":"94c964d2936878369b47660b07e0f5b46e30b9d3","modified":1663233414384},{"_id":"public/tags/软路由/index.html","hash":"817c1e2d3000fe6abde9031e9e14d5cf294f97ef","modified":1663233414384},{"_id":"public/tags/网络/index.html","hash":"61c44227fc2de5797c9da1f03bab8f12c9224c73","modified":1663233414384},{"_id":"public/tags/小记/index.html","hash":"ce895d91bf4cf80938312f62eeeec416d029f8b3","modified":1663233414384},{"_id":"public/tags/抓包/index.html","hash":"3ba702a6b247153bdad215b73fc9cb98edf3f7b8","modified":1663233414384},{"_id":"public/tags/tcpdump/index.html","hash":"b262e8b38a87014b8ab187bd79fe942e9127db79","modified":1663233414384},{"_id":"public/tags/k8s/index.html","hash":"c8f145a710d9e74647cb711513ddb3a8bd0c8af5","modified":1663233414384},{"_id":"public/tags/operator/index.html","hash":"e853b0160361e6cddd3bd119371258822af6b2f1","modified":1663233414384},{"_id":"public/tags/kubebuilder/index.html","hash":"3d3313d24ca68ea6744fd240b83ca359c3c60e95","modified":1663233414384},{"_id":"public/tags/Go-reflect/index.html","hash":"e1fb15a35c33eaacafd595dd9e825e1124488e3f","modified":1663233414384},{"_id":"public/archives/675841d.html","hash":"a0a3e39627e4be7f08fd4819cd30e41d93df7451","modified":1663233606335},{"_id":"public/archives/a4b12394.html","hash":"a2941f237da3b63628c2f921605b4133d2e48bd3","modified":1663233606335},{"_id":"public/archives/b09eedc6.html","hash":"5d82b6cd2949f6438623f60f68a134cbbf8e02e9","modified":1663233606335},{"_id":"public/archives/977b6995.html","hash":"070df492fa4fbd04dba50bcb7389509a0c36f54c","modified":1663233606335},{"_id":"public/archives/f733f408.html","hash":"aec87c0206c6784f28443c12e08f41711909a6e4","modified":1663233414384},{"_id":"public/archives/68b4ef49.html","hash":"a3278d3ca04f12f01799d245209dca6b38d96d00","modified":1663233414384},{"_id":"public/archives/8afe733.html","hash":"9e4c10547adc50e3a0251def5b4ce299f44ac10e","modified":1663233606335},{"_id":"public/archives/afe7994b.html","hash":"bad363a5b7769e25953f2eaa3ae808c589fef58d","modified":1663233414384},{"_id":"public/archives/517e6fa6.html","hash":"59195536ec8d88220706233cca9fa057e906a32f","modified":1663233414384},{"_id":"public/archives/10a41c81.html","hash":"256e071b184a384cbcaaa48a5ece4683fb63e69d","modified":1663233414384},{"_id":"public/archives/517092f1.html","hash":"971df5a6c1cb8b74431c3b30f277f9e64f86936e","modified":1663233414384},{"_id":"public/archives/af25fb6c.html","hash":"94234f26fa910e311af4ef6abfe2ad50b9c71d53","modified":1663233414384},{"_id":"public/archives/a90dcb34.html","hash":"811e59f352858066d772f748ea57d2e3f4d7951c","modified":1663233414384},{"_id":"public/archives/3b137bd0.html","hash":"3af8894823db2205215fe833d95700e2d2bf7811","modified":1663233414384},{"_id":"public/archives/66b6223a.html","hash":"fc3f2bef6736d2068126a2f5c1ab67518c70cd42","modified":1663233414384},{"_id":"public/archives/a0547b09.html","hash":"d4f05e4d46fc5e84cbf4ff29a2bea72c7224b70c","modified":1663233414384},{"_id":"public/archives/5549cd1.html","hash":"8f498e0cc759eb6e1425c21d5565eb0339d9b19d","modified":1663233414384},{"_id":"public/archives/9989a7c4.html","hash":"63f0a7e233347ed0b3e22519260cdab3eb9dcbaf","modified":1663233414384},{"_id":"public/archives/777dd730.html","hash":"5de4f00417b47e5f8146a4e032ecb426550f3c8d","modified":1663233414384},{"_id":"public/archives/a02f04ba.html","hash":"1d4547df65bf95cfda26eab8f3786c683c7e193d","modified":1663233414384},{"_id":"public/archives/9af9679c.html","hash":"66eec26e6a76d31b6a2f1af12ed943f6db5d4975","modified":1663233414384},{"_id":"public/archives/359bb4b6.html","hash":"10f7a014c39a8734f6039564eca1277be42cd0ba","modified":1663233414384},{"_id":"public/archives/e1051649.html","hash":"f2ccbb411334ff65ce44b75988a7e011c9aeb5a2","modified":1663233414384},{"_id":"public/archives/26af015.html","hash":"5b6e7d46f8542b91ff61690914dbb39b968947f1","modified":1663233414384},{"_id":"public/archives/aa75061e.html","hash":"1e6de92c24a19521fc3ad332fdeb51ee1d200dcd","modified":1663233414384},{"_id":"public/archives/b630d910.html","hash":"932c5a02eea22c9c36b06e37851105a4dbc7db2f","modified":1663233414384},{"_id":"public/archives/d586b949.html","hash":"9f451b27d3505673c66ebba9e3ee1fa1e7564f80","modified":1663233414384},{"_id":"public/archives/c0e329b8.html","hash":"9ba77cb99eeeb593b4f0aaaf9587571b8ddc06ed","modified":1663233414384},{"_id":"public/archives/257c4ce2.html","hash":"b570124572b73c806534efc3de0c37a9ac115f4d","modified":1663233414384},{"_id":"public/archives/53e1932f.html","hash":"3d961e883a42c9f6f8b9e4a886bf17ab8b1fa95f","modified":1663233414384},{"_id":"public/archives/cb90ed2a.html","hash":"89d62fab6d66c07c97cdb4a8a9b4e580dda7b395","modified":1663233414384},{"_id":"public/archives/44b34745.html","hash":"132b67767780018ee6452520c24937299f40ded6","modified":1663233414384},{"_id":"public/archives/2de36dd7.html","hash":"b43a1a7177ebef4e47ca906ae698543a17362b1e","modified":1663233414384},{"_id":"public/archives/a82ae489.html","hash":"f169a78cfc45b7e7ae9339ccbd2c0f89033d2834","modified":1663233414384},{"_id":"public/archives/513dbeba.html","hash":"2efc9adaaf16627df9efbd17c450590ada5d8298","modified":1663233414384},{"_id":"public/archives/4f05d45d.html","hash":"4c44bbbc25ad5dd097bee76f51eb850c4c8e549a","modified":1663233414384},{"_id":"public/archives/c770fe49.html","hash":"8d483d98182893ef4fe2a4a83f08bd5bbcb7cc60","modified":1663233414384},{"_id":"public/archives/b4edbd7.html","hash":"79e67329ecc41579c0a95343ca5bbf9c8178026c","modified":1663233414384},{"_id":"public/archives/9bb71eca.html","hash":"d15a1be34dc807cf5e0fe78a95e2ab38ec511463","modified":1663233414384},{"_id":"public/archives/392d66f0.html","hash":"f7625694df0ccc05294b98aa345dfbcad183e2c8","modified":1663233414384},{"_id":"public/archives/ba7b70bf.html","hash":"eeee39e1a4bfe145620db13c20bd301bd417a7c0","modified":1663233414384},{"_id":"public/archives/5ce14ff5.html","hash":"9345154254e8d20792bf80893230abbe5957e5ed","modified":1663233414384},{"_id":"public/archives/5c6a362f.html","hash":"109b04b62ab3b644e830b2983749f4a06bb14778","modified":1663233414384},{"_id":"public/archives/b885f9f7.html","hash":"6ee46e8ca763bb13c296213e14b049528cf7acd5","modified":1663233414384},{"_id":"public/archives/5544baea.html","hash":"b745bd8b59802ba1a3929614bd60c85ffb30b661","modified":1663233414384},{"_id":"public/archives/425d5e80.html","hash":"19b5a94db960ca7e17c1f339857ebcaf09f35279","modified":1663233414384},{"_id":"public/archives/2ce846ed.html","hash":"df43c53000b18ad4dd6fe4109bb0bacab3b8fc49","modified":1663233414384},{"_id":"public/archives/ae4aba0d.html","hash":"b088855ae0c81383b59fdf3244c12352f93ac9e3","modified":1663233414384},{"_id":"public/archives/ba455c1d.html","hash":"27503bb9903f52d484c20a265a507595c9d75497","modified":1663233414384},{"_id":"public/archives/1191d613.html","hash":"6e18061e2eea1cdc0126a3bd2183fddf3925347d","modified":1663233414384},{"_id":"public/archives/e18c94ab.html","hash":"f7e74747ba2ed68e0d3e6f61de8f78cc721bf592","modified":1663233414384},{"_id":"public/archives/ff0d6c2b.html","hash":"f9d25d5cda7c9cb0eaabac176d74718e456d6b32","modified":1663233414384},{"_id":"public/archives/e2e7cc4e.html","hash":"a1b18c86e1894f30d2c3a929d48a4e502c0c764b","modified":1663233414384},{"_id":"public/archives/3038b6c3.html","hash":"88b3a9220b37e99cf6637e1b423cac6beba1e4c0","modified":1663233414384},{"_id":"public/archives/410dfaec.html","hash":"89ddde70492b50dfa844b2ba0826c850a0ea515f","modified":1663233414384},{"_id":"public/archives/bddc30f6.html","hash":"55aba1fab1cd2d51452d9dfd81892f10e5e40858","modified":1663233414384},{"_id":"public/archives/580377d0.html","hash":"f026b85942dc6c46cc430821252109403753ae94","modified":1663233414384},{"_id":"public/archives/3c1dd822.html","hash":"e581aef28693505e76d0eddd7ded9cb1e1c613d6","modified":1663233414384},{"_id":"public/archives/458b44c2.html","hash":"e74ada175a758e8d4a8ff6284f12431c9315fc14","modified":1663233414384},{"_id":"public/index.html","hash":"325cf18570187ae327ac120ad090470c3ef90a32","modified":1663233606335},{"_id":"public/page/2/index.html","hash":"c13311cd3f50b62b3c394219428c774cffe8ef99","modified":1663233414384},{"_id":"public/page/3/index.html","hash":"0c1a1871e7f8ffe368df6ba10cc789aa929cb2d8","modified":1663233414384},{"_id":"public/page/4/index.html","hash":"45a72ceba1b8469fd4f49b29147d6123228f548f","modified":1663233414384},{"_id":"public/page/5/index.html","hash":"99050168da689a0550ebc17ff5f34e22bb283191","modified":1663233414384},{"_id":"public/page/6/index.html","hash":"8ae906d50b152e265a7b0da89782cec52d250d3e","modified":1663233414384},{"_id":"public/page/7/index.html","hash":"84adc8a4e1f1d3f9521f4e0dd983859993b80467","modified":1663233414384},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1663233414384},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1663233414384},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1663233414384},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1663233414384},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1663233414384},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1663233414384},{"_id":"public/css/hbe.style.css","hash":"b0a0077cb588c0941823905fcc383aa7509ade73","modified":1663233414384},{"_id":"public/lib/hbe.js","hash":"136dba00826bdd086153bf0acb5473aea7183ad1","modified":1663233414384},{"_id":"public/css/noscript.css","hash":"ec89b3425fbce20863d554c6fd495ea29c3c303d","modified":1663233414384},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1663233414384},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1663233414384},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1663233414384},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1663233414384},{"_id":"public/js/motion.js","hash":"f7c825cbff11885fa0dffa64824fd00e505d6a8d","modified":1663233414384},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1663233414384},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1663233414384},{"_id":"public/js/utils.js","hash":"200088bfd042f5304b2a04befab0829148845e0e","modified":1663233414384},{"_id":"public/js/schemes/muse.js","hash":"9794bd4fc6a458322949d6a0ade89cd1026bc69f","modified":1663233414384},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1663233414384},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1663233414384},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1663233414384},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1663233414384},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1663233414384},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1663233414384},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1663233414384},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1663233414384},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1663233414384},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1663233414384},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1663233414384},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1663233414384},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1663233414384},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"33a82207a15aad9d1c8fb2251f9e3eba50452932","modified":1663233414384},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1663233414384},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1663233414384},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1663233414384},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1663233414384},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1663233414384},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1663233414384},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1663233414384},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1663233414384},{"_id":"public/js/third-party/statistics/firestore.js","hash":"411a72df581f5b21317dc28633c7993207eb9e1c","modified":1663233414384},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1663233414384},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1663233414384},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1663233414384},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1663233414384},{"_id":"public/css/main.css","hash":"ac4f3a8b91decad5db3090c3625f5e35d69b523a","modified":1663233414384}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2020-09-01T06:02:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-09-01 14:02:45\ntype: \"categories\"\n---\n","updated":"2021-04-23T09:23:51.900Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl82u8d410000zfqx28pm4256","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"tags","date":"2020-09-01T06:01:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-09-01 14:01:56\ntype: \"tags\"\n---\n","updated":"2021-04-23T09:23:51.900Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl82u8d470002zfqx0hss1sx6","content":"","site":{"data":{}},"excerpt":"","more":"","length":0}],"Post":[{"title":"2022-06-26","abbrlink":"84a50792","date":"2022-07-07T13:43:27.000Z","password":"0626","_content":"### 婚礼记\n\n<video src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mv/2022.6.26%E7%8E%8B%E5%9F%B9%E6%BA%90%26%E6%A2%81%E5%87%A1%E6%99%A8%E5%A9%9A%E7%A4%BCMV.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n\n","source":"_drafts/2022-06-26.md","raw":"---\ntitle: '2022-06-26'\nabbrlink: 84a50792\ndate: 2022-07-07 21:43:27\npassword: \"0626\"\n---\n### 婚礼记\n\n<video src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mv/2022.6.26%E7%8E%8B%E5%9F%B9%E6%BA%90%26%E6%A2%81%E5%87%A1%E6%99%A8%E5%A9%9A%E7%A4%BCMV.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n\n","slug":"2022-06-26","published":0,"updated":"2022-07-07T13:54:08.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d440001zfqx9h2qa8lm","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"5b73d73ce3702eb330700a2cd99dde8f0eb88f7606d35ede072b74b61107ebba\">f7cf912af058e7dd1c92d8abaeb4690aef6cda1d4646e06b5072af936450865afeb7c11154e56ec04bf974c44549874993de6fd33679a132109f28580708c6b9fbd65d7efc971726becf7250d985eede83a7de58b48d98ecb561b29193db5da78670df84fe8fcadb015503d1428072e1afcb01bfc9e9403fae4cf68b00a8a3b0345c82ff2bf6e1586b2b2be2ffdf855aa0b076442b5bb4006db36e1d80e9fb1fe57b135ce7bc4145b2050607c0c520c4377463429c48ef9dbbc1f6c6c554be5a82d01318b3409249158ef04b08b15728159cf00f9a2eb8b52e90928bdcc38f5c54ddfd86454a059c2b2aa84406d17d71c14118522243062139489ab37050bbe3cc23c9663a08dc848ba31f37933d7637f25b6dda9145cc532b515ee7b0ed0b55321db3a99622e5e6c3a14890691216617ed1e7b354643a2f356e8a510ce9c7b2dc9cb759cbaed1b3155f03be5b60a3d2226840270636b3466366941948bd6da8e3ed24a392957f5591da64a1510942b4fd562e8cdd0dbdb521d5e30ef2115869089f097d7965e3ba4b362a5534cac777ee12596cea34ab5ad3cd07b5390aa2a98eb405c18aa4ea29674aa0a556ad2605</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","site":{"data":{}},"excerpt":"Here's something encrypted, password is required to continue reading.","more":"Here's something encrypted, password is required to continue reading.","origin":"<h3 id=\"婚礼记\"><a class=\"header-anchor\" href=\"#婚礼记\">¶</a>婚礼记</h3>\n<video src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mv/2022.6.26%E7%8E%8B%E5%9F%B9%E6%BA%90%26%E6%A2%81%E5%87%A1%E6%99%A8%E5%A9%9A%E7%A4%BCMV.mp4\" controls=\"controls\" style=\"max-width: 100%; display: block; margin-left: auto; margin-right: auto;\">\nyour browser does not support the video tag\n</video>\n","encrypt":true,"length":891},{"title":"「25」GPM newm函数要点","date":"2020-11-29T16:00:17.000Z","updated":"2020-11-29T16:00:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","_content":"\n\n之前大概学了GPM在main函数调度过程中关于newm的相关知识。\n\n觉得还是了解甚少，，，，，\n\n这次主要是想了解其中一些关键点的变换过程.\n\n<!--more-->\n\n```go\n//go:nowritebarrierrec\nfunc newm(fn func(), _p_ *p) {\n\tmp := allocm(_p_, fn)\n\tmp.nextp.set(_p_)\n\tmp.sigmask = initSigmask\n\tif gp := getg(); gp != nil && gp.m != nil && (gp.m.lockedExt != 0 || gp.m.incgo) && GOOS != \"plan9\" {\n        ...\n        ....\n\t\tmp.schedlink = newmHandoff.newm\n\t\tnewmHandoff.newm.set(mp)\n\t\tif newmHandoff.waiting {\n\t\t\tnewmHandoff.waiting = false\n\t\t\tnotewakeup(&newmHandoff.wake)\n\t\t}\n\t\tunlock(&newmHandoff.lock)\n\t\treturn\n\t}\n\tnewm1(mp)\n}\n```","source":"_drafts/25-GPM-newm函数要点.md","raw":"---\ntitle: 「25」GPM newm函数要点\ndate: '2020/11/30 00:00:17'\nupdated: '2020/11/30 00:00:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\n---\n\n\n之前大概学了GPM在main函数调度过程中关于newm的相关知识。\n\n觉得还是了解甚少，，，，，\n\n这次主要是想了解其中一些关键点的变换过程.\n\n<!--more-->\n\n```go\n//go:nowritebarrierrec\nfunc newm(fn func(), _p_ *p) {\n\tmp := allocm(_p_, fn)\n\tmp.nextp.set(_p_)\n\tmp.sigmask = initSigmask\n\tif gp := getg(); gp != nil && gp.m != nil && (gp.m.lockedExt != 0 || gp.m.incgo) && GOOS != \"plan9\" {\n        ...\n        ....\n\t\tmp.schedlink = newmHandoff.newm\n\t\tnewmHandoff.newm.set(mp)\n\t\tif newmHandoff.waiting {\n\t\t\tnewmHandoff.waiting = false\n\t\t\tnotewakeup(&newmHandoff.wake)\n\t\t}\n\t\tunlock(&newmHandoff.lock)\n\t\treturn\n\t}\n\tnewm1(mp)\n}\n```","slug":"25-GPM-newm函数要点","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d470003zfqx6wzfdhtz","content":"<p>之前大概学了GPM在main函数调度过程中关于newm的相关知识。</p>\n<p>觉得还是了解甚少，，，，，</p>\n<p>这次主要是想了解其中一些关键点的变换过程.</p>\n<span id=\"more\"></span>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class=\"line\">\tmp := allocm(_p_, fn)</span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">\tmp.sigmask = initSigmask</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp := getg(); gp != <span class=\"literal\">nil</span> &amp;&amp; gp.m != <span class=\"literal\">nil</span> &amp;&amp; (gp.m.lockedExt != <span class=\"number\">0</span> || gp.m.incgo) &amp;&amp; GOOS != <span class=\"string\">&quot;plan9&quot;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ....</span><br><span class=\"line\">\t\tmp.schedlink = newmHandoff.newm</span><br><span class=\"line\">\t\tnewmHandoff.newm.set(mp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.waiting &#123;</span><br><span class=\"line\">\t\t\tnewmHandoff.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\tnotewakeup(&amp;newmHandoff.wake)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>之前大概学了GPM在main函数调度过程中关于newm的相关知识。</p>\n<p>觉得还是了解甚少，，，，，</p>\n<p>这次主要是想了解其中一些关键点的变换过程.</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class=\"line\">\tmp := allocm(_p_, fn)</span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">\tmp.sigmask = initSigmask</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp := getg(); gp != <span class=\"literal\">nil</span> &amp;&amp; gp.m != <span class=\"literal\">nil</span> &amp;&amp; (gp.m.lockedExt != <span class=\"number\">0</span> || gp.m.incgo) &amp;&amp; GOOS != <span class=\"string\">&quot;plan9&quot;</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ....</span><br><span class=\"line\">\t\tmp.schedlink = newmHandoff.newm</span><br><span class=\"line\">\t\tnewmHandoff.newm.set(mp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.waiting &#123;</span><br><span class=\"line\">\t\t\tnewmHandoff.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\tnotewakeup(&amp;newmHandoff.wake)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","length":531},{"title":"「25」RabbitMQ五种工作模式","date":"2020-12-13T16:00:17.000Z","updated":"2020-11-29T16:00:17.000Z","keywords":"RabbitMQ,消息中间件","_content":"\n\n最近本来只想简单学习一下子RabbitMQ，后在男票强迫下写了这篇总结文档，哈哈哈哈...\n以上就是我写这篇文档的初衷，仅供和我一样的小白参考。\n\n\n第一种\n  简单队列（一对一模式）\n  --简单地说，就是一个生产者对应一个消费者。\n\n\n生产者：\npublic class Product {\n\n    /**\n     * 一对一关系，一个生产者对应一个消费者\n     * @throws Exception\n     */\n    public void send() throws Exception{\n        //1.创建连接\n        ConnectionFactory factory = new ConnectionFactory();\n        //2.设置参数\n        factory.setHost(\"localhost\");//设置地址\n        factory.setPort(22);//设置端口号\n        factory.setUsername(\"user\");//设置用户名\n        factory.setPassword(\"123456\");//设置密码\n        factory.setVirtualHost(\"/\"); //设置虚拟机\n\n        //3. 在连接工厂中创建新的连接\n        Connection connection = factory.newConnection();\n\n        //4.新增信道用于通信\n        Channel channel  = connection.createChannel();\n\n        //5.绑定队列\n        /**\n         * 参数1：队列名称-若不存在则会创建\n         * 参数2：是否给队列持久化-false则重启时消息会丢失不会持久化\n         * 参数3：是否独享信道-true则只有当前连接可连接\n         * 参数4：是否用完自动删除-false不删除\n         * 参数5：其他参数\n         */\n        channel.queueDeclare(\"hello\", true, false, false, null);\n\n        //6.发送消息\n        /**\n         * 参数1：交换机\n         * 参数2：队列名\n         * 参数3：相关属性（消息持久化）-保持消息体进行持久化，null则不对消息持久化\n         * 参数4：消息体\n         */\n        channel.basicPublish(\"\", \"hello\", MessageProperties.PERSISTENT_TEXT_PLAIN, \"This is a queue message\".getBytes());\n\n        //7.关闭通道和连接\n        channel.close();\n        connection.close();\n        System.out.println(\"消息已被发送\");\n\n    }\n}\n\n\n消费者：\npublic class Consumer {\n\n    public void send() throws Exception{\n        //1.创建连接\n        ConnectionFactory factory = new ConnectionFactory();\n        //2.设置参数\n        factory.setHost(\"localhost\");//设置地址\n        factory.setPort(22);//设置端口号\n        factory.setUsername(\"user\");//设置用户名\n        factory.setPassword(\"123456\");//设置密码\n        factory.setVirtualHost(\"/\"); //设置虚拟机\n\n        //3. 在连接工厂中创建新的连接\n        Connection connection = factory.newConnection();\n\n        //4.新增信道用于通信\n        Channel channel  = connection.createChannel();\n\n        //5.绑定队列\n        /**\n         * 参数1：队列名称-若不存在则会创建\n         * 参数2：是否持久化-false则重启时消息会丢失不会持久化\n         * 参数3：是否独享信道-true则只有当前连接可连接\n         * 参数4：是否用完自动删除\n         * 参数5：其他参数\n         */\n        channel.queueDeclare(\"hello\", true, false, false, null);\n\n        //6.接受消息\n        channel.basicConsume(\"hello\", true, new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消息内容是\"+body.toString());\n\n            }\n        });\n\n        //不能回调输出消息,为了不让程序结束\n        System.in.read();\n\n    }\n}\n\n","source":"_drafts/26-RabbitMQ五种工作模式.md","raw":"---\ntitle: 「25」RabbitMQ五种工作模式\ndate: '2020/12/14 00:00:17'\nupdated: '2020/11/30 00:00:17'\nkeywords: 'RabbitMQ,消息中间件'\ntags:\n  - RabbitMQ\n  - 消息中间件\n---\n\n\n最近本来只想简单学习一下子RabbitMQ，后在男票强迫下写了这篇总结文档，哈哈哈哈...\n以上就是我写这篇文档的初衷，仅供和我一样的小白参考。\n\n\n第一种\n  简单队列（一对一模式）\n  --简单地说，就是一个生产者对应一个消费者。\n\n\n生产者：\npublic class Product {\n\n    /**\n     * 一对一关系，一个生产者对应一个消费者\n     * @throws Exception\n     */\n    public void send() throws Exception{\n        //1.创建连接\n        ConnectionFactory factory = new ConnectionFactory();\n        //2.设置参数\n        factory.setHost(\"localhost\");//设置地址\n        factory.setPort(22);//设置端口号\n        factory.setUsername(\"user\");//设置用户名\n        factory.setPassword(\"123456\");//设置密码\n        factory.setVirtualHost(\"/\"); //设置虚拟机\n\n        //3. 在连接工厂中创建新的连接\n        Connection connection = factory.newConnection();\n\n        //4.新增信道用于通信\n        Channel channel  = connection.createChannel();\n\n        //5.绑定队列\n        /**\n         * 参数1：队列名称-若不存在则会创建\n         * 参数2：是否给队列持久化-false则重启时消息会丢失不会持久化\n         * 参数3：是否独享信道-true则只有当前连接可连接\n         * 参数4：是否用完自动删除-false不删除\n         * 参数5：其他参数\n         */\n        channel.queueDeclare(\"hello\", true, false, false, null);\n\n        //6.发送消息\n        /**\n         * 参数1：交换机\n         * 参数2：队列名\n         * 参数3：相关属性（消息持久化）-保持消息体进行持久化，null则不对消息持久化\n         * 参数4：消息体\n         */\n        channel.basicPublish(\"\", \"hello\", MessageProperties.PERSISTENT_TEXT_PLAIN, \"This is a queue message\".getBytes());\n\n        //7.关闭通道和连接\n        channel.close();\n        connection.close();\n        System.out.println(\"消息已被发送\");\n\n    }\n}\n\n\n消费者：\npublic class Consumer {\n\n    public void send() throws Exception{\n        //1.创建连接\n        ConnectionFactory factory = new ConnectionFactory();\n        //2.设置参数\n        factory.setHost(\"localhost\");//设置地址\n        factory.setPort(22);//设置端口号\n        factory.setUsername(\"user\");//设置用户名\n        factory.setPassword(\"123456\");//设置密码\n        factory.setVirtualHost(\"/\"); //设置虚拟机\n\n        //3. 在连接工厂中创建新的连接\n        Connection connection = factory.newConnection();\n\n        //4.新增信道用于通信\n        Channel channel  = connection.createChannel();\n\n        //5.绑定队列\n        /**\n         * 参数1：队列名称-若不存在则会创建\n         * 参数2：是否持久化-false则重启时消息会丢失不会持久化\n         * 参数3：是否独享信道-true则只有当前连接可连接\n         * 参数4：是否用完自动删除\n         * 参数5：其他参数\n         */\n        channel.queueDeclare(\"hello\", true, false, false, null);\n\n        //6.接受消息\n        channel.basicConsume(\"hello\", true, new DefaultConsumer(channel){\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                System.out.println(\"消息内容是\"+body.toString());\n\n            }\n        });\n\n        //不能回调输出消息,为了不让程序结束\n        System.in.read();\n\n    }\n}\n\n","slug":"26-RabbitMQ五种工作模式","published":0,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4a0004zfqx1mhu9dir","content":"<p>最近本来只想简单学习一下子RabbitMQ，后在男票强迫下写了这篇总结文档，哈哈哈哈…<br>\n以上就是我写这篇文档的初衷，仅供和我一样的小白参考。</p>\n<p>第一种<br>\n简单队列（一对一模式）<br>\n–简单地说，就是一个生产者对应一个消费者。</p>\n<p>生产者：<br>\npublic class Product {</p>\n<pre><code>/**\n * 一对一关系，一个生产者对应一个消费者\n * @throws Exception\n */\npublic void send() throws Exception&#123;\n    //1.创建连接\n    ConnectionFactory factory = new ConnectionFactory();\n    //2.设置参数\n    factory.setHost(&quot;localhost&quot;);//设置地址\n    factory.setPort(22);//设置端口号\n    factory.setUsername(&quot;user&quot;);//设置用户名\n    factory.setPassword(&quot;123456&quot;);//设置密码\n    factory.setVirtualHost(&quot;/&quot;); //设置虚拟机\n\n    //3. 在连接工厂中创建新的连接\n    Connection connection = factory.newConnection();\n\n    //4.新增信道用于通信\n    Channel channel  = connection.createChannel();\n\n    //5.绑定队列\n    /**\n     * 参数1：队列名称-若不存在则会创建\n     * 参数2：是否给队列持久化-false则重启时消息会丢失不会持久化\n     * 参数3：是否独享信道-true则只有当前连接可连接\n     * 参数4：是否用完自动删除-false不删除\n     * 参数5：其他参数\n     */\n    channel.queueDeclare(&quot;hello&quot;, true, false, false, null);\n\n    //6.发送消息\n    /**\n     * 参数1：交换机\n     * 参数2：队列名\n     * 参数3：相关属性（消息持久化）-保持消息体进行持久化，null则不对消息持久化\n     * 参数4：消息体\n     */\n    channel.basicPublish(&quot;&quot;, &quot;hello&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN, &quot;This is a queue message&quot;.getBytes());\n\n    //7.关闭通道和连接\n    channel.close();\n    connection.close();\n    System.out.println(&quot;消息已被发送&quot;);\n\n&#125;\n</code></pre>\n<p>}</p>\n<p>消费者：<br>\npublic class Consumer {</p>\n<pre><code>public void send() throws Exception&#123;\n    //1.创建连接\n    ConnectionFactory factory = new ConnectionFactory();\n    //2.设置参数\n    factory.setHost(&quot;localhost&quot;);//设置地址\n    factory.setPort(22);//设置端口号\n    factory.setUsername(&quot;user&quot;);//设置用户名\n    factory.setPassword(&quot;123456&quot;);//设置密码\n    factory.setVirtualHost(&quot;/&quot;); //设置虚拟机\n\n    //3. 在连接工厂中创建新的连接\n    Connection connection = factory.newConnection();\n\n    //4.新增信道用于通信\n    Channel channel  = connection.createChannel();\n\n    //5.绑定队列\n    /**\n     * 参数1：队列名称-若不存在则会创建\n     * 参数2：是否持久化-false则重启时消息会丢失不会持久化\n     * 参数3：是否独享信道-true则只有当前连接可连接\n     * 参数4：是否用完自动删除\n     * 参数5：其他参数\n     */\n    channel.queueDeclare(&quot;hello&quot;, true, false, false, null);\n\n    //6.接受消息\n    channel.basicConsume(&quot;hello&quot;, true, new DefaultConsumer(channel)&#123;\n        @Override\n        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;\n            System.out.println(&quot;消息内容是&quot;+body.toString());\n\n        &#125;\n    &#125;);\n\n    //不能回调输出消息,为了不让程序结束\n    System.in.read();\n\n&#125;\n</code></pre>\n<p>}</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近本来只想简单学习一下子RabbitMQ，后在男票强迫下写了这篇总结文档，哈哈哈哈…<br>\n以上就是我写这篇文档的初衷，仅供和我一样的小白参考。</p>\n<p>第一种<br>\n简单队列（一对一模式）<br>\n–简单地说，就是一个生产者对应一个消费者。</p>\n<p>生产者：<br>\npublic class Product {</p>\n<pre><code>/**\n * 一对一关系，一个生产者对应一个消费者\n * @throws Exception\n */\npublic void send() throws Exception&#123;\n    //1.创建连接\n    ConnectionFactory factory = new ConnectionFactory();\n    //2.设置参数\n    factory.setHost(&quot;localhost&quot;);//设置地址\n    factory.setPort(22);//设置端口号\n    factory.setUsername(&quot;user&quot;);//设置用户名\n    factory.setPassword(&quot;123456&quot;);//设置密码\n    factory.setVirtualHost(&quot;/&quot;); //设置虚拟机\n\n    //3. 在连接工厂中创建新的连接\n    Connection connection = factory.newConnection();\n\n    //4.新增信道用于通信\n    Channel channel  = connection.createChannel();\n\n    //5.绑定队列\n    /**\n     * 参数1：队列名称-若不存在则会创建\n     * 参数2：是否给队列持久化-false则重启时消息会丢失不会持久化\n     * 参数3：是否独享信道-true则只有当前连接可连接\n     * 参数4：是否用完自动删除-false不删除\n     * 参数5：其他参数\n     */\n    channel.queueDeclare(&quot;hello&quot;, true, false, false, null);\n\n    //6.发送消息\n    /**\n     * 参数1：交换机\n     * 参数2：队列名\n     * 参数3：相关属性（消息持久化）-保持消息体进行持久化，null则不对消息持久化\n     * 参数4：消息体\n     */\n    channel.basicPublish(&quot;&quot;, &quot;hello&quot;, MessageProperties.PERSISTENT_TEXT_PLAIN, &quot;This is a queue message&quot;.getBytes());\n\n    //7.关闭通道和连接\n    channel.close();\n    connection.close();\n    System.out.println(&quot;消息已被发送&quot;);\n\n&#125;\n</code></pre>\n<p>}</p>\n<p>消费者：<br>\npublic class Consumer {</p>\n<pre><code>public void send() throws Exception&#123;\n    //1.创建连接\n    ConnectionFactory factory = new ConnectionFactory();\n    //2.设置参数\n    factory.setHost(&quot;localhost&quot;);//设置地址\n    factory.setPort(22);//设置端口号\n    factory.setUsername(&quot;user&quot;);//设置用户名\n    factory.setPassword(&quot;123456&quot;);//设置密码\n    factory.setVirtualHost(&quot;/&quot;); //设置虚拟机\n\n    //3. 在连接工厂中创建新的连接\n    Connection connection = factory.newConnection();\n\n    //4.新增信道用于通信\n    Channel channel  = connection.createChannel();\n\n    //5.绑定队列\n    /**\n     * 参数1：队列名称-若不存在则会创建\n     * 参数2：是否持久化-false则重启时消息会丢失不会持久化\n     * 参数3：是否独享信道-true则只有当前连接可连接\n     * 参数4：是否用完自动删除\n     * 参数5：其他参数\n     */\n    channel.queueDeclare(&quot;hello&quot;, true, false, false, null);\n\n    //6.接受消息\n    channel.basicConsume(&quot;hello&quot;, true, new DefaultConsumer(channel)&#123;\n        @Override\n        public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123;\n            System.out.println(&quot;消息内容是&quot;+body.toString());\n\n        &#125;\n    &#125;);\n\n    //不能回调输出消息,为了不让程序结束\n    System.in.read();\n\n&#125;\n</code></pre>\n<p>}</p>\n","length":2029},{"title":"58-Redis lua","date":"2021-07-10T09:51:39.000Z","_content":"","source":"_drafts/58-Redis-lua.md","raw":"---\ntitle: 58-Redis lua\ndate: 2021-07-10 17:51:39\ntags:\n---\n","slug":"58-Redis-lua","published":0,"updated":"2021-07-20T08:06:08.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4b0006zfqx2ielf1e9","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"59-Redis cluster","date":"2021-07-10T09:52:09.000Z","_content":"","source":"_drafts/59-Redis-cluster.md","raw":"---\ntitle: 59-Redis cluster\ndate: 2021-07-10 17:52:09\ntags:\n---\n","slug":"59-Redis-cluster","published":0,"updated":"2021-07-20T08:06:08.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4c0007zfqx8h3c1hem","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"70-leetcode 动态规划","date":"2021-09-02T02:09:47.000Z","_content":"\n常见动态规划类型：\n\n* 坐标型（20%） **\n* 序列型（20%） **\n* 划分型（20%） **\n* 区间型（15%） **\n* 背包型\n* 最长序列\n* 博弈型\n* 综合型\n\n## 常问\n* 时间空间优化\n    * followup\n* 打印路径问题（DFS）","source":"_drafts/70-leetcode-动态规划.md","raw":"---\ntitle: 70-leetcode 动态规划\ndate: 2021-09-02 10:09:47\ntags:\n---\n\n常见动态规划类型：\n\n* 坐标型（20%） **\n* 序列型（20%） **\n* 划分型（20%） **\n* 区间型（15%） **\n* 背包型\n* 最长序列\n* 博弈型\n* 综合型\n\n## 常问\n* 时间空间优化\n    * followup\n* 打印路径问题（DFS）","slug":"70-leetcode-动态规划","published":0,"updated":"2021-09-02T02:13:17.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4d0008zfqx9meuc52y","content":"<p>常见动态规划类型：</p>\n<ul>\n<li>坐标型（20%） **</li>\n<li>序列型（20%） **</li>\n<li>划分型（20%） **</li>\n<li>区间型（15%） **</li>\n<li>背包型</li>\n<li>最长序列</li>\n<li>博弈型</li>\n<li>综合型</li>\n</ul>\n<h2 id=\"常问\"><a class=\"header-anchor\" href=\"#常问\">¶</a>常问</h2>\n<ul>\n<li>时间空间优化\n<ul>\n<li>followup</li>\n</ul>\n</li>\n<li>打印路径问题（DFS）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>常见动态规划类型：</p>\n<ul>\n<li>坐标型（20%） **</li>\n<li>序列型（20%） **</li>\n<li>划分型（20%） **</li>\n<li>区间型（15%） **</li>\n<li>背包型</li>\n<li>最长序列</li>\n<li>博弈型</li>\n<li>综合型</li>\n</ul>\n<h2 id=\"常问\"><a class=\"header-anchor\" href=\"#常问\">¶</a>常问</h2>\n<ul>\n<li>时间空间优化\n<ul>\n<li>followup</li>\n</ul>\n</li>\n<li>打印路径问题（DFS）</li>\n</ul>\n","length":90},{"title":"80-docker小记","date":"2021-09-07T01:24:23.000Z","_content":"\n\n#### 删除所有的images\neg: 删除所有的none镜像\n```go\ndocker rmi $(docker images | grep '<none>' | awk '{print $3}')\n```\n\n#### 一键安装docker「centos/ubuntu/debian」\n\n```go\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n```","source":"_drafts/80-docker小记.md","raw":"---\ntitle: 80-docker小记\ndate: 2021-09-07 09:24:23\ntags:\n---\n\n\n#### 删除所有的images\neg: 删除所有的none镜像\n```go\ndocker rmi $(docker images | grep '<none>' | awk '{print $3}')\n```\n\n#### 一键安装docker「centos/ubuntu/debian」\n\n```go\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n```","slug":"80-docker小记","published":0,"updated":"2021-09-07T04:31:54.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4e000azfqxcghxdrdz","content":"<h4 id=\"删除所有的images\"><a class=\"header-anchor\" href=\"#删除所有的images\">¶</a>删除所有的images</h4>\n<p>eg: 删除所有的none镜像</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | grep <span class=\"string\">&#x27;&lt;none&gt;&#x27;</span> | awk <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"一键安装docker「centos-ubuntu-debian」\"><a class=\"header-anchor\" href=\"#一键安装docker「centos-ubuntu-debian」\">¶</a>一键安装docker「centos/ubuntu/debian」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https:<span class=\"comment\">//get.docker.com -o get-docker.sh</span></span><br><span class=\"line\">sh get-docker.sh</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"删除所有的images\"><a class=\"header-anchor\" href=\"#删除所有的images\">¶</a>删除所有的images</h4>\n<p>eg: 删除所有的none镜像</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi $(docker images | grep <span class=\"string\">&#x27;&lt;none&gt;&#x27;</span> | awk <span class=\"string\">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"一键安装docker「centos-ubuntu-debian」\"><a class=\"header-anchor\" href=\"#一键安装docker「centos-ubuntu-debian」\">¶</a>一键安装docker「centos/ubuntu/debian」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https:<span class=\"comment\">//get.docker.com -o get-docker.sh</span></span><br><span class=\"line\">sh get-docker.sh</span><br></pre></td></tr></table></figure>","length":211},{"title":"「81」kspan结合jaeger使用","date":"2021-10-11T11:22:29.000Z","_content":"\n\n起始是对于kubernetes的监控需求，包括：pull、attached PVC 、created等events事件耗时。\n\n那jaeger/tempo/Prometheus就可以满足这样的需求..........\n\n但是呢，自己写太麻烦了。\n\nSearching...... \n\ngithub有个成熟的kspan可以：👉🏻👉🏻👉🏻👉🏻\n\n<!--more-->\n\n[👉🏿👉🏿 kspan Github](kspanhttps://github.com/weaveworks-experiments/kspan)\n\n\n不废话了，先来试试吧：\n\n### kspan发布&部署\n\n#### 1、构建&上传docker镜像\n\n```\n1、git clone https://github.com/weaveworks-experiments/kspan.git\n2、docker build -t kspan-controller:v0.1 .\n3、docker login xxxx                                  \n4、docker tag kspan-controller:v0.1 xxxx/kspan-controller:v0.1\n5、docker push xxxx/kspan-controller:v0.1\n```\n\n#### 2、预先准备 kubernetes 的RABC权限\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: manager-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: manager-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: manager-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: manager-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: manager-role\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\",\"replicasets\",\"pods\",\"apps\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\n\n#### 3、预先准备 jaeger等\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: system\n  name: kspan\n  labels:\n    app: kspan\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kspan\n  template:\n    metadata:\n      labels:\n        app: kspan\n    spec:\n      containers:\n      - name: jaegertracing\n        image: jaegertracing/opentelemetry-all-in-one\n        ports:\n        - containerPort: 16686\n        - containerPort: 55680\n```\n\n#### 4、kspan controller-manager\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: controller-manager\n  namespace: system\n  labels:\n    control-plane: controller-manager\nspec:\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        control-plane: controller-manager\n    spec:\n      containers:\n      - args:\n        - --otlp-addr=xxx.xxx.xxx.xxx:55680\n        command:\n        - /manager\n        image: imrcrab/kspan-controller:v0.1\n        name: manager\n        resources:\n          limits:\n            cpu: 100m\n            memory: 30Mi\n          requests:\n            cpu: 100m\n            memory: 20Mi\n      terminationGracePeriodSeconds: 10\n```\n### kspan测试和结果总结\n\n#### 1、test: deployment one pod\n\n#### 2、Summary\n\n","source":"_drafts/81-kspan结合jaeger使用.md","raw":"---\ntitle: 「81」kspan结合jaeger使用\ndate: 2021/10/11 19:22:29\ntags:\n    - jaeger\n    - 监控\n---\n\n\n起始是对于kubernetes的监控需求，包括：pull、attached PVC 、created等events事件耗时。\n\n那jaeger/tempo/Prometheus就可以满足这样的需求..........\n\n但是呢，自己写太麻烦了。\n\nSearching...... \n\ngithub有个成熟的kspan可以：👉🏻👉🏻👉🏻👉🏻\n\n<!--more-->\n\n[👉🏿👉🏿 kspan Github](kspanhttps://github.com/weaveworks-experiments/kspan)\n\n\n不废话了，先来试试吧：\n\n### kspan发布&部署\n\n#### 1、构建&上传docker镜像\n\n```\n1、git clone https://github.com/weaveworks-experiments/kspan.git\n2、docker build -t kspan-controller:v0.1 .\n3、docker login xxxx                                  \n4、docker tag kspan-controller:v0.1 xxxx/kspan-controller:v0.1\n5、docker push xxxx/kspan-controller:v0.1\n```\n\n#### 2、预先准备 kubernetes 的RABC权限\n\n```yaml\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: manager-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: manager-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: manager-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: manager-role\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: system\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: manager-role\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\",\"replicasets\",\"pods\",\"apps\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n```\n\n\n#### 3、预先准备 jaeger等\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: system\n  name: kspan\n  labels:\n    app: kspan\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: kspan\n  template:\n    metadata:\n      labels:\n        app: kspan\n    spec:\n      containers:\n      - name: jaegertracing\n        image: jaegertracing/opentelemetry-all-in-one\n        ports:\n        - containerPort: 16686\n        - containerPort: 55680\n```\n\n#### 4、kspan controller-manager\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: controller-manager\n  namespace: system\n  labels:\n    control-plane: controller-manager\nspec:\n  selector:\n    matchLabels:\n      control-plane: controller-manager\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        control-plane: controller-manager\n    spec:\n      containers:\n      - args:\n        - --otlp-addr=xxx.xxx.xxx.xxx:55680\n        command:\n        - /manager\n        image: imrcrab/kspan-controller:v0.1\n        name: manager\n        resources:\n          limits:\n            cpu: 100m\n            memory: 30Mi\n          requests:\n            cpu: 100m\n            memory: 20Mi\n      terminationGracePeriodSeconds: 10\n```\n### kspan测试和结果总结\n\n#### 1、test: deployment one pod\n\n#### 2、Summary\n\n","slug":"81-kspan结合jaeger使用","published":0,"updated":"2021-10-11T11:55:18.153Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4e000bzfqxesgmf653","content":"<p>起始是对于kubernetes的监控需求，包括：pull、attached PVC 、created等events事件耗时。</p>\n<p>那jaeger/tempo/Prometheus就可以满足这样的需求…</p>\n<p>但是呢，自己写太麻烦了。</p>\n<p>Searching…</p>\n<p>github有个成熟的kspan可以：👉🏻👉🏻👉🏻👉🏻</p>\n<span id=\"more\"></span>\n<p><a href=\"kspanhttps://github.com/weaveworks-experiments/kspan\">👉🏿👉🏿 kspan Github</a></p>\n<p>不废话了，先来试试吧：</p>\n<h3 id=\"kspan发布-部署\"><a class=\"header-anchor\" href=\"#kspan发布-部署\">¶</a>kspan发布&amp;部署</h3>\n<h4 id=\"1、构建-上传docker镜像\"><a class=\"header-anchor\" href=\"#1、构建-上传docker镜像\">¶</a>1、构建&amp;上传docker镜像</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git clone https://github.com/weaveworks-experiments/kspan.git</span><br><span class=\"line\">2、docker build -t kspan-controller:v0.1 .</span><br><span class=\"line\">3、docker login xxxx                                  </span><br><span class=\"line\">4、docker tag kspan-controller:v0.1 xxxx/kspan-controller:v0.1</span><br><span class=\"line\">5、docker push xxxx/kspan-controller:v0.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、预先准备-kubernetes-的RABC权限\"><a class=\"header-anchor\" href=\"#2、预先准备-kubernetes-的RABC权限\">¶</a>2、预先准备 kubernetes 的RABC权限</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-rolebinding</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-role</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-rolebinding</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-role</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-role</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>,<span class=\"string\">&quot;replicasets&quot;</span>,<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;apps&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、预先准备-jaeger等\"><a class=\"header-anchor\" href=\"#3、预先准备-jaeger等\">¶</a>3、预先准备 jaeger等</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jaegertracing</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">jaegertracing/opentelemetry-all-in-one</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">16686</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">55680</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4、kspan-controller-manager\"><a class=\"header-anchor\" href=\"#4、kspan-controller-manager\">¶</a>4、kspan controller-manager</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">control-plane:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">control-plane:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">control-plane:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--otlp-addr=xxx.xxx.xxx.xxx:55680</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/manager</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">imrcrab/kspan-controller:v0.1</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">manager</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">30Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">20Mi</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"kspan测试和结果总结\"><a class=\"header-anchor\" href=\"#kspan测试和结果总结\">¶</a>kspan测试和结果总结</h3>\n<h4 id=\"1、test-deployment-one-pod\"><a class=\"header-anchor\" href=\"#1、test-deployment-one-pod\">¶</a>1、test: deployment one pod</h4>\n<h4 id=\"2、Summary\"><a class=\"header-anchor\" href=\"#2、Summary\">¶</a>2、Summary</h4>\n","site":{"data":{}},"excerpt":"<p>起始是对于kubernetes的监控需求，包括：pull、attached PVC 、created等events事件耗时。</p>\n<p>那jaeger/tempo/Prometheus就可以满足这样的需求…</p>\n<p>但是呢，自己写太麻烦了。</p>\n<p>Searching…</p>\n<p>github有个成熟的kspan可以：👉🏻👉🏻👉🏻👉🏻</p>","more":"<p><a href=\"kspanhttps://github.com/weaveworks-experiments/kspan\">👉🏿👉🏿 kspan Github</a></p>\n<p>不废话了，先来试试吧：</p>\n<h3 id=\"kspan发布-部署\"><a class=\"header-anchor\" href=\"#kspan发布-部署\">¶</a>kspan发布&amp;部署</h3>\n<h4 id=\"1、构建-上传docker镜像\"><a class=\"header-anchor\" href=\"#1、构建-上传docker镜像\">¶</a>1、构建&amp;上传docker镜像</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git clone https://github.com/weaveworks-experiments/kspan.git</span><br><span class=\"line\">2、docker build -t kspan-controller:v0.1 .</span><br><span class=\"line\">3、docker login xxxx                                  </span><br><span class=\"line\">4、docker tag kspan-controller:v0.1 xxxx/kspan-controller:v0.1</span><br><span class=\"line\">5、docker push xxxx/kspan-controller:v0.1</span><br></pre></td></tr></table></figure>\n<h4 id=\"2、预先准备-kubernetes-的RABC权限\"><a class=\"header-anchor\" href=\"#2、预先准备-kubernetes-的RABC权限\">¶</a>2、预先准备 kubernetes 的RABC权限</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-rolebinding</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-role</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-rolebinding</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-role</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">default</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">manager-role</span></span><br><span class=\"line\"><span class=\"attr\">rules:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">apiGroups:</span> [<span class=\"string\">&quot;*&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">resources:</span> [<span class=\"string\">&quot;*&quot;</span>,<span class=\"string\">&quot;replicasets&quot;</span>,<span class=\"string\">&quot;pods&quot;</span>,<span class=\"string\">&quot;apps&quot;</span>]</span><br><span class=\"line\">  <span class=\"attr\">verbs:</span> [<span class=\"string\">&quot;get&quot;</span>, <span class=\"string\">&quot;watch&quot;</span>, <span class=\"string\">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"3、预先准备-jaeger等\"><a class=\"header-anchor\" href=\"#3、预先准备-jaeger等\">¶</a>3、预先准备 jaeger等</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">kspan</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">jaegertracing</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">jaegertracing/opentelemetry-all-in-one</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">16686</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">55680</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4、kspan-controller-manager\"><a class=\"header-anchor\" href=\"#4、kspan-controller-manager\">¶</a>4、kspan controller-manager</h4>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">system</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">control-plane:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">control-plane:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">control-plane:</span> <span class=\"string\">controller-manager</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">args:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">--otlp-addr=xxx.xxx.xxx.xxx:55680</span></span><br><span class=\"line\">        <span class=\"attr\">command:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"string\">/manager</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">imrcrab/kspan-controller:v0.1</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">manager</span></span><br><span class=\"line\">        <span class=\"attr\">resources:</span></span><br><span class=\"line\">          <span class=\"attr\">limits:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">30Mi</span></span><br><span class=\"line\">          <span class=\"attr\">requests:</span></span><br><span class=\"line\">            <span class=\"attr\">cpu:</span> <span class=\"string\">100m</span></span><br><span class=\"line\">            <span class=\"attr\">memory:</span> <span class=\"string\">20Mi</span></span><br><span class=\"line\">      <span class=\"attr\">terminationGracePeriodSeconds:</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"kspan测试和结果总结\"><a class=\"header-anchor\" href=\"#kspan测试和结果总结\">¶</a>kspan测试和结果总结</h3>\n<h4 id=\"1、test-deployment-one-pod\"><a class=\"header-anchor\" href=\"#1、test-deployment-one-pod\">¶</a>1、test: deployment one pod</h4>\n<h4 id=\"2、Summary\"><a class=\"header-anchor\" href=\"#2、Summary\">¶</a>2、Summary</h4>","length":2158},{"title":"正态规划","date":"2020-12-27T02:10:01.000Z","_content":"\n\n### 定义：\n\n> 一种把原问题分解为子问题的方式求解复杂问题的方法。\n\n### 适用范围：\n* 有重叠子问题\n* 最优子结构性质\n\n### 处理思路：\n#### 1、 定义数组元素含义\n\n#### 2、 找出数组元素间的关系「状态转移方程」\n\n#### 3、 找出最关键的初始值\n\n\n### 案例实践\n\n### 参考：\n\n* [动态规划「维基百科」](https://zh.wikipedia.org/zh-hans/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)\n\n","source":"_drafts/N-正态规划.md","raw":"---\ntitle: '正态规划'\ndate: 2020-12-27 10:10:01\ntags:\n    - N个问题\n    - 正态规划\n---\n\n\n### 定义：\n\n> 一种把原问题分解为子问题的方式求解复杂问题的方法。\n\n### 适用范围：\n* 有重叠子问题\n* 最优子结构性质\n\n### 处理思路：\n#### 1、 定义数组元素含义\n\n#### 2、 找出数组元素间的关系「状态转移方程」\n\n#### 3、 找出最关键的初始值\n\n\n### 案例实践\n\n### 参考：\n\n* [动态规划「维基百科」](https://zh.wikipedia.org/zh-hans/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92)\n\n","slug":"N-正态规划","published":0,"updated":"2021-05-17T02:05:19.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4f000dzfqx6tbjax9x","content":"<h3 id=\"定义：\"><a class=\"header-anchor\" href=\"#定义：\">¶</a>定义：</h3>\n<blockquote>\n<p>一种把原问题分解为子问题的方式求解复杂问题的方法。</p>\n</blockquote>\n<h3 id=\"适用范围：\"><a class=\"header-anchor\" href=\"#适用范围：\">¶</a>适用范围：</h3>\n<ul>\n<li>有重叠子问题</li>\n<li>最优子结构性质</li>\n</ul>\n<h3 id=\"处理思路：\"><a class=\"header-anchor\" href=\"#处理思路：\">¶</a>处理思路：</h3>\n<h4 id=\"1、-定义数组元素含义\"><a class=\"header-anchor\" href=\"#1、-定义数组元素含义\">¶</a>1、 定义数组元素含义</h4>\n<h4 id=\"2、-找出数组元素间的关系「状态转移方程」\"><a class=\"header-anchor\" href=\"#2、-找出数组元素间的关系「状态转移方程」\">¶</a>2、 找出数组元素间的关系「状态转移方程」</h4>\n<h4 id=\"3、-找出最关键的初始值\"><a class=\"header-anchor\" href=\"#3、-找出最关键的初始值\">¶</a>3、 找出最关键的初始值</h4>\n<h3 id=\"案例实践\"><a class=\"header-anchor\" href=\"#案例实践\">¶</a>案例实践</h3>\n<h3 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h3>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">动态规划「维基百科」</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"定义：\"><a class=\"header-anchor\" href=\"#定义：\">¶</a>定义：</h3>\n<blockquote>\n<p>一种把原问题分解为子问题的方式求解复杂问题的方法。</p>\n</blockquote>\n<h3 id=\"适用范围：\"><a class=\"header-anchor\" href=\"#适用范围：\">¶</a>适用范围：</h3>\n<ul>\n<li>有重叠子问题</li>\n<li>最优子结构性质</li>\n</ul>\n<h3 id=\"处理思路：\"><a class=\"header-anchor\" href=\"#处理思路：\">¶</a>处理思路：</h3>\n<h4 id=\"1、-定义数组元素含义\"><a class=\"header-anchor\" href=\"#1、-定义数组元素含义\">¶</a>1、 定义数组元素含义</h4>\n<h4 id=\"2、-找出数组元素间的关系「状态转移方程」\"><a class=\"header-anchor\" href=\"#2、-找出数组元素间的关系「状态转移方程」\">¶</a>2、 找出数组元素间的关系「状态转移方程」</h4>\n<h4 id=\"3、-找出最关键的初始值\"><a class=\"header-anchor\" href=\"#3、-找出最关键的初始值\">¶</a>3、 找出最关键的初始值</h4>\n<h3 id=\"案例实践\"><a class=\"header-anchor\" href=\"#案例实践\">¶</a>案例实践</h3>\n<h3 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h3>\n<ul>\n<li><a href=\"https://zh.wikipedia.org/zh-hans/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">动态规划「维基百科」</a></li>\n</ul>\n","length":117},{"title":"TLS/SSL/HTTPS详解","date":"2020-12-20T17:10:01.000Z","_content":"\n\n\n\n","source":"_drafts/TLS-SSL-HTTPS详解.md","raw":"---\ntitle: 'TLS/SSL/HTTPS详解'\ndate: 2020-12-21 01:10:01\ntags:\n    - TLS\n    - HTTPS\n---\n\n\n\n\n","slug":"TLS-SSL-HTTPS详解","published":0,"updated":"2021-04-23T09:23:51.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4f000ezfqxdeyb1x4g","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"_content":"\n\n## Recently\n* [动态规划](https://zhuanlan.zhihu.com/p/78220312s)\n\n* [Redis源码解析列表](https://blog.csdn.net/men_wen/category_6769467.html)\n\n ","source":"_drafts/bookmarks.md","raw":"\n\n## Recently\n* [动态规划](https://zhuanlan.zhihu.com/p/78220312s)\n\n* [Redis源码解析列表](https://blog.csdn.net/men_wen/category_6769467.html)\n\n ","slug":"bookmarks","published":0,"date":"2021-04-23T09:23:51.894Z","updated":"2021-04-23T09:23:51.894Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4g000gzfqxemfm2tb2","content":"<h2 id=\"Recently\"><a class=\"header-anchor\" href=\"#Recently\">¶</a>Recently</h2>\n<ul>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/78220312s\">动态规划</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/men_wen/category_6769467.html\">Redis源码解析列表</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Recently\"><a class=\"header-anchor\" href=\"#Recently\">¶</a>Recently</h2>\n<ul>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/78220312s\">动态规划</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.csdn.net/men_wen/category_6769467.html\">Redis源码解析列表</a></p>\n</li>\n</ul>\n","length":24},{"title":"git 初阶:add/commit/push ~2","date":"2020-09-02T17:10:01.000Z","_content":"\n>上节提要：[Git初阶：安装配置～1](http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more)属于Git搭建的基础。\n\n\n>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。\n\n### 掌握目标\n\n<!-- more -->\n\n### add/commit/push使用\n\n```\ngit add XXX\ngit commit -m \"commit说明\"\ngit push origin master \n```\n\n### 常见的场景及策略\n\n\n\n\n\n","source":"_drafts/git 初阶add-commit-push ~2.md","raw":"---\ntitle: 'git 初阶:add/commit/push ~2'\ndate: 2020-09-03 01:10:01\ntags:\n    - Git\n---\n\n>上节提要：[Git初阶：安装配置～1](http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more)属于Git搭建的基础。\n\n\n>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。\n\n### 掌握目标\n\n<!-- more -->\n\n### add/commit/push使用\n\n```\ngit add XXX\ngit commit -m \"commit说明\"\ngit push origin master \n```\n\n### 常见的场景及策略\n\n\n\n\n\n","slug":"git 初阶add-commit-push ~2","published":0,"updated":"2021-04-23T09:23:51.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4h000izfqxb8sn4hxi","content":"<blockquote>\n<p>上节提要：<a href=\"http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more\">Git初阶：安装配置～1</a>属于Git搭建的基础。</p>\n</blockquote>\n<blockquote>\n<p>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。</p>\n</blockquote>\n<h3 id=\"掌握目标\"><a class=\"header-anchor\" href=\"#掌握目标\">¶</a>掌握目标</h3>\n<span id=\"more\"></span>\n<h3 id=\"add-commit-push使用\"><a class=\"header-anchor\" href=\"#add-commit-push使用\">¶</a>add/commit/push使用</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add XXX</span><br><span class=\"line\">git commit -m &quot;commit说明&quot;</span><br><span class=\"line\">git push origin master </span><br></pre></td></tr></table></figure>\n<h3 id=\"常见的场景及策略\"><a class=\"header-anchor\" href=\"#常见的场景及策略\">¶</a>常见的场景及策略</h3>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>上节提要：<a href=\"http://blog.imrcrab.com/2020/09/02/git%20%E5%88%9D%E9%98%B6:%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%20%EF%BD%9E1/#more\">Git初阶：安装配置～1</a>属于Git搭建的基础。</p>\n</blockquote>\n<blockquote>\n<p>本章节主要以代码的add、commit、push为主，及使用过程中遇到的场景和解决策略。</p>\n</blockquote>\n<h3 id=\"掌握目标\"><a class=\"header-anchor\" href=\"#掌握目标\">¶</a>掌握目标</h3>","more":"<h3 id=\"add-commit-push使用\"><a class=\"header-anchor\" href=\"#add-commit-push使用\">¶</a>add/commit/push使用</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add XXX</span><br><span class=\"line\">git commit -m &quot;commit说明&quot;</span><br><span class=\"line\">git push origin master </span><br></pre></td></tr></table></figure>\n<h3 id=\"常见的场景及策略\"><a class=\"header-anchor\" href=\"#常见的场景及策略\">¶</a>常见的场景及策略</h3>","length":166},{"title":"Todo","date":"2020-12-27T02:10:01.000Z","_content":"\n\n<!--more-->\n\n## Redis\n\n### 使用篇\n\n\n### 源码篇\n#### 五大数据结构\n\n##### string\n###### sds\n\n##### list\n\n##### set\n\n##### z_set\n\n##### hash\n\n\n#### 网络连接处理\n\n#### 集群处理「哨兵模式」\n\n#### 事件处理\n\n#### AOF & RDB\n\n#### 命令实现\n\n#### 复制\n\n#### 悲观锁和乐观锁\n\n\n#### 消息通知「发布/订阅」\n\n#### 基数统计「hyperLogLog」\n\n#### 集群伸缩\n\n\n### 踩坑篇\n\n## N个问题\n\n#### 正态规划：\n\n#### 窗口滑动:\n","source":"_drafts/plan todo.md","raw":"---\ntitle: 'Todo'\ndate: 2020-12-27 10:10:01\ntags:\n    - Todo\n---\n\n\n<!--more-->\n\n## Redis\n\n### 使用篇\n\n\n### 源码篇\n#### 五大数据结构\n\n##### string\n###### sds\n\n##### list\n\n##### set\n\n##### z_set\n\n##### hash\n\n\n#### 网络连接处理\n\n#### 集群处理「哨兵模式」\n\n#### 事件处理\n\n#### AOF & RDB\n\n#### 命令实现\n\n#### 复制\n\n#### 悲观锁和乐观锁\n\n\n#### 消息通知「发布/订阅」\n\n#### 基数统计「hyperLogLog」\n\n#### 集群伸缩\n\n\n### 踩坑篇\n\n## N个问题\n\n#### 正态规划：\n\n#### 窗口滑动:\n","slug":"plan todo","published":0,"updated":"2021-04-23T09:23:51.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4h000lzfqx658g7i94","content":"<span id=\"more\"></span>\n<h2 id=\"Redis\"><a class=\"header-anchor\" href=\"#Redis\">¶</a>Redis</h2>\n<h3 id=\"使用篇\"><a class=\"header-anchor\" href=\"#使用篇\">¶</a>使用篇</h3>\n<h3 id=\"源码篇\"><a class=\"header-anchor\" href=\"#源码篇\">¶</a>源码篇</h3>\n<h4 id=\"五大数据结构\"><a class=\"header-anchor\" href=\"#五大数据结构\">¶</a>五大数据结构</h4>\n<h5 id=\"string\"><a class=\"header-anchor\" href=\"#string\">¶</a>string</h5>\n<h6 id=\"sds\"><a class=\"header-anchor\" href=\"#sds\">¶</a>sds</h6>\n<h5 id=\"list\"><a class=\"header-anchor\" href=\"#list\">¶</a>list</h5>\n<h5 id=\"set\"><a class=\"header-anchor\" href=\"#set\">¶</a>set</h5>\n<h5 id=\"z-set\"><a class=\"header-anchor\" href=\"#z-set\">¶</a>z_set</h5>\n<h5 id=\"hash\"><a class=\"header-anchor\" href=\"#hash\">¶</a>hash</h5>\n<h4 id=\"网络连接处理\"><a class=\"header-anchor\" href=\"#网络连接处理\">¶</a>网络连接处理</h4>\n<h4 id=\"集群处理「哨兵模式」\"><a class=\"header-anchor\" href=\"#集群处理「哨兵模式」\">¶</a>集群处理「哨兵模式」</h4>\n<h4 id=\"事件处理\"><a class=\"header-anchor\" href=\"#事件处理\">¶</a>事件处理</h4>\n<h4 id=\"AOF-RDB\"><a class=\"header-anchor\" href=\"#AOF-RDB\">¶</a>AOF &amp; RDB</h4>\n<h4 id=\"命令实现\"><a class=\"header-anchor\" href=\"#命令实现\">¶</a>命令实现</h4>\n<h4 id=\"复制\"><a class=\"header-anchor\" href=\"#复制\">¶</a>复制</h4>\n<h4 id=\"悲观锁和乐观锁\"><a class=\"header-anchor\" href=\"#悲观锁和乐观锁\">¶</a>悲观锁和乐观锁</h4>\n<h4 id=\"消息通知「发布-订阅」\"><a class=\"header-anchor\" href=\"#消息通知「发布-订阅」\">¶</a>消息通知「发布/订阅」</h4>\n<h4 id=\"基数统计「hyperLogLog」\"><a class=\"header-anchor\" href=\"#基数统计「hyperLogLog」\">¶</a>基数统计「hyperLogLog」</h4>\n<h4 id=\"集群伸缩\"><a class=\"header-anchor\" href=\"#集群伸缩\">¶</a>集群伸缩</h4>\n<h3 id=\"踩坑篇\"><a class=\"header-anchor\" href=\"#踩坑篇\">¶</a>踩坑篇</h3>\n<h2 id=\"N个问题\"><a class=\"header-anchor\" href=\"#N个问题\">¶</a>N个问题</h2>\n<h4 id=\"正态规划：\"><a class=\"header-anchor\" href=\"#正态规划：\">¶</a>正态规划：</h4>\n<h4 id=\"窗口滑动\"><a class=\"header-anchor\" href=\"#窗口滑动\">¶</a>窗口滑动:</h4>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Redis\"><a class=\"header-anchor\" href=\"#Redis\">¶</a>Redis</h2>\n<h3 id=\"使用篇\"><a class=\"header-anchor\" href=\"#使用篇\">¶</a>使用篇</h3>\n<h3 id=\"源码篇\"><a class=\"header-anchor\" href=\"#源码篇\">¶</a>源码篇</h3>\n<h4 id=\"五大数据结构\"><a class=\"header-anchor\" href=\"#五大数据结构\">¶</a>五大数据结构</h4>\n<h5 id=\"string\"><a class=\"header-anchor\" href=\"#string\">¶</a>string</h5>\n<h6 id=\"sds\"><a class=\"header-anchor\" href=\"#sds\">¶</a>sds</h6>\n<h5 id=\"list\"><a class=\"header-anchor\" href=\"#list\">¶</a>list</h5>\n<h5 id=\"set\"><a class=\"header-anchor\" href=\"#set\">¶</a>set</h5>\n<h5 id=\"z-set\"><a class=\"header-anchor\" href=\"#z-set\">¶</a>z_set</h5>\n<h5 id=\"hash\"><a class=\"header-anchor\" href=\"#hash\">¶</a>hash</h5>\n<h4 id=\"网络连接处理\"><a class=\"header-anchor\" href=\"#网络连接处理\">¶</a>网络连接处理</h4>\n<h4 id=\"集群处理「哨兵模式」\"><a class=\"header-anchor\" href=\"#集群处理「哨兵模式」\">¶</a>集群处理「哨兵模式」</h4>\n<h4 id=\"事件处理\"><a class=\"header-anchor\" href=\"#事件处理\">¶</a>事件处理</h4>\n<h4 id=\"AOF-RDB\"><a class=\"header-anchor\" href=\"#AOF-RDB\">¶</a>AOF &amp; RDB</h4>\n<h4 id=\"命令实现\"><a class=\"header-anchor\" href=\"#命令实现\">¶</a>命令实现</h4>\n<h4 id=\"复制\"><a class=\"header-anchor\" href=\"#复制\">¶</a>复制</h4>\n<h4 id=\"悲观锁和乐观锁\"><a class=\"header-anchor\" href=\"#悲观锁和乐观锁\">¶</a>悲观锁和乐观锁</h4>\n<h4 id=\"消息通知「发布-订阅」\"><a class=\"header-anchor\" href=\"#消息通知「发布-订阅」\">¶</a>消息通知「发布/订阅」</h4>\n<h4 id=\"基数统计「hyperLogLog」\"><a class=\"header-anchor\" href=\"#基数统计「hyperLogLog」\">¶</a>基数统计「hyperLogLog」</h4>\n<h4 id=\"集群伸缩\"><a class=\"header-anchor\" href=\"#集群伸缩\">¶</a>集群伸缩</h4>\n<h3 id=\"踩坑篇\"><a class=\"header-anchor\" href=\"#踩坑篇\">¶</a>踩坑篇</h3>\n<h2 id=\"N个问题\"><a class=\"header-anchor\" href=\"#N个问题\">¶</a>N个问题</h2>\n<h4 id=\"正态规划：\"><a class=\"header-anchor\" href=\"#正态规划：\">¶</a>正态规划：</h4>\n<h4 id=\"窗口滑动\"><a class=\"header-anchor\" href=\"#窗口滑动\">¶</a>窗口滑动:</h4>","length":159},{"title":"「0」Blog Plans","date":"2021-05-12T14:14:21.000Z","top":true,"mathjax":true,"abbrlink":"324e6290","_content":"\n### 💫 版块划分\n* recent\n* continued\n* pending\n* todo\n* done\n\n<!--more-->\n\n### 🌈 recent\n\n[👉「50」Map GC问题](https://blog.imrcrab.com/archives/af25fb6c.html)\n\n### 🌈 continued\n\n[👉🏻「49」Go runtime操作「持续更新」](https://blog.imrcrab.com/archives/3b137bd0.html)\n\n[👉🏻「16」go源码words归纳](https://blog.imrcrab.com/archives/425d5e80.html)\n\n[👉🏻「15」Plan9 汇编小记](https://blog.imrcrab.com/archives/2ce846ed.html)\n\n[👉🏻「4」Git常用技巧](https://blog.imrcrab.com/archives/3c1dd822.html)\n\n[👉🏻「11」hexo 主题&评论&进度条&背景效果](https://blog.imrcrab.com/archives/e18c94ab.html)\n\n\n### 🌈 pending\n\n[👨🏽‍💻「46」chan布局和设计「源码」](https://blog.imrcrab.com/archives/a0547b09.html)\n\n[👨🏽‍💻「27」Time Zone时区详解](https://blog.imrcrab.com/archives/513dbeba.html)\n\n### 🌈 todo\n\n[⚡️]回溯算法\n[⚡️]01背包\n[⚡️]爬楼梯\n[⚡️]堆栈用slice实现\n\n### 🌈 done","source":"_drafts/「0」Blog-plans.md","raw":"---\ntitle: 「0」Blog Plans\ndate: '2021/05/12 22:14:21'\ntop: true\nmathjax: true\nabbrlink: '324e6290'\ntags:\n---\n\n### 💫 版块划分\n* recent\n* continued\n* pending\n* todo\n* done\n\n<!--more-->\n\n### 🌈 recent\n\n[👉「50」Map GC问题](https://blog.imrcrab.com/archives/af25fb6c.html)\n\n### 🌈 continued\n\n[👉🏻「49」Go runtime操作「持续更新」](https://blog.imrcrab.com/archives/3b137bd0.html)\n\n[👉🏻「16」go源码words归纳](https://blog.imrcrab.com/archives/425d5e80.html)\n\n[👉🏻「15」Plan9 汇编小记](https://blog.imrcrab.com/archives/2ce846ed.html)\n\n[👉🏻「4」Git常用技巧](https://blog.imrcrab.com/archives/3c1dd822.html)\n\n[👉🏻「11」hexo 主题&评论&进度条&背景效果](https://blog.imrcrab.com/archives/e18c94ab.html)\n\n\n### 🌈 pending\n\n[👨🏽‍💻「46」chan布局和设计「源码」](https://blog.imrcrab.com/archives/a0547b09.html)\n\n[👨🏽‍💻「27」Time Zone时区详解](https://blog.imrcrab.com/archives/513dbeba.html)\n\n### 🌈 todo\n\n[⚡️]回溯算法\n[⚡️]01背包\n[⚡️]爬楼梯\n[⚡️]堆栈用slice实现\n\n### 🌈 done","slug":"「0」Blog-plans","published":0,"updated":"2021-05-27T03:36:42.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4i000nzfqxbvnnh3kj","content":"<h3 id=\"💫-版块划分\"><a class=\"header-anchor\" href=\"#💫-版块划分\">¶</a>💫 版块划分</h3>\n<ul>\n<li>recent</li>\n<li>continued</li>\n<li>pending</li>\n<li>todo</li>\n<li>done</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"🌈-recent\"><a class=\"header-anchor\" href=\"#🌈-recent\">¶</a>🌈 recent</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/af25fb6c.html\">👉「50」Map GC问题</a></p>\n<h3 id=\"🌈-continued\"><a class=\"header-anchor\" href=\"#🌈-continued\">¶</a>🌈 continued</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/3b137bd0.html\">👉🏻「49」Go runtime操作「持续更新」</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/425d5e80.html\">👉🏻「16」go源码words归纳</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/2ce846ed.html\">👉🏻「15」Plan9 汇编小记</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/3c1dd822.html\">👉🏻「4」Git常用技巧</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/e18c94ab.html\">👉🏻「11」hexo 主题&amp;评论&amp;进度条&amp;背景效果</a></p>\n<h3 id=\"🌈-pending\"><a class=\"header-anchor\" href=\"#🌈-pending\">¶</a>🌈 pending</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/a0547b09.html\">👨🏽‍💻「46」chan布局和设计「源码」</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/513dbeba.html\">👨🏽‍💻「27」Time Zone时区详解</a></p>\n<h3 id=\"🌈-todo\"><a class=\"header-anchor\" href=\"#🌈-todo\">¶</a>🌈 todo</h3>\n<p>[⚡️]回溯算法<br>\n[⚡️]01背包<br>\n[⚡️]爬楼梯<br>\n[⚡️]堆栈用slice实现</p>\n<h3 id=\"🌈-done\"><a class=\"header-anchor\" href=\"#🌈-done\">¶</a>🌈 done</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"💫-版块划分\"><a class=\"header-anchor\" href=\"#💫-版块划分\">¶</a>💫 版块划分</h3>\n<ul>\n<li>recent</li>\n<li>continued</li>\n<li>pending</li>\n<li>todo</li>\n<li>done</li>\n</ul>","more":"<h3 id=\"🌈-recent\"><a class=\"header-anchor\" href=\"#🌈-recent\">¶</a>🌈 recent</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/af25fb6c.html\">👉「50」Map GC问题</a></p>\n<h3 id=\"🌈-continued\"><a class=\"header-anchor\" href=\"#🌈-continued\">¶</a>🌈 continued</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/3b137bd0.html\">👉🏻「49」Go runtime操作「持续更新」</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/425d5e80.html\">👉🏻「16」go源码words归纳</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/2ce846ed.html\">👉🏻「15」Plan9 汇编小记</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/3c1dd822.html\">👉🏻「4」Git常用技巧</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/e18c94ab.html\">👉🏻「11」hexo 主题&amp;评论&amp;进度条&amp;背景效果</a></p>\n<h3 id=\"🌈-pending\"><a class=\"header-anchor\" href=\"#🌈-pending\">¶</a>🌈 pending</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/a0547b09.html\">👨🏽‍💻「46」chan布局和设计「源码」</a></p>\n<p><a href=\"https://blog.imrcrab.com/archives/513dbeba.html\">👨🏽‍💻「27」Time Zone时区详解</a></p>\n<h3 id=\"🌈-todo\"><a class=\"header-anchor\" href=\"#🌈-todo\">¶</a>🌈 todo</h3>\n<p>[⚡️]回溯算法<br>\n[⚡️]01背包<br>\n[⚡️]爬楼梯<br>\n[⚡️]堆栈用slice实现</p>\n<h3 id=\"🌈-done\"><a class=\"header-anchor\" href=\"#🌈-done\">¶</a>🌈 done</h3>","length":292},{"title":"「开发」工具集锦","date":"2021-05-27T00:32:28.000Z","top":false,"mathjax":true,"abbrlink":"c3ee0f57","_content":"⚡️ 工具集锦\n\n<!--more-->\n\n## Go\n\n### 工具\n\n#### [官方代码在线追溯](https://cs.opensource.google/go/go/+/master:;bpv=1;bpt=0)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210527_113400.png)\n\n\n## 👨🏽‍💻 Continually updated","source":"_posts/-1-工具集锦.md","raw":"---\ntitle: 「开发」工具集锦\ndate: '2021/05/27 08:32:28'\ntop: false\nmathjax: true\nabbrlink: c3ee0f57\ntags:\n---\n⚡️ 工具集锦\n\n<!--more-->\n\n## Go\n\n### 工具\n\n#### [官方代码在线追溯](https://cs.opensource.google/go/go/+/master:;bpv=1;bpt=0)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210527_113400.png)\n\n\n## 👨🏽‍💻 Continually updated","slug":"-1-工具集锦","published":1,"updated":"2022-07-09T15:19:02.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4i000ozfqx25de410g","content":"<p>⚡️ 工具集锦</p>\n<span id=\"more\"></span>\n<h2 id=\"Go\"><a class=\"header-anchor\" href=\"#Go\">¶</a>Go</h2>\n<h3 id=\"工具\"><a class=\"header-anchor\" href=\"#工具\">¶</a>工具</h3>\n<h4 id=\"官方代码在线追溯\"><a class=\"header-anchor\" href=\"#官方代码在线追溯\">¶</a><a href=\"https://cs.opensource.google/go/go/+/master:;bpv=1;bpt=0\">官方代码在线追溯</a></h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210527_113400.png\" alt=\"\"></p>\n<h2 id=\"👨🏽‍💻-Continually-updated\"><a class=\"header-anchor\" href=\"#👨🏽‍💻-Continually-updated\">¶</a>👨🏽‍💻 Continually updated</h2>\n","site":{"data":{}},"excerpt":"<p>⚡️ 工具集锦</p>","more":"<h2 id=\"Go\"><a class=\"header-anchor\" href=\"#Go\">¶</a>Go</h2>\n<h3 id=\"工具\"><a class=\"header-anchor\" href=\"#工具\">¶</a>工具</h3>\n<h4 id=\"官方代码在线追溯\"><a class=\"header-anchor\" href=\"#官方代码在线追溯\">¶</a><a href=\"https://cs.opensource.google/go/go/+/master:;bpv=1;bpt=0\">官方代码在线追溯</a></h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210527_113400.png\" alt=\"\"></p>\n<h2 id=\"👨🏽‍💻-Continually-updated\"><a class=\"header-anchor\" href=\"#👨🏽‍💻-Continually-updated\">¶</a>👨🏽‍💻 Continually updated</h2>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210527_113400.png","popularPost_tmp_gaData":{"updated":"Sat Jul 09 2022 23:19:02 GMT+0800 (中国标准时间)","title":"「开发」工具集锦","path":"archives/c3ee0f57.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210527_113400.png","excerpt":"<p>⚡️ 工具集锦</p>","date":{"_isAMomentObject":true,"_i":"2021-05-27T00:32:28.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-27T00:32:28.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":47},{"title":"「1」重拾那份折腾之心，坚定脚步","date":"2020-08-31T00:48:48.000Z","updated":"2020-08-31T00:48:48.000Z","keywords":"折腾,后端博客,golang","toc":true,"abbrlink":"640b5696","_content":"\n    从前，现在，将来...","source":"_posts/1-重拾那份折腾之心，坚定脚步.md","raw":"---\ntitle: 「1」重拾那份折腾之心，坚定脚步\ndate: '2020/08/31 08:48:48'\nupdated: '2020/08/31 08:48:48'\nkeywords: '折腾,后端博客,golang'\ntoc: true\ntags:\n  - life\nabbrlink: 640b5696\n---\n\n    从前，现在，将来...","slug":"1-重拾那份折腾之心，坚定脚步","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4j000rzfqx1a5p8173","content":"<pre><code>从前，现在，将来...</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>从前，现在，将来...</code></pre>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Aug 31 2020 08:48:48 GMT+0800 (中国标准时间)","title":"「1」重拾那份折腾之心，坚定脚步","path":"archives/640b5696.html","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2020-08-31T00:48:48.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-31T00:48:48.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["life"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":11},{"title":"「10」go mutex解读","date":"2020-09-21T15:06:32.000Z","updated":"2020-09-22T05:20:32.000Z","keywords":"golang,go 源码,go 锁, mutex 解读","abbrlink":"ff0d6c2b","_content":"\n上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：\n<!-- more -->\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex.png)\n\n>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。\n\n### 前序\n>开始看代码或者分析之前，先看下文档说明及其相关的资料。\n\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### src/sync/mutex.go\n```go\nconst (\n\tmutexLocked = 1 << iota // mutex is locked      state & mutexLocked 1==加锁  0==未加锁\n\n\t\n\n\tmutexWoken                                      //state & mutexWoken 1==唤醒  0==未唤醒\n\tmutexStarving                                   // state & mutexStarving 1==饥饿状态   0==正常状态\n\tmutexWaiterShift = iota                         // state >> mutexWaiterShift得到当前的goroutine数量\n\n\t// Mutex fairness.\n\t// 两种模式：正常或饥饿\n    // Mutex can be in 2 modes of operations: normal and starvation.\n    //  正常模式就是FIFO队列。\n\t// In normal mode waiters are queued in FIFO order, but a woken up waiter\n\t// does not own the mutex and competes with new arriving goroutines over\n\t// the ownership. New arriving goroutines have an advantage -- they are\n\t// already running on CPU and there can be lots of them, so a woken up\n\t// waiter has good chances of losing. In such case it is queued at front\n\t// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式\n\t// it switches mutex to the starvation mode.\n\t//\n\t// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。\n\t// the unlocking goroutine to the waiter at the front of the queue.\n\t// New arriving goroutines don't try to acquire the mutex even if it appears\n\t// to be unlocked, and don't try to spin. Instead they queue themselves at\n\t// the tail of the wait queue.\n\t//\n\t// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式\n\t// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,\n\t// it switches mutex back to normal operation mode.\n\t//\n\t// Normal mode has considerably better performance as a goroutine can acquire\n\t// a mutex several times in a row even if there are blocked waiters.\n\t// Starvation mode is important to prevent pathological cases of tail latency.\n\tstarvationThresholdNs = 1e6\n)\n```\n### 加锁流程\n>加锁过程图如上图提到的流程。\n\n>加锁代码具体流程：\n\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}\n\nfunc (m *Mutex) lockSlow() {\n\tvar waitStartTime int64 //等待时间\n\tstarving := false       //是否处于饥饿状态\n\tawoke := false          //唤醒状态\n\titer := 0               //自旋次数\n\told := m.state          //当前状态copy\n\tfor {\n\t\t// Don't spin in starvation mode, ownership is handed off to waiters\n        // so we won't be able to acquire the mutex anyway.\n        //加锁且能够自旋\n\t\tif old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) {\n\t\t\t// Active spinning makes sense.\n\t\t\t// Try to set mutexWoken flag to inform Unlock\n            // to not wake other blocked goroutines.\n            //自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒\n\t\t\tif !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 &&\n\t\t\t\tatomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) {\n\t\t\t\tawoke = true\n\t\t\t}\n\t\t\truntime_doSpin()    //自旋\n\t\t\titer++              \n\t\t\told = m.state       //状态重置\n\t\t\tcontinue\n        }\n        //更新状态\n\t\tnew := old\n        // Don't try to acquire starving mutex, new arriving goroutines must queue.\n        //非饥饿模式，则置锁\n\t\tif old&mutexStarving == 0 {\n\t\t\tnew |= mutexLocked\n        }\n        // 处于饥饿模式下，新来的goroutine进入队列中\n\t\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\t\tnew += 1 << mutexWaiterShift\n\t\t}\n\t\t// The current goroutine switches mutex to starvation mode.\n\t\t// But if the mutex is currently unlocked, don't do the switch.\n\t\t// Unlock expects that starving mutex has waiters, which will not\n        // be true in this case.\n        //切换到饥饿模式下\n\t\tif starving && old&mutexLocked != 0 {\n\t\t\tnew |= mutexStarving\n        }\n        //当前处于唤醒状态，则重置清除唤醒状态。\n\t\tif awoke {\n\t\t\t// The goroutine has been woken from sleep,\n\t\t\t// so we need to reset the flag in either case.\n\t\t\tif new&mutexWoken == 0 {\n\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t}\n\t\t\tnew &^= mutexWoken\n        }\n        //CAS更新状态。\n\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n            //获取到锁\n\t\t\tif old&(mutexLocked|mutexStarving) == 0 {\n\t\t\t\tbreak // locked the mutex with CAS\n\t\t\t}\n            // If we were already waiting before, queue at the front of the queue.\n            //等待队列的时间\n\t\t\tqueueLifo := waitStartTime != 0\n\t\t\tif waitStartTime == 0 {\n\t\t\t\twaitStartTime = runtime_nanotime()\n            }\n            //acquire阻塞队列....\n            // 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待\n            // 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部\n\t\t\truntime_SemacquireMutex(&m.sema, queueLifo, 1)\n\t\t\tstarving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs\n            old = m.state\n            //处于饥饿模式\n\t\t\tif old&mutexStarving != 0 {\n\t\t\t\t// If this goroutine was woken and mutex is in starvation mode,\n\t\t\t\t// ownership was handed off to us but mutex is in somewhat\n\t\t\t\t// inconsistent state: mutexLocked is not set and we are still\n\t\t\t\t// accounted as waiter. Fix that.\n\t\t\t\tif old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {\n\t\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n                }\n                //等待的goroutine-1\n                delta := int32(mutexLocked - 1<<mutexWaiterShift)\n                // 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。\n\t\t\t\tif !starving || old>>mutexWaiterShift == 1 {\n\t\t\t\t\t// Exit starvation mode.\n\t\t\t\t\t// Critical to do it here and consider wait time.\n\t\t\t\t\t// Starvation mode is so inefficient, that two goroutines\n\t\t\t\t\t// can go lock-step infinitely once they switch mutex\n\t\t\t\t\t// to starvation mode.\n\t\t\t\t\tdelta -= mutexStarving\n                }\n                //更新状态\n\t\t\t\tatomic.AddInt32(&m.state, delta)\n\t\t\t\tbreak\n            }\n            //重置迭代器和唤醒表示，继续获取锁\n\t\t\tawoke = true\n\t\t\titer = 0\n\t\t} else {\n            //CAS失败，则更新状态，继续获取。\n\t\t\told = m.state\n\t\t}\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n}\n\n```\n### 解锁过程\n\n用一个流程图来表示解锁过程：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex-unlock.png)\n\n```go\nfunc (m *Mutex) Unlock() {\n    //state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic\n    new := atomic.AddInt32(&m.state, -mutexLocked)\n    if (new+mutexLocked)&mutexLocked == 0 {\n        throw(\"sync: unlock of unlocked mutex\")\n    }\n\n    // 释放锁，并通知其它等待者\n    // 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁\n    // mutex 正常模式\n    if new&mutexStarving == 0 {\n        old := new\n        for {\n            // 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式\n            // 直接返回.\n            if old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n                return\n            }\n            // 将等待的 goroutine-1，并设置 woken 标识\n            new = (old - 1<<mutexWaiterShift) | mutexWoken\n            // 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.\n            if atomic.CompareAndSwapInt32(&m.state, old, new) {\n                runtime_Semrelease(&m.sema, false)\n                return\n            }\n            old = m.state\n        }\n    } else {\n        // mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine\n        // 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。\n        // 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，\n        // 新来的 goroutine 不会把锁抢过去.\n        runtime_Semrelease(&m.sema, true)\n    }\n}\n\n```\n\n### 关键点\n\n* 不要重复锁定互斥锁\n* 不要忘记解锁互斥锁\n* 不要在多个函数之间直接传递互斥锁\n\n### END","source":"_posts/10-sync-mutex解读.md","raw":"---\ntitle: 「10」go mutex解读\ndate: '2020/09/21 23:06:32'\nupdated: '2020/09/22 13:20:32'\nkeywords: 'golang,go 源码,go 锁, mutex 解读'\ntags:\n  - Go\n  - Go源码\n  - Go Package\n  - 锁\nabbrlink: ff0d6c2b\n---\n\n上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：\n<!-- more -->\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex.png)\n\n>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。\n\n### 前序\n>开始看代码或者分析之前，先看下文档说明及其相关的资料。\n\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### src/sync/mutex.go\n```go\nconst (\n\tmutexLocked = 1 << iota // mutex is locked      state & mutexLocked 1==加锁  0==未加锁\n\n\t\n\n\tmutexWoken                                      //state & mutexWoken 1==唤醒  0==未唤醒\n\tmutexStarving                                   // state & mutexStarving 1==饥饿状态   0==正常状态\n\tmutexWaiterShift = iota                         // state >> mutexWaiterShift得到当前的goroutine数量\n\n\t// Mutex fairness.\n\t// 两种模式：正常或饥饿\n    // Mutex can be in 2 modes of operations: normal and starvation.\n    //  正常模式就是FIFO队列。\n\t// In normal mode waiters are queued in FIFO order, but a woken up waiter\n\t// does not own the mutex and competes with new arriving goroutines over\n\t// the ownership. New arriving goroutines have an advantage -- they are\n\t// already running on CPU and there can be lots of them, so a woken up\n\t// waiter has good chances of losing. In such case it is queued at front\n\t// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式\n\t// it switches mutex to the starvation mode.\n\t//\n\t// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。\n\t// the unlocking goroutine to the waiter at the front of the queue.\n\t// New arriving goroutines don't try to acquire the mutex even if it appears\n\t// to be unlocked, and don't try to spin. Instead they queue themselves at\n\t// the tail of the wait queue.\n\t//\n\t// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式\n\t// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,\n\t// it switches mutex back to normal operation mode.\n\t//\n\t// Normal mode has considerably better performance as a goroutine can acquire\n\t// a mutex several times in a row even if there are blocked waiters.\n\t// Starvation mode is important to prevent pathological cases of tail latency.\n\tstarvationThresholdNs = 1e6\n)\n```\n### 加锁流程\n>加锁过程图如上图提到的流程。\n\n>加锁代码具体流程：\n\n```go\nfunc (m *Mutex) Lock() {\n\t// Fast path: grab unlocked mutex.\n\tif atomic.CompareAndSwapInt32(&m.state, 0, mutexLocked) {\n\t\tif race.Enabled {\n\t\t\trace.Acquire(unsafe.Pointer(m))\n\t\t}\n\t\treturn\n\t}\n\t// Slow path (outlined so that the fast path can be inlined)\n\tm.lockSlow()\n}\n\nfunc (m *Mutex) lockSlow() {\n\tvar waitStartTime int64 //等待时间\n\tstarving := false       //是否处于饥饿状态\n\tawoke := false          //唤醒状态\n\titer := 0               //自旋次数\n\told := m.state          //当前状态copy\n\tfor {\n\t\t// Don't spin in starvation mode, ownership is handed off to waiters\n        // so we won't be able to acquire the mutex anyway.\n        //加锁且能够自旋\n\t\tif old&(mutexLocked|mutexStarving) == mutexLocked && runtime_canSpin(iter) {\n\t\t\t// Active spinning makes sense.\n\t\t\t// Try to set mutexWoken flag to inform Unlock\n            // to not wake other blocked goroutines.\n            //自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒\n\t\t\tif !awoke && old&mutexWoken == 0 && old>>mutexWaiterShift != 0 &&\n\t\t\t\tatomic.CompareAndSwapInt32(&m.state, old, old|mutexWoken) {\n\t\t\t\tawoke = true\n\t\t\t}\n\t\t\truntime_doSpin()    //自旋\n\t\t\titer++              \n\t\t\told = m.state       //状态重置\n\t\t\tcontinue\n        }\n        //更新状态\n\t\tnew := old\n        // Don't try to acquire starving mutex, new arriving goroutines must queue.\n        //非饥饿模式，则置锁\n\t\tif old&mutexStarving == 0 {\n\t\t\tnew |= mutexLocked\n        }\n        // 处于饥饿模式下，新来的goroutine进入队列中\n\t\tif old&(mutexLocked|mutexStarving) != 0 {\n\t\t\tnew += 1 << mutexWaiterShift\n\t\t}\n\t\t// The current goroutine switches mutex to starvation mode.\n\t\t// But if the mutex is currently unlocked, don't do the switch.\n\t\t// Unlock expects that starving mutex has waiters, which will not\n        // be true in this case.\n        //切换到饥饿模式下\n\t\tif starving && old&mutexLocked != 0 {\n\t\t\tnew |= mutexStarving\n        }\n        //当前处于唤醒状态，则重置清除唤醒状态。\n\t\tif awoke {\n\t\t\t// The goroutine has been woken from sleep,\n\t\t\t// so we need to reset the flag in either case.\n\t\t\tif new&mutexWoken == 0 {\n\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n\t\t\t}\n\t\t\tnew &^= mutexWoken\n        }\n        //CAS更新状态。\n\t\tif atomic.CompareAndSwapInt32(&m.state, old, new) {\n            //获取到锁\n\t\t\tif old&(mutexLocked|mutexStarving) == 0 {\n\t\t\t\tbreak // locked the mutex with CAS\n\t\t\t}\n            // If we were already waiting before, queue at the front of the queue.\n            //等待队列的时间\n\t\t\tqueueLifo := waitStartTime != 0\n\t\t\tif waitStartTime == 0 {\n\t\t\t\twaitStartTime = runtime_nanotime()\n            }\n            //acquire阻塞队列....\n            // 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待\n            // 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部\n\t\t\truntime_SemacquireMutex(&m.sema, queueLifo, 1)\n\t\t\tstarving = starving || runtime_nanotime()-waitStartTime > starvationThresholdNs\n            old = m.state\n            //处于饥饿模式\n\t\t\tif old&mutexStarving != 0 {\n\t\t\t\t// If this goroutine was woken and mutex is in starvation mode,\n\t\t\t\t// ownership was handed off to us but mutex is in somewhat\n\t\t\t\t// inconsistent state: mutexLocked is not set and we are still\n\t\t\t\t// accounted as waiter. Fix that.\n\t\t\t\tif old&(mutexLocked|mutexWoken) != 0 || old>>mutexWaiterShift == 0 {\n\t\t\t\t\tthrow(\"sync: inconsistent mutex state\")\n                }\n                //等待的goroutine-1\n                delta := int32(mutexLocked - 1<<mutexWaiterShift)\n                // 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。\n\t\t\t\tif !starving || old>>mutexWaiterShift == 1 {\n\t\t\t\t\t// Exit starvation mode.\n\t\t\t\t\t// Critical to do it here and consider wait time.\n\t\t\t\t\t// Starvation mode is so inefficient, that two goroutines\n\t\t\t\t\t// can go lock-step infinitely once they switch mutex\n\t\t\t\t\t// to starvation mode.\n\t\t\t\t\tdelta -= mutexStarving\n                }\n                //更新状态\n\t\t\t\tatomic.AddInt32(&m.state, delta)\n\t\t\t\tbreak\n            }\n            //重置迭代器和唤醒表示，继续获取锁\n\t\t\tawoke = true\n\t\t\titer = 0\n\t\t} else {\n            //CAS失败，则更新状态，继续获取。\n\t\t\told = m.state\n\t\t}\n\t}\n\n\tif race.Enabled {\n\t\trace.Acquire(unsafe.Pointer(m))\n\t}\n}\n\n```\n### 解锁过程\n\n用一个流程图来表示解锁过程：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex-unlock.png)\n\n```go\nfunc (m *Mutex) Unlock() {\n    //state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic\n    new := atomic.AddInt32(&m.state, -mutexLocked)\n    if (new+mutexLocked)&mutexLocked == 0 {\n        throw(\"sync: unlock of unlocked mutex\")\n    }\n\n    // 释放锁，并通知其它等待者\n    // 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁\n    // mutex 正常模式\n    if new&mutexStarving == 0 {\n        old := new\n        for {\n            // 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式\n            // 直接返回.\n            if old>>mutexWaiterShift == 0 || old&(mutexLocked|mutexWoken|mutexStarving) != 0 {\n                return\n            }\n            // 将等待的 goroutine-1，并设置 woken 标识\n            new = (old - 1<<mutexWaiterShift) | mutexWoken\n            // 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.\n            if atomic.CompareAndSwapInt32(&m.state, old, new) {\n                runtime_Semrelease(&m.sema, false)\n                return\n            }\n            old = m.state\n        }\n    } else {\n        // mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine\n        // 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。\n        // 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，\n        // 新来的 goroutine 不会把锁抢过去.\n        runtime_Semrelease(&m.sema, true)\n    }\n}\n\n```\n\n### 关键点\n\n* 不要重复锁定互斥锁\n* 不要忘记解锁互斥锁\n* 不要在多个函数之间直接传递互斥锁\n\n### END","slug":"10-sync-mutex解读","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4k000tzfqx7fqv5pa9","content":"<p>上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。<br>\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：</p>\n<span id=\"more\"></span>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex.png\" alt=\"\"></p>\n<blockquote>\n<p>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<blockquote>\n<p>开始看代码或者分析之前，先看下文档说明及其相关的资料。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"src-sync-mutex-go\"><a class=\"header-anchor\" href=\"#src-sync-mutex-go\">¶</a>src/sync/mutex.go</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tmutexLocked = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">// mutex is locked      state &amp; mutexLocked 1==加锁  0==未加锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutexWoken                                      <span class=\"comment\">//state &amp; mutexWoken 1==唤醒  0==未唤醒</span></span><br><span class=\"line\">\tmutexStarving                                   <span class=\"comment\">// state &amp; mutexStarving 1==饥饿状态   0==正常状态</span></span><br><span class=\"line\">\tmutexWaiterShift = <span class=\"literal\">iota</span>                         <span class=\"comment\">// state &gt;&gt; mutexWaiterShift得到当前的goroutine数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Mutex fairness.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 两种模式：正常或饥饿</span></span><br><span class=\"line\">    <span class=\"comment\">// Mutex can be in 2 modes of operations: normal and starvation.</span></span><br><span class=\"line\">    <span class=\"comment\">//  正常模式就是FIFO队列。</span></span><br><span class=\"line\">\t<span class=\"comment\">// In normal mode waiters are queued in FIFO order, but a woken up waiter</span></span><br><span class=\"line\">\t<span class=\"comment\">// does not own the mutex and competes with new arriving goroutines over</span></span><br><span class=\"line\">\t<span class=\"comment\">// the ownership. New arriving goroutines have an advantage -- they are</span></span><br><span class=\"line\">\t<span class=\"comment\">// already running on CPU and there can be lots of them, so a woken up</span></span><br><span class=\"line\">\t<span class=\"comment\">// waiter has good chances of losing. In such case it is queued at front</span></span><br><span class=\"line\">\t<span class=\"comment\">// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex to the starvation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。</span></span><br><span class=\"line\">\t<span class=\"comment\">// the unlocking goroutine to the waiter at the front of the queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">// New arriving goroutines don&#x27;t try to acquire the mutex even if it appears</span></span><br><span class=\"line\">\t<span class=\"comment\">// to be unlocked, and don&#x27;t try to spin. Instead they queue themselves at</span></span><br><span class=\"line\">\t<span class=\"comment\">// the tail of the wait queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex back to normal operation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Normal mode has considerably better performance as a goroutine can acquire</span></span><br><span class=\"line\">\t<span class=\"comment\">// a mutex several times in a row even if there are blocked waiters.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Starvation mode is important to prevent pathological cases of tail latency.</span></span><br><span class=\"line\">\tstarvationThresholdNs = <span class=\"number\">1e6</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁流程\"><a class=\"header-anchor\" href=\"#加锁流程\">¶</a>加锁流程</h3>\n<blockquote>\n<p>加锁过程图如上图提到的流程。</p>\n</blockquote>\n<blockquote>\n<p>加锁代码具体流程：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span></span> Lock() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Fast path: grab unlocked mutex.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class=\"number\">0</span>, mutexLocked) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Slow path (outlined so that the fast path can be inlined)</span></span><br><span class=\"line\">\tm.lockSlow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span></span> lockSlow() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> waitStartTime <span class=\"type\">int64</span> <span class=\"comment\">//等待时间</span></span><br><span class=\"line\">\tstarving := <span class=\"literal\">false</span>       <span class=\"comment\">//是否处于饥饿状态</span></span><br><span class=\"line\">\tawoke := <span class=\"literal\">false</span>          <span class=\"comment\">//唤醒状态</span></span><br><span class=\"line\">\titer := <span class=\"number\">0</span>               <span class=\"comment\">//自旋次数</span></span><br><span class=\"line\">\told := m.state          <span class=\"comment\">//当前状态copy</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span></span><br><span class=\"line\">        <span class=\"comment\">// so we won&#x27;t be able to acquire the mutex anyway.</span></span><br><span class=\"line\">        <span class=\"comment\">//加锁且能够自旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Active spinning makes sense.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to set mutexWoken flag to inform Unlock</span></span><br><span class=\"line\">            <span class=\"comment\">// to not wake other blocked goroutines.</span></span><br><span class=\"line\">            <span class=\"comment\">//自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class=\"number\">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\tatomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;</span><br><span class=\"line\">\t\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\truntime_doSpin()    <span class=\"comment\">//自旋</span></span><br><span class=\"line\">\t\t\titer++              </span><br><span class=\"line\">\t\t\told = m.state       <span class=\"comment\">//状态重置</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">new</span> := old</span><br><span class=\"line\">        <span class=\"comment\">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span></span><br><span class=\"line\">        <span class=\"comment\">//非饥饿模式，则置锁</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexLocked</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 处于饥饿模式下，新来的goroutine进入队列中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> += <span class=\"number\">1</span> &lt;&lt; mutexWaiterShift</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The current goroutine switches mutex to starvation mode.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Unlock expects that starving mutex has waiters, which will not</span></span><br><span class=\"line\">        <span class=\"comment\">// be true in this case.</span></span><br><span class=\"line\">        <span class=\"comment\">//切换到饥饿模式下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexStarving</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前处于唤醒状态，则重置清除唤醒状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> awoke &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The goroutine has been woken from sleep,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// so we need to reset the flag in either case.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexWoken == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> &amp;^= mutexWoken</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//CAS更新状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到锁</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span> <span class=\"comment\">// locked the mutex with CAS</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">// If we were already waiting before, queue at the front of the queue.</span></span><br><span class=\"line\">            <span class=\"comment\">//等待队列的时间</span></span><br><span class=\"line\">\t\t\tqueueLifo := waitStartTime != <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> waitStartTime == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\twaitStartTime = runtime_nanotime()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//acquire阻塞队列....</span></span><br><span class=\"line\">            <span class=\"comment\">// 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待</span></span><br><span class=\"line\">            <span class=\"comment\">// 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部</span></span><br><span class=\"line\">\t\t\truntime_SemacquireMutex(&amp;m.sema, queueLifo, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tstarving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">            <span class=\"comment\">//处于饥饿模式</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// If this goroutine was woken and mutex is in starvation mode,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ownership was handed off to us but mutex is in somewhat</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// inconsistent state: mutexLocked is not set and we are still</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// accounted as waiter. Fix that.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexWoken) != <span class=\"number\">0</span> || old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//等待的goroutine-1</span></span><br><span class=\"line\">                delta := <span class=\"type\">int32</span>(mutexLocked - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift)</span><br><span class=\"line\">                <span class=\"comment\">// 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Exit starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Critical to do it here and consider wait time.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Starvation mode is so inefficient, that two goroutines</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// can go lock-step infinitely once they switch mutex</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// to starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\tdelta -= mutexStarving</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t\t\tatomic.AddInt32(&amp;m.state, delta)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重置迭代器和唤醒表示，继续获取锁</span></span><br><span class=\"line\">\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\titer = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//CAS失败，则更新状态，继续获取。</span></span><br><span class=\"line\">\t\t\told = m.state</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁过程\"><a class=\"header-anchor\" href=\"#解锁过程\">¶</a>解锁过程</h3>\n<p>用一个流程图来表示解锁过程：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex-unlock.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span></span> Unlock() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic</span></span><br><span class=\"line\">    <span class=\"built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        throw(<span class=\"string\">&quot;sync: unlock of unlocked mutex&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放锁，并通知其它等待者</span></span><br><span class=\"line\">    <span class=\"comment\">// 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁</span></span><br><span class=\"line\">    <span class=\"comment\">// mutex 正常模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        old := <span class=\"built_in\">new</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接返回.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将等待的 goroutine-1，并设置 woken 标识</span></span><br><span class=\"line\">            <span class=\"built_in\">new</span> = (old - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken</span><br><span class=\"line\">            <span class=\"comment\">// 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">                runtime_Semrelease(&amp;m.sema, <span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。</span></span><br><span class=\"line\">        <span class=\"comment\">// 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 新来的 goroutine 不会把锁抢过去.</span></span><br><span class=\"line\">        runtime_Semrelease(&amp;m.sema, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"关键点\"><a class=\"header-anchor\" href=\"#关键点\">¶</a>关键点</h3>\n<ul>\n<li>不要重复锁定互斥锁</li>\n<li>不要忘记解锁互斥锁</li>\n<li>不要在多个函数之间直接传递互斥锁</li>\n</ul>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。<br>\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：</p>","more":"<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex.png\" alt=\"\"></p>\n<blockquote>\n<p>核心思想：饥饿和队列，正常流程都是加入到队列尾部，如果超过一定的时间限制则加入到队列头部。</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<blockquote>\n<p>开始看代码或者分析之前，先看下文档说明及其相关的资料。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"src-sync-mutex-go\"><a class=\"header-anchor\" href=\"#src-sync-mutex-go\">¶</a>src/sync/mutex.go</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tmutexLocked = <span class=\"number\">1</span> &lt;&lt; <span class=\"literal\">iota</span> <span class=\"comment\">// mutex is locked      state &amp; mutexLocked 1==加锁  0==未加锁</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tmutexWoken                                      <span class=\"comment\">//state &amp; mutexWoken 1==唤醒  0==未唤醒</span></span><br><span class=\"line\">\tmutexStarving                                   <span class=\"comment\">// state &amp; mutexStarving 1==饥饿状态   0==正常状态</span></span><br><span class=\"line\">\tmutexWaiterShift = <span class=\"literal\">iota</span>                         <span class=\"comment\">// state &gt;&gt; mutexWaiterShift得到当前的goroutine数量</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Mutex fairness.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 两种模式：正常或饥饿</span></span><br><span class=\"line\">    <span class=\"comment\">// Mutex can be in 2 modes of operations: normal and starvation.</span></span><br><span class=\"line\">    <span class=\"comment\">//  正常模式就是FIFO队列。</span></span><br><span class=\"line\">\t<span class=\"comment\">// In normal mode waiters are queued in FIFO order, but a woken up waiter</span></span><br><span class=\"line\">\t<span class=\"comment\">// does not own the mutex and competes with new arriving goroutines over</span></span><br><span class=\"line\">\t<span class=\"comment\">// the ownership. New arriving goroutines have an advantage -- they are</span></span><br><span class=\"line\">\t<span class=\"comment\">// already running on CPU and there can be lots of them, so a woken up</span></span><br><span class=\"line\">\t<span class=\"comment\">// waiter has good chances of losing. In such case it is queued at front</span></span><br><span class=\"line\">\t<span class=\"comment\">// of the wait queue. If a waiter fails to acquire the mutex for more than 1ms,  //获取锁的时间超过1ms，切换到饥饿模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex to the starvation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// In starvation mode ownership of the mutex is directly handed off from        //饥饿模式下锁的所有权直接从解锁goroutine的waiter手中移交到队列的前面。</span></span><br><span class=\"line\">\t<span class=\"comment\">// the unlocking goroutine to the waiter at the front of the queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">// New arriving goroutines don&#x27;t try to acquire the mutex even if it appears</span></span><br><span class=\"line\">\t<span class=\"comment\">// to be unlocked, and don&#x27;t try to spin. Instead they queue themselves at</span></span><br><span class=\"line\">\t<span class=\"comment\">// the tail of the wait queue.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// If a waiter receives ownership of the mutex and sees that either         //如果一个锁的所有权的等待者是以下两种情况之一的：1、处于队列的最后一个2、等待时间少于1ms，则切换到正常模式</span></span><br><span class=\"line\">\t<span class=\"comment\">// (1) it is the last waiter in the queue, or (2) it waited for less than 1 ms,</span></span><br><span class=\"line\">\t<span class=\"comment\">// it switches mutex back to normal operation mode.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Normal mode has considerably better performance as a goroutine can acquire</span></span><br><span class=\"line\">\t<span class=\"comment\">// a mutex several times in a row even if there are blocked waiters.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Starvation mode is important to prevent pathological cases of tail latency.</span></span><br><span class=\"line\">\tstarvationThresholdNs = <span class=\"number\">1e6</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁流程\"><a class=\"header-anchor\" href=\"#加锁流程\">¶</a>加锁流程</h3>\n<blockquote>\n<p>加锁过程图如上图提到的流程。</p>\n</blockquote>\n<blockquote>\n<p>加锁代码具体流程：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span></span> Lock() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Fast path: grab unlocked mutex.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, <span class=\"number\">0</span>, mutexLocked) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Slow path (outlined so that the fast path can be inlined)</span></span><br><span class=\"line\">\tm.lockSlow()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span></span> lockSlow() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> waitStartTime <span class=\"type\">int64</span> <span class=\"comment\">//等待时间</span></span><br><span class=\"line\">\tstarving := <span class=\"literal\">false</span>       <span class=\"comment\">//是否处于饥饿状态</span></span><br><span class=\"line\">\tawoke := <span class=\"literal\">false</span>          <span class=\"comment\">//唤醒状态</span></span><br><span class=\"line\">\titer := <span class=\"number\">0</span>               <span class=\"comment\">//自旋次数</span></span><br><span class=\"line\">\told := m.state          <span class=\"comment\">//当前状态copy</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Don&#x27;t spin in starvation mode, ownership is handed off to waiters</span></span><br><span class=\"line\">        <span class=\"comment\">// so we won&#x27;t be able to acquire the mutex anyway.</span></span><br><span class=\"line\">        <span class=\"comment\">//加锁且能够自旋</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == mutexLocked &amp;&amp; runtime_canSpin(iter) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Active spinning makes sense.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to set mutexWoken flag to inform Unlock</span></span><br><span class=\"line\">            <span class=\"comment\">// to not wake other blocked goroutines.</span></span><br><span class=\"line\">            <span class=\"comment\">//自旋过程发现没有被置woken标识，设置标识，将自己置为唤醒</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !awoke &amp;&amp; old&amp;mutexWoken == <span class=\"number\">0</span> &amp;&amp; old&gt;&gt;mutexWaiterShift != <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">\t\t\t\tatomic.CompareAndSwapInt32(&amp;m.state, old, old|mutexWoken) &#123;</span><br><span class=\"line\">\t\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\truntime_doSpin()    <span class=\"comment\">//自旋</span></span><br><span class=\"line\">\t\t\titer++              </span><br><span class=\"line\">\t\t\told = m.state       <span class=\"comment\">//状态重置</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">new</span> := old</span><br><span class=\"line\">        <span class=\"comment\">// Don&#x27;t try to acquire starving mutex, new arriving goroutines must queue.</span></span><br><span class=\"line\">        <span class=\"comment\">//非饥饿模式，则置锁</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexLocked</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 处于饥饿模式下，新来的goroutine进入队列中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> += <span class=\"number\">1</span> &lt;&lt; mutexWaiterShift</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The current goroutine switches mutex to starvation mode.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// But if the mutex is currently unlocked, don&#x27;t do the switch.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Unlock expects that starving mutex has waiters, which will not</span></span><br><span class=\"line\">        <span class=\"comment\">// be true in this case.</span></span><br><span class=\"line\">        <span class=\"comment\">//切换到饥饿模式下</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> starving &amp;&amp; old&amp;mutexLocked != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> |= mutexStarving</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//当前处于唤醒状态，则重置清除唤醒状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> awoke &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The goroutine has been woken from sleep,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// so we need to reset the flag in either case.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexWoken == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">new</span> &amp;^= mutexWoken</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//CAS更新状态。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取到锁</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexStarving) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span> <span class=\"comment\">// locked the mutex with CAS</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">            <span class=\"comment\">// If we were already waiting before, queue at the front of the queue.</span></span><br><span class=\"line\">            <span class=\"comment\">//等待队列的时间</span></span><br><span class=\"line\">\t\t\tqueueLifo := waitStartTime != <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> waitStartTime == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\twaitStartTime = runtime_nanotime()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//acquire阻塞队列....</span></span><br><span class=\"line\">            <span class=\"comment\">// 新来的 goroutine, queueLifo=false, 加入到等待队列的尾部，耐心等待</span></span><br><span class=\"line\">            <span class=\"comment\">// 唤醒的 goroutine, queueLifo=true, 加入到等待队列的头部</span></span><br><span class=\"line\">\t\t\truntime_SemacquireMutex(&amp;m.sema, queueLifo, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tstarving = starving || runtime_nanotime()-waitStartTime &gt; starvationThresholdNs</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">            <span class=\"comment\">//处于饥饿模式</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> old&amp;mutexStarving != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// If this goroutine was woken and mutex is in starvation mode,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// ownership was handed off to us but mutex is in somewhat</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// inconsistent state: mutexLocked is not set and we are still</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// accounted as waiter. Fix that.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> old&amp;(mutexLocked|mutexWoken) != <span class=\"number\">0</span> || old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tthrow(<span class=\"string\">&quot;sync: inconsistent mutex state&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//等待的goroutine-1</span></span><br><span class=\"line\">                delta := <span class=\"type\">int32</span>(mutexLocked - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift)</span><br><span class=\"line\">                <span class=\"comment\">// 处于队列中最后一个或者请求锁的时间未超过starvationThresholdNs，则回退到正常模式。</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> !starving || old&gt;&gt;mutexWaiterShift == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Exit starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Critical to do it here and consider wait time.</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Starvation mode is so inefficient, that two goroutines</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// can go lock-step infinitely once they switch mutex</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// to starvation mode.</span></span><br><span class=\"line\">\t\t\t\t\tdelta -= mutexStarving</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//更新状态</span></span><br><span class=\"line\">\t\t\t\tatomic.AddInt32(&amp;m.state, delta)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//重置迭代器和唤醒表示，继续获取锁</span></span><br><span class=\"line\">\t\t\tawoke = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\titer = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//CAS失败，则更新状态，继续获取。</span></span><br><span class=\"line\">\t\t\told = m.state</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(m))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"解锁过程\"><a class=\"header-anchor\" href=\"#解锁过程\">¶</a>解锁过程</h3>\n<p>用一个流程图来表示解锁过程：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex-unlock.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *Mutex)</span></span> Unlock() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//state 不是处于锁的状态, 那么就是 Unlock 根本没有加锁的 mutex, panic</span></span><br><span class=\"line\">    <span class=\"built_in\">new</span> := atomic.AddInt32(&amp;m.state, -mutexLocked)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">new</span>+mutexLocked)&amp;mutexLocked == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        throw(<span class=\"string\">&quot;sync: unlock of unlocked mutex&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 释放锁，并通知其它等待者</span></span><br><span class=\"line\">    <span class=\"comment\">// 锁如果处于饥饿状态，直接交给等待队列的第一个, 唤醒它，让它去获取锁</span></span><br><span class=\"line\">    <span class=\"comment\">// mutex 正常模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">new</span>&amp;mutexStarving == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        old := <span class=\"built_in\">new</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有等待者，或者已经存在一个 goroutine 被唤醒或得到锁、或处于饥饿模式</span></span><br><span class=\"line\">            <span class=\"comment\">// 直接返回.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> old&gt;&gt;mutexWaiterShift == <span class=\"number\">0</span> || old&amp;(mutexLocked|mutexWoken|mutexStarving) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 将等待的 goroutine-1，并设置 woken 标识</span></span><br><span class=\"line\">            <span class=\"built_in\">new</span> = (old - <span class=\"number\">1</span>&lt;&lt;mutexWaiterShift) | mutexWoken</span><br><span class=\"line\">            <span class=\"comment\">// 设置新的 state, 这里通过信号量会唤醒一个阻塞的 goroutine 去获取锁.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> atomic.CompareAndSwapInt32(&amp;m.state, old, <span class=\"built_in\">new</span>) &#123;</span><br><span class=\"line\">                runtime_Semrelease(&amp;m.sema, <span class=\"literal\">false</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            old = m.state</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// mutex 饥饿模式，直接将 mutex 拥有权移交给等待队列最前端的 goroutine</span></span><br><span class=\"line\">        <span class=\"comment\">// 注意此时 state 的 mutex 还没有加锁，唤醒的 goroutine 会设置它。</span></span><br><span class=\"line\">        <span class=\"comment\">// 在此期间，如果有新的 goroutine 来请求锁， 因为 mutex 处于饥饿状态， mutex 还是被认为处于锁状态，</span></span><br><span class=\"line\">        <span class=\"comment\">// 新来的 goroutine 不会把锁抢过去.</span></span><br><span class=\"line\">        runtime_Semrelease(&amp;m.sema, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"关键点\"><a class=\"header-anchor\" href=\"#关键点\">¶</a>关键点</h3>\n<ul>\n<li>不要重复锁定互斥锁</li>\n<li>不要忘记解锁互斥锁</li>\n<li>不要在多个函数之间直接传递互斥锁</li>\n</ul>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex.png","popularPost_tmp_gaData":{"updated":"Tue Sep 22 2020 13:20:32 GMT+0800 (中国标准时间)","title":"「10」go mutex解读","path":"archives/ff0d6c2b.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/mutex.png","excerpt":"<p>上次说到rwmutex读写锁，其实就是加强了锁的粒度，区分读和写时不同的情况，核心思想：写优先于读。<br>\n这次来看看mutex，go中的锁是如何实现的，用一张图来概括整个流程：</p>","date":{"_isAMomentObject":true,"_i":"2020-09-21T15:06:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-21T15:06:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Go Package","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6282},{"title":"「11」hexo 主题&评论&进度条&背景效果","date":"2020-09-22T17:10:02.000Z","updated":"2020-09-22T17:10:02.000Z","keywords":"hexo,hexo主题,hexo评论,next主题评论,hexo阅读进度条","abbrlink":"e18c94ab","_content":"\n晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。\n记录下折腾史：\n\n### gitalk评论插件\n\n#### 步骤：\n##### 申请id和secret\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png)\n\n<!-- more -->\n\n#### 配置文件：\n\n```\ngitalk:\n  enable: true\n  github_id: crab21 # GitHub repo owner\n  repo: blog # Repository name to store issues\n  client_id: XXX # GitHub Application Client ID\n  client_secret: XXX # GitHub Application Client Secret\n  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  perPage: 15 #每页多少个评论\n  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）\n  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。\n  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.\n\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n```\n\n### pac阅读进度百分比\n1、github地址： https://github.com/HubSpot/pace，可以看下介绍\n2、修改值：\n    修改主题下面的_config.yml：\n    ```go\n    pace:\n        enable: true\n        # Themes list:\n        # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple\n        # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal\n        theme: minimal\n    ```\n\n### reading_progress\n\ngithub地址：https://github.com/theme-next/theme-next-reading-progress\n\n包含使用说明和具体的步骤，就不搬运了，及时调整。\n\n### 文章字数和阅读时间统计：\n\nhexo配置文件中修改：\n    `symbols_count_time` 为true.\n\n### back2top\n开启模式\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: true\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n### 持续更新...\n\n### END\n","source":"_posts/11-hexo-主题-评论-进度条-背景效果.md","raw":"---\ntitle: 「11」hexo 主题&评论&进度条&背景效果\ndate: '2020/09/23 01:10:02'\nupdated: '2020/09/23 01:10:02'\nkeywords: 'hexo,hexo主题,hexo评论,next主题评论,hexo阅读进度条'\ntags:\n  - hexo\n  - hexo插件\nabbrlink: e18c94ab\n---\n\n晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。\n记录下折腾史：\n\n### gitalk评论插件\n\n#### 步骤：\n##### 申请id和secret\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png)\n\n<!-- more -->\n\n#### 配置文件：\n\n```\ngitalk:\n  enable: true\n  github_id: crab21 # GitHub repo owner\n  repo: blog # Repository name to store issues\n  client_id: XXX # GitHub Application Client ID\n  client_secret: XXX # GitHub Application Client Secret\n  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues\n  distraction_free_mode: true # Facebook-like distraction free mode\n  perPage: 15 #每页多少个评论\n  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）\n  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。\n  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.\n\n  # Gitalk's display language depends on user's browser or system environment\n  # If you want everyone visiting your site to see a uniform language, you can set a force language value\n  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW\n  language:\n```\n\n### pac阅读进度百分比\n1、github地址： https://github.com/HubSpot/pace，可以看下介绍\n2、修改值：\n    修改主题下面的_config.yml：\n    ```go\n    pace:\n        enable: true\n        # Themes list:\n        # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple\n        # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal\n        theme: minimal\n    ```\n\n### reading_progress\n\ngithub地址：https://github.com/theme-next/theme-next-reading-progress\n\n包含使用说明和具体的步骤，就不搬运了，及时调整。\n\n### 文章字数和阅读时间统计：\n\nhexo配置文件中修改：\n    `symbols_count_time` 为true.\n\n### back2top\n开启模式\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: true\n  # Scroll percent label in b2t button.\n  scrollpercent: true\n```\n### 持续更新...\n\n### END\n","slug":"11-hexo-主题-评论-进度条-背景效果","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4k000vzfqx9d2afxr9","content":"<p>晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。<br>\n记录下折腾史：</p>\n<h3 id=\"gitalk评论插件\"><a class=\"header-anchor\" href=\"#gitalk评论插件\">¶</a>gitalk评论插件</h3>\n<h4 id=\"步骤：\"><a class=\"header-anchor\" href=\"#步骤：\">¶</a>步骤：</h4>\n<h5 id=\"申请id和secret\"><a class=\"header-anchor\" href=\"#申请id和secret\">¶</a>申请id和secret</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h4 id=\"配置文件：\"><a class=\"header-anchor\" href=\"#配置文件：\">¶</a>配置文件：</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  github_id: crab21 # GitHub repo owner</span><br><span class=\"line\">  repo: blog # Repository name to store issues</span><br><span class=\"line\">  client_id: XXX # GitHub Application Client ID</span><br><span class=\"line\">  client_secret: XXX # GitHub Application Client Secret</span><br><span class=\"line\">  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class=\"line\">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class=\"line\">  perPage: 15 #每页多少个评论</span><br><span class=\"line\">  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）</span><br><span class=\"line\">  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span><br><span class=\"line\">  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class=\"line\">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class=\"line\">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class=\"line\">  language:</span><br></pre></td></tr></table></figure>\n<h3 id=\"pac阅读进度百分比\"><a class=\"header-anchor\" href=\"#pac阅读进度百分比\">¶</a>pac阅读进度百分比</h3>\n<p>1、github地址： https://github.com/HubSpot/pace，可以看下介绍<br>\n2、修改值：<br>\n修改主题下面的_config.yml：<br>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pace:</span><br><span class=\"line\">    enable: <span class=\"literal\">true</span></span><br><span class=\"line\">    # Themes list:</span><br><span class=\"line\">    # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class=\"line\">    # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class=\"line\">    theme: minimal</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reading-progress\"><a class=\"header-anchor\" href=\"#reading-progress\">¶</a>reading_progress</h3>\n<p>github地址：https://github.com/theme-next/theme-next-reading-progress</p>\n<p>包含使用说明和具体的步骤，就不搬运了，及时调整。</p>\n<h3 id=\"文章字数和阅读时间统计：\"><a class=\"header-anchor\" href=\"#文章字数和阅读时间统计：\">¶</a>文章字数和阅读时间统计：</h3>\n<p>hexo配置文件中修改：<br>\n<code>symbols_count_time</code> 为true.</p>\n<h3 id=\"back2top\"><a class=\"header-anchor\" href=\"#back2top\">¶</a>back2top</h3>\n<p>开启模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。<br>\n记录下折腾史：</p>\n<h3 id=\"gitalk评论插件\"><a class=\"header-anchor\" href=\"#gitalk评论插件\">¶</a>gitalk评论插件</h3>\n<h4 id=\"步骤：\"><a class=\"header-anchor\" href=\"#步骤：\">¶</a>步骤：</h4>\n<h5 id=\"申请id和secret\"><a class=\"header-anchor\" href=\"#申请id和secret\">¶</a>申请id和secret</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png\" alt=\"\"></p>","more":"<h4 id=\"配置文件：\"><a class=\"header-anchor\" href=\"#配置文件：\">¶</a>配置文件：</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitalk:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  github_id: crab21 # GitHub repo owner</span><br><span class=\"line\">  repo: blog # Repository name to store issues</span><br><span class=\"line\">  client_id: XXX # GitHub Application Client ID</span><br><span class=\"line\">  client_secret: XXX # GitHub Application Client Secret</span><br><span class=\"line\">  admin_user: crab21 # GitHub repo owner and collaborators, only these guys can initialize gitHub issues</span><br><span class=\"line\">  distraction_free_mode: true # Facebook-like distraction free mode</span><br><span class=\"line\">  perPage: 15 #每页多少个评论</span><br><span class=\"line\">  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）</span><br><span class=\"line\">  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span><br><span class=\"line\">  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.</span><br><span class=\"line\"></span><br><span class=\"line\">  # Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span><br><span class=\"line\">  # If you want everyone visiting your site to see a uniform language, you can set a force language value</span><br><span class=\"line\">  # Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br><span class=\"line\">  language:</span><br></pre></td></tr></table></figure>\n<h3 id=\"pac阅读进度百分比\"><a class=\"header-anchor\" href=\"#pac阅读进度百分比\">¶</a>pac阅读进度百分比</h3>\n<p>1、github地址： https://github.com/HubSpot/pace，可以看下介绍<br>\n2、修改值：<br>\n修改主题下面的_config.yml：<br>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pace:</span><br><span class=\"line\">    enable: <span class=\"literal\">true</span></span><br><span class=\"line\">    # Themes list:</span><br><span class=\"line\">    # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class=\"line\">    # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class=\"line\">    theme: minimal</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reading-progress\"><a class=\"header-anchor\" href=\"#reading-progress\">¶</a>reading_progress</h3>\n<p>github地址：https://github.com/theme-next/theme-next-reading-progress</p>\n<p>包含使用说明和具体的步骤，就不搬运了，及时调整。</p>\n<h3 id=\"文章字数和阅读时间统计：\"><a class=\"header-anchor\" href=\"#文章字数和阅读时间统计：\">¶</a>文章字数和阅读时间统计：</h3>\n<p>hexo配置文件中修改：<br>\n<code>symbols_count_time</code> 为true.</p>\n<h3 id=\"back2top\"><a class=\"header-anchor\" href=\"#back2top\">¶</a>back2top</h3>\n<p>开启模式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png","popularPost_tmp_gaData":{"updated":"Wed Sep 23 2020 01:10:02 GMT+0800 (中国标准时间)","title":"「11」hexo 主题&评论&进度条&背景效果","path":"archives/e18c94ab.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png","excerpt":"<p>晚上折腾了下博客，稍微装饰了下，主要还是加了个评论吧，其它非常秀的插件就没有接入了，懒得折腾，好好写博客，内容才是精华。<br>\n记录下折腾史：</p>\n<h3 id=\"gitalk评论插件\"><a class=\"header-anchor\" href=\"#gitalk评论插件\">¶</a>gitalk评论插件</h3>\n<h4 id=\"步骤：\"><a class=\"header-anchor\" href=\"#步骤：\">¶</a>步骤：</h4>\n<h5 id=\"申请id和secret\"><a class=\"header-anchor\" href=\"#申请id和secret\">¶</a>申请id和secret</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/36f31671-8ada-4cbe-b60b-d1595dd701ee.png\" alt=\"\"></p>","date":{"_isAMomentObject":true,"_i":"2020-09-22T17:10:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-22T17:10:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["hexo","hexo插件"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1464},{"title":"「12」go 指针和引用","date":"2020-09-23T13:13:51.000Z","updated":"2020-09-23T14:21:52.000Z","keywords":"golang,go,chan,map,指针,引用,interface,slice","abbrlink":"1191d613","_content":"\n\n今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？\n\n如何解决这个问题？\n\n* 官方查文档\n* 看源码\n* google看看有没有好的见解\n* 思考🤔+冥想🧘‍♂️\n\n（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）\n<!--more-->\n\n### 查资料\n[官网指南之Slice](https://golang.google.cn/doc/effective_go.html#slices)\n有一段是这么描述：\n*Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.*\n\n### 查源码\n\n#### /src/runtime/slice.go\n```go\ntype slice struct {\n\tarray unsafe.Pointer  //指针类型哦\n\tlen   int\n\tcap   int\n}\n```\n\n### 思考\n\n>原来下层是用过array这个指针，指向具体的数据的\n\n>那么其他的引用类型呢？\n\n```\nMap?\nchan?\ninterface?\n//Slice?\n```\n\n### 引用类型之Map\n\n#### 看源码 /src/runtime/map.go：\n```go\n\n// A header for a Go map.\ntype hmap struct {\n\t// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.\n\t// Make sure this stays in sync with the compiler's definition.\n\tcount     int // # live cells == size of map.  Must be first (used by len() builtin)\n\tflags     uint8\n\tB         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)\n\tnoverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details\n\thash0     uint32 // hash seed\n\n    //通过此指针类型\n\tbuckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.\n\toldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing\n\tnevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)\n\n\textra *mapextra // optional fields\n}\n```\n\n### 引用类型之Chan\n#### 源码:/src/runtime/chan.go\n\n```go\ntype hchan struct {\n\tqcount   uint           // total data in the queue\n    dataqsiz uint           // size of the circular queue\n    //通过此指针类型来处理\n\tbuf      unsafe.Pointer // points to an array of dataqsiz elements\n\telemsize uint16\n\tclosed   uint32\n\telemtype *_type // element type\n\tsendx    uint   // send index\n\trecvx    uint   // receive index\n\trecvq    waitq  // list of recv waiters\n\tsendq    waitq  // list of send waiters\n\n\t// lock protects all fields in hchan, as well as several\n\t// fields in sudogs blocked on this channel.\n\t//\n\t// Do not change another G's status while holding this lock\n\t// (in particular, do not ready a G), as this can deadlock\n\t// with stack shrinking.\n\tlock mutex\n}\n```\n\n### 引用类型之Interface\n\n#### 源码/src/runtime/runtime2.go\n```go\ntype iface struct {\n    tab  *itab\n    //指针类型\n\tdata unsafe.Pointer\n}\n\ntype eface struct {\n    _type *_type\n    //指针类型\n\tdata  unsafe.Pointer\n}\n```\n\n### 结论？通过指针？\n\n从上述源码看来，内部结构中都是用指针类型来指向具体的值，\n>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。\n\n其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.\n\n[睡觉了～最近有点乏～ZZzzz...]\n### END","source":"_posts/12-go-指针和引用.md","raw":"---\ntitle: 「12」go 指针和引用\ndate: '2020/09/23 21:13:51'\nupdated: '2020/09/23 22:21:52'\nkeywords: 'golang,go,chan,map,指针,引用,interface,slice'\ntags:\n  - Go\n  - Go Package\n  - Day\nabbrlink: 1191d613\n---\n\n\n今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？\n\n如何解决这个问题？\n\n* 官方查文档\n* 看源码\n* google看看有没有好的见解\n* 思考🤔+冥想🧘‍♂️\n\n（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）\n<!--more-->\n\n### 查资料\n[官网指南之Slice](https://golang.google.cn/doc/effective_go.html#slices)\n有一段是这么描述：\n*Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.*\n\n### 查源码\n\n#### /src/runtime/slice.go\n```go\ntype slice struct {\n\tarray unsafe.Pointer  //指针类型哦\n\tlen   int\n\tcap   int\n}\n```\n\n### 思考\n\n>原来下层是用过array这个指针，指向具体的数据的\n\n>那么其他的引用类型呢？\n\n```\nMap?\nchan?\ninterface?\n//Slice?\n```\n\n### 引用类型之Map\n\n#### 看源码 /src/runtime/map.go：\n```go\n\n// A header for a Go map.\ntype hmap struct {\n\t// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.\n\t// Make sure this stays in sync with the compiler's definition.\n\tcount     int // # live cells == size of map.  Must be first (used by len() builtin)\n\tflags     uint8\n\tB         uint8  // log_2 of # of buckets (can hold up to loadFactor * 2^B items)\n\tnoverflow uint16 // approximate number of overflow buckets; see incrnoverflow for details\n\thash0     uint32 // hash seed\n\n    //通过此指针类型\n\tbuckets    unsafe.Pointer // array of 2^B Buckets. may be nil if count==0.\n\toldbuckets unsafe.Pointer // previous bucket array of half the size, non-nil only when growing\n\tnevacuate  uintptr        // progress counter for evacuation (buckets less than this have been evacuated)\n\n\textra *mapextra // optional fields\n}\n```\n\n### 引用类型之Chan\n#### 源码:/src/runtime/chan.go\n\n```go\ntype hchan struct {\n\tqcount   uint           // total data in the queue\n    dataqsiz uint           // size of the circular queue\n    //通过此指针类型来处理\n\tbuf      unsafe.Pointer // points to an array of dataqsiz elements\n\telemsize uint16\n\tclosed   uint32\n\telemtype *_type // element type\n\tsendx    uint   // send index\n\trecvx    uint   // receive index\n\trecvq    waitq  // list of recv waiters\n\tsendq    waitq  // list of send waiters\n\n\t// lock protects all fields in hchan, as well as several\n\t// fields in sudogs blocked on this channel.\n\t//\n\t// Do not change another G's status while holding this lock\n\t// (in particular, do not ready a G), as this can deadlock\n\t// with stack shrinking.\n\tlock mutex\n}\n```\n\n### 引用类型之Interface\n\n#### 源码/src/runtime/runtime2.go\n```go\ntype iface struct {\n    tab  *itab\n    //指针类型\n\tdata unsafe.Pointer\n}\n\ntype eface struct {\n    _type *_type\n    //指针类型\n\tdata  unsafe.Pointer\n}\n```\n\n### 结论？通过指针？\n\n从上述源码看来，内部结构中都是用指针类型来指向具体的值，\n>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。\n\n其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.\n\n[睡觉了～最近有点乏～ZZzzz...]\n### END","slug":"12-go-指针和引用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4l000wzfqx4dp56nyi","content":"<p>今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？</p>\n<p>如何解决这个问题？</p>\n<ul>\n<li>官方查文档</li>\n<li>看源码</li>\n<li>google看看有没有好的见解</li>\n<li>思考🤔+冥想🧘‍♂️</li>\n</ul>\n<p>（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）</p>\n<span id=\"more\"></span>\n<h3 id=\"查资料\"><a class=\"header-anchor\" href=\"#查资料\">¶</a>查资料</h3>\n<p><a href=\"https://golang.google.cn/doc/effective_go.html#slices\">官网指南之Slice</a><br>\n有一段是这么描述：<br>\n<em>Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.</em></p>\n<h3 id=\"查源码\"><a class=\"header-anchor\" href=\"#查源码\">¶</a>查源码</h3>\n<h4 id=\"src-runtime-slice-go\"><a class=\"header-anchor\" href=\"#src-runtime-slice-go\">¶</a>/src/runtime/slice.go</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tarray unsafe.Pointer  <span class=\"comment\">//指针类型哦</span></span><br><span class=\"line\">\t<span class=\"built_in\">len</span>   <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"built_in\">cap</span>   <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思考\"><a class=\"header-anchor\" href=\"#思考\">¶</a>思考</h3>\n<blockquote>\n<p>原来下层是用过array这个指针，指向具体的数据的</p>\n</blockquote>\n<blockquote>\n<p>那么其他的引用类型呢？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map?</span><br><span class=\"line\">chan?</span><br><span class=\"line\">interface?</span><br><span class=\"line\">//Slice?</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型之Map\"><a class=\"header-anchor\" href=\"#引用类型之Map\">¶</a>引用类型之Map</h3>\n<h4 id=\"看源码-src-runtime-map-go：\"><a class=\"header-anchor\" href=\"#看源码-src-runtime-map-go：\">¶</a>看源码 /src/runtime/map.go：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A header for a Go map.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> hmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Make sure this stays in sync with the compiler&#x27;s definition.</span></span><br><span class=\"line\">\tcount     <span class=\"type\">int</span> <span class=\"comment\">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class=\"line\">\tflags     <span class=\"type\">uint8</span></span><br><span class=\"line\">\tB         <span class=\"type\">uint8</span>  <span class=\"comment\">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class=\"line\">\tnoverflow <span class=\"type\">uint16</span> <span class=\"comment\">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class=\"line\">\thash0     <span class=\"type\">uint32</span> <span class=\"comment\">// hash seed</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型</span></span><br><span class=\"line\">\tbuckets    unsafe.Pointer <span class=\"comment\">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class=\"line\">\toldbuckets unsafe.Pointer <span class=\"comment\">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class=\"line\">\tnevacuate  <span class=\"type\">uintptr</span>        <span class=\"comment\">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\textra *mapextra <span class=\"comment\">// optional fields</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型之Chan\"><a class=\"header-anchor\" href=\"#引用类型之Chan\">¶</a>引用类型之Chan</h3>\n<h4 id=\"源码-src-runtime-chan-go\"><a class=\"header-anchor\" href=\"#源码-src-runtime-chan-go\">¶</a>源码:/src/runtime/chan.go</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> hchan <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tqcount   <span class=\"type\">uint</span>           <span class=\"comment\">// total data in the queue</span></span><br><span class=\"line\">    dataqsiz <span class=\"type\">uint</span>           <span class=\"comment\">// size of the circular queue</span></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型来处理</span></span><br><span class=\"line\">\tbuf      unsafe.Pointer <span class=\"comment\">// points to an array of dataqsiz elements</span></span><br><span class=\"line\">\telemsize <span class=\"type\">uint16</span></span><br><span class=\"line\">\tclosed   <span class=\"type\">uint32</span></span><br><span class=\"line\">\telemtype *_type <span class=\"comment\">// element type</span></span><br><span class=\"line\">\tsendx    <span class=\"type\">uint</span>   <span class=\"comment\">// send index</span></span><br><span class=\"line\">\trecvx    <span class=\"type\">uint</span>   <span class=\"comment\">// receive index</span></span><br><span class=\"line\">\trecvq    waitq  <span class=\"comment\">// list of recv waiters</span></span><br><span class=\"line\">\tsendq    waitq  <span class=\"comment\">// list of send waiters</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lock protects all fields in hchan, as well as several</span></span><br><span class=\"line\">\t<span class=\"comment\">// fields in sudogs blocked on this channel.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class=\"line\">\t<span class=\"comment\">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class=\"line\">\t<span class=\"comment\">// with stack shrinking.</span></span><br><span class=\"line\">\tlock mutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型之Interface\"><a class=\"header-anchor\" href=\"#引用类型之Interface\">¶</a>引用类型之Interface</h3>\n<h4 id=\"源码-src-runtime-runtime2-go\"><a class=\"header-anchor\" href=\"#源码-src-runtime-runtime2-go\">¶</a>源码/src/runtime/runtime2.go</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> iface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    tab  *itab</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> eface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    _type *_type</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata  unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结论？通过指针？\"><a class=\"header-anchor\" href=\"#结论？通过指针？\">¶</a>结论？通过指针？</h3>\n<p>从上述源码看来，内部结构中都是用指针类型来指向具体的值，</p>\n<blockquote>\n<p>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。</p>\n</blockquote>\n<p>其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.</p>\n<p>[睡觉了～最近有点乏～ZZzzz…]</p>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？</p>\n<p>如何解决这个问题？</p>\n<ul>\n<li>官方查文档</li>\n<li>看源码</li>\n<li>google看看有没有好的见解</li>\n<li>思考🤔+冥想🧘‍♂️</li>\n</ul>\n<p>（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）</p>","more":"<h3 id=\"查资料\"><a class=\"header-anchor\" href=\"#查资料\">¶</a>查资料</h3>\n<p><a href=\"https://golang.google.cn/doc/effective_go.html#slices\">官网指南之Slice</a><br>\n有一段是这么描述：<br>\n<em>Slices hold references to an underlying array, and if you assign one slice to another, both refer to the same array.</em></p>\n<h3 id=\"查源码\"><a class=\"header-anchor\" href=\"#查源码\">¶</a>查源码</h3>\n<h4 id=\"src-runtime-slice-go\"><a class=\"header-anchor\" href=\"#src-runtime-slice-go\">¶</a>/src/runtime/slice.go</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> slice <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tarray unsafe.Pointer  <span class=\"comment\">//指针类型哦</span></span><br><span class=\"line\">\t<span class=\"built_in\">len</span>   <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"built_in\">cap</span>   <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"思考\"><a class=\"header-anchor\" href=\"#思考\">¶</a>思考</h3>\n<blockquote>\n<p>原来下层是用过array这个指针，指向具体的数据的</p>\n</blockquote>\n<blockquote>\n<p>那么其他的引用类型呢？</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map?</span><br><span class=\"line\">chan?</span><br><span class=\"line\">interface?</span><br><span class=\"line\">//Slice?</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型之Map\"><a class=\"header-anchor\" href=\"#引用类型之Map\">¶</a>引用类型之Map</h3>\n<h4 id=\"看源码-src-runtime-map-go：\"><a class=\"header-anchor\" href=\"#看源码-src-runtime-map-go：\">¶</a>看源码 /src/runtime/map.go：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A header for a Go map.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> hmap <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Note: the format of the hmap is also encoded in cmd/compile/internal/gc/reflect.go.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Make sure this stays in sync with the compiler&#x27;s definition.</span></span><br><span class=\"line\">\tcount     <span class=\"type\">int</span> <span class=\"comment\">// # live cells == size of map.  Must be first (used by len() builtin)</span></span><br><span class=\"line\">\tflags     <span class=\"type\">uint8</span></span><br><span class=\"line\">\tB         <span class=\"type\">uint8</span>  <span class=\"comment\">// log_2 of # of buckets (can hold up to loadFactor * 2^B items)</span></span><br><span class=\"line\">\tnoverflow <span class=\"type\">uint16</span> <span class=\"comment\">// approximate number of overflow buckets; see incrnoverflow for details</span></span><br><span class=\"line\">\thash0     <span class=\"type\">uint32</span> <span class=\"comment\">// hash seed</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型</span></span><br><span class=\"line\">\tbuckets    unsafe.Pointer <span class=\"comment\">// array of 2^B Buckets. may be nil if count==0.</span></span><br><span class=\"line\">\toldbuckets unsafe.Pointer <span class=\"comment\">// previous bucket array of half the size, non-nil only when growing</span></span><br><span class=\"line\">\tnevacuate  <span class=\"type\">uintptr</span>        <span class=\"comment\">// progress counter for evacuation (buckets less than this have been evacuated)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\textra *mapextra <span class=\"comment\">// optional fields</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型之Chan\"><a class=\"header-anchor\" href=\"#引用类型之Chan\">¶</a>引用类型之Chan</h3>\n<h4 id=\"源码-src-runtime-chan-go\"><a class=\"header-anchor\" href=\"#源码-src-runtime-chan-go\">¶</a>源码:/src/runtime/chan.go</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> hchan <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tqcount   <span class=\"type\">uint</span>           <span class=\"comment\">// total data in the queue</span></span><br><span class=\"line\">    dataqsiz <span class=\"type\">uint</span>           <span class=\"comment\">// size of the circular queue</span></span><br><span class=\"line\">    <span class=\"comment\">//通过此指针类型来处理</span></span><br><span class=\"line\">\tbuf      unsafe.Pointer <span class=\"comment\">// points to an array of dataqsiz elements</span></span><br><span class=\"line\">\telemsize <span class=\"type\">uint16</span></span><br><span class=\"line\">\tclosed   <span class=\"type\">uint32</span></span><br><span class=\"line\">\telemtype *_type <span class=\"comment\">// element type</span></span><br><span class=\"line\">\tsendx    <span class=\"type\">uint</span>   <span class=\"comment\">// send index</span></span><br><span class=\"line\">\trecvx    <span class=\"type\">uint</span>   <span class=\"comment\">// receive index</span></span><br><span class=\"line\">\trecvq    waitq  <span class=\"comment\">// list of recv waiters</span></span><br><span class=\"line\">\tsendq    waitq  <span class=\"comment\">// list of send waiters</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lock protects all fields in hchan, as well as several</span></span><br><span class=\"line\">\t<span class=\"comment\">// fields in sudogs blocked on this channel.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class=\"line\">\t<span class=\"comment\">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class=\"line\">\t<span class=\"comment\">// with stack shrinking.</span></span><br><span class=\"line\">\tlock mutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"引用类型之Interface\"><a class=\"header-anchor\" href=\"#引用类型之Interface\">¶</a>引用类型之Interface</h3>\n<h4 id=\"源码-src-runtime-runtime2-go\"><a class=\"header-anchor\" href=\"#源码-src-runtime-runtime2-go\">¶</a>源码/src/runtime/runtime2.go</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> iface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    tab  *itab</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> eface <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    _type *_type</span><br><span class=\"line\">    <span class=\"comment\">//指针类型</span></span><br><span class=\"line\">\tdata  unsafe.Pointer</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"结论？通过指针？\"><a class=\"header-anchor\" href=\"#结论？通过指针？\">¶</a>结论？通过指针？</h3>\n<p>从上述源码看来，内部结构中都是用指针类型来指向具体的值，</p>\n<blockquote>\n<p>So：形同这类的结构，肯定是引用类型的，具体是指针指向别的地址，从而来引用值。</p>\n</blockquote>\n<p>其实这个特性很早就晓得了，只是今天又看到了，觉得还是记录着吧，也许后续哪一天就有了创新的灵感来着~~.</p>\n<p>[睡觉了～最近有点乏～ZZzzz…]</p>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Sep 23 2020 22:21:52 GMT+0800 (中国标准时间)","title":"「12」go 指针和引用","path":"archives/1191d613.html","eyeCatchImage":null,"excerpt":"<p>今写代码时，传函数无意间想到一个问题，slice通过参数传递给函数，为何可以改变具体的值呢？</p>\n<p>如何解决这个问题？</p>\n<ul>\n<li>官方查文档</li>\n<li>看源码</li>\n<li>google看看有没有好的见解</li>\n<li>思考🤔+冥想🧘‍♂️</li>\n</ul>\n<p>（ps:解决问题，主要不是看结果是怎么样的，主要是考虑问题的角度）</p>","date":{"_isAMomentObject":true,"_i":"2020-09-23T13:13:51.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-23T13:13:51.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go Package","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2059},{"title":"「13」Linux 进程","date":"2020-09-24T11:09:49.000Z","updated":"2020-09-24T12:00:00.000Z","keywords":"Linux,Linux 进程","top":false,"sticky":4,"abbrlink":"ba455c1d","_content":"\n进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。\n\n今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。\n主要从以下几个角度了解下进程：\n* 来源\n* 定义\n* 特征\n* 多进程如何工作？\n* 通信\n\n<!--more-->\n\n### 来源\n\n抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。\n\n### 定义\n\n进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。\n\nps:[线程：程序执行的最小单位。]\n\n组成：程序、数据、控制块组成。\n\n### 特征\n\n* 动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。\n* 并发性 ： 任何进程可以和其它进程并发执行。\n* 独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。\n* 异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。\n\n### 多进程工作：\n\n#### 进程的状态：\n>3种状态：\n* 就绪\n* 运行\n* 阻塞\n\n##### 3态图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_3.1.png)\n\n##### 5态图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_p3.png)\n\n##### 7态图：\n\n新增两种状态：\n* 挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。\n* 挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_7.png)\n\n### 进程间通信\n\n#### 共享内存\n\n映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。\n\n#### 管道\n\n实质就是一个缓冲区。\n管道限制：\n\n* 半双工\n* 只能在亲缘进程间通信\n\n**特点:**\n```\n写满时，不能再写，读空时，不能再读\n没写满，不能读，没读空，不能写\n```\n\n#### 消息队列\n\n是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。\n\n#### 信号\n\n通知和接受进程某个事件已经发生了的。\n\n#### 信号量\n\n实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。\n\n#### 套接字（Socket）\n\n进程间通信的一种机制，多用于不同机器进程间的通信。\n\n#### 优缺点：\n\n```go\n1、管道：速度慢，容量有限，只有父子进程能通讯.\n2、FIFO：任何进程间都能通讯，但速度慢.\n3、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.\n4、信号量：不能传递复杂消息，只能用来同步.\n5、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.\n```\n\n### END","source":"_posts/13-Linux-进程.md","raw":"---\ntitle: 「13」Linux 进程\ndate: '2020/09/24 19:09:49'\nupdated: '2020/09/24 20:00:00'\nkeywords: 'Linux,Linux 进程'\ntop: false\nsticky: 4\ntags:\n  - Linux\n  - 进程\nabbrlink: ba455c1d\n---\n\n进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。\n\n今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。\n主要从以下几个角度了解下进程：\n* 来源\n* 定义\n* 特征\n* 多进程如何工作？\n* 通信\n\n<!--more-->\n\n### 来源\n\n抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。\n\n### 定义\n\n进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。\n\nps:[线程：程序执行的最小单位。]\n\n组成：程序、数据、控制块组成。\n\n### 特征\n\n* 动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。\n* 并发性 ： 任何进程可以和其它进程并发执行。\n* 独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。\n* 异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。\n\n### 多进程工作：\n\n#### 进程的状态：\n>3种状态：\n* 就绪\n* 运行\n* 阻塞\n\n##### 3态图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_3.1.png)\n\n##### 5态图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_p3.png)\n\n##### 7态图：\n\n新增两种状态：\n* 挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。\n* 挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_7.png)\n\n### 进程间通信\n\n#### 共享内存\n\n映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。\n\n#### 管道\n\n实质就是一个缓冲区。\n管道限制：\n\n* 半双工\n* 只能在亲缘进程间通信\n\n**特点:**\n```\n写满时，不能再写，读空时，不能再读\n没写满，不能读，没读空，不能写\n```\n\n#### 消息队列\n\n是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。\n\n#### 信号\n\n通知和接受进程某个事件已经发生了的。\n\n#### 信号量\n\n实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。\n\n#### 套接字（Socket）\n\n进程间通信的一种机制，多用于不同机器进程间的通信。\n\n#### 优缺点：\n\n```go\n1、管道：速度慢，容量有限，只有父子进程能通讯.\n2、FIFO：任何进程间都能通讯，但速度慢.\n3、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.\n4、信号量：不能传递复杂消息，只能用来同步.\n5、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.\n```\n\n### END","slug":"13-Linux-进程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4m000yzfqx66k5atn2","content":"<p>进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。</p>\n<p>今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。<br>\n主要从以下几个角度了解下进程：</p>\n<ul>\n<li>来源</li>\n<li>定义</li>\n<li>特征</li>\n<li>多进程如何工作？</li>\n<li>通信</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"来源\"><a class=\"header-anchor\" href=\"#来源\">¶</a>来源</h3>\n<p>抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。</p>\n<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p>进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。</p>\n<p>ps:[线程：程序执行的最小单位。]</p>\n<p>组成：程序、数据、控制块组成。</p>\n<h3 id=\"特征\"><a class=\"header-anchor\" href=\"#特征\">¶</a>特征</h3>\n<ul>\n<li>动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。</li>\n<li>并发性 ： 任何进程可以和其它进程并发执行。</li>\n<li>独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。</li>\n<li>异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。</li>\n</ul>\n<h3 id=\"多进程工作：\"><a class=\"header-anchor\" href=\"#多进程工作：\">¶</a>多进程工作：</h3>\n<h4 id=\"进程的状态：\"><a class=\"header-anchor\" href=\"#进程的状态：\">¶</a>进程的状态：</h4>\n<blockquote>\n<p>3种状态：</p>\n</blockquote>\n<ul>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n</ul>\n<h5 id=\"3态图：\"><a class=\"header-anchor\" href=\"#3态图：\">¶</a>3态图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_3.1.png\" alt=\"\"></p>\n<h5 id=\"5态图：\"><a class=\"header-anchor\" href=\"#5态图：\">¶</a>5态图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_p3.png\" alt=\"\"></p>\n<h5 id=\"7态图：\"><a class=\"header-anchor\" href=\"#7态图：\">¶</a>7态图：</h5>\n<p>新增两种状态：</p>\n<ul>\n<li>挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。</li>\n<li>挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_7.png\" alt=\"\"></p>\n<h3 id=\"进程间通信\"><a class=\"header-anchor\" href=\"#进程间通信\">¶</a>进程间通信</h3>\n<h4 id=\"共享内存\"><a class=\"header-anchor\" href=\"#共享内存\">¶</a>共享内存</h4>\n<p>映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。</p>\n<h4 id=\"管道\"><a class=\"header-anchor\" href=\"#管道\">¶</a>管道</h4>\n<p>实质就是一个缓冲区。<br>\n管道限制：</p>\n<ul>\n<li>半双工</li>\n<li>只能在亲缘进程间通信</li>\n</ul>\n<p><strong>特点:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写满时，不能再写，读空时，不能再读</span><br><span class=\"line\">没写满，不能读，没读空，不能写</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息队列\"><a class=\"header-anchor\" href=\"#消息队列\">¶</a>消息队列</h4>\n<p>是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。</p>\n<h4 id=\"信号\"><a class=\"header-anchor\" href=\"#信号\">¶</a>信号</h4>\n<p>通知和接受进程某个事件已经发生了的。</p>\n<h4 id=\"信号量\"><a class=\"header-anchor\" href=\"#信号量\">¶</a>信号量</h4>\n<p>实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。</p>\n<h4 id=\"套接字（Socket）\"><a class=\"header-anchor\" href=\"#套接字（Socket）\">¶</a>套接字（Socket）</h4>\n<p>进程间通信的一种机制，多用于不同机器进程间的通信。</p>\n<h4 id=\"优缺点：\"><a class=\"header-anchor\" href=\"#优缺点：\">¶</a>优缺点：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、管道：速度慢，容量有限，只有父子进程能通讯.</span><br><span class=\"line\"><span class=\"number\">2</span>、FIFO：任何进程间都能通讯，但速度慢.</span><br><span class=\"line\"><span class=\"number\">3</span>、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.</span><br><span class=\"line\"><span class=\"number\">4</span>、信号量：不能传递复杂消息，只能用来同步.</span><br><span class=\"line\"><span class=\"number\">5</span>、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。</p>\n<p>今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。<br>\n主要从以下几个角度了解下进程：</p>\n<ul>\n<li>来源</li>\n<li>定义</li>\n<li>特征</li>\n<li>多进程如何工作？</li>\n<li>通信</li>\n</ul>","more":"<h3 id=\"来源\"><a class=\"header-anchor\" href=\"#来源\">¶</a>来源</h3>\n<p>抽象正在运行的程序，或者说是对计算机系统存储器的调度和管理。</p>\n<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p>进程：并发程序在执行过程中资源分配和管理的最基本的单元（资源分配的最小单元，执行的最小单元）。一个程序一旦开始执行，就是一个进程。每一个进程都有自己的独立空间，系统会分配一定的地址空间和完整的数据段空间。</p>\n<p>ps:[线程：程序执行的最小单位。]</p>\n<p>组成：程序、数据、控制块组成。</p>\n<h3 id=\"特征\"><a class=\"header-anchor\" href=\"#特征\">¶</a>特征</h3>\n<ul>\n<li>动态性 ： 多个程序执行过程中的一次执行过程，进程是动态产生，动态销毁的。</li>\n<li>并发性 ： 任何进程可以和其它进程并发执行。</li>\n<li>独立性 ： 是独立运行的基本单元，也是资源分配和调度的独立单元。</li>\n<li>异步性 ： 由于进程间的相互制约，进程间是各自独立，各自向前。</li>\n</ul>\n<h3 id=\"多进程工作：\"><a class=\"header-anchor\" href=\"#多进程工作：\">¶</a>多进程工作：</h3>\n<h4 id=\"进程的状态：\"><a class=\"header-anchor\" href=\"#进程的状态：\">¶</a>进程的状态：</h4>\n<blockquote>\n<p>3种状态：</p>\n</blockquote>\n<ul>\n<li>就绪</li>\n<li>运行</li>\n<li>阻塞</li>\n</ul>\n<h5 id=\"3态图：\"><a class=\"header-anchor\" href=\"#3态图：\">¶</a>3态图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_3.1.png\" alt=\"\"></p>\n<h5 id=\"5态图：\"><a class=\"header-anchor\" href=\"#5态图：\">¶</a>5态图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_p3.png\" alt=\"\"></p>\n<h5 id=\"7态图：\"><a class=\"header-anchor\" href=\"#7态图：\">¶</a>7态图：</h5>\n<p>新增两种状态：</p>\n<ul>\n<li>挂起就绪状态：表明进程具备了运行的条件，目前在二级存储器里面。</li>\n<li>挂起等待状态：表明进程正在等待某一个事件的结束且目前在二级存储器里面。</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_7.png\" alt=\"\"></p>\n<h3 id=\"进程间通信\"><a class=\"header-anchor\" href=\"#进程间通信\">¶</a>进程间通信</h3>\n<h4 id=\"共享内存\"><a class=\"header-anchor\" href=\"#共享内存\">¶</a>共享内存</h4>\n<p>映射一段能被其它进程访问的内存，一个进程创建，其它进程可访问。共享内存是最快的IPC方式，往往和信号量一起使用，达到进程间的同步和互斥。</p>\n<h4 id=\"管道\"><a class=\"header-anchor\" href=\"#管道\">¶</a>管道</h4>\n<p>实质就是一个缓冲区。<br>\n管道限制：</p>\n<ul>\n<li>半双工</li>\n<li>只能在亲缘进程间通信</li>\n</ul>\n<p><strong>特点:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">写满时，不能再写，读空时，不能再读</span><br><span class=\"line\">没写满，不能读，没读空，不能写</span><br></pre></td></tr></table></figure>\n<h4 id=\"消息队列\"><a class=\"header-anchor\" href=\"#消息队列\">¶</a>消息队列</h4>\n<p>是一种消息的链表，解决了信号传递信息少，管道只能承载无格式字节流及管道大小限制的缺点。</p>\n<h4 id=\"信号\"><a class=\"header-anchor\" href=\"#信号\">¶</a>信号</h4>\n<p>通知和接受进程某个事件已经发生了的。</p>\n<h4 id=\"信号量\"><a class=\"header-anchor\" href=\"#信号量\">¶</a>信号量</h4>\n<p>实质上就是个计数器，用来控制多个进程对于共享资源的访问情况。</p>\n<h4 id=\"套接字（Socket）\"><a class=\"header-anchor\" href=\"#套接字（Socket）\">¶</a>套接字（Socket）</h4>\n<p>进程间通信的一种机制，多用于不同机器进程间的通信。</p>\n<h4 id=\"优缺点：\"><a class=\"header-anchor\" href=\"#优缺点：\">¶</a>优缺点：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、管道：速度慢，容量有限，只有父子进程能通讯.</span><br><span class=\"line\"><span class=\"number\">2</span>、FIFO：任何进程间都能通讯，但速度慢.</span><br><span class=\"line\"><span class=\"number\">3</span>、消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题.</span><br><span class=\"line\"><span class=\"number\">4</span>、信号量：不能传递复杂消息，只能用来同步.</span><br><span class=\"line\"><span class=\"number\">5</span>、共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题，相当于线程中的线程安全，当然，共享内存区同样可以用作线程间通讯，不过没这个必要，线程间本来就已经共享了同一进程内的一块内存.</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_3.1.png","popularPost_tmp_gaData":{"updated":"Thu Sep 24 2020 20:00:00 GMT+0800 (中国标准时间)","title":"「13」Linux 进程","path":"archives/ba455c1d.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux_process_3.1.png","excerpt":"<p>进程这是个老生常谈的问题，当然我不是那个老生，我只是个loser。</p>\n<p>今天用chrome，占用很多的内存和资源，查了查，说chrome是多进程的，于是就想了解下进程一些相关的内容。<br>\n主要从以下几个角度了解下进程：</p>\n<ul>\n<li>来源</li>\n<li>定义</li>\n<li>特征</li>\n<li>多进程如何工作？</li>\n<li>通信</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2020-09-24T11:09:49.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-24T11:09:49.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Linux","进程"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1050},{"title":"「14」hexo-安装&插件","date":"2020-09-30T11:24:32.000Z","updated":"2021-02-05T11:27:28.000Z","abbrlink":"ae4aba0d","_content":"\nhexo安装及其第三方插件包下载总结，以便后续CI一次到位。\n<!--more-->\n```go\n npm install -g hexo-cli\n npm install hexo-renderer-sass --save\n npm install hexo-generator-searchdb --save\n npm install hexo-generator-sitemap --save\n npm install hexo-generator-baidu-sitemap --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install md5 --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install cheerio --save\n npm install blueimp-md5 --save\n npm install hexo-abbrlink --save\n npm audit fix\n\n npm uninstall hexo-generator-index --save\n npm install hexo-generator-index-pin-top --save\n npm audit fix\n \n npm install hexo-neat --save\n npm audit fix\n npm install --save hexo-admin\n npm audit fix\n npm install hexo-deployer-git --save\n npm audit fix\n\n sudo npm install hexo-toc --save\n npm audit fix\n\n//猫咪模型\n sudo npm install --save hexo-helper-live2d \n npm audit fix\n sudo npm install --save live2d-widget-model-z16\n\n //pdf:\nnpm install --save hexo-pdf\nnpm audit fix\n\n```\n\n\n>update: 2021-02-05 19:25:42\n\nhexo next解析插件更换：\n```go\nnpm un hexo-renderer-marked -S\n\n npm uninstall hexo-renderer-marked --save\n\n再安装下面插件：\n\n\nnpm install --save markdown-it-abbr\nnpm install --save markdown-it-footnote\nnpm install --save markdown-it-ins\nnpm install --save markdown-it-sub\nnpm install --save markdown-it-sup\nnpm install --save markdown-it-anchor\nnpm install --save markdown-it-deflist\nnpm install --save markdown-it-mark\nnpm install --save markdown-it-container\n\nnpm install --save markdown-it-emoji\nnpm install --save markdown-it-attrs\nnpm install --save markdown-it-task-lists\nnpm install --save markdown-it-68tygbv \n\nnpm install markdown-it-mathjax --save\nnpm audit fix\nnpm i markdown-it-latex2img --save\nnpm audit fix\nnpm install markdown-it-texmath\nnpm audit fix\n\n最后更新下hexo更目录下的_config.yaml\n\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    # Enable HTML tags in source\n    html: true\n\n    # Use '/' to close single tags (<br />). This is only for full CommonMark compatibility.\n    xhtmlOut: true        \n\n    # Convert '\\n' in paragraphs into <br> \n    breaks: true      \n\n    # CSS language prefix for fenced blocks. Can be useful for external highlighters.\n    langPrefix: 'language-'  \n\n    # Autoconvert URL-like text to links \n    linkify: true        \n\n    # Enable some language-neutral replacement + quotes beautification\n    typographer: false\n\n    # Double + single quotes replacement pairs, when typographer enabled,\n    # and smartquotes on. Could be either a String or an Array.\n    #\n    # For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    # and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '“”‘’'\n\n  # Plugins\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n    - markdown-it-anchor\n    - markdown-it-deflist\n    - markdown-it-mark\n    - markdown-it-container\n\n    - markdown-it-emoji\n    - markdown-it-named-headings\n    - markdown-it-toc\n    - markdown-it-attrs\n    - name: markdown-it-task-lists\n      options:\n        enabled: false\n        label: true\n        labelAfter: false\n  \n  # Automatic Headline ID's\n  anchors:\n    # Minimum level for ID creation. (Ex. h2 to h6)\n    level: 2\n\n    # A suffix that is prepended to the number given if the ID is repeated.\n    collisionSuffix: 'v'           \n\n    # If `true`, creates an anchor tag with a permalink besides the heading.\n    permalink: false              \n\n    # Class used for the permalink anchor tag.\n    permalinkClass: header-anchor \n\n    # The symbol used to make the permalink\n    permalinkSymbol: ¶\n\n```\n\n\nhexo gulp兼容es5:\n```\nnpm install gulp --save\nnpm audit fix\nnpm install gulp-minify-css --save\nnpm audit fix\nnpm install gulp-uglify --save\nnpm audit fix\nnpm install gulp-htmlmin --save\nnpm audit fix\nnpm install gulp-htmlclean --save\nnpm audit fix\nnpm install gulp-imagemin --save\nnpm audit fix\n\nnpm install babel-core@6.26.3 --save\nnpm install gulp-babel@7.0.1 --save\nnpm install babel-preset-es2015@6.24.1 --save\nnpm audit fix\n\n```\n\nnext文章加密用：\n```\nnpm install --save hexo-blog-encrypt\n```\n>未完待续......","source":"_posts/14-hexo-安装-插件.md","raw":"---\ntitle: 「14」hexo-安装&插件\ndate: '2020/09/30 19:24:32'\nupdated: '2021/02/05 19:27:28'\ntags:\n  - hexo\nabbrlink: ae4aba0d\n---\n\nhexo安装及其第三方插件包下载总结，以便后续CI一次到位。\n<!--more-->\n```go\n npm install -g hexo-cli\n npm install hexo-renderer-sass --save\n npm install hexo-generator-searchdb --save\n npm install hexo-generator-sitemap --save\n npm install hexo-generator-baidu-sitemap --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install md5 --save\n npm install request --save\n npm install xml-parser --save\n npm install yamljs --save\n npm install cheerio --save\n npm install blueimp-md5 --save\n npm install hexo-abbrlink --save\n npm audit fix\n\n npm uninstall hexo-generator-index --save\n npm install hexo-generator-index-pin-top --save\n npm audit fix\n \n npm install hexo-neat --save\n npm audit fix\n npm install --save hexo-admin\n npm audit fix\n npm install hexo-deployer-git --save\n npm audit fix\n\n sudo npm install hexo-toc --save\n npm audit fix\n\n//猫咪模型\n sudo npm install --save hexo-helper-live2d \n npm audit fix\n sudo npm install --save live2d-widget-model-z16\n\n //pdf:\nnpm install --save hexo-pdf\nnpm audit fix\n\n```\n\n\n>update: 2021-02-05 19:25:42\n\nhexo next解析插件更换：\n```go\nnpm un hexo-renderer-marked -S\n\n npm uninstall hexo-renderer-marked --save\n\n再安装下面插件：\n\n\nnpm install --save markdown-it-abbr\nnpm install --save markdown-it-footnote\nnpm install --save markdown-it-ins\nnpm install --save markdown-it-sub\nnpm install --save markdown-it-sup\nnpm install --save markdown-it-anchor\nnpm install --save markdown-it-deflist\nnpm install --save markdown-it-mark\nnpm install --save markdown-it-container\n\nnpm install --save markdown-it-emoji\nnpm install --save markdown-it-attrs\nnpm install --save markdown-it-task-lists\nnpm install --save markdown-it-68tygbv \n\nnpm install markdown-it-mathjax --save\nnpm audit fix\nnpm i markdown-it-latex2img --save\nnpm audit fix\nnpm install markdown-it-texmath\nnpm audit fix\n\n最后更新下hexo更目录下的_config.yaml\n\n# Markdown-it config\n## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki\nmarkdown:\n  render:\n    # Enable HTML tags in source\n    html: true\n\n    # Use '/' to close single tags (<br />). This is only for full CommonMark compatibility.\n    xhtmlOut: true        \n\n    # Convert '\\n' in paragraphs into <br> \n    breaks: true      \n\n    # CSS language prefix for fenced blocks. Can be useful for external highlighters.\n    langPrefix: 'language-'  \n\n    # Autoconvert URL-like text to links \n    linkify: true        \n\n    # Enable some language-neutral replacement + quotes beautification\n    typographer: false\n\n    # Double + single quotes replacement pairs, when typographer enabled,\n    # and smartquotes on. Could be either a String or an Array.\n    #\n    # For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    # and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '“”‘’'\n\n  # Plugins\n  plugins:\n    - markdown-it-abbr\n    - markdown-it-footnote\n    - markdown-it-ins\n    - markdown-it-sub\n    - markdown-it-sup\n    - markdown-it-anchor\n    - markdown-it-deflist\n    - markdown-it-mark\n    - markdown-it-container\n\n    - markdown-it-emoji\n    - markdown-it-named-headings\n    - markdown-it-toc\n    - markdown-it-attrs\n    - name: markdown-it-task-lists\n      options:\n        enabled: false\n        label: true\n        labelAfter: false\n  \n  # Automatic Headline ID's\n  anchors:\n    # Minimum level for ID creation. (Ex. h2 to h6)\n    level: 2\n\n    # A suffix that is prepended to the number given if the ID is repeated.\n    collisionSuffix: 'v'           \n\n    # If `true`, creates an anchor tag with a permalink besides the heading.\n    permalink: false              \n\n    # Class used for the permalink anchor tag.\n    permalinkClass: header-anchor \n\n    # The symbol used to make the permalink\n    permalinkSymbol: ¶\n\n```\n\n\nhexo gulp兼容es5:\n```\nnpm install gulp --save\nnpm audit fix\nnpm install gulp-minify-css --save\nnpm audit fix\nnpm install gulp-uglify --save\nnpm audit fix\nnpm install gulp-htmlmin --save\nnpm audit fix\nnpm install gulp-htmlclean --save\nnpm audit fix\nnpm install gulp-imagemin --save\nnpm audit fix\n\nnpm install babel-core@6.26.3 --save\nnpm install gulp-babel@7.0.1 --save\nnpm install babel-preset-es2015@6.24.1 --save\nnpm audit fix\n\n```\n\nnext文章加密用：\n```\nnpm install --save hexo-blog-encrypt\n```\n>未完待续......","slug":"14-hexo-安装-插件","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4m0010zfqxfs4ie3nw","content":"<p>hexo安装及其第三方插件包下载总结，以便后续CI一次到位。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> npm install -g hexo-cli</span><br><span class=\"line\"> npm install hexo-renderer-sass --save</span><br><span class=\"line\"> npm install hexo-generator-searchdb --save</span><br><span class=\"line\"> npm install hexo-generator-sitemap --save</span><br><span class=\"line\"> npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install md5 --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install cheerio --save</span><br><span class=\"line\"> npm install blueimp-md5 --save</span><br><span class=\"line\"> npm install hexo-abbrlink --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"> npm uninstall hexo-generator-index --save</span><br><span class=\"line\"> npm install hexo-generator-index-pin-top --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> </span><br><span class=\"line\"> npm install hexo-neat --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> npm install --save hexo-admin</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> npm install hexo-deployer-git --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"> sudo npm install hexo-toc --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//猫咪模型</span></span><br><span class=\"line\"> sudo npm install --save hexo-helper-live2d </span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> sudo npm install --save live2d-widget-model-z16</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//pdf:</span></span><br><span class=\"line\">npm install --save hexo-pdf</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>update: 2021-02-05 19:25:42</p>\n</blockquote>\n<p>hexo next解析插件更换：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked -S</span><br><span class=\"line\"></span><br><span class=\"line\"> npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\"></span><br><span class=\"line\">再安装下面插件：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">npm install --save markdown-it-abbr</span><br><span class=\"line\">npm install --save markdown-it-footnote</span><br><span class=\"line\">npm install --save markdown-it-ins</span><br><span class=\"line\">npm install --save markdown-it-sub</span><br><span class=\"line\">npm install --save markdown-it-sup</span><br><span class=\"line\">npm install --save markdown-it-anchor</span><br><span class=\"line\">npm install --save markdown-it-deflist</span><br><span class=\"line\">npm install --save markdown-it-mark</span><br><span class=\"line\">npm install --save markdown-it-container</span><br><span class=\"line\"></span><br><span class=\"line\">npm install --save markdown-it-emoji</span><br><span class=\"line\">npm install --save markdown-it-attrs</span><br><span class=\"line\">npm install --save markdown-it-task-lists</span><br><span class=\"line\">npm install --save markdown-it<span class=\"number\">-68</span>tygbv </span><br><span class=\"line\"></span><br><span class=\"line\">npm install markdown-it-mathjax --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm i markdown-it-latex2img --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install markdown-it-texmath</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\">最后更新下hexo更目录下的_config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"># Markdown-it config</span><br><span class=\"line\">## Docs: https:<span class=\"comment\">//github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    # Enable HTML tags in source</span><br><span class=\"line\">    html: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    # Use <span class=\"string\">&#x27;/&#x27;</span> to <span class=\"built_in\">close</span> single tags (&lt;br /&gt;). This is only <span class=\"keyword\">for</span> full CommonMark compatibility.</span><br><span class=\"line\">    xhtmlOut: <span class=\"literal\">true</span>        </span><br><span class=\"line\"></span><br><span class=\"line\">    # Convert <span class=\"string\">&#x27;\\n&#x27;</span> in paragraphs into &lt;br&gt; </span><br><span class=\"line\">    breaks: <span class=\"literal\">true</span>      </span><br><span class=\"line\"></span><br><span class=\"line\">    # CSS language prefix <span class=\"keyword\">for</span> fenced blocks. Can be useful <span class=\"keyword\">for</span> external highlighters.</span><br><span class=\"line\">    langPrefix: <span class=\"string\">&#x27;language-&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    # Autoconvert URL-like text to links </span><br><span class=\"line\">    linkify: <span class=\"literal\">true</span>        </span><br><span class=\"line\"></span><br><span class=\"line\">    # Enable some language-neutral replacement + quotes beautification</span><br><span class=\"line\">    typographer: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    # Double + single quotes replacement pairs, when typographer enabled,</span><br><span class=\"line\">    # and smartquotes on. Could be either a String or an Array.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # For example, you can use <span class=\"string\">&#x27;«»„“&#x27;</span> <span class=\"keyword\">for</span> Russian, <span class=\"string\">&#x27;„“‚‘&#x27;</span> <span class=\"keyword\">for</span> German,</span><br><span class=\"line\">    # and [<span class=\"string\">&#x27;«\\xA0&#x27;</span>, <span class=\"string\">&#x27;\\xA0»&#x27;</span>, <span class=\"string\">&#x27;‹\\xA0&#x27;</span>, <span class=\"string\">&#x27;\\xA0›&#x27;</span>] <span class=\"keyword\">for</span> French (including nbsp).</span><br><span class=\"line\">    quotes: <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  # Plugins</span><br><span class=\"line\">  plugins:</span><br><span class=\"line\">    - markdown-it-abbr</span><br><span class=\"line\">    - markdown-it-footnote</span><br><span class=\"line\">    - markdown-it-ins</span><br><span class=\"line\">    - markdown-it-sub</span><br><span class=\"line\">    - markdown-it-sup</span><br><span class=\"line\">    - markdown-it-anchor</span><br><span class=\"line\">    - markdown-it-deflist</span><br><span class=\"line\">    - markdown-it-mark</span><br><span class=\"line\">    - markdown-it-container</span><br><span class=\"line\"></span><br><span class=\"line\">    - markdown-it-emoji</span><br><span class=\"line\">    - markdown-it-named-headings</span><br><span class=\"line\">    - markdown-it-toc</span><br><span class=\"line\">    - markdown-it-attrs</span><br><span class=\"line\">    - name: markdown-it-task-lists</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        enabled: <span class=\"literal\">false</span></span><br><span class=\"line\">        label: <span class=\"literal\">true</span></span><br><span class=\"line\">        labelAfter: <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  # Automatic Headline ID<span class=\"string\">&#x27;s</span></span><br><span class=\"line\"><span class=\"string\">  anchors:</span></span><br><span class=\"line\"><span class=\"string\">    # Minimum level for ID creation. (Ex. h2 to h6)</span></span><br><span class=\"line\"><span class=\"string\">    level: 2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # A suffix that is prepended to the number given if the ID is repeated.</span></span><br><span class=\"line\"><span class=\"string\">    collisionSuffix: &#x27;</span>v<span class=\"string\">&#x27;           </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # If `true`, creates an anchor tag with a permalink besides the heading.</span></span><br><span class=\"line\"><span class=\"string\">    permalink: false              </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # Class used for the permalink anchor tag.</span></span><br><span class=\"line\"><span class=\"string\">    permalinkClass: header-anchor </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # The symbol used to make the permalink</span></span><br><span class=\"line\"><span class=\"string\">    permalinkSymbol: ¶</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>hexo gulp兼容es5:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-minify-css --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-uglify --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-htmlmin --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-htmlclean --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-imagemin --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\">npm install babel-core@6.26.3 --save</span><br><span class=\"line\">npm install gulp-babel@7.0.1 --save</span><br><span class=\"line\">npm install babel-preset-es2015@6.24.1 --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>next文章加密用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>未完待续…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>hexo安装及其第三方插件包下载总结，以便后续CI一次到位。</p>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> npm install -g hexo-cli</span><br><span class=\"line\"> npm install hexo-renderer-sass --save</span><br><span class=\"line\"> npm install hexo-generator-searchdb --save</span><br><span class=\"line\"> npm install hexo-generator-sitemap --save</span><br><span class=\"line\"> npm install hexo-generator-baidu-sitemap --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install md5 --save</span><br><span class=\"line\"> npm install request --save</span><br><span class=\"line\"> npm install xml-parser --save</span><br><span class=\"line\"> npm install yamljs --save</span><br><span class=\"line\"> npm install cheerio --save</span><br><span class=\"line\"> npm install blueimp-md5 --save</span><br><span class=\"line\"> npm install hexo-abbrlink --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"> npm uninstall hexo-generator-index --save</span><br><span class=\"line\"> npm install hexo-generator-index-pin-top --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> </span><br><span class=\"line\"> npm install hexo-neat --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> npm install --save hexo-admin</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> npm install hexo-deployer-git --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"> sudo npm install hexo-toc --save</span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//猫咪模型</span></span><br><span class=\"line\"> sudo npm install --save hexo-helper-live2d </span><br><span class=\"line\"> npm audit fix</span><br><span class=\"line\"> sudo npm install --save live2d-widget-model-z16</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">//pdf:</span></span><br><span class=\"line\">npm install --save hexo-pdf</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>update: 2021-02-05 19:25:42</p>\n</blockquote>\n<p>hexo next解析插件更换：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm un hexo-renderer-marked -S</span><br><span class=\"line\"></span><br><span class=\"line\"> npm uninstall hexo-renderer-marked --save</span><br><span class=\"line\"></span><br><span class=\"line\">再安装下面插件：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">npm install --save markdown-it-abbr</span><br><span class=\"line\">npm install --save markdown-it-footnote</span><br><span class=\"line\">npm install --save markdown-it-ins</span><br><span class=\"line\">npm install --save markdown-it-sub</span><br><span class=\"line\">npm install --save markdown-it-sup</span><br><span class=\"line\">npm install --save markdown-it-anchor</span><br><span class=\"line\">npm install --save markdown-it-deflist</span><br><span class=\"line\">npm install --save markdown-it-mark</span><br><span class=\"line\">npm install --save markdown-it-container</span><br><span class=\"line\"></span><br><span class=\"line\">npm install --save markdown-it-emoji</span><br><span class=\"line\">npm install --save markdown-it-attrs</span><br><span class=\"line\">npm install --save markdown-it-task-lists</span><br><span class=\"line\">npm install --save markdown-it<span class=\"number\">-68</span>tygbv </span><br><span class=\"line\"></span><br><span class=\"line\">npm install markdown-it-mathjax --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm i markdown-it-latex2img --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install markdown-it-texmath</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\">最后更新下hexo更目录下的_config.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"># Markdown-it config</span><br><span class=\"line\">## Docs: https:<span class=\"comment\">//github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span></span><br><span class=\"line\">markdown:</span><br><span class=\"line\">  render:</span><br><span class=\"line\">    # Enable HTML tags in source</span><br><span class=\"line\">    html: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    # Use <span class=\"string\">&#x27;/&#x27;</span> to <span class=\"built_in\">close</span> single tags (&lt;br /&gt;). This is only <span class=\"keyword\">for</span> full CommonMark compatibility.</span><br><span class=\"line\">    xhtmlOut: <span class=\"literal\">true</span>        </span><br><span class=\"line\"></span><br><span class=\"line\">    # Convert <span class=\"string\">&#x27;\\n&#x27;</span> in paragraphs into &lt;br&gt; </span><br><span class=\"line\">    breaks: <span class=\"literal\">true</span>      </span><br><span class=\"line\"></span><br><span class=\"line\">    # CSS language prefix <span class=\"keyword\">for</span> fenced blocks. Can be useful <span class=\"keyword\">for</span> external highlighters.</span><br><span class=\"line\">    langPrefix: <span class=\"string\">&#x27;language-&#x27;</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">    # Autoconvert URL-like text to links </span><br><span class=\"line\">    linkify: <span class=\"literal\">true</span>        </span><br><span class=\"line\"></span><br><span class=\"line\">    # Enable some language-neutral replacement + quotes beautification</span><br><span class=\"line\">    typographer: <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">    # Double + single quotes replacement pairs, when typographer enabled,</span><br><span class=\"line\">    # and smartquotes on. Could be either a String or an Array.</span><br><span class=\"line\">    #</span><br><span class=\"line\">    # For example, you can use <span class=\"string\">&#x27;«»„“&#x27;</span> <span class=\"keyword\">for</span> Russian, <span class=\"string\">&#x27;„“‚‘&#x27;</span> <span class=\"keyword\">for</span> German,</span><br><span class=\"line\">    # and [<span class=\"string\">&#x27;«\\xA0&#x27;</span>, <span class=\"string\">&#x27;\\xA0»&#x27;</span>, <span class=\"string\">&#x27;‹\\xA0&#x27;</span>, <span class=\"string\">&#x27;\\xA0›&#x27;</span>] <span class=\"keyword\">for</span> French (including nbsp).</span><br><span class=\"line\">    quotes: <span class=\"string\">&#x27;“”‘’&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  # Plugins</span><br><span class=\"line\">  plugins:</span><br><span class=\"line\">    - markdown-it-abbr</span><br><span class=\"line\">    - markdown-it-footnote</span><br><span class=\"line\">    - markdown-it-ins</span><br><span class=\"line\">    - markdown-it-sub</span><br><span class=\"line\">    - markdown-it-sup</span><br><span class=\"line\">    - markdown-it-anchor</span><br><span class=\"line\">    - markdown-it-deflist</span><br><span class=\"line\">    - markdown-it-mark</span><br><span class=\"line\">    - markdown-it-container</span><br><span class=\"line\"></span><br><span class=\"line\">    - markdown-it-emoji</span><br><span class=\"line\">    - markdown-it-named-headings</span><br><span class=\"line\">    - markdown-it-toc</span><br><span class=\"line\">    - markdown-it-attrs</span><br><span class=\"line\">    - name: markdown-it-task-lists</span><br><span class=\"line\">      options:</span><br><span class=\"line\">        enabled: <span class=\"literal\">false</span></span><br><span class=\"line\">        label: <span class=\"literal\">true</span></span><br><span class=\"line\">        labelAfter: <span class=\"literal\">false</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  # Automatic Headline ID<span class=\"string\">&#x27;s</span></span><br><span class=\"line\"><span class=\"string\">  anchors:</span></span><br><span class=\"line\"><span class=\"string\">    # Minimum level for ID creation. (Ex. h2 to h6)</span></span><br><span class=\"line\"><span class=\"string\">    level: 2</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # A suffix that is prepended to the number given if the ID is repeated.</span></span><br><span class=\"line\"><span class=\"string\">    collisionSuffix: &#x27;</span>v<span class=\"string\">&#x27;           </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # If `true`, creates an anchor tag with a permalink besides the heading.</span></span><br><span class=\"line\"><span class=\"string\">    permalink: false              </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # Class used for the permalink anchor tag.</span></span><br><span class=\"line\"><span class=\"string\">    permalinkClass: header-anchor </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    # The symbol used to make the permalink</span></span><br><span class=\"line\"><span class=\"string\">    permalinkSymbol: ¶</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n<p>hexo gulp兼容es5:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gulp --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-minify-css --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-uglify --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-htmlmin --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-htmlclean --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\">npm install gulp-imagemin --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br><span class=\"line\">npm install babel-core@6.26.3 --save</span><br><span class=\"line\">npm install gulp-babel@7.0.1 --save</span><br><span class=\"line\">npm install babel-preset-es2015@6.24.1 --save</span><br><span class=\"line\">npm audit fix</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>next文章加密用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>未完待续…</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Feb 05 2021 19:27:28 GMT+0800 (中国标准时间)","title":"「14」hexo-安装&插件","path":"archives/ae4aba0d.html","eyeCatchImage":null,"excerpt":"<p>hexo安装及其第三方插件包下载总结，以便后续CI一次到位。</p>","date":{"_isAMomentObject":true,"_i":"2020-09-30T11:24:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-30T11:24:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["hexo"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3759},{"title":"「15」Plan9 汇编小记","date":"2020-10-09T05:47:39.000Z","updated":"2022-02-02T16:07:39.000Z","keywords":"汇编,Go,Plan9","top":false,"sticky":3,"abbrlink":"2ce846ed","_content":"\n#### 前序\n>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。\n#### 如何得到汇编结果？\n\n* 官网文档\n* Google\n\n##### 3种方式：\n>第一种\n<!-- more -->\n```go\ngo tool compile -N -l -S ***.go\n```\n>第二种\n\n```go\n1、先编译：\n    go tool compile -N -l ***.go\n2、再反编译：\n    go tool objdump ***.o\n```\n\n>第三种\n\n```go\ngo build -gcflags -S ***.go\n```\n\n\n#### 常用寄存器\n\n> plan9 指令格式:  指令 源操作数 目标操作数\n\n##### AX BX CX DX BP SI SP IP\n\n|寄存器|16位|32位|64位|\n|:----|:----|:----|:----|\n|累加寄存器|AX|EAX|RAX|\n|基址寄存器|BX|EBX|RBX|\n|计数寄存器|CX|ECX|RCX|\n|数据寄存器|DX|EDX|RDX|\n|堆栈基指针|BP|EBP|RBP|\n|变址寄存器|SI|ESI|RSI|\n|堆栈顶指针|SP|ESP|RSP|\n|指令寄存器|IP|EIP|RIP|\n\n##### 4个伪寄存器:\n\n* FP: 指向栈底位置,一般用来引用函数的输入参数,用于函数参数的访问「frame pointer」\n* PC: 程序计数器,用于分支与跳转.「program counter」\n* SB: 函数声明和全局变量.「static base pointer」\n* SP: 指向当前栈帧的局部变量的开始位置「栈顶位置」,用于局部变量的引用.\n\n\n更新：\n\n* SB Static base pointer: global symbols. 全局静态基指针，程序地址空间的开始地址。所有用户定义的符号都可以作为偏移量写入伪寄存器 FP（参数和局部变量）和 SB（全局变量）。SB 伪寄存器可以被认为是内存的起始位置 0x0，例如 runtime.newobject(SB) 就是函数 runtime.newobject 位于内存中的地址。\n* SP Stack pointer: the highest address within the local stack frame. 栈顶，指向当前栈帧的开始位置。使用形如 symbol+offset(SP) 的方式，引用函数的局部变量，例如 a+8(SP) 指相对于 SP，offset 为 +8 的地址，假如 SP 指向 0x000f0, 那么 a+8(SP) 指向 0x000f8。a 是 symbol，变量名称，用于提升代码可读性。\n* FP Frame pointer: arguments and locals. 类似 SP，实际使用非常少。\n* PC Program counter: jumps and branches. 存放 CPU 下一个执行指令的位置地址，PC 是一个抽象的概念，在 x86 上，通过 CS 段寄存器和 IP 寄存器共同计算出指令的地址，也就是PC的值。具体使用示例JMP 2(PC) 以当前指令为基础，向后跳转 2 行\n* TLS thread local storage 存放了当前正在执行的 g 的结构体。例如 0(TLS) 表示 g.stack.lo，8(TLS) 表示 g.stack.hi\n##### MOV\n\n>movb（8位）、movw（16位）、movl（32位）、movq（64位）\n\n```go\nMOVSS: 移动单精度浮点数\n```\n\n\n####  LEA和MOV\nLEA：操作地址\nMOV：操作数据\n\n\n例子：\nLEAQ 8(SP), SI // argv 把 8(SP)地址放入 SI 寄存器中\nMOVQ 0(SP), DI // argc 把0(SP)内容放入 DI 寄存器中\n\n#### Reference\n\n* [☞ Plan 9汇编常见](https://blog.thinkhp.site/plan9/#%E6%9F%A5%E7%9C%8B%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95)\n* [☞ MOVSS](https://c9x.me/x86/html/file_module_x86_id_205.html)\n* [☞ Intel汇编指令查询](https://www.felixcloutier.com/x86/index.html)\n* [☞ Plan9查询](https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c)\n* [☞ 指令查询](http://68k.hax.com/)\n* [☞ plan9 doc](https://9p.io/sys/doc/)\n\n#### 持续更新....","source":"_posts/15-Plan9-汇编小记.md","raw":"---\ntitle: 「15」Plan9 汇编小记\ndate: '2020/10/09 13:47:39'\nupdated: '2022/02/03 00:07:39'\nkeywords: '汇编,Go,Plan9'\ntop: false\nsticky: 3\ntags:\n  - Plan9\n  - Go\n  - Day\nabbrlink: 2ce846ed\n---\n\n#### 前序\n>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。\n#### 如何得到汇编结果？\n\n* 官网文档\n* Google\n\n##### 3种方式：\n>第一种\n<!-- more -->\n```go\ngo tool compile -N -l -S ***.go\n```\n>第二种\n\n```go\n1、先编译：\n    go tool compile -N -l ***.go\n2、再反编译：\n    go tool objdump ***.o\n```\n\n>第三种\n\n```go\ngo build -gcflags -S ***.go\n```\n\n\n#### 常用寄存器\n\n> plan9 指令格式:  指令 源操作数 目标操作数\n\n##### AX BX CX DX BP SI SP IP\n\n|寄存器|16位|32位|64位|\n|:----|:----|:----|:----|\n|累加寄存器|AX|EAX|RAX|\n|基址寄存器|BX|EBX|RBX|\n|计数寄存器|CX|ECX|RCX|\n|数据寄存器|DX|EDX|RDX|\n|堆栈基指针|BP|EBP|RBP|\n|变址寄存器|SI|ESI|RSI|\n|堆栈顶指针|SP|ESP|RSP|\n|指令寄存器|IP|EIP|RIP|\n\n##### 4个伪寄存器:\n\n* FP: 指向栈底位置,一般用来引用函数的输入参数,用于函数参数的访问「frame pointer」\n* PC: 程序计数器,用于分支与跳转.「program counter」\n* SB: 函数声明和全局变量.「static base pointer」\n* SP: 指向当前栈帧的局部变量的开始位置「栈顶位置」,用于局部变量的引用.\n\n\n更新：\n\n* SB Static base pointer: global symbols. 全局静态基指针，程序地址空间的开始地址。所有用户定义的符号都可以作为偏移量写入伪寄存器 FP（参数和局部变量）和 SB（全局变量）。SB 伪寄存器可以被认为是内存的起始位置 0x0，例如 runtime.newobject(SB) 就是函数 runtime.newobject 位于内存中的地址。\n* SP Stack pointer: the highest address within the local stack frame. 栈顶，指向当前栈帧的开始位置。使用形如 symbol+offset(SP) 的方式，引用函数的局部变量，例如 a+8(SP) 指相对于 SP，offset 为 +8 的地址，假如 SP 指向 0x000f0, 那么 a+8(SP) 指向 0x000f8。a 是 symbol，变量名称，用于提升代码可读性。\n* FP Frame pointer: arguments and locals. 类似 SP，实际使用非常少。\n* PC Program counter: jumps and branches. 存放 CPU 下一个执行指令的位置地址，PC 是一个抽象的概念，在 x86 上，通过 CS 段寄存器和 IP 寄存器共同计算出指令的地址，也就是PC的值。具体使用示例JMP 2(PC) 以当前指令为基础，向后跳转 2 行\n* TLS thread local storage 存放了当前正在执行的 g 的结构体。例如 0(TLS) 表示 g.stack.lo，8(TLS) 表示 g.stack.hi\n##### MOV\n\n>movb（8位）、movw（16位）、movl（32位）、movq（64位）\n\n```go\nMOVSS: 移动单精度浮点数\n```\n\n\n####  LEA和MOV\nLEA：操作地址\nMOV：操作数据\n\n\n例子：\nLEAQ 8(SP), SI // argv 把 8(SP)地址放入 SI 寄存器中\nMOVQ 0(SP), DI // argc 把0(SP)内容放入 DI 寄存器中\n\n#### Reference\n\n* [☞ Plan 9汇编常见](https://blog.thinkhp.site/plan9/#%E6%9F%A5%E7%9C%8B%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95)\n* [☞ MOVSS](https://c9x.me/x86/html/file_module_x86_id_205.html)\n* [☞ Intel汇编指令查询](https://www.felixcloutier.com/x86/index.html)\n* [☞ Plan9查询](https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c)\n* [☞ 指令查询](http://68k.hax.com/)\n* [☞ plan9 doc](https://9p.io/sys/doc/)\n\n#### 持续更新....","slug":"15-Plan9-汇编小记","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4n0013zfqxamq75bmz","content":"<h4 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h4>\n<blockquote>\n<p>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。</p>\n</blockquote>\n<h4 id=\"如何得到汇编结果？\"><a class=\"header-anchor\" href=\"#如何得到汇编结果？\">¶</a>如何得到汇编结果？</h4>\n<ul>\n<li>官网文档</li>\n<li>Google</li>\n</ul>\n<h5 id=\"3种方式：\"><a class=\"header-anchor\" href=\"#3种方式：\">¶</a>3种方式：</h5>\n<blockquote>\n<p>第一种</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> tool compile -N -l -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、先编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool compile -N -l ***.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"number\">2</span>、再反编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool objdump ***.o</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> build -gcflags -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"常用寄存器\"><a class=\"header-anchor\" href=\"#常用寄存器\">¶</a>常用寄存器</h4>\n<blockquote>\n<p>plan9 指令格式:  指令 源操作数 目标操作数</p>\n</blockquote>\n<h5 id=\"AX-BX-CX-DX-BP-SI-SP-IP\"><a class=\"header-anchor\" href=\"#AX-BX-CX-DX-BP-SI-SP-IP\">¶</a>AX BX CX DX BP SI SP IP</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">寄存器</th>\n<th style=\"text-align:left\">16位</th>\n<th style=\"text-align:left\">32位</th>\n<th style=\"text-align:left\">64位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">累加寄存器</td>\n<td style=\"text-align:left\">AX</td>\n<td style=\"text-align:left\">EAX</td>\n<td style=\"text-align:left\">RAX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">基址寄存器</td>\n<td style=\"text-align:left\">BX</td>\n<td style=\"text-align:left\">EBX</td>\n<td style=\"text-align:left\">RBX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">计数寄存器</td>\n<td style=\"text-align:left\">CX</td>\n<td style=\"text-align:left\">ECX</td>\n<td style=\"text-align:left\">RCX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据寄存器</td>\n<td style=\"text-align:left\">DX</td>\n<td style=\"text-align:left\">EDX</td>\n<td style=\"text-align:left\">RDX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆栈基指针</td>\n<td style=\"text-align:left\">BP</td>\n<td style=\"text-align:left\">EBP</td>\n<td style=\"text-align:left\">RBP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">变址寄存器</td>\n<td style=\"text-align:left\">SI</td>\n<td style=\"text-align:left\">ESI</td>\n<td style=\"text-align:left\">RSI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆栈顶指针</td>\n<td style=\"text-align:left\">SP</td>\n<td style=\"text-align:left\">ESP</td>\n<td style=\"text-align:left\">RSP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">指令寄存器</td>\n<td style=\"text-align:left\">IP</td>\n<td style=\"text-align:left\">EIP</td>\n<td style=\"text-align:left\">RIP</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"4个伪寄存器\"><a class=\"header-anchor\" href=\"#4个伪寄存器\">¶</a>4个伪寄存器:</h5>\n<ul>\n<li>FP: 指向栈底位置,一般用来引用函数的输入参数,用于函数参数的访问「frame pointer」</li>\n<li>PC: 程序计数器,用于分支与跳转.「program counter」</li>\n<li>SB: 函数声明和全局变量.「static base pointer」</li>\n<li>SP: 指向当前栈帧的局部变量的开始位置「栈顶位置」,用于局部变量的引用.</li>\n</ul>\n<p>更新：</p>\n<ul>\n<li>SB Static base pointer: global symbols. 全局静态基指针，程序地址空间的开始地址。所有用户定义的符号都可以作为偏移量写入伪寄存器 FP（参数和局部变量）和 SB（全局变量）。SB 伪寄存器可以被认为是内存的起始位置 0x0，例如 runtime.newobject(SB) 就是函数 runtime.newobject 位于内存中的地址。</li>\n<li>SP Stack pointer: the highest address within the local stack frame. 栈顶，指向当前栈帧的开始位置。使用形如 symbol+offset(SP) 的方式，引用函数的局部变量，例如 a+8(SP) 指相对于 SP，offset 为 +8 的地址，假如 SP 指向 0x000f0, 那么 a+8(SP) 指向 0x000f8。a 是 symbol，变量名称，用于提升代码可读性。</li>\n<li>FP Frame pointer: arguments and locals. 类似 SP，实际使用非常少。</li>\n<li>PC Program counter: jumps and branches. 存放 CPU 下一个执行指令的位置地址，PC 是一个抽象的概念，在 x86 上，通过 CS 段寄存器和 IP 寄存器共同计算出指令的地址，也就是PC的值。具体使用示例JMP 2(PC) 以当前指令为基础，向后跳转 2 行</li>\n<li>TLS thread local storage 存放了当前正在执行的 g 的结构体。例如 0(TLS) 表示 g.stack.lo，8(TLS) 表示 g.stack.hi</li>\n</ul>\n<h5 id=\"MOV\"><a class=\"header-anchor\" href=\"#MOV\">¶</a>MOV</h5>\n<blockquote>\n<p>movb（8位）、movw（16位）、movl（32位）、movq（64位）</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOVSS: 移动单精度浮点数</span><br></pre></td></tr></table></figure>\n<h4 id=\"LEA和MOV\"><a class=\"header-anchor\" href=\"#LEA和MOV\">¶</a>LEA和MOV</h4>\n<p>LEA：操作地址<br>\nMOV：操作数据</p>\n<p>例子：<br>\nLEAQ 8(SP), SI // argv 把 8(SP)地址放入 SI 寄存器中<br>\nMOVQ 0(SP), DI // argc 把0(SP)内容放入 DI 寄存器中</p>\n<h4 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h4>\n<ul>\n<li><a href=\"https://blog.thinkhp.site/plan9/#%E6%9F%A5%E7%9C%8B%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95\">☞ Plan 9汇编常见</a></li>\n<li><a href=\"https://c9x.me/x86/html/file_module_x86_id_205.html\">☞ MOVSS</a></li>\n<li><a href=\"https://www.felixcloutier.com/x86/index.html\">☞ Intel汇编指令查询</a></li>\n<li><a href=\"https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c\">☞ Plan9查询</a></li>\n<li><a href=\"http://68k.hax.com/\">☞ 指令查询</a></li>\n<li><a href=\"https://9p.io/sys/doc/\">☞ plan9 doc</a></li>\n</ul>\n<h4 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h4>\n","site":{"data":{}},"excerpt":"<h4 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h4>\n<blockquote>\n<p>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。</p>\n</blockquote>\n<h4 id=\"如何得到汇编结果？\"><a class=\"header-anchor\" href=\"#如何得到汇编结果？\">¶</a>如何得到汇编结果？</h4>\n<ul>\n<li>官网文档</li>\n<li>Google</li>\n</ul>\n<h5 id=\"3种方式：\"><a class=\"header-anchor\" href=\"#3种方式：\">¶</a>3种方式：</h5>\n<blockquote>\n<p>第一种</p>\n</blockquote>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> tool compile -N -l -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第二种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、先编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool compile -N -l ***.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"number\">2</span>、再反编译：</span><br><span class=\"line\">    <span class=\"keyword\">go</span> tool objdump ***.o</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>第三种</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> build -gcflags -S ***.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"常用寄存器\"><a class=\"header-anchor\" href=\"#常用寄存器\">¶</a>常用寄存器</h4>\n<blockquote>\n<p>plan9 指令格式:  指令 源操作数 目标操作数</p>\n</blockquote>\n<h5 id=\"AX-BX-CX-DX-BP-SI-SP-IP\"><a class=\"header-anchor\" href=\"#AX-BX-CX-DX-BP-SI-SP-IP\">¶</a>AX BX CX DX BP SI SP IP</h5>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">寄存器</th>\n<th style=\"text-align:left\">16位</th>\n<th style=\"text-align:left\">32位</th>\n<th style=\"text-align:left\">64位</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">累加寄存器</td>\n<td style=\"text-align:left\">AX</td>\n<td style=\"text-align:left\">EAX</td>\n<td style=\"text-align:left\">RAX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">基址寄存器</td>\n<td style=\"text-align:left\">BX</td>\n<td style=\"text-align:left\">EBX</td>\n<td style=\"text-align:left\">RBX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">计数寄存器</td>\n<td style=\"text-align:left\">CX</td>\n<td style=\"text-align:left\">ECX</td>\n<td style=\"text-align:left\">RCX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数据寄存器</td>\n<td style=\"text-align:left\">DX</td>\n<td style=\"text-align:left\">EDX</td>\n<td style=\"text-align:left\">RDX</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆栈基指针</td>\n<td style=\"text-align:left\">BP</td>\n<td style=\"text-align:left\">EBP</td>\n<td style=\"text-align:left\">RBP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">变址寄存器</td>\n<td style=\"text-align:left\">SI</td>\n<td style=\"text-align:left\">ESI</td>\n<td style=\"text-align:left\">RSI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">堆栈顶指针</td>\n<td style=\"text-align:left\">SP</td>\n<td style=\"text-align:left\">ESP</td>\n<td style=\"text-align:left\">RSP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">指令寄存器</td>\n<td style=\"text-align:left\">IP</td>\n<td style=\"text-align:left\">EIP</td>\n<td style=\"text-align:left\">RIP</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"4个伪寄存器\"><a class=\"header-anchor\" href=\"#4个伪寄存器\">¶</a>4个伪寄存器:</h5>\n<ul>\n<li>FP: 指向栈底位置,一般用来引用函数的输入参数,用于函数参数的访问「frame pointer」</li>\n<li>PC: 程序计数器,用于分支与跳转.「program counter」</li>\n<li>SB: 函数声明和全局变量.「static base pointer」</li>\n<li>SP: 指向当前栈帧的局部变量的开始位置「栈顶位置」,用于局部变量的引用.</li>\n</ul>\n<p>更新：</p>\n<ul>\n<li>SB Static base pointer: global symbols. 全局静态基指针，程序地址空间的开始地址。所有用户定义的符号都可以作为偏移量写入伪寄存器 FP（参数和局部变量）和 SB（全局变量）。SB 伪寄存器可以被认为是内存的起始位置 0x0，例如 runtime.newobject(SB) 就是函数 runtime.newobject 位于内存中的地址。</li>\n<li>SP Stack pointer: the highest address within the local stack frame. 栈顶，指向当前栈帧的开始位置。使用形如 symbol+offset(SP) 的方式，引用函数的局部变量，例如 a+8(SP) 指相对于 SP，offset 为 +8 的地址，假如 SP 指向 0x000f0, 那么 a+8(SP) 指向 0x000f8。a 是 symbol，变量名称，用于提升代码可读性。</li>\n<li>FP Frame pointer: arguments and locals. 类似 SP，实际使用非常少。</li>\n<li>PC Program counter: jumps and branches. 存放 CPU 下一个执行指令的位置地址，PC 是一个抽象的概念，在 x86 上，通过 CS 段寄存器和 IP 寄存器共同计算出指令的地址，也就是PC的值。具体使用示例JMP 2(PC) 以当前指令为基础，向后跳转 2 行</li>\n<li>TLS thread local storage 存放了当前正在执行的 g 的结构体。例如 0(TLS) 表示 g.stack.lo，8(TLS) 表示 g.stack.hi</li>\n</ul>\n<h5 id=\"MOV\"><a class=\"header-anchor\" href=\"#MOV\">¶</a>MOV</h5>\n<blockquote>\n<p>movb（8位）、movw（16位）、movl（32位）、movq（64位）</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MOVSS: 移动单精度浮点数</span><br></pre></td></tr></table></figure>\n<h4 id=\"LEA和MOV\"><a class=\"header-anchor\" href=\"#LEA和MOV\">¶</a>LEA和MOV</h4>\n<p>LEA：操作地址<br>\nMOV：操作数据</p>\n<p>例子：<br>\nLEAQ 8(SP), SI // argv 把 8(SP)地址放入 SI 寄存器中<br>\nMOVQ 0(SP), DI // argc 把0(SP)内容放入 DI 寄存器中</p>\n<h4 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h4>\n<ul>\n<li><a href=\"https://blog.thinkhp.site/plan9/#%E6%9F%A5%E7%9C%8B%E6%B1%87%E7%BC%96%E4%BB%A3%E7%A0%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95\">☞ Plan 9汇编常见</a></li>\n<li><a href=\"https://c9x.me/x86/html/file_module_x86_id_205.html\">☞ MOVSS</a></li>\n<li><a href=\"https://www.felixcloutier.com/x86/index.html\">☞ Intel汇编指令查询</a></li>\n<li><a href=\"https://plan9.io/sources/contrib/ericvh/go-plan9/src/pkg/runtime/slice.c\">☞ Plan9查询</a></li>\n<li><a href=\"http://68k.hax.com/\">☞ 指令查询</a></li>\n<li><a href=\"https://9p.io/sys/doc/\">☞ plan9 doc</a></li>\n</ul>\n<h4 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h4>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Feb 03 2022 00:07:39 GMT+0800 (中国标准时间)","title":"「15」Plan9 汇编小记","path":"archives/2ce846ed.html","eyeCatchImage":null,"excerpt":"<h4 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h4>\n<blockquote>\n<p>平常coding时，偶尔会查看计算机的具体执行过程，那最基本的就是汇编了，了解汇编是调试过程中必不可少的，尤其是一些细节的处理方面.Go的汇编是Plan 9(贝尔实验室的产物)，和汇编很类似。</p>\n</blockquote>\n<h4 id=\"如何得到汇编结果？\"><a class=\"header-anchor\" href=\"#如何得到汇编结果？\">¶</a>如何得到汇编结果？</h4>\n<ul>\n<li>官网文档</li>\n<li>Google</li>\n</ul>\n<h5 id=\"3种方式：\"><a class=\"header-anchor\" href=\"#3种方式：\">¶</a>3种方式：</h5>\n<blockquote>\n<p>第一种</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-10-09T05:47:39.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-10-09T05:47:39.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Plan9"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1399},{"title":"「16」go源码words归纳","date":"2020-11-03T02:45:07.000Z","updated":"2021-02-17T06:45:07.000Z","keywords":"汇编,Go,Plan9","abbrlink":"425d5e80","_content":"### 前序\n\n好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了.....「身体还是很重要的!」\n\n当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」\n\n>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。\n\n不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。\n\n### Words\n\n#### 全称\n<!--more-->\n```go\n「11/3」\nPreempt  v 抢占、掠夺                                   --> /proc.go\nretake   v 重新获取「重新分配」                           --> /proc.go\nsyscall  v 系统调用                                     --> /proc.go\ndecrement v 递减                                       --> /proc.go\npretending  v 假装、伪装                                --> /proc.go\ncontended  v 竞争                                      --> /proc.go\nprocresize  v 扩大                                     --> /proc.go \ncorruption  n 腐败，译：损坏\ninfinite  adj 无限的  \nreproduce v  复制\nconsists  v 组成\nreproducer  v 复制\nallocating v 分配\nembed   v 嵌入 \n\n「11/5」\nassembly  n  装配                                      --> /proc.go\namortizes  v  缓冲                                     --> /proc.go\n\n「11/25」\nguard  v. 看守\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t --> /proc.go\nAlternatively  或者\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-->  /runtime/rwmutex.go\n\n「later」\ndemonstrate  v 演示\n\n\ninstructions v  指示  ----> (go github memory leak)[https://github.com/golang/go/issues/40448]\nreiterate    v  重申\nprocedure    n 程序\nhypothesis   n 假设\n```\n\n\n#### 简写\n\n```go\n「11/3」\nsysmon -> system monitor 系统监控                                               /proc.go\nincidlelocked  --> increment idle locked   增加空闲锁                           /proc.go\nsysmontick  --> system monitor ticket   系统监控数量                            /proc.go\n```\n\n### 持续更新....\n","source":"_posts/16-go源码words归纳.md","raw":"---\ntitle: 「16」go源码words归纳\ndate: '2020/11/03 10:45:07'\nupdated: '2021/2/17 14:45:07'\nkeywords: '汇编,Go,Plan9'\ntags:\n  - Go\n  - Day\nabbrlink: 425d5e80\n---\n### 前序\n\n好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了.....「身体还是很重要的!」\n\n当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」\n\n>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。\n\n不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。\n\n### Words\n\n#### 全称\n<!--more-->\n```go\n「11/3」\nPreempt  v 抢占、掠夺                                   --> /proc.go\nretake   v 重新获取「重新分配」                           --> /proc.go\nsyscall  v 系统调用                                     --> /proc.go\ndecrement v 递减                                       --> /proc.go\npretending  v 假装、伪装                                --> /proc.go\ncontended  v 竞争                                      --> /proc.go\nprocresize  v 扩大                                     --> /proc.go \ncorruption  n 腐败，译：损坏\ninfinite  adj 无限的  \nreproduce v  复制\nconsists  v 组成\nreproducer  v 复制\nallocating v 分配\nembed   v 嵌入 \n\n「11/5」\nassembly  n  装配                                      --> /proc.go\namortizes  v  缓冲                                     --> /proc.go\n\n「11/25」\nguard  v. 看守\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t --> /proc.go\nAlternatively  或者\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-->  /runtime/rwmutex.go\n\n「later」\ndemonstrate  v 演示\n\n\ninstructions v  指示  ----> (go github memory leak)[https://github.com/golang/go/issues/40448]\nreiterate    v  重申\nprocedure    n 程序\nhypothesis   n 假设\n```\n\n\n#### 简写\n\n```go\n「11/3」\nsysmon -> system monitor 系统监控                                               /proc.go\nincidlelocked  --> increment idle locked   增加空闲锁                           /proc.go\nsysmontick  --> system monitor ticket   系统监控数量                            /proc.go\n```\n\n### 持续更新....\n","slug":"16-go源码words归纳","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4n0014zfqx3ytzgben","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了…「身体还是很重要的!」</p>\n<p>当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」</p>\n<blockquote>\n<p>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。</p>\n</blockquote>\n<p>不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。</p>\n<h3 id=\"Words\"><a class=\"header-anchor\" href=\"#Words\">¶</a>Words</h3>\n<h4 id=\"全称\"><a class=\"header-anchor\" href=\"#全称\">¶</a>全称</h4>\n<span id=\"more\"></span>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">Preempt  v 抢占、掠夺                                   --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">retake   v 重新获取「重新分配」                           --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">syscall  v 系统调用                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">decrement v 递减                                       --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">pretending  v 假装、伪装                                --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">contended  v 竞争                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">procresize  v 扩大                                     --&gt; /proc.<span class=\"keyword\">go</span> </span><br><span class=\"line\">corruption  n 腐败，译：损坏</span><br><span class=\"line\">infinite  adj 无限的  </span><br><span class=\"line\">reproduce v  复制</span><br><span class=\"line\">consists  v 组成</span><br><span class=\"line\">reproducer  v 复制</span><br><span class=\"line\">allocating v 分配</span><br><span class=\"line\">embed   v 嵌入 </span><br><span class=\"line\"></span><br><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">5</span>」</span><br><span class=\"line\">assembly  n  装配                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">amortizes  v  缓冲                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">25</span>」</span><br><span class=\"line\">guard  v. 看守\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">Alternatively  或者\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--&gt;  /runtime/rwmutex.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\">「later」</span><br><span class=\"line\">demonstrate  v 演示</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">instructions v  指示  ----&gt; (<span class=\"keyword\">go</span> github memory leak)[https:<span class=\"comment\">//github.com/golang/go/issues/40448]</span></span><br><span class=\"line\">reiterate    v  重申</span><br><span class=\"line\">procedure    n 程序</span><br><span class=\"line\">hypothesis   n 假设</span><br></pre></td></tr></table></figure>\n<h4 id=\"简写\"><a class=\"header-anchor\" href=\"#简写\">¶</a>简写</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">sysmon -&gt; system monitor 系统监控                                               /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">incidlelocked  --&gt; increment idle locked   增加空闲锁                           /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">sysmontick  --&gt; system monitor ticket   系统监控数量                            /proc.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了…「身体还是很重要的!」</p>\n<p>当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」</p>\n<blockquote>\n<p>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。</p>\n</blockquote>\n<p>不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。</p>\n<h3 id=\"Words\"><a class=\"header-anchor\" href=\"#Words\">¶</a>Words</h3>\n<h4 id=\"全称\"><a class=\"header-anchor\" href=\"#全称\">¶</a>全称</h4>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">Preempt  v 抢占、掠夺                                   --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">retake   v 重新获取「重新分配」                           --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">syscall  v 系统调用                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">decrement v 递减                                       --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">pretending  v 假装、伪装                                --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">contended  v 竞争                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">procresize  v 扩大                                     --&gt; /proc.<span class=\"keyword\">go</span> </span><br><span class=\"line\">corruption  n 腐败，译：损坏</span><br><span class=\"line\">infinite  adj 无限的  </span><br><span class=\"line\">reproduce v  复制</span><br><span class=\"line\">consists  v 组成</span><br><span class=\"line\">reproducer  v 复制</span><br><span class=\"line\">allocating v 分配</span><br><span class=\"line\">embed   v 嵌入 </span><br><span class=\"line\"></span><br><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">5</span>」</span><br><span class=\"line\">assembly  n  装配                                      --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">amortizes  v  缓冲                                     --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">25</span>」</span><br><span class=\"line\">guard  v. 看守\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t --&gt; /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">Alternatively  或者\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t--&gt;  /runtime/rwmutex.<span class=\"keyword\">go</span></span><br><span class=\"line\"></span><br><span class=\"line\">「later」</span><br><span class=\"line\">demonstrate  v 演示</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">instructions v  指示  ----&gt; (<span class=\"keyword\">go</span> github memory leak)[https:<span class=\"comment\">//github.com/golang/go/issues/40448]</span></span><br><span class=\"line\">reiterate    v  重申</span><br><span class=\"line\">procedure    n 程序</span><br><span class=\"line\">hypothesis   n 假设</span><br></pre></td></tr></table></figure>\n<h4 id=\"简写\"><a class=\"header-anchor\" href=\"#简写\">¶</a>简写</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">「<span class=\"number\">11</span>/<span class=\"number\">3</span>」</span><br><span class=\"line\">sysmon -&gt; system monitor 系统监控                                               /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">incidlelocked  --&gt; increment idle locked   增加空闲锁                           /proc.<span class=\"keyword\">go</span></span><br><span class=\"line\">sysmontick  --&gt; system monitor ticket   系统监控数量                            /proc.<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Feb 17 2021 14:45:07 GMT+0800 (中国标准时间)","title":"「16」go源码words归纳","path":"archives/425d5e80.html","eyeCatchImage":null,"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>好久没有更新了，不是不更新，最近感冒严重，一直没好，太影响身体了…「身体还是很重要的!」</p>\n<p>当然了，在生病期间也看了很多东西，更多的思考了许多：人生规划的、如何学习技术、后续的生涯发展之类的。「思考的方式很多种，不建议去生病了才去思考.」</p>\n<blockquote>\n<p>后续会更新一篇，主要是结合之前的成长和技术的壁垒来说说后续想怎么学，怎么发展，生涯规划吧。</p>\n</blockquote>\n<p>不扯了，这篇主要想记录一些词汇，主要还是在阅读Go源码中的一些词汇，毕竟英文有点差，再不积累就更差了。</p>\n<h3 id=\"Words\"><a class=\"header-anchor\" href=\"#Words\">¶</a>Words</h3>\n<h4 id=\"全称\"><a class=\"header-anchor\" href=\"#全称\">¶</a>全称</h4>","date":{"_isAMomentObject":true,"_i":"2020-11-03T02:45:07.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-03T02:45:07.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":994},{"title":"「17」chrome headless「截图/PDF/DOM...」","keywords":"chrome,chrome headless","abbrlink":"5544baea","date":"2020-11-10T11:25:32.000Z","updated":"2020-11-10T11:25:32.000Z","_content":"\n>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。\n然而事情并没有这么简单；\n\n### 难点：\n```go\n    1、服务器中不能装chrome\n    2、chrome必须打在docker里面\n    3、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。\n    4、不能启动新的服务\n```\n\n<!--more-->\n### 切入点：\n```go \ndocker && chrome\n```\n\n>so先去搜一把有没有现成的可用？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-193745.png)\n\n分析分析吧：\n\n* [browserless](https://github.com/browserless/chrome)\n* [puppeteer](https://github.com/puppeteer/puppeteer)\n* [prisma-archive](https://github.com/prisma-archive/chromeless)\n..........\n    * 适合启动服务，然后进行测试或者跑服务\n    * 入参数为url\n\n>所以上述的基本不符合需求，再寻找.....\n\n### [Zenika/alpine-chrome](https://github.com/Zenika/alpine-chrome)\n\n>看起来可行：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194452.png)\n\n\n这个经过验证总会有一个错误：\n```\n[1110/031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory\n[1110/031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031549.073431:ERROR:headless_shell.cc(591)] Writing to file code/ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED\n```\n\n文件没权限哦，尴尬了,再修正：\n>发现源码有一段添加了用户，汗，太搞了.\n\n[点击查看](https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194711.png)\n\n\n```\n很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,\n这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。\n\n最直接的，去掉就好了。\n\n果然去掉后，跑docker就可以了\n```\n\n[docker镜像地址](https://hub.docker.com/r/zenika/alpine-chrome)\n\n这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。\n\n\n### 再尝试「自己搞个docker images」\n\n>别人都能搞，为何我不可以勒\n\n### 分析：\n* 本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的\n* 那可以搞个linux系统，再装个chrome\n* 最后把字体装完就ok了\n* 最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。\n\n\n### 思路：\n* 1、搞个docker debain系统\n* 2、想办法把chrome装上\n* 3、在里面跑一个测试，看能否生成图片\n* 4、安装缺失的字体\n* 5、container跑起来\n* 6、导出container，再导入到本地的images；让container变成images\n* 7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来\n* 8、再把搞好的images导出来用就可以了。\n\n### 步骤：\n#### 1\n```\ndocker pull debian\n```\n\n#### 2/3/4/5\n```\n1、进入系统\ndocker exec -it XXXXX /bin/bash\n2、更新源\napt-get update\n3、下载wget\napt-get install wget\n4、下载chrome linux版本的\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n5、安装chrome\n dpkg -i ******.deb\n 解决依赖关系：\n    apt-get -f install\n6、跑一把发现汉字变问好「？」了\n7、安装缺失的字体\napt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy\n```\n\n#### 6导出container\n```\n1、导出container\ndocker export container_name > chrome.tar\n2、导入到images中\ndocker load < chrome.tar\n```\n\n#### 7自己搞Dockerfile,预留「RUN」接口\n\nDockerfile文件：\n```\n#这个是上一步导入的images\nFROM gogoowang/chrome:v1\nRUN mkdir -p /home\nWORKDIR /home\nENTRYPOINT [\"chrome\",\"--headless\",\"--disable-gpu\"]\n```\n\n>构建成镜像：docker build -t gogoo/chrome:v2 . \n\nPS:「/home」的含义就是这个images的工作目录是/home文件夹下面\n\n#### 8跑一把，收工\n\n### 注意点：\n#### PS-1\n```\n1、错误❌\ndocker container run -it --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot --hide-scrollbars /XXXX/XXXX.html\n2、正确\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了\n```\n\n#### PS-2\n\n```\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n1、关于这个-v的问题,后面就固定了，具体见Dockerfile中\n2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是/home下面了\n```\n\n\n### 优化后一键脚本\nDockerfile文件：\n```\nFROM debian\nRUN apt-get update \nRUN apt-get install -y wget \nRUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \nRUN dpkg -i google-chrome-stable_current_amd64.deb || true\nRUN apt-get -f -y install\nRUN apt-get install -y ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy\nRUN mkdir -p /home\nWORKDIR /home\nENTRYPOINT [\"/opt/google/chrome/chrome\",\"--headless\",\"--disable-gpu\"]\n```\n构建：\n>docker build -t google-chrome:latest .","source":"_posts/17-chrome headless.md","raw":"---\ntitle: 「17」chrome headless「截图/PDF/DOM...」\nkeywords: 'chrome,chrome headless'\ntags:\n  - chrome\n  - Day\nabbrlink: 5544baea\ndate: 2020-11-10 19:25:32\nupdated: 2020-11-10 19:25:32\n---\n\n>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。\n然而事情并没有这么简单；\n\n### 难点：\n```go\n    1、服务器中不能装chrome\n    2、chrome必须打在docker里面\n    3、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。\n    4、不能启动新的服务\n```\n\n<!--more-->\n### 切入点：\n```go \ndocker && chrome\n```\n\n>so先去搜一把有没有现成的可用？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-193745.png)\n\n分析分析吧：\n\n* [browserless](https://github.com/browserless/chrome)\n* [puppeteer](https://github.com/puppeteer/puppeteer)\n* [prisma-archive](https://github.com/prisma-archive/chromeless)\n..........\n    * 适合启动服务，然后进行测试或者跑服务\n    * 入参数为url\n\n>所以上述的基本不符合需求，再寻找.....\n\n### [Zenika/alpine-chrome](https://github.com/Zenika/alpine-chrome)\n\n>看起来可行：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194452.png)\n\n\n这个经过验证总会有一个错误：\n```\n[1110/031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory\n[1110/031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.\n[1110/031549.073431:ERROR:headless_shell.cc(591)] Writing to file code/ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED\n```\n\n文件没权限哦，尴尬了,再修正：\n>发现源码有一段添加了用户，汗，太搞了.\n\n[点击查看](https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194711.png)\n\n\n```\n很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,\n这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。\n\n最直接的，去掉就好了。\n\n果然去掉后，跑docker就可以了\n```\n\n[docker镜像地址](https://hub.docker.com/r/zenika/alpine-chrome)\n\n这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。\n\n\n### 再尝试「自己搞个docker images」\n\n>别人都能搞，为何我不可以勒\n\n### 分析：\n* 本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的\n* 那可以搞个linux系统，再装个chrome\n* 最后把字体装完就ok了\n* 最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。\n\n\n### 思路：\n* 1、搞个docker debain系统\n* 2、想办法把chrome装上\n* 3、在里面跑一个测试，看能否生成图片\n* 4、安装缺失的字体\n* 5、container跑起来\n* 6、导出container，再导入到本地的images；让container变成images\n* 7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来\n* 8、再把搞好的images导出来用就可以了。\n\n### 步骤：\n#### 1\n```\ndocker pull debian\n```\n\n#### 2/3/4/5\n```\n1、进入系统\ndocker exec -it XXXXX /bin/bash\n2、更新源\napt-get update\n3、下载wget\napt-get install wget\n4、下载chrome linux版本的\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n5、安装chrome\n dpkg -i ******.deb\n 解决依赖关系：\n    apt-get -f install\n6、跑一把发现汉字变问好「？」了\n7、安装缺失的字体\napt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy\n```\n\n#### 6导出container\n```\n1、导出container\ndocker export container_name > chrome.tar\n2、导入到images中\ndocker load < chrome.tar\n```\n\n#### 7自己搞Dockerfile,预留「RUN」接口\n\nDockerfile文件：\n```\n#这个是上一步导入的images\nFROM gogoowang/chrome:v1\nRUN mkdir -p /home\nWORKDIR /home\nENTRYPOINT [\"chrome\",\"--headless\",\"--disable-gpu\"]\n```\n\n>构建成镜像：docker build -t gogoo/chrome:v2 . \n\nPS:「/home」的含义就是这个images的工作目录是/home文件夹下面\n\n#### 8跑一把，收工\n\n### 注意点：\n#### PS-1\n```\n1、错误❌\ndocker container run -it --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot --hide-scrollbars /XXXX/XXXX.html\n2、正确\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了\n```\n\n#### PS-2\n\n```\ndocker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html\n\n1、关于这个-v的问题,后面就固定了，具体见Dockerfile中\n2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是/home下面了\n```\n\n\n### 优化后一键脚本\nDockerfile文件：\n```\nFROM debian\nRUN apt-get update \nRUN apt-get install -y wget \nRUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \nRUN dpkg -i google-chrome-stable_current_amd64.deb || true\nRUN apt-get -f -y install\nRUN apt-get install -y ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy\nRUN mkdir -p /home\nWORKDIR /home\nENTRYPOINT [\"/opt/google/chrome/chrome\",\"--headless\",\"--disable-gpu\"]\n```\n构建：\n>docker build -t google-chrome:latest .","slug":"17-chrome headless","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4o0015zfqxguoyd55p","content":"<blockquote>\n<p>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。<br>\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。<br>\n然而事情并没有这么简单；</p>\n</blockquote>\n<h3 id=\"难点：\"><a class=\"header-anchor\" href=\"#难点：\">¶</a>难点：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务器中不能装chrome</span><br><span class=\"line\"><span class=\"number\">2</span>、chrome必须打在docker里面</span><br><span class=\"line\"><span class=\"number\">3</span>、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。</span><br><span class=\"line\"><span class=\"number\">4</span>、不能启动新的服务</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"切入点：\"><a class=\"header-anchor\" href=\"#切入点：\">¶</a>切入点：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker &amp;&amp; chrome</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>so先去搜一把有没有现成的可用？</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-193745.png\" alt=\"\"></p>\n<p>分析分析吧：</p>\n<ul>\n<li><a href=\"https://github.com/browserless/chrome\">browserless</a></li>\n<li><a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a></li>\n<li><a href=\"https://github.com/prisma-archive/chromeless\">prisma-archive</a><br>\n…\n<ul>\n<li>适合启动服务，然后进行测试或者跑服务</li>\n<li>入参数为url</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所以上述的基本不符合需求，再寻找…</p>\n</blockquote>\n<h3 id=\"Zenika-alpine-chrome\"><a class=\"header-anchor\" href=\"#Zenika-alpine-chrome\">¶</a><a href=\"https://github.com/Zenika/alpine-chrome\">Zenika/alpine-chrome</a></h3>\n<blockquote>\n<p>看起来可行：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194452.png\" alt=\"\"></p>\n<p>这个经过验证总会有一个错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1110/031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory</span><br><span class=\"line\">[1110/031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110/031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110/031549.073431:ERROR:headless_shell.cc(591)] Writing to file code/ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED</span><br></pre></td></tr></table></figure>\n<p>文件没权限哦，尴尬了,再修正：</p>\n<blockquote>\n<p>发现源码有一段添加了用户，汗，太搞了.</p>\n</blockquote>\n<p><a href=\"https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38\">点击查看</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194711.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,</span><br><span class=\"line\">这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。</span><br><span class=\"line\"></span><br><span class=\"line\">最直接的，去掉就好了。</span><br><span class=\"line\"></span><br><span class=\"line\">果然去掉后，跑docker就可以了</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://hub.docker.com/r/zenika/alpine-chrome\">docker镜像地址</a></p>\n<p>这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。</p>\n<h3 id=\"再尝试「自己搞个docker-images」\"><a class=\"header-anchor\" href=\"#再尝试「自己搞个docker-images」\">¶</a>再尝试「自己搞个docker images」</h3>\n<blockquote>\n<p>别人都能搞，为何我不可以勒</p>\n</blockquote>\n<h3 id=\"分析：\"><a class=\"header-anchor\" href=\"#分析：\">¶</a>分析：</h3>\n<ul>\n<li>本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的</li>\n<li>那可以搞个linux系统，再装个chrome</li>\n<li>最后把字体装完就ok了</li>\n<li>最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。</li>\n</ul>\n<h3 id=\"思路：\"><a class=\"header-anchor\" href=\"#思路：\">¶</a>思路：</h3>\n<ul>\n<li>1、搞个docker debain系统</li>\n<li>2、想办法把chrome装上</li>\n<li>3、在里面跑一个测试，看能否生成图片</li>\n<li>4、安装缺失的字体</li>\n<li>5、container跑起来</li>\n<li>6、导出container，再导入到本地的images；让container变成images</li>\n<li>7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来</li>\n<li>8、再把搞好的images导出来用就可以了。</li>\n</ul>\n<h3 id=\"步骤：\"><a class=\"header-anchor\" href=\"#步骤：\">¶</a>步骤：</h3>\n<h4 id=\"1\"><a class=\"header-anchor\" href=\"#1\">¶</a>1</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull debian</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-4-5\"><a class=\"header-anchor\" href=\"#2-3-4-5\">¶</a>2/3/4/5</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、进入系统</span><br><span class=\"line\">docker exec -it XXXXX /bin/bash</span><br><span class=\"line\">2、更新源</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">3、下载wget</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">4、下载chrome linux版本的</span><br><span class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">5、安装chrome</span><br><span class=\"line\"> dpkg -i ******.deb</span><br><span class=\"line\"> 解决依赖关系：</span><br><span class=\"line\">    apt-get -f install</span><br><span class=\"line\">6、跑一把发现汉字变问好「？」了</span><br><span class=\"line\">7、安装缺失的字体</span><br><span class=\"line\">apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br></pre></td></tr></table></figure>\n<h4 id=\"6导出container\"><a class=\"header-anchor\" href=\"#6导出container\">¶</a>6导出container</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、导出container</span><br><span class=\"line\">docker export container_name &gt; chrome.tar</span><br><span class=\"line\">2、导入到images中</span><br><span class=\"line\">docker load &lt; chrome.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"7自己搞Dockerfile-预留「RUN」接口\"><a class=\"header-anchor\" href=\"#7自己搞Dockerfile-预留「RUN」接口\">¶</a>7自己搞Dockerfile,预留「RUN」接口</h4>\n<p>Dockerfile文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这个是上一步导入的images</span><br><span class=\"line\">FROM gogoowang/chrome:v1</span><br><span class=\"line\">RUN mkdir -p /home</span><br><span class=\"line\">WORKDIR /home</span><br><span class=\"line\">ENTRYPOINT [&quot;chrome&quot;,&quot;--headless&quot;,&quot;--disable-gpu&quot;]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>构建成镜像：docker build -t gogoo/chrome:v2 .</p>\n</blockquote>\n<p>PS:「/home」的含义就是这个images的工作目录是/home文件夹下面</p>\n<h4 id=\"8跑一把，收工\"><a class=\"header-anchor\" href=\"#8跑一把，收工\">¶</a>8跑一把，收工</h4>\n<h3 id=\"注意点：\"><a class=\"header-anchor\" href=\"#注意点：\">¶</a>注意点：</h3>\n<h4 id=\"PS-1\"><a class=\"header-anchor\" href=\"#PS-1\">¶</a>PS-1</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、错误❌</span><br><span class=\"line\">docker container run -it --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot --hide-scrollbars /XXXX/XXXX.html</span><br><span class=\"line\">2、正确</span><br><span class=\"line\">docker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了</span><br></pre></td></tr></table></figure>\n<h4 id=\"PS-2\"><a class=\"header-anchor\" href=\"#PS-2\">¶</a>PS-2</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">1、关于这个-v的问题,后面就固定了，具体见Dockerfile中</span><br><span class=\"line\">2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是/home下面了</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化后一键脚本\"><a class=\"header-anchor\" href=\"#优化后一键脚本\">¶</a>优化后一键脚本</h3>\n<p>Dockerfile文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian</span><br><span class=\"line\">RUN apt-get update </span><br><span class=\"line\">RUN apt-get install -y wget </span><br><span class=\"line\">RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb </span><br><span class=\"line\">RUN dpkg -i google-chrome-stable_current_amd64.deb || true</span><br><span class=\"line\">RUN apt-get -f -y install</span><br><span class=\"line\">RUN apt-get install -y ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br><span class=\"line\">RUN mkdir -p /home</span><br><span class=\"line\">WORKDIR /home</span><br><span class=\"line\">ENTRYPOINT [&quot;/opt/google/chrome/chrome&quot;,&quot;--headless&quot;,&quot;--disable-gpu&quot;]</span><br></pre></td></tr></table></figure>\n<p>构建：</p>\n<blockquote>\n<p>docker build -t google-chrome:latest .</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。<br>\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。<br>\n然而事情并没有这么简单；</p>\n</blockquote>\n<h3 id=\"难点：\"><a class=\"header-anchor\" href=\"#难点：\">¶</a>难点：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务器中不能装chrome</span><br><span class=\"line\"><span class=\"number\">2</span>、chrome必须打在docker里面</span><br><span class=\"line\"><span class=\"number\">3</span>、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。</span><br><span class=\"line\"><span class=\"number\">4</span>、不能启动新的服务</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"切入点：\"><a class=\"header-anchor\" href=\"#切入点：\">¶</a>切入点：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker &amp;&amp; chrome</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>so先去搜一把有没有现成的可用？</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-193745.png\" alt=\"\"></p>\n<p>分析分析吧：</p>\n<ul>\n<li><a href=\"https://github.com/browserless/chrome\">browserless</a></li>\n<li><a href=\"https://github.com/puppeteer/puppeteer\">puppeteer</a></li>\n<li><a href=\"https://github.com/prisma-archive/chromeless\">prisma-archive</a><br>\n…\n<ul>\n<li>适合启动服务，然后进行测试或者跑服务</li>\n<li>入参数为url</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>所以上述的基本不符合需求，再寻找…</p>\n</blockquote>\n<h3 id=\"Zenika-alpine-chrome\"><a class=\"header-anchor\" href=\"#Zenika-alpine-chrome\">¶</a><a href=\"https://github.com/Zenika/alpine-chrome\">Zenika/alpine-chrome</a></h3>\n<blockquote>\n<p>看起来可行：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194452.png\" alt=\"\"></p>\n<p>这个经过验证总会有一个错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1110/031547.366909:ERROR:bus.cc(393)] Failed to connect to the bus: Failed to connect to socket /var/run/dbus/system_bus_socket: No such file or directory</span><br><span class=\"line\">[1110/031547.367451:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110/031547.437879:WARNING:dns_config_service_posix.cc(342)] Failed to read DnsConfig.</span><br><span class=\"line\">[1110/031549.073431:ERROR:headless_shell.cc(591)] Writing to file code/ss.png was unsuccessful, could not open file: FILE_ERROR_ACCESS_DENIED</span><br></pre></td></tr></table></figure>\n<p>文件没权限哦，尴尬了,再修正：</p>\n<blockquote>\n<p>发现源码有一段添加了用户，汗，太搞了.</p>\n</blockquote>\n<p><a href=\"https://github.com/Zenika/alpine-chrome/blob/master/Dockerfile#L38\">点击查看</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-194711.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">很郁闷这个chrome用户干嘛的，如果真用这个，那得确定你跑的环境要允许你添加一个user出来，很明显不行,</span><br><span class=\"line\">这样导致整个alpine-chrome服务权限都是乱的「chrome用户的」,最明显的是无法读写文件，因为你这个add chrome没权限。</span><br><span class=\"line\"></span><br><span class=\"line\">最直接的，去掉就好了。</span><br><span class=\"line\"></span><br><span class=\"line\">果然去掉后，跑docker就可以了</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://hub.docker.com/r/zenika/alpine-chrome\">docker镜像地址</a></p>\n<p>这个是可以了，但是有一个新的问题，图像失真了，再去查github源码，坑那，压根没有装全文字库，只简单装了lib***的库。</p>\n<h3 id=\"再尝试「自己搞个docker-images」\"><a class=\"header-anchor\" href=\"#再尝试「自己搞个docker-images」\">¶</a>再尝试「自己搞个docker images」</h3>\n<blockquote>\n<p>别人都能搞，为何我不可以勒</p>\n</blockquote>\n<h3 id=\"分析：\"><a class=\"header-anchor\" href=\"#分析：\">¶</a>分析：</h3>\n<ul>\n<li>本地跑这个服务是ok的，那chrome就是依赖macos/linux系统的</li>\n<li>那可以搞个linux系统，再装个chrome</li>\n<li>最后把字体装完就ok了</li>\n<li>最后的最后，想办法直接可以用这个docker，不用启动服务，也就是说docker run之后有了结果，直接rm掉。</li>\n</ul>\n<h3 id=\"思路：\"><a class=\"header-anchor\" href=\"#思路：\">¶</a>思路：</h3>\n<ul>\n<li>1、搞个docker debain系统</li>\n<li>2、想办法把chrome装上</li>\n<li>3、在里面跑一个测试，看能否生成图片</li>\n<li>4、安装缺失的字体</li>\n<li>5、container跑起来</li>\n<li>6、导出container，再导入到本地的images；让container变成images</li>\n<li>7、自己搞个Dockerfile，把「RUN」接口留出来，方便可以直接跑起来</li>\n<li>8、再把搞好的images导出来用就可以了。</li>\n</ul>\n<h3 id=\"步骤：\"><a class=\"header-anchor\" href=\"#步骤：\">¶</a>步骤：</h3>\n<h4 id=\"1\"><a class=\"header-anchor\" href=\"#1\">¶</a>1</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull debian</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-3-4-5\"><a class=\"header-anchor\" href=\"#2-3-4-5\">¶</a>2/3/4/5</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、进入系统</span><br><span class=\"line\">docker exec -it XXXXX /bin/bash</span><br><span class=\"line\">2、更新源</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\">3、下载wget</span><br><span class=\"line\">apt-get install wget</span><br><span class=\"line\">4、下载chrome linux版本的</span><br><span class=\"line\">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class=\"line\">5、安装chrome</span><br><span class=\"line\"> dpkg -i ******.deb</span><br><span class=\"line\"> 解决依赖关系：</span><br><span class=\"line\">    apt-get -f install</span><br><span class=\"line\">6、跑一把发现汉字变问好「？」了</span><br><span class=\"line\">7、安装缺失的字体</span><br><span class=\"line\">apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br></pre></td></tr></table></figure>\n<h4 id=\"6导出container\"><a class=\"header-anchor\" href=\"#6导出container\">¶</a>6导出container</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、导出container</span><br><span class=\"line\">docker export container_name &gt; chrome.tar</span><br><span class=\"line\">2、导入到images中</span><br><span class=\"line\">docker load &lt; chrome.tar</span><br></pre></td></tr></table></figure>\n<h4 id=\"7自己搞Dockerfile-预留「RUN」接口\"><a class=\"header-anchor\" href=\"#7自己搞Dockerfile-预留「RUN」接口\">¶</a>7自己搞Dockerfile,预留「RUN」接口</h4>\n<p>Dockerfile文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#这个是上一步导入的images</span><br><span class=\"line\">FROM gogoowang/chrome:v1</span><br><span class=\"line\">RUN mkdir -p /home</span><br><span class=\"line\">WORKDIR /home</span><br><span class=\"line\">ENTRYPOINT [&quot;chrome&quot;,&quot;--headless&quot;,&quot;--disable-gpu&quot;]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>构建成镜像：docker build -t gogoo/chrome:v2 .</p>\n</blockquote>\n<p>PS:「/home」的含义就是这个images的工作目录是/home文件夹下面</p>\n<h4 id=\"8跑一把，收工\"><a class=\"header-anchor\" href=\"#8跑一把，收工\">¶</a>8跑一把，收工</h4>\n<h3 id=\"注意点：\"><a class=\"header-anchor\" href=\"#注意点：\">¶</a>注意点：</h3>\n<h4 id=\"PS-1\"><a class=\"header-anchor\" href=\"#PS-1\">¶</a>PS-1</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、错误❌</span><br><span class=\"line\">docker container run -it --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot --hide-scrollbars /XXXX/XXXX.html</span><br><span class=\"line\">2、正确</span><br><span class=\"line\">docker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">少一个 -t，这个 -t：再搞一个临时的TTy来跑程序，既然是后台跑的，那就没必要了</span><br></pre></td></tr></table></figure>\n<h4 id=\"PS-2\"><a class=\"header-anchor\" href=\"#PS-2\">¶</a>PS-2</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker container run -i --rm -v /tmp:/home gogoowang/chrome:v1 --no-sandbox --screenshot=/home/xx.png --hide-scrollbars /XXXX/XXXX.html</span><br><span class=\"line\"></span><br><span class=\"line\">1、关于这个-v的问题,后面就固定了，具体见Dockerfile中</span><br><span class=\"line\">2、--screenshot路径问题，既然是docker镜像，那就得填个docker镜像中的地址，那就是/home下面了</span><br></pre></td></tr></table></figure>\n<h3 id=\"优化后一键脚本\"><a class=\"header-anchor\" href=\"#优化后一键脚本\">¶</a>优化后一键脚本</h3>\n<p>Dockerfile文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM debian</span><br><span class=\"line\">RUN apt-get update </span><br><span class=\"line\">RUN apt-get install -y wget </span><br><span class=\"line\">RUN wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb </span><br><span class=\"line\">RUN dpkg -i google-chrome-stable_current_amd64.deb || true</span><br><span class=\"line\">RUN apt-get -f -y install</span><br><span class=\"line\">RUN apt-get install -y ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy</span><br><span class=\"line\">RUN mkdir -p /home</span><br><span class=\"line\">WORKDIR /home</span><br><span class=\"line\">ENTRYPOINT [&quot;/opt/google/chrome/chrome&quot;,&quot;--headless&quot;,&quot;--disable-gpu&quot;]</span><br></pre></td></tr></table></figure>\n<p>构建：</p>\n<blockquote>\n<p>docker build -t google-chrome:latest .</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-193745.png","popularPost_tmp_gaData":{"updated":"Tue Nov 10 2020 19:25:32 GMT+0800 (中国标准时间)","title":"「17」chrome headless「截图/PDF/DOM...」","path":"archives/5544baea.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20201110-193745.png","excerpt":"<blockquote>\n<p>最近在搞一个需求：html「文件」渲染成png/jpg；chrome不能装在服务器中，可以打成docker镜像。<br>\n说到这个，很多人肯定说很容易啊，chrome headless有现成的，直接用，它是不香么。<br>\n然而事情并没有这么简单；</p>\n</blockquote>\n<h3 id=\"难点：\"><a class=\"header-anchor\" href=\"#难点：\">¶</a>难点：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、服务器中不能装chrome</span><br><span class=\"line\"><span class=\"number\">2</span>、chrome必须打在docker里面</span><br><span class=\"line\"><span class=\"number\">3</span>、渲染效果要和在本地效果一样：图片不能丢失字体，不能失真。</span><br><span class=\"line\"><span class=\"number\">4</span>、不能启动新的服务</span><br></pre></td></tr></table></figure>","date":{"_isAMomentObject":true,"_i":"2020-11-10T11:25:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-10T11:25:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3128},{"title":"「18」GPM 初识/设计","date":"2020-11-14T05:09:17.000Z","updated":"2020-11-14T05:09:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","top":false,"abbrlink":"b885f9f7","_content":"\n### 前序\n\n学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。\n\nGPM调度算是在Go中比较经典的了，有必要深入学习下。\n\n>[Go GPM设计文档](https://golang.org/s/go11sched)\n\n### GPM设计的由来\n\n一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：\n\n<!--more-->\n\n#### 现有的问题：\n```\n1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).\n2. Goroutine (G) hand-off (G.nextg). Worker threads (M's) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.\n3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M's, while they need to be associated only with M's running Go code (an M blocked inside of syscall does not need mcache). A ratio between M's running Go code and all M's can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.\n4. Aggressive thread blocking/unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.\n\n\n1、单一的全局锁和集中的状态.此锁所有g的操作。\n2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。\n3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。\n4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。\n\n```\n\n\n### 设计改变\n\n>以前的设计：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-1.png)\n\n>新增Processor\n\n ![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-2.png)\n\n\n ### 实现计划\n\n ```\n1. Introduce the P struct (empty for now); implement allp/idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.\n2. Move G freelist to P.\n3. Move mcache to P.\n4. Move stackalloc to P.\n5. Move ncgocall/gcstats to P.\n// work-steal工作窃取模式,仍然在全局锁下。\n6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.\n\n// 移除全局锁，实现分散的检测。\n7. Remove global mutex, implement distributed termination detection, LockOSThread.\n\n// 实现自旋替代提示锁「普通锁」。\n8. Implement spinning instead of prompt blocking/unblocking.\nThe plan may turn out to not work, there are a lot of unexplored details.\n ```\n\n ### Potential Improvement\n\n```\n# 后进先出计划。提供公平和优雅的处理g。\n1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.\n\n# 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。\n2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.\n\n# 更好的G-P。尝试入队未锁定的G到P，从上一次运行。\n4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.\n\n# 更好的P-M。尝试执行p，在同样的M最后一次运行。\n5. Better locality of P-to-M. Try to execute P on the same M it was last running.\n\n# M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。\n6. Throttling of M creation. The scheduler can be easily forced to create thousands of M's per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.\n\n```\n\n\n### 参考：\n\n* [GPM g11设计文档](https://golang.org/s/go11scheds)\n\n* [work steal模式](http://supertech.csail.mit.edu/papers/steal.pdf)","source":"_posts/18-GPM初识.md","raw":"---\ntitle: '「18」GPM 初识/设计'\ndate: '2020/11/14 13:09:17'\nupdated: '2020/11/14 13:09:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntop: false\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: b885f9f7\n---\n\n### 前序\n\n学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。\n\nGPM调度算是在Go中比较经典的了，有必要深入学习下。\n\n>[Go GPM设计文档](https://golang.org/s/go11sched)\n\n### GPM设计的由来\n\n一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：\n\n<!--more-->\n\n#### 现有的问题：\n```\n1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).\n2. Goroutine (G) hand-off (G.nextg). Worker threads (M's) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.\n3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M's, while they need to be associated only with M's running Go code (an M blocked inside of syscall does not need mcache). A ratio between M's running Go code and all M's can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.\n4. Aggressive thread blocking/unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.\n\n\n1、单一的全局锁和集中的状态.此锁所有g的操作。\n2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。\n3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。\n4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。\n\n```\n\n\n### 设计改变\n\n>以前的设计：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-1.png)\n\n>新增Processor\n\n ![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-2.png)\n\n\n ### 实现计划\n\n ```\n1. Introduce the P struct (empty for now); implement allp/idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.\n2. Move G freelist to P.\n3. Move mcache to P.\n4. Move stackalloc to P.\n5. Move ncgocall/gcstats to P.\n// work-steal工作窃取模式,仍然在全局锁下。\n6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.\n\n// 移除全局锁，实现分散的检测。\n7. Remove global mutex, implement distributed termination detection, LockOSThread.\n\n// 实现自旋替代提示锁「普通锁」。\n8. Implement spinning instead of prompt blocking/unblocking.\nThe plan may turn out to not work, there are a lot of unexplored details.\n ```\n\n ### Potential Improvement\n\n```\n# 后进先出计划。提供公平和优雅的处理g。\n1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.\n\n# 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。\n2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.\n\n# 更好的G-P。尝试入队未锁定的G到P，从上一次运行。\n4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.\n\n# 更好的P-M。尝试执行p，在同样的M最后一次运行。\n5. Better locality of P-to-M. Try to execute P on the same M it was last running.\n\n# M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。\n6. Throttling of M creation. The scheduler can be easily forced to create thousands of M's per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.\n\n```\n\n\n### 参考：\n\n* [GPM g11设计文档](https://golang.org/s/go11scheds)\n\n* [work steal模式](http://supertech.csail.mit.edu/papers/steal.pdf)","slug":"18-GPM初识","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4p0018zfqx8lhf7dv0","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。</p>\n<p>GPM调度算是在Go中比较经典的了，有必要深入学习下。</p>\n<blockquote>\n<p><a href=\"https://golang.org/s/go11sched\">Go GPM设计文档</a></p>\n</blockquote>\n<h3 id=\"GPM设计的由来\"><a class=\"header-anchor\" href=\"#GPM设计的由来\">¶</a>GPM设计的由来</h3>\n<p>一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：</p>\n<span id=\"more\"></span>\n<h4 id=\"现有的问题：\"><a class=\"header-anchor\" href=\"#现有的问题：\">¶</a>现有的问题：</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).</span><br><span class=\"line\">2. Goroutine (G) hand-off (G.nextg). Worker threads (M&#x27;s) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.</span><br><span class=\"line\">3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M&#x27;s, while they need to be associated only with M&#x27;s running Go code (an M blocked inside of syscall does not need mcache). A ratio between M&#x27;s running Go code and all M&#x27;s can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.</span><br><span class=\"line\">4. Aggressive thread blocking/unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1、单一的全局锁和集中的状态.此锁所有g的操作。</span><br><span class=\"line\">2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。</span><br><span class=\"line\">3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。</span><br><span class=\"line\">4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"设计改变\"><a class=\"header-anchor\" href=\"#设计改变\">¶</a>设计改变</h3>\n<blockquote>\n<p>以前的设计：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-1.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>新增Processor</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-2.png\" alt=\"\"></p>\n<h3 id=\"实现计划\"><a class=\"header-anchor\" href=\"#实现计划\">¶</a>实现计划</h3>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Introduce the P struct (empty for now); implement allp/idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.</span><br><span class=\"line\">2. Move G freelist to P.</span><br><span class=\"line\">3. Move mcache to P.</span><br><span class=\"line\">4. Move stackalloc to P.</span><br><span class=\"line\">5. Move ncgocall/gcstats to P.</span><br><span class=\"line\">// work-steal工作窃取模式,仍然在全局锁下。</span><br><span class=\"line\">6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.</span><br><span class=\"line\"></span><br><span class=\"line\">// 移除全局锁，实现分散的检测。</span><br><span class=\"line\">7. Remove global mutex, implement distributed termination detection, LockOSThread.</span><br><span class=\"line\"></span><br><span class=\"line\">// 实现自旋替代提示锁「普通锁」。</span><br><span class=\"line\">8. Implement spinning instead of prompt blocking/unblocking.</span><br><span class=\"line\">The plan may turn out to not work, there are a lot of unexplored details.</span><br></pre></td></tr></table></figure>\n<h3 id=\"Potential-Improvement\"><a class=\"header-anchor\" href=\"#Potential-Improvement\">¶</a>Potential Improvement</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 后进先出计划。提供公平和优雅的处理g。</span><br><span class=\"line\">1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.</span><br><span class=\"line\"></span><br><span class=\"line\"># 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。</span><br><span class=\"line\">2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的G-P。尝试入队未锁定的G到P，从上一次运行。</span><br><span class=\"line\">4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的P-M。尝试执行p，在同样的M最后一次运行。</span><br><span class=\"line\">5. Better locality of P-to-M. Try to execute P on the same M it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。</span><br><span class=\"line\">6. Throttling of M creation. The scheduler can be easily forced to create thousands of M&#x27;s per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h3>\n<ul>\n<li>\n<p><a href=\"https://golang.org/s/go11scheds\">GPM g11设计文档</a></p>\n</li>\n<li>\n<p><a href=\"http://supertech.csail.mit.edu/papers/steal.pdf\">work steal模式</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。</p>\n<p>GPM调度算是在Go中比较经典的了，有必要深入学习下。</p>\n<blockquote>\n<p><a href=\"https://golang.org/s/go11sched\">Go GPM设计文档</a></p>\n</blockquote>\n<h3 id=\"GPM设计的由来\"><a class=\"header-anchor\" href=\"#GPM设计的由来\">¶</a>GPM设计的由来</h3>\n<p>一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：</p>","more":"<h4 id=\"现有的问题：\"><a class=\"header-anchor\" href=\"#现有的问题：\">¶</a>现有的问题：</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Single global mutex (Sched.Lock) and centralized state. The mutex protects all goroutine-related operations (creation, completion, rescheduling, etc).</span><br><span class=\"line\">2. Goroutine (G) hand-off (G.nextg). Worker threads (M&#x27;s) frequently hand-off runnable goroutines between each other, this may lead to increased latencies and additional overheads. Every M must be able to execute any runnable G, in particular the M that just created the G.</span><br><span class=\"line\">3. Per-M memory cache (M.mcache). Memory cache and other caches (stack alloc) are associated with all M&#x27;s, while they need to be associated only with M&#x27;s running Go code (an M blocked inside of syscall does not need mcache). A ratio between M&#x27;s running Go code and all M&#x27;s can be as high as 1:100. This leads to excessive resource consumption (each MCache can suck up up to 2M) and poor data locality.</span><br><span class=\"line\">4. Aggressive thread blocking/unblocking. In presence of syscalls worker threads are frequently blocked and unblocked. This adds a lot of overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1、单一的全局锁和集中的状态.此锁所有g的操作。</span><br><span class=\"line\">2、g退出。工作中的M频繁的交出正在running的g，导致延迟增加和额外的负载。每个M执行任何g，尤其是M自身创建的g。</span><br><span class=\"line\">3、M的内存缓存问题。   内存缓存和其它的缓存关联这所有的M，当他们需要关联M来running code时。比率显示M运行的code和所有M的呈1:100。导致很多资源的浪费和内存的贫瘠。</span><br><span class=\"line\">4、侵略性的加锁，在系统线程频繁的加锁和解锁。这样会造成很大的负载。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"设计改变\"><a class=\"header-anchor\" href=\"#设计改变\">¶</a>设计改变</h3>\n<blockquote>\n<p>以前的设计：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-1.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>新增Processor</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-2.png\" alt=\"\"></p>\n<h3 id=\"实现计划\"><a class=\"header-anchor\" href=\"#实现计划\">¶</a>实现计划</h3>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Introduce the P struct (empty for now); implement allp/idlep containers (idlep is mutex-protected for starters); associate a P with M running Go code. Global mutex and atomic state is still preserved.</span><br><span class=\"line\">2. Move G freelist to P.</span><br><span class=\"line\">3. Move mcache to P.</span><br><span class=\"line\">4. Move stackalloc to P.</span><br><span class=\"line\">5. Move ncgocall/gcstats to P.</span><br><span class=\"line\">// work-steal工作窃取模式,仍然在全局锁下。</span><br><span class=\"line\">6. Decentralize run queue, implement work-stealing. Eliminate G hand off. Still under global mutex.</span><br><span class=\"line\"></span><br><span class=\"line\">// 移除全局锁，实现分散的检测。</span><br><span class=\"line\">7. Remove global mutex, implement distributed termination detection, LockOSThread.</span><br><span class=\"line\"></span><br><span class=\"line\">// 实现自旋替代提示锁「普通锁」。</span><br><span class=\"line\">8. Implement spinning instead of prompt blocking/unblocking.</span><br><span class=\"line\">The plan may turn out to not work, there are a lot of unexplored details.</span><br></pre></td></tr></table></figure>\n<h3 id=\"Potential-Improvement\"><a class=\"header-anchor\" href=\"#Potential-Improvement\">¶</a>Potential Improvement</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 后进先出计划。提供公平和优雅的处理g。</span><br><span class=\"line\">1. Try out LIFO scheduling, this will improve locality. However, it still must provide some degree of fairness and gracefully handle yielding goroutines.</span><br><span class=\"line\"></span><br><span class=\"line\"># 不分配内存和栈空间，直到g跑起来。对于一个新创建的g，需要下面几个函数。 这将创建to完成伴随着较低内存的负载。</span><br><span class=\"line\">2. Do not allocate G and stack until the goroutine first runs. For a newly created goroutine we need just callerpc, fn, narg, nret and args, that is, about 6 words. This will allow to create a lot of running-to-completion goroutines with significantly lower memory overhead.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的G-P。尝试入队未锁定的G到P，从上一次运行。</span><br><span class=\"line\">4. Better locality of G-to-P. Try to enqueue an unblocked G to a P on which it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># 更好的P-M。尝试执行p，在同样的M最后一次运行。</span><br><span class=\"line\">5. Better locality of P-to-M. Try to execute P on the same M it was last running.</span><br><span class=\"line\"></span><br><span class=\"line\"># M限流创建。调度器创建上千哥M在毫秒之间，直到OS拒绝创建更多的thread。M必须立刻创建，最多创建k*GOMAXPROCS,后续新的M会通过定时器创建。</span><br><span class=\"line\">6. Throttling of M creation. The scheduler can be easily forced to create thousands of M&#x27;s per second until OS refuses to create more threads. M’s must be created promptly up to k*GOMAXPROCS, after that new M’s may added by a timer.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h3>\n<ul>\n<li>\n<p><a href=\"https://golang.org/s/go11scheds\">GPM g11设计文档</a></p>\n</li>\n<li>\n<p><a href=\"http://supertech.csail.mit.edu/papers/steal.pdf\">work steal模式</a></p>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-1.png","popularPost_tmp_gaData":{"updated":"Sat Nov 14 2020 13:09:17 GMT+0800 (中国标准时间)","title":"「18」GPM 初识/设计","path":"archives/b885f9f7.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-1.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>学go有一段时间了，最近总感觉忙碌无为，也该总结下前段时间读源码的一些心得和体会了。</p>\n<p>GPM调度算是在Go中比较经典的了，有必要深入学习下。</p>\n<blockquote>\n<p><a href=\"https://golang.org/s/go11sched\">Go GPM设计文档</a></p>\n</blockquote>\n<h3 id=\"GPM设计的由来\"><a class=\"header-anchor\" href=\"#GPM设计的由来\">¶</a>GPM设计的由来</h3>\n<p>一个好的设计，总会伴随发现现有的问题，在解决的基础上考虑场景并提高扩展性，先来了解下Go为何要重新设计GPM这个模型：</p>","date":{"_isAMomentObject":true,"_i":"2020-11-14T05:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-14T05:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2832},{"title":"「19」GPM 调度流程","date":"2020-11-16T13:09:17.000Z","updated":"2020-11-16T13:09:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"5c6a362f","_content":"\n工欲善其事，必先知其所以然......\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.\n\n### 函数& 变量初识\n>[challenge]: 以下多少是一看就知道在GPM中作用的?\n\n<!--more-->\n\n>go version: 1.14.3\n\n#### 函数\n\n> /proc.go\n* main\n* sysmon\n* findrunnable\n* gopark「1.1」\n* gosched 「1.2」\n* mstart\n* wakep\n* schedule\n* cpuinit\n* schedinit\n* ready\n* readgstatus\n* startm\n* pollWork\n* injectglist\n* park_m\n* goyield\n* retake\n* globrunqput\n* globrunqputbatch\n* globrunqputhead\n\n#### 变量\n\n> /proc.go\n* m0\n* g0\n* allgs\n* allglock\n\n\n> /runtime2.go\n* g\n* p\n* m\n* allglen\n* allm\n* allp\n* allpLock\n* gomaxprocs\n* sched\n\n\n\n> /runtime2.go 常量\n* _Grunnable/_Grunning/_Gwaiting.....\n\n### 上述这些函数/变量/常量 what？\n\n写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：\n\n* GPM为何会有这么多的状态\n* 这些状态之间是如何配合和协调的\n* 著名的工作偷取「P」是怎么操作的\n* 如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」\n\n### 切入点\n* main:入口函数\n* sysmon：监控调度线程\n* schedule：真实的调度器逻辑\n* m0/g0：特殊的存在体\n\n\n### 如何开始？\n\n>简单点，从main开始.\n\n\n### 瞎扯\n\n```\n看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，\n更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。\n\n考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。\n```\n\n### 未完待续.","source":"_posts/19-GPM调度流程.md","raw":"---\ntitle: 「19」GPM 调度流程\ndate: '2020/11/16 21:09:17'\nupdated: '2020/11/16 21:09:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: 5c6a362f\n---\n\n工欲善其事，必先知其所以然......\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.\n\n### 函数& 变量初识\n>[challenge]: 以下多少是一看就知道在GPM中作用的?\n\n<!--more-->\n\n>go version: 1.14.3\n\n#### 函数\n\n> /proc.go\n* main\n* sysmon\n* findrunnable\n* gopark「1.1」\n* gosched 「1.2」\n* mstart\n* wakep\n* schedule\n* cpuinit\n* schedinit\n* ready\n* readgstatus\n* startm\n* pollWork\n* injectglist\n* park_m\n* goyield\n* retake\n* globrunqput\n* globrunqputbatch\n* globrunqputhead\n\n#### 变量\n\n> /proc.go\n* m0\n* g0\n* allgs\n* allglock\n\n\n> /runtime2.go\n* g\n* p\n* m\n* allglen\n* allm\n* allp\n* allpLock\n* gomaxprocs\n* sched\n\n\n\n> /runtime2.go 常量\n* _Grunnable/_Grunning/_Gwaiting.....\n\n### 上述这些函数/变量/常量 what？\n\n写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：\n\n* GPM为何会有这么多的状态\n* 这些状态之间是如何配合和协调的\n* 著名的工作偷取「P」是怎么操作的\n* 如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」\n\n### 切入点\n* main:入口函数\n* sysmon：监控调度线程\n* schedule：真实的调度器逻辑\n* m0/g0：特殊的存在体\n\n\n### 如何开始？\n\n>简单点，从main开始.\n\n\n### 瞎扯\n\n```\n看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，\n更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。\n\n考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。\n```\n\n### 未完待续.","slug":"19-GPM调度流程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4p001azfqx19i3d46l","content":"<p>工欲善其事，必先知其所以然…<br>\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.</p>\n<h3 id=\"函数-变量初识\"><a class=\"header-anchor\" href=\"#函数-变量初识\">¶</a>函数&amp; 变量初识</h3>\n<blockquote></blockquote>\n<span id=\"more\"></span>\n<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h4 id=\"函数\"><a class=\"header-anchor\" href=\"#函数\">¶</a>函数</h4>\n<blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>main</li>\n<li>sysmon</li>\n<li>findrunnable</li>\n<li>gopark「1.1」</li>\n<li>gosched 「1.2」</li>\n<li>mstart</li>\n<li>wakep</li>\n<li>schedule</li>\n<li>cpuinit</li>\n<li>schedinit</li>\n<li>ready</li>\n<li>readgstatus</li>\n<li>startm</li>\n<li>pollWork</li>\n<li>injectglist</li>\n<li>park_m</li>\n<li>goyield</li>\n<li>retake</li>\n<li>globrunqput</li>\n<li>globrunqputbatch</li>\n<li>globrunqputhead</li>\n</ul>\n<h4 id=\"变量\"><a class=\"header-anchor\" href=\"#变量\">¶</a>变量</h4>\n<blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>m0</li>\n<li>g0</li>\n<li>allgs</li>\n<li>allglock</li>\n</ul>\n<blockquote>\n<p>/runtime2.go</p>\n</blockquote>\n<ul>\n<li>g</li>\n<li>p</li>\n<li>m</li>\n<li>allglen</li>\n<li>allm</li>\n<li>allp</li>\n<li>allpLock</li>\n<li>gomaxprocs</li>\n<li>sched</li>\n</ul>\n<blockquote>\n<p>/runtime2.go 常量</p>\n</blockquote>\n<ul>\n<li>_Grunnable/_Grunning/_Gwaiting…</li>\n</ul>\n<h3 id=\"上述这些函数-变量-常量-what？\"><a class=\"header-anchor\" href=\"#上述这些函数-变量-常量-what？\">¶</a>上述这些函数/变量/常量 what？</h3>\n<p>写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：</p>\n<ul>\n<li>GPM为何会有这么多的状态</li>\n<li>这些状态之间是如何配合和协调的</li>\n<li>著名的工作偷取「P」是怎么操作的</li>\n<li>如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」</li>\n</ul>\n<h3 id=\"切入点\"><a class=\"header-anchor\" href=\"#切入点\">¶</a>切入点</h3>\n<ul>\n<li>main:入口函数</li>\n<li>sysmon：监控调度线程</li>\n<li>schedule：真实的调度器逻辑</li>\n<li>m0/g0：特殊的存在体</li>\n</ul>\n<h3 id=\"如何开始？\"><a class=\"header-anchor\" href=\"#如何开始？\">¶</a>如何开始？</h3>\n<blockquote>\n<p>简单点，从main开始.</p>\n</blockquote>\n<h3 id=\"瞎扯\"><a class=\"header-anchor\" href=\"#瞎扯\">¶</a>瞎扯</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，</span><br><span class=\"line\">更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。</span><br><span class=\"line\"></span><br><span class=\"line\">考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。</span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a class=\"header-anchor\" href=\"#未完待续\">¶</a>未完待续.</h3>\n","site":{"data":{}},"excerpt":"<p>工欲善其事，必先知其所以然…<br>\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.</p>\n<h3 id=\"函数-变量初识\"><a class=\"header-anchor\" href=\"#函数-变量初识\">¶</a>函数&amp; 变量初识</h3>\n<blockquote></blockquote>","more":"<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h4 id=\"函数\"><a class=\"header-anchor\" href=\"#函数\">¶</a>函数</h4>\n<blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>main</li>\n<li>sysmon</li>\n<li>findrunnable</li>\n<li>gopark「1.1」</li>\n<li>gosched 「1.2」</li>\n<li>mstart</li>\n<li>wakep</li>\n<li>schedule</li>\n<li>cpuinit</li>\n<li>schedinit</li>\n<li>ready</li>\n<li>readgstatus</li>\n<li>startm</li>\n<li>pollWork</li>\n<li>injectglist</li>\n<li>park_m</li>\n<li>goyield</li>\n<li>retake</li>\n<li>globrunqput</li>\n<li>globrunqputbatch</li>\n<li>globrunqputhead</li>\n</ul>\n<h4 id=\"变量\"><a class=\"header-anchor\" href=\"#变量\">¶</a>变量</h4>\n<blockquote>\n<p>/proc.go</p>\n</blockquote>\n<ul>\n<li>m0</li>\n<li>g0</li>\n<li>allgs</li>\n<li>allglock</li>\n</ul>\n<blockquote>\n<p>/runtime2.go</p>\n</blockquote>\n<ul>\n<li>g</li>\n<li>p</li>\n<li>m</li>\n<li>allglen</li>\n<li>allm</li>\n<li>allp</li>\n<li>allpLock</li>\n<li>gomaxprocs</li>\n<li>sched</li>\n</ul>\n<blockquote>\n<p>/runtime2.go 常量</p>\n</blockquote>\n<ul>\n<li>_Grunnable/_Grunning/_Gwaiting…</li>\n</ul>\n<h3 id=\"上述这些函数-变量-常量-what？\"><a class=\"header-anchor\" href=\"#上述这些函数-变量-常量-what？\">¶</a>上述这些函数/变量/常量 what？</h3>\n<p>写这么多，肯定不是简单的从源码仓库里面超出来，这些是一些比较重要的函数，当然还有很多没有罗列，这里主要想记录，也是思考的点：</p>\n<ul>\n<li>GPM为何会有这么多的状态</li>\n<li>这些状态之间是如何配合和协调的</li>\n<li>著名的工作偷取「P」是怎么操作的</li>\n<li>如果让你设计，你应该会怎么设计GPM这个调度的过程「🏁重点」</li>\n</ul>\n<h3 id=\"切入点\"><a class=\"header-anchor\" href=\"#切入点\">¶</a>切入点</h3>\n<ul>\n<li>main:入口函数</li>\n<li>sysmon：监控调度线程</li>\n<li>schedule：真实的调度器逻辑</li>\n<li>m0/g0：特殊的存在体</li>\n</ul>\n<h3 id=\"如何开始？\"><a class=\"header-anchor\" href=\"#如何开始？\">¶</a>如何开始？</h3>\n<blockquote>\n<p>简单点，从main开始.</p>\n</blockquote>\n<h3 id=\"瞎扯\"><a class=\"header-anchor\" href=\"#瞎扯\">¶</a>瞎扯</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">看了很长时间的go源码了，觉得一个好的设计，从来不是简单的学习别人的源码，</span><br><span class=\"line\">更多的是学习源码的设计思路和当时设计时是基于哪种场景下的。</span><br><span class=\"line\"></span><br><span class=\"line\">考虑更多的场景，有没有其它的设计思路，可能没有现有的设计更出色，但更加适合别的场景。</span><br></pre></td></tr></table></figure>\n<h3 id=\"未完待续\"><a class=\"header-anchor\" href=\"#未完待续\">¶</a>未完待续.</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Nov 16 2020 21:09:17 GMT+0800 (中国标准时间)","title":"「19」GPM 调度流程","path":"archives/5c6a362f.html","eyeCatchImage":null,"excerpt":"<p>工欲善其事，必先知其所以然…<br>\n学习GPM调度之前，先看下源码部分的准备工作吧，不然一脸茫然的看源码，基本不会有太多的收获.</p>\n<h3 id=\"函数-变量初识\"><a class=\"header-anchor\" href=\"#函数-变量初识\">¶</a>函数&amp; 变量初识</h3>\n<blockquote></blockquote>","date":{"_isAMomentObject":true,"_i":"2020-11-16T13:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-16T13:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":756},{"title":"「2」vscode 常见插件及其使用","date":"2020-08-31T05:09:17.000Z","updated":"2020-08-31T05:09:17.000Z","keywords":"vscode,vscode插件。","abbrlink":"8cf3cbca","_content":"\n>vscode中一些常见的坑点...\n\n### 插件\n\n\n#### 样式方面：\n\n* Indent Rainbo\n* Bracket Pair Colorizer # 括号颜色\n* Chinese Language       # 汉化\n<!-- more -->\n\n#### 功能方面\n\n* Git Blame              # Git提交查看\n* Code Spell Checker     # 拼写检查\n* Reload                 # 重新加载\n* Todo Tree              # 代办事项\n* Settings Sync          # 设置同步","source":"_posts/2-vscode-常见问题.md","raw":"---\ntitle: 「2」vscode 常见插件及其使用\ndate: '2020/08/31 13:09:17'\nupdated: '2020/08/31 13:09:17'\nkeywords: 'vscode,vscode插件。'\ntags:\n  - vscode\n  - 工具\nabbrlink: 8cf3cbca\n---\n\n>vscode中一些常见的坑点...\n\n### 插件\n\n\n#### 样式方面：\n\n* Indent Rainbo\n* Bracket Pair Colorizer # 括号颜色\n* Chinese Language       # 汉化\n<!-- more -->\n\n#### 功能方面\n\n* Git Blame              # Git提交查看\n* Code Spell Checker     # 拼写检查\n* Reload                 # 重新加载\n* Todo Tree              # 代办事项\n* Settings Sync          # 设置同步","slug":"2-vscode-常见问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4q001dzfqxewc4co84","content":"<blockquote>\n<p>vscode中一些常见的坑点…</p>\n</blockquote>\n<h3 id=\"插件\"><a class=\"header-anchor\" href=\"#插件\">¶</a>插件</h3>\n<h4 id=\"样式方面：\"><a class=\"header-anchor\" href=\"#样式方面：\">¶</a>样式方面：</h4>\n<ul>\n<li>Indent Rainbo</li>\n<li>Bracket Pair Colorizer # 括号颜色</li>\n<li>Chinese Language       # 汉化</li>\n</ul>\n<span id=\"more\"></span>\n<h4 id=\"功能方面\"><a class=\"header-anchor\" href=\"#功能方面\">¶</a>功能方面</h4>\n<ul>\n<li>Git Blame              # Git提交查看</li>\n<li>Code Spell Checker     # 拼写检查</li>\n<li>Reload                 # 重新加载</li>\n<li>Todo Tree              # 代办事项</li>\n<li>Settings Sync          # 设置同步</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>vscode中一些常见的坑点…</p>\n</blockquote>\n<h3 id=\"插件\"><a class=\"header-anchor\" href=\"#插件\">¶</a>插件</h3>\n<h4 id=\"样式方面：\"><a class=\"header-anchor\" href=\"#样式方面：\">¶</a>样式方面：</h4>\n<ul>\n<li>Indent Rainbo</li>\n<li>Bracket Pair Colorizer # 括号颜色</li>\n<li>Chinese Language       # 汉化</li>\n</ul>","more":"<h4 id=\"功能方面\"><a class=\"header-anchor\" href=\"#功能方面\">¶</a>功能方面</h4>\n<ul>\n<li>Git Blame              # Git提交查看</li>\n<li>Code Spell Checker     # 拼写检查</li>\n<li>Reload                 # 重新加载</li>\n<li>Todo Tree              # 代办事项</li>\n<li>Settings Sync          # 设置同步</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Aug 31 2020 13:09:17 GMT+0800 (中国标准时间)","title":"「2」vscode 常见插件及其使用","path":"archives/8cf3cbca.html","eyeCatchImage":null,"excerpt":"<blockquote>\n<p>vscode中一些常见的坑点…</p>\n</blockquote>\n<h3 id=\"插件\"><a class=\"header-anchor\" href=\"#插件\">¶</a>插件</h3>\n<h4 id=\"样式方面：\"><a class=\"header-anchor\" href=\"#样式方面：\">¶</a>样式方面：</h4>\n<ul>\n<li>Indent Rainbo</li>\n<li>Bracket Pair Colorizer # 括号颜色</li>\n<li>Chinese Language       # 汉化</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2020-08-31T05:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-31T05:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["vscode","工具"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":162},{"title":"「20」博客诡异事件","date":"2020-11-16T16:09:17.000Z","updated":"2020-11-16T16:09:17.000Z","keywords":"博客","abbrlink":"5ce14ff5","_content":"\n\n\n### 博客CI CD崩了\n>就在刚才修改了部分的config配置，后打了tag push了上去,\n\n>oh......GG了\n<!--more-->\n\n```\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\nout: INFO  Start processing\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\n```\n\n简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。\n\n先删了js，本地跑ok了，远端挂了，又提示另一个js错误。\n再删一个错误的js,再跑....又挂了!\n\n\n### 排查...\n\n>初步定位为文件没有更到最新\n\n本地ok,服务器部署不起来.....\n\n查下文件scp copy的工作流\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/企业微信20201117-000817@2x.png)\n\n看起来很简单，也很好用，但是呢，大坑来了..........\n当时没有选择是否选择覆盖文件：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/企业微信20201117-001054@2x.png)\n\n### 问题点\n\n没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。\n\nPS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己....\n\n### 参考：\n[copy workflow Github](https://github.com/appleboy/scp-action/blob/master/action.yml#L44)\n[scp copy workflow](https://github.com/marketplace/actions/scp-files)","source":"_posts/20-博客诡异事件.md","raw":"---\ntitle: 「20」博客诡异事件\ndate: '2020/11/17 00:09:17'\nupdated: '2020/11/17 00:09:17'\nkeywords: 博客\ntags:\n  - 博客\n  - Day\nabbrlink: 5ce14ff5\n---\n\n\n\n### 博客CI CD崩了\n>就在刚才修改了部分的config配置，后打了tag push了上去,\n\n>oh......GG了\n<!--more-->\n\n```\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\nout: INFO  Start processing\nerr: FATAL Something's wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html\nerr: TypeError: Cannot read property 'enable' of undefined\nerr:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21\nerr:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)\nerr:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)\nerr:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)\nerr:     at Hexo.<anonymous> (***/themes/nextTheme/scripts/events/index.js:9:27)\nerr:     at Hexo.emit (events.js:314:20)\nerr:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)\nerr:     at /***/node_modules/hexo/lib/hexo/index.js:249:***\nerr:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)\nerr:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)\nerr:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)\nerr:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)\nerr:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)\nerr:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)\nerr:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)\nerr:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)\n```\n\n简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。\n\n先删了js，本地跑ok了，远端挂了，又提示另一个js错误。\n再删一个错误的js,再跑....又挂了!\n\n\n### 排查...\n\n>初步定位为文件没有更到最新\n\n本地ok,服务器部署不起来.....\n\n查下文件scp copy的工作流\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/企业微信20201117-000817@2x.png)\n\n看起来很简单，也很好用，但是呢，大坑来了..........\n当时没有选择是否选择覆盖文件：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/企业微信20201117-001054@2x.png)\n\n### 问题点\n\n没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。\n\nPS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己....\n\n### 参考：\n[copy workflow Github](https://github.com/appleboy/scp-action/blob/master/action.yml#L44)\n[scp copy workflow](https://github.com/marketplace/actions/scp-files)","slug":"20-博客诡异事件","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4q001fzfqxfcsf9rfj","content":"<h3 id=\"博客CI-CD崩了\"><a class=\"header-anchor\" href=\"#博客CI-CD崩了\">¶</a>博客CI CD崩了</h3>\n<blockquote>\n<p>就在刚才修改了部分的config配置，后打了tag push了上去,</p>\n</blockquote>\n<blockquote>\n<p>oh…GG了</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err: FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#x27;enable&#x27; of undefined</span><br><span class=\"line\">err:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***/themes/nextTheme/scripts/events/index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)</span><br><span class=\"line\">err:     at /***/node_modules/hexo/lib/hexo/index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)</span><br><span class=\"line\">out: INFO  Start processing</span><br><span class=\"line\">err: FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#x27;enable&#x27; of undefined</span><br><span class=\"line\">err:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***/themes/nextTheme/scripts/events/index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)</span><br><span class=\"line\">err:     at /***/node_modules/hexo/lib/hexo/index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)</span><br></pre></td></tr></table></figure>\n<p>简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。</p>\n<p>先删了js，本地跑ok了，远端挂了，又提示另一个js错误。<br>\n再删一个错误的js,再跑…又挂了!</p>\n<h3 id=\"排查…\"><a class=\"header-anchor\" href=\"#排查…\">¶</a>排查…</h3>\n<blockquote>\n<p>初步定位为文件没有更到最新</p>\n</blockquote>\n<p>本地ok,服务器部署不起来…</p>\n<p>查下文件scp copy的工作流</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png\" alt=\"\"></p>\n<p>看起来很简单，也很好用，但是呢，大坑来了…<br>\n当时没有选择是否选择覆盖文件：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-001054@2x.png\" alt=\"\"></p>\n<h3 id=\"问题点\"><a class=\"header-anchor\" href=\"#问题点\">¶</a>问题点</h3>\n<p>没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。</p>\n<p>PS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己…</p>\n<h3 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h3>\n<p><a href=\"https://github.com/appleboy/scp-action/blob/master/action.yml#L44\">copy workflow Github</a><br>\n<a href=\"https://github.com/marketplace/actions/scp-files\">scp copy workflow</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"博客CI-CD崩了\"><a class=\"header-anchor\" href=\"#博客CI-CD崩了\">¶</a>博客CI CD崩了</h3>\n<blockquote>\n<p>就在刚才修改了部分的config配置，后打了tag push了上去,</p>\n</blockquote>\n<blockquote>\n<p>oh…GG了</p>\n</blockquote>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">err: FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#x27;enable&#x27; of undefined</span><br><span class=\"line\">err:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***/themes/nextTheme/scripts/events/index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)</span><br><span class=\"line\">err:     at /***/node_modules/hexo/lib/hexo/index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)</span><br><span class=\"line\">out: INFO  Start processing</span><br><span class=\"line\">err: FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class=\"line\">err: TypeError: Cannot read property &#x27;enable&#x27; of undefined</span><br><span class=\"line\">err:     at ***/themes/nextTheme/scripts/filters/comment/disqus.js:11:21</span><br><span class=\"line\">err:     at Filter.execSync (/***/node_modules/hexo/lib/extend/filter.js:74:28)</span><br><span class=\"line\">err:     at Hexo.execFilterSync (/***/node_modules/hexo/lib/hexo/index.js:432:29)</span><br><span class=\"line\">err:     at module.exports (***/themes/nextTheme/scripts/events/lib/injects.js:58:8)</span><br><span class=\"line\">err:     at Hexo.&lt;anonymous&gt; (***/themes/nextTheme/scripts/events/index.js:9:27)</span><br><span class=\"line\">err:     at Hexo.emit (events.js:314:20)</span><br><span class=\"line\">err:     at Hexo._generate (/***/node_modules/hexo/lib/hexo/index.js:399:8)</span><br><span class=\"line\">err:     at /***/node_modules/hexo/lib/hexo/index.js:249:***</span><br><span class=\"line\">err:     at tryCatcher (/***/node_modules/bluebird/js/release/util.js:16:23)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:547:31)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:604:18)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at PromiseArray._resolve (/***/node_modules/bluebird/js/release/promise_array.js:127:19)</span><br><span class=\"line\">err:     at PromiseArray._promiseFulfilled (/***/node_modules/bluebird/js/release/promise_array.js:145:14)</span><br><span class=\"line\">err:     at Promise._settlePromise (/***/node_modules/bluebird/js/release/promise.js:609:26)</span><br><span class=\"line\">err:     at Promise._settlePromise0 (/***/node_modules/bluebird/js/release/promise.js:649:10)</span><br><span class=\"line\">err:     at Promise._settlePromises (/***/node_modules/bluebird/js/release/promise.js:729:18)</span><br><span class=\"line\">err:     at Promise._fulfill (/***/node_modules/bluebird/js/release/promise.js:673:18)</span><br><span class=\"line\">err:     at Promise._resolveCallback (/***/node_modules/bluebird/js/release/promise.js:466:57)</span><br><span class=\"line\">err:     at Promise._settlePromiseFromHandler (/***/node_modules/bluebird/js/release/promise.js:559:17)</span><br></pre></td></tr></table></figure>\n<p>简单点，显示没有enable这个属性，，，，我懵了，这部署了多少次了，没有出现这么个错误啊。</p>\n<p>先删了js，本地跑ok了，远端挂了，又提示另一个js错误。<br>\n再删一个错误的js,再跑…又挂了!</p>\n<h3 id=\"排查…\"><a class=\"header-anchor\" href=\"#排查…\">¶</a>排查…</h3>\n<blockquote>\n<p>初步定位为文件没有更到最新</p>\n</blockquote>\n<p>本地ok,服务器部署不起来…</p>\n<p>查下文件scp copy的工作流</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png\" alt=\"\"></p>\n<p>看起来很简单，也很好用，但是呢，大坑来了…<br>\n当时没有选择是否选择覆盖文件：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-001054@2x.png\" alt=\"\"></p>\n<h3 id=\"问题点\"><a class=\"header-anchor\" href=\"#问题点\">¶</a>问题点</h3>\n<p>没有覆盖配置文件，导致残留或者修改不彻底，同名的始终不修改，导致的问题。</p>\n<p>PS：花了半个小时定位这么个rewrite的问题！ 记着吧，提醒自己…</p>\n<h3 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h3>\n<p><a href=\"https://github.com/appleboy/scp-action/blob/master/action.yml#L44\">copy workflow Github</a><br>\n<a href=\"https://github.com/marketplace/actions/scp-files\">scp copy workflow</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png","popularPost_tmp_gaData":{"updated":"Tue Nov 17 2020 00:09:17 GMT+0800 (中国标准时间)","title":"「20」博客诡异事件","path":"archives/5ce14ff5.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A120201117-000817@2x.png","excerpt":"<h3 id=\"博客CI-CD崩了\"><a class=\"header-anchor\" href=\"#博客CI-CD崩了\">¶</a>博客CI CD崩了</h3>\n<blockquote>\n<p>就在刚才修改了部分的config配置，后打了tag push了上去,</p>\n</blockquote>\n<blockquote>\n<p>oh…GG了</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-11-16T16:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-16T16:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","博客"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4237},{"title":"「21」linux select源码","date":"2020-11-17T11:09:17.000Z","updated":"2020-11-18T11:09:17.000Z","abbrlink":"ba7b70bf","keywords":null,"_content":"\n\n> select poll epoll三个老生长谈的问题.这次不是来讲区别的，后续会更新一篇关于三者区别的。\n\n### 前序 \nselect属于linux系列的文件系统「fs」的范畴，每次的系统调用、打开软件、启动程序等等都会涉及到文件的读写，\n这个是在所难免的。\n\n那么I/O事件的基本思路：文件准备ok，开始读写，等函数返回，根据结果继续运行.\n\n如果是自己实现，大体上无非以下思路：\n<!--more-->\n\n* 创建多个进程/线程来监听\n* Non-blocking读写监听的轮询\n* 异步I/O与Unix Signal事件机制\n\n先来学习下linux源码是怎么处理select机制的：\n\n>linux version: 5.10-r5\n\n### 概览图\n\n梳理了下，大概整理成了流程图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux源码-select-1.png)\n\n\n### select切入点\n\n既然知道了select属于fs系列的，那就很容易找到:[fs/select.c]\n\n查看select命令：\n```shell\nman 2 select\n```\n\n下面按照以下顺序来解读，一起学习：\n\n* 入口 SYSCALL_DEFINE5\n* 核心函数 do_select\n* 设备驱动的操作函数 \n* poll_wait与设备的等待队列\n* fd数量限制「why」\n* select与poll\n\n\n### SYSCALL_DEFINE5\n\n\n```c++\nSYSCALL_DEFINE5(select, int, n, fd_set __user *, inp, fd_set __user *, outp,\n\t\tfd_set __user *, exp, struct __kernel_old_timeval __user *, tvp)\n{\n\treturn kern_select(n, inp, outp, exp, tvp);\n}\n\n\n```\n\n函数：core_sys_select中主要的do_select处理其中的逻辑\n\n### do_select\n\n关键性的结构体\n```c++\ntypedef struct {\n\tunsigned long *in, *out, *ex; //输出 、输入、异常\n\tunsigned long *res_in, *res_out, *res_ex;\n} fd_set_bits;\n```\n\n\n```c++\n\nstatic int do_select(int n, fd_set_bits *fds, struct timespec64 *end_time)\n{\n\tktime_t expire, *to = NULL;\n\tstruct poll_wqueues table;\n\tpoll_table *wait;\n\tint retval, i, timed_out = 0;\n\tu64 slack = 0;\n\t__poll_t busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : 0;\n\tunsigned long busy_start = 0;\n\n\trcu_read_lock();\n    //找出文件的最大描述符\n\tretval = max_select_fd(n, fds);\n\trcu_read_unlock();\n\n\tif (retval < 0)\n\t\treturn retval;\n\tn = retval;\n\n    //初始化\n\tpoll_initwait(&table);\n\twait = &table.pt;\n\tif (end_time && !end_time->tv_sec && !end_time->tv_nsec) {\n\t\twait->_qproc = NULL;\n\t\ttimed_out = 1;\n\t}\n\n\tif (end_time && !timed_out)\n\t\tslack = select_estimate_accuracy(end_time);\n\n\tretval = 0;\n\tfor (;;) {\n\t\tunsigned long *rinp, *routp, *rexp, *inp, *outp, *exp;\n\t\tbool can_busy_loop = false;\n\n\t\tinp = fds->in; outp = fds->out; exp = fds->ex;\n\t\trinp = fds->res_in; routp = fds->res_out; rexp = fds->res_ex;\n\n        //遍历所有的fd.......同步等.....\n\t\tfor (i = 0; i < n; ++rinp, ++routp, ++rexp) {\n\t\t\tunsigned long in, out, ex, all_bits, bit = 1, j;\n\t\t\tunsigned long res_in = 0, res_out = 0, res_ex = 0;\n\t\t\t__poll_t mask;\n\n\t\t\tin = *inp++; out = *outp++; ex = *exp++;\n\t\t\tall_bits = in | out | ex;\n            //没有任何注册事件\n\t\t\tif (all_bits == 0) {\n\t\t\t\ti += BITS_PER_LONG;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (j = 0; j < BITS_PER_LONG; ++j, ++i, bit <<= 1) {\n\t\t\t\tstruct fd f;\n\t\t\t\tif (i >= n)\n\t\t\t\t\tbreak;\n                //跳过未注册的\n\t\t\t\tif (!(bit & all_bits))\n\t\t\t\t\tcontinue;\n\t\t\t\tf = fdget(i);\n\t\t\t\tif (f.file) {\n\t\t\t\t\twait_key_set(wait, in, out, bit,\n\t\t\t\t\t\t     busy_flag);\n\n                    //对每一个fd进行检测\n\t\t\t\t\tmask = vfs_poll(f.file, wait);\n\n\t\t\t\t\tfdput(f);\n\t\t\t\t\tif ((mask & POLLIN_SET) && (in & bit)) {\n\t\t\t\t\t\tres_in |= bit;\n\t\t\t\t\t\tretval++;\n\t\t\t\t\t\twait->_qproc = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tif ((mask & POLLOUT_SET) && (out & bit)) {\n\t\t\t\t\t\tres_out |= bit;\n\t\t\t\t\t\tretval++;\n\t\t\t\t\t\twait->_qproc = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tif ((mask & POLLEX_SET) && (ex & bit)) {\n\t\t\t\t\t\tres_ex |= bit;\n\t\t\t\t\t\tretval++;\n\t\t\t\t\t\twait->_qproc = NULL;\n\t\t\t\t\t}\n\t\t\t\t\t/* got something, stop busy polling */\n\t\t\t\t\tif (retval) {\n\t\t\t\t\t\tcan_busy_loop = false;\n\t\t\t\t\t\tbusy_flag = 0;\n\n\t\t\t\t\t/*\n\t\t\t\t\t * only remember a returned\n\t\t\t\t\t * POLL_BUSY_LOOP if we asked for it\n\t\t\t\t\t */\n\t\t\t\t\t} else if (busy_flag & mask)\n\t\t\t\t\t\tcan_busy_loop = true;\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (res_in)\n\t\t\t\t*rinp = res_in;\n\t\t\tif (res_out)\n\t\t\t\t*routp = res_out;\n\t\t\tif (res_ex)\n\t\t\t\t*rexp = res_ex;\n\t\t\tcond_resched();\n\t\t}\n\t\twait->_qproc = NULL;\n\n        //退出循环，条件： 事件就绪/超时/收到信号\n\t\tif (retval || timed_out || signal_pending(current))\n\t\t\tbreak;\n\t\tif (table.error) {\n\t\t\tretval = table.error;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* only if found POLL_BUSY_LOOP sockets && not out of time */\n\t\tif (can_busy_loop && !need_resched()) {\n\t\t\tif (!busy_start) {\n\t\t\t\tbusy_start = busy_loop_current_time();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!busy_loop_timeout(busy_start))\n\t\t\t\tcontinue;\n\t\t}\n\t\tbusy_flag = 0;\n\n\t\t/*\n\t\t * If this is the first loop and we have a timeout\n\t\t * given, then we convert to ktime_t and set the to\n\t\t * pointer to the expiry value.\n\t\t */\n\t\tif (end_time && !to) {\n\t\t\texpire = timespec64_to_ktime(*end_time);\n\t\t\tto = &expire;\n\t\t}\n\n        //超时就休眠一会儿「中断会儿」\n\t\tif (!poll_schedule_timeout(&table, TASK_INTERRUPTIBLE,\n\t\t\t\t\t   to, slack))\n\t\t\ttimed_out = 1;\n\t}\n\n\tpoll_freewait(&table);\n\n\treturn retval;\n}\n```\n\n\n\n```c++\nstatic int poll_schedule_timeout(struct poll_wqueues *pwq, int state,\n\t\t\t  ktime_t *expires, unsigned long slack)\n{\n\tint rc = -EINTR;\n\n\tset_current_state(state);\n\tif (!pwq->triggered)\n\t\trc = schedule_hrtimeout_range(expires, slack, HRTIMER_MODE_ABS);\n\t__set_current_state(TASK_RUNNING);\n\n\t/*\n\t * Prepare for the next iteration.\n\t *\n\t * The following smp_store_mb() serves two purposes.  First, it's\n\t * the counterpart rmb of the wmb in pollwake() such that data\n\t * written before wake up is always visible after wake up.\n\t * Second, the full barrier guarantees that triggered clearing\n\t * doesn't pass event check of the next iteration.  Note that\n\t * this problem doesn't exist for the first iteration as\n\t * add_wait_queue() has full barrier semantics.\n\t */\n\tsmp_store_mb(pwq->triggered, 0);\n\n\treturn rc;\n}\n```\n### poll_wait\n\n```c++\n\n\n/* \n * structures and helpers for f_op->poll implementations\n */\n //类似一个回调函数\ntypedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);\n\n\ntypedef struct poll_table_struct {\n\tpoll_queue_proc _qproc; //callback机制\n\t__poll_t _key;\n} poll_table;\n\n\nstatic inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)\n{\n\tif (p && p->_qproc && wait_address)\n\t\tp->_qproc(filp, wait_address, p);\n}\n```\n\n### fd数量问题\n\n>include/uapi/linux/posix_types.h\n\n```c++\n#define __FD_SETSIZE\t1024\n\ntypedef struct {\n  //__FD_SETSIZE当下标使？？？what！\n\tunsigned long fds_bits[__FD_SETSIZE / (8 * sizeof(long))];\n} __kernel_fd_set;\n\nstruct fd {\n\tstruct file *file;\n\tunsigned int flags;\n};\n```\n\n\n>从上面看来文件描述符只是一个整数值，用来操作下标的，主要是每一个进程file数组的下标。理解do_select是核心。\n\n### select 与poll\n\n>poll取消了最大数量的限制,返回结果还是需要轮询来获取就绪的描述符。\n\n```c++\nstruct pollfd {\n\tint fd;\n\tshort events; //request\n\tshort revents; // return\n};\n```\n\n具体见后续更新「poll源码」\n\n### 参考\n\n[Linux Device Drivers, Third Edition](https://www.oreilly.com/openbook/linuxdrive3/book/)\n[How do system calls like select() or poll() work under the hood?](https://stackoverflow.com/questions/11496059/how-do-system-calls-like-select-or-poll-work-under-the-hood)\n\n","source":"_posts/21-linux-select源码.md","raw":"---\ntitle: 「21」linux select源码\ndate: '2020/11/17 19:09:17'\nupdated: '2020/11/18 19:09:17'\ntags:\n  - Linux\n  - Day\nabbrlink: ba7b70bf\nkeywords:\n---\n\n\n> select poll epoll三个老生长谈的问题.这次不是来讲区别的，后续会更新一篇关于三者区别的。\n\n### 前序 \nselect属于linux系列的文件系统「fs」的范畴，每次的系统调用、打开软件、启动程序等等都会涉及到文件的读写，\n这个是在所难免的。\n\n那么I/O事件的基本思路：文件准备ok，开始读写，等函数返回，根据结果继续运行.\n\n如果是自己实现，大体上无非以下思路：\n<!--more-->\n\n* 创建多个进程/线程来监听\n* Non-blocking读写监听的轮询\n* 异步I/O与Unix Signal事件机制\n\n先来学习下linux源码是怎么处理select机制的：\n\n>linux version: 5.10-r5\n\n### 概览图\n\n梳理了下，大概整理成了流程图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux源码-select-1.png)\n\n\n### select切入点\n\n既然知道了select属于fs系列的，那就很容易找到:[fs/select.c]\n\n查看select命令：\n```shell\nman 2 select\n```\n\n下面按照以下顺序来解读，一起学习：\n\n* 入口 SYSCALL_DEFINE5\n* 核心函数 do_select\n* 设备驱动的操作函数 \n* poll_wait与设备的等待队列\n* fd数量限制「why」\n* select与poll\n\n\n### SYSCALL_DEFINE5\n\n\n```c++\nSYSCALL_DEFINE5(select, int, n, fd_set __user *, inp, fd_set __user *, outp,\n\t\tfd_set __user *, exp, struct __kernel_old_timeval __user *, tvp)\n{\n\treturn kern_select(n, inp, outp, exp, tvp);\n}\n\n\n```\n\n函数：core_sys_select中主要的do_select处理其中的逻辑\n\n### do_select\n\n关键性的结构体\n```c++\ntypedef struct {\n\tunsigned long *in, *out, *ex; //输出 、输入、异常\n\tunsigned long *res_in, *res_out, *res_ex;\n} fd_set_bits;\n```\n\n\n```c++\n\nstatic int do_select(int n, fd_set_bits *fds, struct timespec64 *end_time)\n{\n\tktime_t expire, *to = NULL;\n\tstruct poll_wqueues table;\n\tpoll_table *wait;\n\tint retval, i, timed_out = 0;\n\tu64 slack = 0;\n\t__poll_t busy_flag = net_busy_loop_on() ? POLL_BUSY_LOOP : 0;\n\tunsigned long busy_start = 0;\n\n\trcu_read_lock();\n    //找出文件的最大描述符\n\tretval = max_select_fd(n, fds);\n\trcu_read_unlock();\n\n\tif (retval < 0)\n\t\treturn retval;\n\tn = retval;\n\n    //初始化\n\tpoll_initwait(&table);\n\twait = &table.pt;\n\tif (end_time && !end_time->tv_sec && !end_time->tv_nsec) {\n\t\twait->_qproc = NULL;\n\t\ttimed_out = 1;\n\t}\n\n\tif (end_time && !timed_out)\n\t\tslack = select_estimate_accuracy(end_time);\n\n\tretval = 0;\n\tfor (;;) {\n\t\tunsigned long *rinp, *routp, *rexp, *inp, *outp, *exp;\n\t\tbool can_busy_loop = false;\n\n\t\tinp = fds->in; outp = fds->out; exp = fds->ex;\n\t\trinp = fds->res_in; routp = fds->res_out; rexp = fds->res_ex;\n\n        //遍历所有的fd.......同步等.....\n\t\tfor (i = 0; i < n; ++rinp, ++routp, ++rexp) {\n\t\t\tunsigned long in, out, ex, all_bits, bit = 1, j;\n\t\t\tunsigned long res_in = 0, res_out = 0, res_ex = 0;\n\t\t\t__poll_t mask;\n\n\t\t\tin = *inp++; out = *outp++; ex = *exp++;\n\t\t\tall_bits = in | out | ex;\n            //没有任何注册事件\n\t\t\tif (all_bits == 0) {\n\t\t\t\ti += BITS_PER_LONG;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (j = 0; j < BITS_PER_LONG; ++j, ++i, bit <<= 1) {\n\t\t\t\tstruct fd f;\n\t\t\t\tif (i >= n)\n\t\t\t\t\tbreak;\n                //跳过未注册的\n\t\t\t\tif (!(bit & all_bits))\n\t\t\t\t\tcontinue;\n\t\t\t\tf = fdget(i);\n\t\t\t\tif (f.file) {\n\t\t\t\t\twait_key_set(wait, in, out, bit,\n\t\t\t\t\t\t     busy_flag);\n\n                    //对每一个fd进行检测\n\t\t\t\t\tmask = vfs_poll(f.file, wait);\n\n\t\t\t\t\tfdput(f);\n\t\t\t\t\tif ((mask & POLLIN_SET) && (in & bit)) {\n\t\t\t\t\t\tres_in |= bit;\n\t\t\t\t\t\tretval++;\n\t\t\t\t\t\twait->_qproc = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tif ((mask & POLLOUT_SET) && (out & bit)) {\n\t\t\t\t\t\tres_out |= bit;\n\t\t\t\t\t\tretval++;\n\t\t\t\t\t\twait->_qproc = NULL;\n\t\t\t\t\t}\n\t\t\t\t\tif ((mask & POLLEX_SET) && (ex & bit)) {\n\t\t\t\t\t\tres_ex |= bit;\n\t\t\t\t\t\tretval++;\n\t\t\t\t\t\twait->_qproc = NULL;\n\t\t\t\t\t}\n\t\t\t\t\t/* got something, stop busy polling */\n\t\t\t\t\tif (retval) {\n\t\t\t\t\t\tcan_busy_loop = false;\n\t\t\t\t\t\tbusy_flag = 0;\n\n\t\t\t\t\t/*\n\t\t\t\t\t * only remember a returned\n\t\t\t\t\t * POLL_BUSY_LOOP if we asked for it\n\t\t\t\t\t */\n\t\t\t\t\t} else if (busy_flag & mask)\n\t\t\t\t\t\tcan_busy_loop = true;\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (res_in)\n\t\t\t\t*rinp = res_in;\n\t\t\tif (res_out)\n\t\t\t\t*routp = res_out;\n\t\t\tif (res_ex)\n\t\t\t\t*rexp = res_ex;\n\t\t\tcond_resched();\n\t\t}\n\t\twait->_qproc = NULL;\n\n        //退出循环，条件： 事件就绪/超时/收到信号\n\t\tif (retval || timed_out || signal_pending(current))\n\t\t\tbreak;\n\t\tif (table.error) {\n\t\t\tretval = table.error;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* only if found POLL_BUSY_LOOP sockets && not out of time */\n\t\tif (can_busy_loop && !need_resched()) {\n\t\t\tif (!busy_start) {\n\t\t\t\tbusy_start = busy_loop_current_time();\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!busy_loop_timeout(busy_start))\n\t\t\t\tcontinue;\n\t\t}\n\t\tbusy_flag = 0;\n\n\t\t/*\n\t\t * If this is the first loop and we have a timeout\n\t\t * given, then we convert to ktime_t and set the to\n\t\t * pointer to the expiry value.\n\t\t */\n\t\tif (end_time && !to) {\n\t\t\texpire = timespec64_to_ktime(*end_time);\n\t\t\tto = &expire;\n\t\t}\n\n        //超时就休眠一会儿「中断会儿」\n\t\tif (!poll_schedule_timeout(&table, TASK_INTERRUPTIBLE,\n\t\t\t\t\t   to, slack))\n\t\t\ttimed_out = 1;\n\t}\n\n\tpoll_freewait(&table);\n\n\treturn retval;\n}\n```\n\n\n\n```c++\nstatic int poll_schedule_timeout(struct poll_wqueues *pwq, int state,\n\t\t\t  ktime_t *expires, unsigned long slack)\n{\n\tint rc = -EINTR;\n\n\tset_current_state(state);\n\tif (!pwq->triggered)\n\t\trc = schedule_hrtimeout_range(expires, slack, HRTIMER_MODE_ABS);\n\t__set_current_state(TASK_RUNNING);\n\n\t/*\n\t * Prepare for the next iteration.\n\t *\n\t * The following smp_store_mb() serves two purposes.  First, it's\n\t * the counterpart rmb of the wmb in pollwake() such that data\n\t * written before wake up is always visible after wake up.\n\t * Second, the full barrier guarantees that triggered clearing\n\t * doesn't pass event check of the next iteration.  Note that\n\t * this problem doesn't exist for the first iteration as\n\t * add_wait_queue() has full barrier semantics.\n\t */\n\tsmp_store_mb(pwq->triggered, 0);\n\n\treturn rc;\n}\n```\n### poll_wait\n\n```c++\n\n\n/* \n * structures and helpers for f_op->poll implementations\n */\n //类似一个回调函数\ntypedef void (*poll_queue_proc)(struct file *, wait_queue_head_t *, struct poll_table_struct *);\n\n\ntypedef struct poll_table_struct {\n\tpoll_queue_proc _qproc; //callback机制\n\t__poll_t _key;\n} poll_table;\n\n\nstatic inline void poll_wait(struct file * filp, wait_queue_head_t * wait_address, poll_table *p)\n{\n\tif (p && p->_qproc && wait_address)\n\t\tp->_qproc(filp, wait_address, p);\n}\n```\n\n### fd数量问题\n\n>include/uapi/linux/posix_types.h\n\n```c++\n#define __FD_SETSIZE\t1024\n\ntypedef struct {\n  //__FD_SETSIZE当下标使？？？what！\n\tunsigned long fds_bits[__FD_SETSIZE / (8 * sizeof(long))];\n} __kernel_fd_set;\n\nstruct fd {\n\tstruct file *file;\n\tunsigned int flags;\n};\n```\n\n\n>从上面看来文件描述符只是一个整数值，用来操作下标的，主要是每一个进程file数组的下标。理解do_select是核心。\n\n### select 与poll\n\n>poll取消了最大数量的限制,返回结果还是需要轮询来获取就绪的描述符。\n\n```c++\nstruct pollfd {\n\tint fd;\n\tshort events; //request\n\tshort revents; // return\n};\n```\n\n具体见后续更新「poll源码」\n\n### 参考\n\n[Linux Device Drivers, Third Edition](https://www.oreilly.com/openbook/linuxdrive3/book/)\n[How do system calls like select() or poll() work under the hood?](https://stackoverflow.com/questions/11496059/how-do-system-calls-like-select-or-poll-work-under-the-hood)\n\n","slug":"21-linux-select源码","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4s001izfqx4y6g5206","content":"<blockquote>\n<p>select poll epoll三个老生长谈的问题.这次不是来讲区别的，后续会更新一篇关于三者区别的。</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>select属于linux系列的文件系统「fs」的范畴，每次的系统调用、打开软件、启动程序等等都会涉及到文件的读写，<br>\n这个是在所难免的。</p>\n<p>那么I/O事件的基本思路：文件准备ok，开始读写，等函数返回，根据结果继续运行.</p>\n<p>如果是自己实现，大体上无非以下思路：</p>\n<span id=\"more\"></span>\n<ul>\n<li>创建多个进程/线程来监听</li>\n<li>Non-blocking读写监听的轮询</li>\n<li>异步I/O与Unix Signal事件机制</li>\n</ul>\n<p>先来学习下linux源码是怎么处理select机制的：</p>\n<blockquote>\n<p>linux version: 5.10-r5</p>\n</blockquote>\n<h3 id=\"概览图\"><a class=\"header-anchor\" href=\"#概览图\">¶</a>概览图</h3>\n<p>梳理了下，大概整理成了流程图：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux%E6%BA%90%E7%A0%81-select-1.png\" alt=\"\"></p>\n<h3 id=\"select切入点\"><a class=\"header-anchor\" href=\"#select切入点\">¶</a>select切入点</h3>\n<p>既然知道了select属于fs系列的，那就很容易找到:[fs/select.c]</p>\n<p>查看select命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 2 select</span><br></pre></td></tr></table></figure>\n<p>下面按照以下顺序来解读，一起学习：</p>\n<ul>\n<li>入口 SYSCALL_DEFINE5</li>\n<li>核心函数 do_select</li>\n<li>设备驱动的操作函数</li>\n<li>poll_wait与设备的等待队列</li>\n<li>fd数量限制「why」</li>\n<li>select与poll</li>\n</ul>\n<h3 id=\"SYSCALL-DEFINE5\"><a class=\"header-anchor\" href=\"#SYSCALL-DEFINE5\">¶</a>SYSCALL_DEFINE5</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SYSCALL_DEFINE5</span>(select, <span class=\"type\">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</span><br><span class=\"line\">\t\tfd_set __user *, exp, <span class=\"keyword\">struct</span> __kernel_old_timeval __user *, tvp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">kern_select</span>(n, inp, outp, exp, tvp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>函数：core_sys_select中主要的do_select处理其中的逻辑</p>\n<h3 id=\"do-select\"><a class=\"header-anchor\" href=\"#do-select\">¶</a>do_select</h3>\n<p>关键性的结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *in, *out, *ex; <span class=\"comment\">//输出 、输入、异常</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *res_in, *res_out, *res_ex;</span><br><span class=\"line\">&#125; fd_set_bits;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">do_select</span><span class=\"params\">(<span class=\"type\">int</span> n, fd_set_bits *fds, <span class=\"keyword\">struct</span> timespec64 *end_time)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">ktime_t</span> expire, *to = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">poll_wqueues</span> table;</span><br><span class=\"line\">\tpoll_table *wait;</span><br><span class=\"line\">\t<span class=\"type\">int</span> retval, i, timed_out = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 slack = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">__poll_t</span> busy_flag = <span class=\"built_in\">net_busy_loop_on</span>() ? POLL_BUSY_LOOP : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> busy_start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">rcu_read_lock</span>();</span><br><span class=\"line\">    <span class=\"comment\">//找出文件的最大描述符</span></span><br><span class=\"line\">\tretval = <span class=\"built_in\">max_select_fd</span>(n, fds);</span><br><span class=\"line\">\t<span class=\"built_in\">rcu_read_unlock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (retval &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">\tn = retval;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">\t<span class=\"built_in\">poll_initwait</span>(&amp;table);</span><br><span class=\"line\">\twait = &amp;table.pt;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;</span><br><span class=\"line\">\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\ttimed_out = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end_time &amp;&amp; !timed_out)</span><br><span class=\"line\">\t\tslack = <span class=\"built_in\">select_estimate_accuracy</span>(end_time);</span><br><span class=\"line\"></span><br><span class=\"line\">\tretval = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *rinp, *routp, *rexp, *inp, *outp, *exp;</span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> can_busy_loop = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tinp = fds-&gt;in; outp = fds-&gt;out; exp = fds-&gt;ex;</span><br><span class=\"line\">\t\trinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历所有的fd.......同步等.....</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> in, out, ex, all_bits, bit = <span class=\"number\">1</span>, j;</span><br><span class=\"line\">\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> res_in = <span class=\"number\">0</span>, res_out = <span class=\"number\">0</span>, res_ex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">__poll_t</span> mask;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tin = *inp++; out = *outp++; ex = *exp++;</span><br><span class=\"line\">\t\t\tall_bits = in | out | ex;</span><br><span class=\"line\">            <span class=\"comment\">//没有任何注册事件</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (all_bits == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\ti += BITS_PER_LONG;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">struct</span> <span class=\"title class_\">fd</span> f;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i &gt;= n)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//跳过未注册的</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!(bit &amp; all_bits))</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\tf = <span class=\"built_in\">fdget</span>(i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (f.file) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">wait_key_set</span>(wait, in, out, bit,</span><br><span class=\"line\">\t\t\t\t\t\t     busy_flag);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//对每一个fd进行检测</span></span><br><span class=\"line\">\t\t\t\t\tmask = <span class=\"built_in\">vfs_poll</span>(f.file, wait);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">fdput</span>(f);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres_in |= bit;</span><br><span class=\"line\">\t\t\t\t\t\tretval++;</span><br><span class=\"line\">\t\t\t\t\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres_out |= bit;</span><br><span class=\"line\">\t\t\t\t\t\tretval++;</span><br><span class=\"line\">\t\t\t\t\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres_ex |= bit;</span><br><span class=\"line\">\t\t\t\t\t\tretval++;</span><br><span class=\"line\">\t\t\t\t\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">/* got something, stop busy polling */</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (retval) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcan_busy_loop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t\tbusy_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t * only remember a returned</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t * POLL_BUSY_LOOP if we asked for it</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t */</span></span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (busy_flag &amp; mask)</span><br><span class=\"line\">\t\t\t\t\t\tcan_busy_loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res_in)</span><br><span class=\"line\">\t\t\t\t*rinp = res_in;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res_out)</span><br><span class=\"line\">\t\t\t\t*routp = res_out;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res_ex)</span><br><span class=\"line\">\t\t\t\t*rexp = res_ex;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cond_resched</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//退出循环，条件： 事件就绪/超时/收到信号</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retval || timed_out || <span class=\"built_in\">signal_pending</span>(current))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (table.error) &#123;</span><br><span class=\"line\">\t\t\tretval = table.error;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (can_busy_loop &amp;&amp; !<span class=\"built_in\">need_resched</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!busy_start) &#123;</span><br><span class=\"line\">\t\t\t\tbusy_start = <span class=\"built_in\">busy_loop_current_time</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">busy_loop_timeout</span>(busy_start))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbusy_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * If this is the first loop and we have a timeout</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * given, then we convert to ktime_t and set the to</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * pointer to the expiry value.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (end_time &amp;&amp; !to) &#123;</span><br><span class=\"line\">\t\t\texpire = <span class=\"built_in\">timespec64_to_ktime</span>(*end_time);</span><br><span class=\"line\">\t\t\tto = &amp;expire;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//超时就休眠一会儿「中断会儿」</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">poll_schedule_timeout</span>(&amp;table, TASK_INTERRUPTIBLE,</span><br><span class=\"line\">\t\t\t\t\t   to, slack))</span><br><span class=\"line\">\t\t\ttimed_out = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">poll_freewait</span>(&amp;table);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">poll_schedule_timeout</span><span class=\"params\">(<span class=\"keyword\">struct</span> poll_wqueues *pwq, <span class=\"type\">int</span> state,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t  <span class=\"type\">ktime_t</span> *expires, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> slack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> rc = -EINTR;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">set_current_state</span>(state);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pwq-&gt;triggered)</span><br><span class=\"line\">\t\trc = <span class=\"built_in\">schedule_hrtimeout_range</span>(expires, slack, HRTIMER_MODE_ABS);</span><br><span class=\"line\">\t__set_current_state(TASK_RUNNING);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Prepare for the next iteration.</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * The following smp_store_mb() serves two purposes.  First, it&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">\t * the counterpart rmb of the wmb in pollwake() such that data</span></span><br><span class=\"line\"><span class=\"comment\">\t * written before wake up is always visible after wake up.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Second, the full barrier guarantees that triggered clearing</span></span><br><span class=\"line\"><span class=\"comment\">\t * doesn&#x27;t pass event check of the next iteration.  Note that</span></span><br><span class=\"line\"><span class=\"comment\">\t * this problem doesn&#x27;t exist for the first iteration as</span></span><br><span class=\"line\"><span class=\"comment\">\t * add_wait_queue() has full barrier semantics.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">smp_store_mb</span>(pwq-&gt;triggered, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"poll-wait\"><a class=\"header-anchor\" href=\"#poll-wait\">¶</a>poll_wait</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * structures and helpers for f_op-&gt;poll implementations</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//类似一个回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*poll_queue_proc)</span><span class=\"params\">(<span class=\"keyword\">struct</span> file *, <span class=\"type\">wait_queue_head_t</span> *, <span class=\"keyword\">struct</span> poll_table_struct *)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">poll_table_struct</span> &#123;</span><br><span class=\"line\">\tpoll_queue_proc _qproc; <span class=\"comment\">//callback机制</span></span><br><span class=\"line\">\t<span class=\"type\">__poll_t</span> _key;</span><br><span class=\"line\">&#125; poll_table;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">poll_wait</span><span class=\"params\">(<span class=\"keyword\">struct</span> file * filp, <span class=\"type\">wait_queue_head_t</span> * wait_address, poll_table *p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p &amp;&amp; p-&gt;_qproc &amp;&amp; wait_address)</span><br><span class=\"line\">\t\tp-&gt;_qproc(filp, wait_address, p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"fd数量问题\"><a class=\"header-anchor\" href=\"#fd数量问题\">¶</a>fd数量问题</h3>\n<blockquote>\n<p>include/uapi/linux/posix_types.h</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __FD_SETSIZE\t1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//__FD_SETSIZE当下标使？？？what！</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> fds_bits[__FD_SETSIZE / (<span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>))];</span><br><span class=\"line\">&#125; __kernel_fd_set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fd</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">file</span> *file;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> flags;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从上面看来文件描述符只是一个整数值，用来操作下标的，主要是每一个进程file数组的下标。理解do_select是核心。</p>\n</blockquote>\n<h3 id=\"select-与poll\"><a class=\"header-anchor\" href=\"#select-与poll\">¶</a>select 与poll</h3>\n<blockquote>\n<p>poll取消了最大数量的限制,返回结果还是需要轮询来获取就绪的描述符。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">pollfd</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\">\t<span class=\"type\">short</span> events; <span class=\"comment\">//request</span></span><br><span class=\"line\">\t<span class=\"type\">short</span> revents; <span class=\"comment\">// return</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>具体见后续更新「poll源码」</p>\n<h3 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h3>\n<p><a href=\"https://www.oreilly.com/openbook/linuxdrive3/book/\">Linux Device Drivers, Third Edition</a><br>\n<a href=\"https://stackoverflow.com/questions/11496059/how-do-system-calls-like-select-or-poll-work-under-the-hood\">How do system calls like select() or poll() work under the hood?</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>select poll epoll三个老生长谈的问题.这次不是来讲区别的，后续会更新一篇关于三者区别的。</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>select属于linux系列的文件系统「fs」的范畴，每次的系统调用、打开软件、启动程序等等都会涉及到文件的读写，<br>\n这个是在所难免的。</p>\n<p>那么I/O事件的基本思路：文件准备ok，开始读写，等函数返回，根据结果继续运行.</p>\n<p>如果是自己实现，大体上无非以下思路：</p>","more":"<ul>\n<li>创建多个进程/线程来监听</li>\n<li>Non-blocking读写监听的轮询</li>\n<li>异步I/O与Unix Signal事件机制</li>\n</ul>\n<p>先来学习下linux源码是怎么处理select机制的：</p>\n<blockquote>\n<p>linux version: 5.10-r5</p>\n</blockquote>\n<h3 id=\"概览图\"><a class=\"header-anchor\" href=\"#概览图\">¶</a>概览图</h3>\n<p>梳理了下，大概整理成了流程图：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux%E6%BA%90%E7%A0%81-select-1.png\" alt=\"\"></p>\n<h3 id=\"select切入点\"><a class=\"header-anchor\" href=\"#select切入点\">¶</a>select切入点</h3>\n<p>既然知道了select属于fs系列的，那就很容易找到:[fs/select.c]</p>\n<p>查看select命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man 2 select</span><br></pre></td></tr></table></figure>\n<p>下面按照以下顺序来解读，一起学习：</p>\n<ul>\n<li>入口 SYSCALL_DEFINE5</li>\n<li>核心函数 do_select</li>\n<li>设备驱动的操作函数</li>\n<li>poll_wait与设备的等待队列</li>\n<li>fd数量限制「why」</li>\n<li>select与poll</li>\n</ul>\n<h3 id=\"SYSCALL-DEFINE5\"><a class=\"header-anchor\" href=\"#SYSCALL-DEFINE5\">¶</a>SYSCALL_DEFINE5</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">SYSCALL_DEFINE5</span>(select, <span class=\"type\">int</span>, n, fd_set __user *, inp, fd_set __user *, outp,</span><br><span class=\"line\">\t\tfd_set __user *, exp, <span class=\"keyword\">struct</span> __kernel_old_timeval __user *, tvp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">kern_select</span>(n, inp, outp, exp, tvp);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>函数：core_sys_select中主要的do_select处理其中的逻辑</p>\n<h3 id=\"do-select\"><a class=\"header-anchor\" href=\"#do-select\">¶</a>do_select</h3>\n<p>关键性的结构体</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *in, *out, *ex; <span class=\"comment\">//输出 、输入、异常</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *res_in, *res_out, *res_ex;</span><br><span class=\"line\">&#125; fd_set_bits;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">do_select</span><span class=\"params\">(<span class=\"type\">int</span> n, fd_set_bits *fds, <span class=\"keyword\">struct</span> timespec64 *end_time)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">ktime_t</span> expire, *to = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">poll_wqueues</span> table;</span><br><span class=\"line\">\tpoll_table *wait;</span><br><span class=\"line\">\t<span class=\"type\">int</span> retval, i, timed_out = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 slack = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">__poll_t</span> busy_flag = <span class=\"built_in\">net_busy_loop_on</span>() ? POLL_BUSY_LOOP : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> busy_start = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">rcu_read_lock</span>();</span><br><span class=\"line\">    <span class=\"comment\">//找出文件的最大描述符</span></span><br><span class=\"line\">\tretval = <span class=\"built_in\">max_select_fd</span>(n, fds);</span><br><span class=\"line\">\t<span class=\"built_in\">rcu_read_unlock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (retval &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">\tn = retval;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">\t<span class=\"built_in\">poll_initwait</span>(&amp;table);</span><br><span class=\"line\">\twait = &amp;table.pt;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end_time &amp;&amp; !end_time-&gt;tv_sec &amp;&amp; !end_time-&gt;tv_nsec) &#123;</span><br><span class=\"line\">\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\ttimed_out = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end_time &amp;&amp; !timed_out)</span><br><span class=\"line\">\t\tslack = <span class=\"built_in\">select_estimate_accuracy</span>(end_time);</span><br><span class=\"line\"></span><br><span class=\"line\">\tretval = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> *rinp, *routp, *rexp, *inp, *outp, *exp;</span><br><span class=\"line\">\t\t<span class=\"type\">bool</span> can_busy_loop = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tinp = fds-&gt;in; outp = fds-&gt;out; exp = fds-&gt;ex;</span><br><span class=\"line\">\t\trinp = fds-&gt;res_in; routp = fds-&gt;res_out; rexp = fds-&gt;res_ex;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//遍历所有的fd.......同步等.....</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; ++rinp, ++routp, ++rexp) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> in, out, ex, all_bits, bit = <span class=\"number\">1</span>, j;</span><br><span class=\"line\">\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> res_in = <span class=\"number\">0</span>, res_out = <span class=\"number\">0</span>, res_ex = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"type\">__poll_t</span> mask;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tin = *inp++; out = *outp++; ex = *exp++;</span><br><span class=\"line\">\t\t\tall_bits = in | out | ex;</span><br><span class=\"line\">            <span class=\"comment\">//没有任何注册事件</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (all_bits == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\ti += BITS_PER_LONG;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; BITS_PER_LONG; ++j, ++i, bit &lt;&lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">struct</span> <span class=\"title class_\">fd</span> f;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i &gt;= n)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"comment\">//跳过未注册的</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!(bit &amp; all_bits))</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\tf = <span class=\"built_in\">fdget</span>(i);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (f.file) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">wait_key_set</span>(wait, in, out, bit,</span><br><span class=\"line\">\t\t\t\t\t\t     busy_flag);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//对每一个fd进行检测</span></span><br><span class=\"line\">\t\t\t\t\tmask = <span class=\"built_in\">vfs_poll</span>(f.file, wait);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">fdput</span>(f);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ((mask &amp; POLLIN_SET) &amp;&amp; (in &amp; bit)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres_in |= bit;</span><br><span class=\"line\">\t\t\t\t\t\tretval++;</span><br><span class=\"line\">\t\t\t\t\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ((mask &amp; POLLOUT_SET) &amp;&amp; (out &amp; bit)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres_out |= bit;</span><br><span class=\"line\">\t\t\t\t\t\tretval++;</span><br><span class=\"line\">\t\t\t\t\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> ((mask &amp; POLLEX_SET) &amp;&amp; (ex &amp; bit)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tres_ex |= bit;</span><br><span class=\"line\">\t\t\t\t\t\tretval++;</span><br><span class=\"line\">\t\t\t\t\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">/* got something, stop busy polling */</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (retval) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcan_busy_loop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t\tbusy_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t * only remember a returned</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t * POLL_BUSY_LOOP if we asked for it</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t */</span></span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (busy_flag &amp; mask)</span><br><span class=\"line\">\t\t\t\t\t\tcan_busy_loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res_in)</span><br><span class=\"line\">\t\t\t\t*rinp = res_in;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res_out)</span><br><span class=\"line\">\t\t\t\t*routp = res_out;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (res_ex)</span><br><span class=\"line\">\t\t\t\t*rexp = res_ex;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cond_resched</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\twait-&gt;_qproc = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//退出循环，条件： 事件就绪/超时/收到信号</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (retval || timed_out || <span class=\"built_in\">signal_pending</span>(current))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (table.error) &#123;</span><br><span class=\"line\">\t\t\tretval = table.error;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* only if found POLL_BUSY_LOOP sockets &amp;&amp; not out of time */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (can_busy_loop &amp;&amp; !<span class=\"built_in\">need_resched</span>()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!busy_start) &#123;</span><br><span class=\"line\">\t\t\t\tbusy_start = <span class=\"built_in\">busy_loop_current_time</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">busy_loop_timeout</span>(busy_start))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tbusy_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * If this is the first loop and we have a timeout</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * given, then we convert to ktime_t and set the to</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * pointer to the expiry value.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (end_time &amp;&amp; !to) &#123;</span><br><span class=\"line\">\t\t\texpire = <span class=\"built_in\">timespec64_to_ktime</span>(*end_time);</span><br><span class=\"line\">\t\t\tto = &amp;expire;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//超时就休眠一会儿「中断会儿」</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">poll_schedule_timeout</span>(&amp;table, TASK_INTERRUPTIBLE,</span><br><span class=\"line\">\t\t\t\t\t   to, slack))</span><br><span class=\"line\">\t\t\ttimed_out = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">poll_freewait</span>(&amp;table);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"type\">int</span> <span class=\"title\">poll_schedule_timeout</span><span class=\"params\">(<span class=\"keyword\">struct</span> poll_wqueues *pwq, <span class=\"type\">int</span> state,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">\t\t\t  <span class=\"type\">ktime_t</span> *expires, <span class=\"type\">unsigned</span> <span class=\"type\">long</span> slack)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> rc = -EINTR;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">set_current_state</span>(state);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pwq-&gt;triggered)</span><br><span class=\"line\">\t\trc = <span class=\"built_in\">schedule_hrtimeout_range</span>(expires, slack, HRTIMER_MODE_ABS);</span><br><span class=\"line\">\t__set_current_state(TASK_RUNNING);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Prepare for the next iteration.</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * The following smp_store_mb() serves two purposes.  First, it&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">\t * the counterpart rmb of the wmb in pollwake() such that data</span></span><br><span class=\"line\"><span class=\"comment\">\t * written before wake up is always visible after wake up.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Second, the full barrier guarantees that triggered clearing</span></span><br><span class=\"line\"><span class=\"comment\">\t * doesn&#x27;t pass event check of the next iteration.  Note that</span></span><br><span class=\"line\"><span class=\"comment\">\t * this problem doesn&#x27;t exist for the first iteration as</span></span><br><span class=\"line\"><span class=\"comment\">\t * add_wait_queue() has full barrier semantics.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"built_in\">smp_store_mb</span>(pwq-&gt;triggered, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> rc;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"poll-wait\"><a class=\"header-anchor\" href=\"#poll-wait\">¶</a>poll_wait</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * structures and helpers for f_op-&gt;poll implementations</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> <span class=\"comment\">//类似一个回调函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">void</span> <span class=\"params\">(*poll_queue_proc)</span><span class=\"params\">(<span class=\"keyword\">struct</span> file *, <span class=\"type\">wait_queue_head_t</span> *, <span class=\"keyword\">struct</span> poll_table_struct *)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">poll_table_struct</span> &#123;</span><br><span class=\"line\">\tpoll_queue_proc _qproc; <span class=\"comment\">//callback机制</span></span><br><span class=\"line\">\t<span class=\"type\">__poll_t</span> _key;</span><br><span class=\"line\">&#125; poll_table;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> <span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">poll_wait</span><span class=\"params\">(<span class=\"keyword\">struct</span> file * filp, <span class=\"type\">wait_queue_head_t</span> * wait_address, poll_table *p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p &amp;&amp; p-&gt;_qproc &amp;&amp; wait_address)</span><br><span class=\"line\">\t\tp-&gt;_qproc(filp, wait_address, p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"fd数量问题\"><a class=\"header-anchor\" href=\"#fd数量问题\">¶</a>fd数量问题</h3>\n<blockquote>\n<p>include/uapi/linux/posix_types.h</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> __FD_SETSIZE\t1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//__FD_SETSIZE当下标使？？？what！</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> fds_bits[__FD_SETSIZE / (<span class=\"number\">8</span> * <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>))];</span><br><span class=\"line\">&#125; __kernel_fd_set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">fd</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">struct</span> <span class=\"title class_\">file</span> *file;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> flags;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>从上面看来文件描述符只是一个整数值，用来操作下标的，主要是每一个进程file数组的下标。理解do_select是核心。</p>\n</blockquote>\n<h3 id=\"select-与poll\"><a class=\"header-anchor\" href=\"#select-与poll\">¶</a>select 与poll</h3>\n<blockquote>\n<p>poll取消了最大数量的限制,返回结果还是需要轮询来获取就绪的描述符。</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">pollfd</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> fd;</span><br><span class=\"line\">\t<span class=\"type\">short</span> events; <span class=\"comment\">//request</span></span><br><span class=\"line\">\t<span class=\"type\">short</span> revents; <span class=\"comment\">// return</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>具体见后续更新「poll源码」</p>\n<h3 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h3>\n<p><a href=\"https://www.oreilly.com/openbook/linuxdrive3/book/\">Linux Device Drivers, Third Edition</a><br>\n<a href=\"https://stackoverflow.com/questions/11496059/how-do-system-calls-like-select-or-poll-work-under-the-hood\">How do system calls like select() or poll() work under the hood?</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux%E6%BA%90%E7%A0%81-select-1.png","popularPost_tmp_gaData":{"updated":"Wed Nov 18 2020 19:09:17 GMT+0800 (中国标准时间)","title":"「21」linux select源码","path":"archives/ba7b70bf.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/linux%E6%BA%90%E7%A0%81-select-1.png","excerpt":"<blockquote>\n<p>select poll epoll三个老生长谈的问题.这次不是来讲区别的，后续会更新一篇关于三者区别的。</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>select属于linux系列的文件系统「fs」的范畴，每次的系统调用、打开软件、启动程序等等都会涉及到文件的读写，<br>\n这个是在所难免的。</p>\n<p>那么I/O事件的基本思路：文件准备ok，开始读写，等函数返回，根据结果继续运行.</p>\n<p>如果是自己实现，大体上无非以下思路：</p>","date":{"_isAMomentObject":true,"_i":"2020-11-17T11:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-17T11:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","Linux"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5541},{"title":"「22」GPM g0和m0","date":"2020-11-18T13:09:17.000Z","updated":"2020-11-18T15:09:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"392d66f0","_content":"\n### 前序\n\nGPM算是经典的调度模型，但是每个程序都需要一个启动的函数或者入口；\nGPM也不例外。\n直接分析源码，显得很枯燥，如果说要你设计GPM中的G和M的执行关系，你应该怎么设计呢？\n<!--more-->\n>go version: 1.14.3\n\n\n### 尝试设计\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182201.png)\n如果只是这样的话，那总体的G和M是否需要管理者，毕竟在1.1版本之前只有GM模型，，，\n那么为了好管理M和G，就需要第一个M和G成为管理者，类似于大总管这样的存在。\n\n### 再次设计\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182219.png)\n\n### 关键点：\n* p先启动\n* g0的创建；用于创建新的G\n* m0的创建；用于创建新的M\n* 启动main调度整个系统\n>上述这样比较合理点。\n\n\n### Go源码的如何实现？\n\n[bootstrap sequence](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L524)\n\n\n```go\n// The bootstrap sequence is:\n//\n//\tcall osinit\n//\tcall schedinit\n//\tmake & queue new G\n//\tcall runtime·mstart\n//\n// The new G calls runtime·main.\n```\n\n>[g0和m0初始化过程](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L194)\n\n```c#\n// set the per-goroutine and per-mach \"registers\"\n\tget_tls(BX)\n\tLEAQ\truntime·g0(SB), CX\n\tMOVQ\tCX, g(BX)\n\tLEAQ\truntime·m0(SB), AX\n\n\t// save m->g0 = g0\n\tMOVQ\tCX, m_g0(AX)\n\t// save m0 to g0->m\n\tMOVQ\tAX, g_m(CX)\n\n\tCLD\t\t\t\t// convention is D is always left cleared\n\tCALL\truntime·check(SB)\n\n\tMOVL\t16(SP), AX\t\t// copy argc\n\tMOVL\tAX, 0(SP)\n\tMOVQ\t24(SP), AX\t\t// copy argv\n\tMOVQ\tAX, 8(SP)\n\tCALL\truntime·args(SB)\n\tCALL\truntime·osinit(SB)\n\tCALL\truntime·schedinit(SB)\n\n\t// create a new goroutine to start program\n\tMOVQ\t$runtime·mainPC(SB), AX\t\t// entry\n\tPUSHQ\tAX\n\tPUSHQ\t$0\t\t\t// arg size\n\tCALL\truntime·newproc(SB)\n\tPOPQ\tAX\n\tPOPQ\tAX\n\n\t// start this M\n\tCALL\truntime·mstart(SB)\n```\n\n\n\n>到这里了，初始化思路基本确定了\n```\n1、initP\n2、m0和g0的绑定\n3、new groutine for main主线程启动\n4、mstart\n```\n\n### m init涉及到的函数\n* mstart\n* mstart1\n* mstartm0\n\n#### mstart\n\n```go\n// mstart is the entry-point for new Ms.\n//\n// This must not split the stack because we may not even have stack\n// bounds set up yet.\n//\n// May run during STW (because it doesn't have a P yet), so write\n// barriers are not allowed.\n//\n//go:nosplit\n//go:nowritebarrierrec\nfunc mstart() {\n\t_g_ := getg()\n\n    //低位判断\n\tosStack := _g_.stack.lo == 0\n\tif osStack {\n\t\t// Initialize stack bounds from system stack.\n\t\t// Cgo may have left stack size in stack.hi.\n\t\t// minit may update the stack bounds.\n\t\tsize := _g_.stack.hi\n\t\tif size == 0 {\n\t\t\tsize = 8192 * sys.StackGuardMultiplier\n        }\n        //g0的stack空间是真的大\n\t\t_g_.stack.hi = uintptr(noescape(unsafe.Pointer(&size)))\n\t\t_g_.stack.lo = _g_.stack.hi - size + 1024\n\t}\n\t// Initialize stack guard so that we can start calling regular\n\t// Go code.\n\t_g_.stackguard0 = _g_.stack.lo + _StackGuard\n\t// This is the g0, so we can also call go:systemstack\n\t// functions, which check stackguard1.\n\t_g_.stackguard1 = _g_.stackguard0\n\tmstart1()\n\n\t// Exit this thread.\n\tswitch GOOS {\n\tcase \"windows\", \"solaris\", \"illumos\", \"plan9\", \"darwin\", \"aix\":\n\t\t// Windows, Solaris, illumos, Darwin, AIX and Plan 9 always system-allocate\n\t\t// the stack, but put it in _g_.stack before mstart,\n\t\t// so the logic above hasn't set osStack yet.\n\t\tosStack = true\n\t}\n\tmexit(osStack)\n}\n```\n\n#### mstart1\n\n```go\n\nfunc mstart1() {\n\t_g_ := getg()\n\n    //启动非g0就崩盘了\n\tif _g_ != _g_.m.g0 {\n\t\tthrow(\"bad runtime·mstart\")\n\t}\n\n    //初始化\n\t// Record the caller for use as the top of stack in mcall and\n\t// for terminating the thread.\n\t// We're never coming back to mstart1 after we call schedule,\n\t// so other calls can reuse the current frame.\n\tsave(getcallerpc(), getcallersp())\n\tasminit()\n\tminit()\n\n\t// Install signal handlers; after minit so that minit can\n    // prepare the thread to be able to handle the signals.\n    //m0启动\n\tif _g_.m == &m0 {\n\t\tmstartm0()\n\t}\n\n\tif fn := _g_.m.mstartfn; fn != nil {\n\t\tfn()\n\t}\n\n\tif _g_.m != &m0 {\n\t\tacquirep(_g_.m.nextp.ptr())\n\t\t_g_.m.nextp = 0\n    }\n    //开始调度\n\tschedule()\n}\n```\n\n\n#### mstartm0\n\n```go\n// mstart1的具体实现，仅run在m0上\n// mstartm0 implements part of mstart1 that only runs on the m0.\n//\n// Write barriers are allowed here because we know the GC can't be\n// running yet, so they'll be no-ops.\n//\n//go:yeswritebarrierrec\nfunc mstartm0() {\n\t// Create an extra M for callbacks on threads not created by Go.\n\t// An extra M is also needed on Windows for callbacks created by\n    // syscall.NewCallback. See issue #6751 for details.\n    //windows下需要一个额外的M\n\tif (iscgo || GOOS == \"windows\") && !cgoHasExtraM {\n\t\tcgoHasExtraM = true\n\t\tnewextram()\n    }\n    //初始化信号量,用于后续调度\n\tinitsig(false)\n}\n```\n\n#### [后续schedule函数](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L1119)\n\n>管家有了，那么开始调度吧....。\n\n### 下节：\n\n* schedule","source":"_posts/22-GPM g0和m0.md","raw":"---\ntitle: 「22」GPM g0和m0\ndate: '2020/11/18 21:09:17'\nupdated: '2020/11/18 23:09:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: 392d66f0\n---\n\n### 前序\n\nGPM算是经典的调度模型，但是每个程序都需要一个启动的函数或者入口；\nGPM也不例外。\n直接分析源码，显得很枯燥，如果说要你设计GPM中的G和M的执行关系，你应该怎么设计呢？\n<!--more-->\n>go version: 1.14.3\n\n\n### 尝试设计\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182201.png)\n如果只是这样的话，那总体的G和M是否需要管理者，毕竟在1.1版本之前只有GM模型，，，\n那么为了好管理M和G，就需要第一个M和G成为管理者，类似于大总管这样的存在。\n\n### 再次设计\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182219.png)\n\n### 关键点：\n* p先启动\n* g0的创建；用于创建新的G\n* m0的创建；用于创建新的M\n* 启动main调度整个系统\n>上述这样比较合理点。\n\n\n### Go源码的如何实现？\n\n[bootstrap sequence](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L524)\n\n\n```go\n// The bootstrap sequence is:\n//\n//\tcall osinit\n//\tcall schedinit\n//\tmake & queue new G\n//\tcall runtime·mstart\n//\n// The new G calls runtime·main.\n```\n\n>[g0和m0初始化过程](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L194)\n\n```c#\n// set the per-goroutine and per-mach \"registers\"\n\tget_tls(BX)\n\tLEAQ\truntime·g0(SB), CX\n\tMOVQ\tCX, g(BX)\n\tLEAQ\truntime·m0(SB), AX\n\n\t// save m->g0 = g0\n\tMOVQ\tCX, m_g0(AX)\n\t// save m0 to g0->m\n\tMOVQ\tAX, g_m(CX)\n\n\tCLD\t\t\t\t// convention is D is always left cleared\n\tCALL\truntime·check(SB)\n\n\tMOVL\t16(SP), AX\t\t// copy argc\n\tMOVL\tAX, 0(SP)\n\tMOVQ\t24(SP), AX\t\t// copy argv\n\tMOVQ\tAX, 8(SP)\n\tCALL\truntime·args(SB)\n\tCALL\truntime·osinit(SB)\n\tCALL\truntime·schedinit(SB)\n\n\t// create a new goroutine to start program\n\tMOVQ\t$runtime·mainPC(SB), AX\t\t// entry\n\tPUSHQ\tAX\n\tPUSHQ\t$0\t\t\t// arg size\n\tCALL\truntime·newproc(SB)\n\tPOPQ\tAX\n\tPOPQ\tAX\n\n\t// start this M\n\tCALL\truntime·mstart(SB)\n```\n\n\n\n>到这里了，初始化思路基本确定了\n```\n1、initP\n2、m0和g0的绑定\n3、new groutine for main主线程启动\n4、mstart\n```\n\n### m init涉及到的函数\n* mstart\n* mstart1\n* mstartm0\n\n#### mstart\n\n```go\n// mstart is the entry-point for new Ms.\n//\n// This must not split the stack because we may not even have stack\n// bounds set up yet.\n//\n// May run during STW (because it doesn't have a P yet), so write\n// barriers are not allowed.\n//\n//go:nosplit\n//go:nowritebarrierrec\nfunc mstart() {\n\t_g_ := getg()\n\n    //低位判断\n\tosStack := _g_.stack.lo == 0\n\tif osStack {\n\t\t// Initialize stack bounds from system stack.\n\t\t// Cgo may have left stack size in stack.hi.\n\t\t// minit may update the stack bounds.\n\t\tsize := _g_.stack.hi\n\t\tif size == 0 {\n\t\t\tsize = 8192 * sys.StackGuardMultiplier\n        }\n        //g0的stack空间是真的大\n\t\t_g_.stack.hi = uintptr(noescape(unsafe.Pointer(&size)))\n\t\t_g_.stack.lo = _g_.stack.hi - size + 1024\n\t}\n\t// Initialize stack guard so that we can start calling regular\n\t// Go code.\n\t_g_.stackguard0 = _g_.stack.lo + _StackGuard\n\t// This is the g0, so we can also call go:systemstack\n\t// functions, which check stackguard1.\n\t_g_.stackguard1 = _g_.stackguard0\n\tmstart1()\n\n\t// Exit this thread.\n\tswitch GOOS {\n\tcase \"windows\", \"solaris\", \"illumos\", \"plan9\", \"darwin\", \"aix\":\n\t\t// Windows, Solaris, illumos, Darwin, AIX and Plan 9 always system-allocate\n\t\t// the stack, but put it in _g_.stack before mstart,\n\t\t// so the logic above hasn't set osStack yet.\n\t\tosStack = true\n\t}\n\tmexit(osStack)\n}\n```\n\n#### mstart1\n\n```go\n\nfunc mstart1() {\n\t_g_ := getg()\n\n    //启动非g0就崩盘了\n\tif _g_ != _g_.m.g0 {\n\t\tthrow(\"bad runtime·mstart\")\n\t}\n\n    //初始化\n\t// Record the caller for use as the top of stack in mcall and\n\t// for terminating the thread.\n\t// We're never coming back to mstart1 after we call schedule,\n\t// so other calls can reuse the current frame.\n\tsave(getcallerpc(), getcallersp())\n\tasminit()\n\tminit()\n\n\t// Install signal handlers; after minit so that minit can\n    // prepare the thread to be able to handle the signals.\n    //m0启动\n\tif _g_.m == &m0 {\n\t\tmstartm0()\n\t}\n\n\tif fn := _g_.m.mstartfn; fn != nil {\n\t\tfn()\n\t}\n\n\tif _g_.m != &m0 {\n\t\tacquirep(_g_.m.nextp.ptr())\n\t\t_g_.m.nextp = 0\n    }\n    //开始调度\n\tschedule()\n}\n```\n\n\n#### mstartm0\n\n```go\n// mstart1的具体实现，仅run在m0上\n// mstartm0 implements part of mstart1 that only runs on the m0.\n//\n// Write barriers are allowed here because we know the GC can't be\n// running yet, so they'll be no-ops.\n//\n//go:yeswritebarrierrec\nfunc mstartm0() {\n\t// Create an extra M for callbacks on threads not created by Go.\n\t// An extra M is also needed on Windows for callbacks created by\n    // syscall.NewCallback. See issue #6751 for details.\n    //windows下需要一个额外的M\n\tif (iscgo || GOOS == \"windows\") && !cgoHasExtraM {\n\t\tcgoHasExtraM = true\n\t\tnewextram()\n    }\n    //初始化信号量,用于后续调度\n\tinitsig(false)\n}\n```\n\n#### [后续schedule函数](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L1119)\n\n>管家有了，那么开始调度吧....。\n\n### 下节：\n\n* schedule","slug":"22-GPM g0和m0","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4s001kzfqxfcppblt3","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>GPM算是经典的调度模型，但是每个程序都需要一个启动的函数或者入口；<br>\nGPM也不例外。<br>\n直接分析源码，显得很枯燥，如果说要你设计GPM中的G和M的执行关系，你应该怎么设计呢？</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h3 id=\"尝试设计\"><a class=\"header-anchor\" href=\"#尝试设计\">¶</a>尝试设计</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182201.png\" alt=\"\"><br>\n如果只是这样的话，那总体的G和M是否需要管理者，毕竟在1.1版本之前只有GM模型，，，<br>\n那么为了好管理M和G，就需要第一个M和G成为管理者，类似于大总管这样的存在。</p>\n<h3 id=\"再次设计\"><a class=\"header-anchor\" href=\"#再次设计\">¶</a>再次设计</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182219.png\" alt=\"\"></p>\n<h3 id=\"关键点：\"><a class=\"header-anchor\" href=\"#关键点：\">¶</a>关键点：</h3>\n<ul>\n<li>p先启动</li>\n<li>g0的创建；用于创建新的G</li>\n<li>m0的创建；用于创建新的M</li>\n<li>启动main调度整个系统</li>\n</ul>\n<blockquote>\n<p>上述这样比较合理点。</p>\n</blockquote>\n<h3 id=\"Go源码的如何实现？\"><a class=\"header-anchor\" href=\"#Go源码的如何实现？\">¶</a>Go源码的如何实现？</h3>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L524\">bootstrap sequence</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The bootstrap sequence is:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall osinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall schedinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tmake &amp; queue new G</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall runtime·mstart</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The new G calls runtime·main.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L194\">g0和m0初始化过程</a></p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// set the per-goroutine and per-mach &quot;registers&quot;</span></span><br><span class=\"line\">\tget_tls(BX)</span><br><span class=\"line\">\tLEAQ\truntime·g0(SB), CX</span><br><span class=\"line\">\tMOVQ\tCX, g(BX)</span><br><span class=\"line\">\tLEAQ\truntime·m0(SB), AX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// save m-&gt;g0 = g0</span></span><br><span class=\"line\">\tMOVQ\tCX, m_g0(AX)</span><br><span class=\"line\">\t<span class=\"comment\">// save m0 to g0-&gt;m</span></span><br><span class=\"line\">\tMOVQ\tAX, g_m(CX)</span><br><span class=\"line\"></span><br><span class=\"line\">\tCLD\t\t\t\t<span class=\"comment\">// convention is D is always left cleared</span></span><br><span class=\"line\">\tCALL\truntime·check(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVL\t<span class=\"number\">16</span>(SP), AX\t\t<span class=\"comment\">// copy argc</span></span><br><span class=\"line\">\tMOVL\tAX, <span class=\"number\">0</span>(SP)</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">24</span>(SP), AX\t\t<span class=\"comment\">// copy argv</span></span><br><span class=\"line\">\tMOVQ\tAX, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">\tCALL\truntime·args(SB)</span><br><span class=\"line\">\tCALL\truntime·osinit(SB)</span><br><span class=\"line\">\tCALL\truntime·schedinit(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// create a new goroutine to start program</span></span><br><span class=\"line\">\tMOVQ\t$runtime·mainPC(SB), AX\t\t<span class=\"comment\">// entry</span></span><br><span class=\"line\">\tPUSHQ\tAX</span><br><span class=\"line\">\tPUSHQ\t$<span class=\"number\">0</span>\t\t\t<span class=\"comment\">// arg size</span></span><br><span class=\"line\">\tCALL\truntime·newproc(SB)</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// start this M</span></span><br><span class=\"line\">\tCALL\truntime·mstart(SB)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>到这里了，初始化思路基本确定了</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、initP</span><br><span class=\"line\">2、m0和g0的绑定</span><br><span class=\"line\">3、new groutine for main主线程启动</span><br><span class=\"line\">4、mstart</span><br></pre></td></tr></table></figure>\n<h3 id=\"m-init涉及到的函数\"><a class=\"header-anchor\" href=\"#m-init涉及到的函数\">¶</a>m init涉及到的函数</h3>\n<ul>\n<li>mstart</li>\n<li>mstart1</li>\n<li>mstartm0</li>\n</ul>\n<h4 id=\"mstart\"><a class=\"header-anchor\" href=\"#mstart\">¶</a>mstart</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mstart is the entry-point for new Ms.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This must not split the stack because we may not even have stack</span></span><br><span class=\"line\"><span class=\"comment\">// bounds set up yet.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// May run during STW (because it doesn&#x27;t have a P yet), so write</span></span><br><span class=\"line\"><span class=\"comment\">// barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mstart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//低位判断</span></span><br><span class=\"line\">\tosStack := _g_.stack.lo == <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> osStack &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Initialize stack bounds from system stack.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Cgo may have left stack size in stack.hi.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// minit may update the stack bounds.</span></span><br><span class=\"line\">\t\tsize := _g_.stack.hi</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> size == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tsize = <span class=\"number\">8192</span> * sys.StackGuardMultiplier</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//g0的stack空间是真的大</span></span><br><span class=\"line\">\t\t_g_.stack.hi = <span class=\"type\">uintptr</span>(noescape(unsafe.Pointer(&amp;size)))</span><br><span class=\"line\">\t\t_g_.stack.lo = _g_.stack.hi - size + <span class=\"number\">1024</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Initialize stack guard so that we can start calling regular</span></span><br><span class=\"line\">\t<span class=\"comment\">// Go code.</span></span><br><span class=\"line\">\t_g_.stackguard0 = _g_.stack.lo + _StackGuard</span><br><span class=\"line\">\t<span class=\"comment\">// This is the g0, so we can also call go:systemstack</span></span><br><span class=\"line\">\t<span class=\"comment\">// functions, which check stackguard1.</span></span><br><span class=\"line\">\t_g_.stackguard1 = _g_.stackguard0</span><br><span class=\"line\">\tmstart1()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Exit this thread.</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> GOOS &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;windows&quot;</span>, <span class=\"string\">&quot;solaris&quot;</span>, <span class=\"string\">&quot;illumos&quot;</span>, <span class=\"string\">&quot;plan9&quot;</span>, <span class=\"string\">&quot;darwin&quot;</span>, <span class=\"string\">&quot;aix&quot;</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Windows, Solaris, illumos, Darwin, AIX and Plan 9 always system-allocate</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the stack, but put it in _g_.stack before mstart,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// so the logic above hasn&#x27;t set osStack yet.</span></span><br><span class=\"line\">\t\tosStack = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmexit(osStack)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mstart1\"><a class=\"header-anchor\" href=\"#mstart1\">¶</a>mstart1</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mstart1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动非g0就崩盘了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _g_ != _g_.m.g0 &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;bad runtime·mstart&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">// Record the caller for use as the top of stack in mcall and</span></span><br><span class=\"line\">\t<span class=\"comment\">// for terminating the thread.</span></span><br><span class=\"line\">\t<span class=\"comment\">// We&#x27;re never coming back to mstart1 after we call schedule,</span></span><br><span class=\"line\">\t<span class=\"comment\">// so other calls can reuse the current frame.</span></span><br><span class=\"line\">\tsave(getcallerpc(), getcallersp())</span><br><span class=\"line\">\tasminit()</span><br><span class=\"line\">\tminit()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Install signal handlers; after minit so that minit can</span></span><br><span class=\"line\">    <span class=\"comment\">// prepare the thread to be able to handle the signals.</span></span><br><span class=\"line\">    <span class=\"comment\">//m0启动</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _g_.m == &amp;m0 &#123;</span><br><span class=\"line\">\t\tmstartm0()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fn := _g_.m.mstartfn; fn != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfn()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _g_.m != &amp;m0 &#123;</span><br><span class=\"line\">\t\tacquirep(_g_.m.nextp.ptr())</span><br><span class=\"line\">\t\t_g_.m.nextp = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//开始调度</span></span><br><span class=\"line\">\tschedule()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mstartm0\"><a class=\"header-anchor\" href=\"#mstartm0\">¶</a>mstartm0</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mstart1的具体实现，仅run在m0上</span></span><br><span class=\"line\"><span class=\"comment\">// mstartm0 implements part of mstart1 that only runs on the m0.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Write barriers are allowed here because we know the GC can&#x27;t be</span></span><br><span class=\"line\"><span class=\"comment\">// running yet, so they&#x27;ll be no-ops.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:yeswritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mstartm0</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Create an extra M for callbacks on threads not created by Go.</span></span><br><span class=\"line\">\t<span class=\"comment\">// An extra M is also needed on Windows for callbacks created by</span></span><br><span class=\"line\">    <span class=\"comment\">// syscall.NewCallback. See issue #6751 for details.</span></span><br><span class=\"line\">    <span class=\"comment\">//windows下需要一个额外的M</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (iscgo || GOOS == <span class=\"string\">&quot;windows&quot;</span>) &amp;&amp; !cgoHasExtraM &#123;</span><br><span class=\"line\">\t\tcgoHasExtraM = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\tnewextram()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//初始化信号量,用于后续调度</span></span><br><span class=\"line\">\tinitsig(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后续schedule函数\"><a class=\"header-anchor\" href=\"#后续schedule函数\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L1119\">后续schedule函数</a></h4>\n<blockquote>\n<p>管家有了，那么开始调度吧…。</p>\n</blockquote>\n<h3 id=\"下节：\"><a class=\"header-anchor\" href=\"#下节：\">¶</a>下节：</h3>\n<ul>\n<li>schedule</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>GPM算是经典的调度模型，但是每个程序都需要一个启动的函数或者入口；<br>\nGPM也不例外。<br>\n直接分析源码，显得很枯燥，如果说要你设计GPM中的G和M的执行关系，你应该怎么设计呢？</p>","more":"<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h3 id=\"尝试设计\"><a class=\"header-anchor\" href=\"#尝试设计\">¶</a>尝试设计</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182201.png\" alt=\"\"><br>\n如果只是这样的话，那总体的G和M是否需要管理者，毕竟在1.1版本之前只有GM模型，，，<br>\n那么为了好管理M和G，就需要第一个M和G成为管理者，类似于大总管这样的存在。</p>\n<h3 id=\"再次设计\"><a class=\"header-anchor\" href=\"#再次设计\">¶</a>再次设计</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182219.png\" alt=\"\"></p>\n<h3 id=\"关键点：\"><a class=\"header-anchor\" href=\"#关键点：\">¶</a>关键点：</h3>\n<ul>\n<li>p先启动</li>\n<li>g0的创建；用于创建新的G</li>\n<li>m0的创建；用于创建新的M</li>\n<li>启动main调度整个系统</li>\n</ul>\n<blockquote>\n<p>上述这样比较合理点。</p>\n</blockquote>\n<h3 id=\"Go源码的如何实现？\"><a class=\"header-anchor\" href=\"#Go源码的如何实现？\">¶</a>Go源码的如何实现？</h3>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L524\">bootstrap sequence</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The bootstrap sequence is:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall osinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall schedinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tmake &amp; queue new G</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall runtime·mstart</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The new G calls runtime·main.</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L194\">g0和m0初始化过程</a></p>\n</blockquote>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// set the per-goroutine and per-mach &quot;registers&quot;</span></span><br><span class=\"line\">\tget_tls(BX)</span><br><span class=\"line\">\tLEAQ\truntime·g0(SB), CX</span><br><span class=\"line\">\tMOVQ\tCX, g(BX)</span><br><span class=\"line\">\tLEAQ\truntime·m0(SB), AX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// save m-&gt;g0 = g0</span></span><br><span class=\"line\">\tMOVQ\tCX, m_g0(AX)</span><br><span class=\"line\">\t<span class=\"comment\">// save m0 to g0-&gt;m</span></span><br><span class=\"line\">\tMOVQ\tAX, g_m(CX)</span><br><span class=\"line\"></span><br><span class=\"line\">\tCLD\t\t\t\t<span class=\"comment\">// convention is D is always left cleared</span></span><br><span class=\"line\">\tCALL\truntime·check(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVL\t<span class=\"number\">16</span>(SP), AX\t\t<span class=\"comment\">// copy argc</span></span><br><span class=\"line\">\tMOVL\tAX, <span class=\"number\">0</span>(SP)</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">24</span>(SP), AX\t\t<span class=\"comment\">// copy argv</span></span><br><span class=\"line\">\tMOVQ\tAX, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">\tCALL\truntime·args(SB)</span><br><span class=\"line\">\tCALL\truntime·osinit(SB)</span><br><span class=\"line\">\tCALL\truntime·schedinit(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// create a new goroutine to start program</span></span><br><span class=\"line\">\tMOVQ\t$runtime·mainPC(SB), AX\t\t<span class=\"comment\">// entry</span></span><br><span class=\"line\">\tPUSHQ\tAX</span><br><span class=\"line\">\tPUSHQ\t$<span class=\"number\">0</span>\t\t\t<span class=\"comment\">// arg size</span></span><br><span class=\"line\">\tCALL\truntime·newproc(SB)</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// start this M</span></span><br><span class=\"line\">\tCALL\truntime·mstart(SB)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>到这里了，初始化思路基本确定了</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、initP</span><br><span class=\"line\">2、m0和g0的绑定</span><br><span class=\"line\">3、new groutine for main主线程启动</span><br><span class=\"line\">4、mstart</span><br></pre></td></tr></table></figure>\n<h3 id=\"m-init涉及到的函数\"><a class=\"header-anchor\" href=\"#m-init涉及到的函数\">¶</a>m init涉及到的函数</h3>\n<ul>\n<li>mstart</li>\n<li>mstart1</li>\n<li>mstartm0</li>\n</ul>\n<h4 id=\"mstart\"><a class=\"header-anchor\" href=\"#mstart\">¶</a>mstart</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mstart is the entry-point for new Ms.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This must not split the stack because we may not even have stack</span></span><br><span class=\"line\"><span class=\"comment\">// bounds set up yet.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// May run during STW (because it doesn&#x27;t have a P yet), so write</span></span><br><span class=\"line\"><span class=\"comment\">// barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mstart</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//低位判断</span></span><br><span class=\"line\">\tosStack := _g_.stack.lo == <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> osStack &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Initialize stack bounds from system stack.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Cgo may have left stack size in stack.hi.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// minit may update the stack bounds.</span></span><br><span class=\"line\">\t\tsize := _g_.stack.hi</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> size == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tsize = <span class=\"number\">8192</span> * sys.StackGuardMultiplier</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//g0的stack空间是真的大</span></span><br><span class=\"line\">\t\t_g_.stack.hi = <span class=\"type\">uintptr</span>(noescape(unsafe.Pointer(&amp;size)))</span><br><span class=\"line\">\t\t_g_.stack.lo = _g_.stack.hi - size + <span class=\"number\">1024</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Initialize stack guard so that we can start calling regular</span></span><br><span class=\"line\">\t<span class=\"comment\">// Go code.</span></span><br><span class=\"line\">\t_g_.stackguard0 = _g_.stack.lo + _StackGuard</span><br><span class=\"line\">\t<span class=\"comment\">// This is the g0, so we can also call go:systemstack</span></span><br><span class=\"line\">\t<span class=\"comment\">// functions, which check stackguard1.</span></span><br><span class=\"line\">\t_g_.stackguard1 = _g_.stackguard0</span><br><span class=\"line\">\tmstart1()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Exit this thread.</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> GOOS &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;windows&quot;</span>, <span class=\"string\">&quot;solaris&quot;</span>, <span class=\"string\">&quot;illumos&quot;</span>, <span class=\"string\">&quot;plan9&quot;</span>, <span class=\"string\">&quot;darwin&quot;</span>, <span class=\"string\">&quot;aix&quot;</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Windows, Solaris, illumos, Darwin, AIX and Plan 9 always system-allocate</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the stack, but put it in _g_.stack before mstart,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// so the logic above hasn&#x27;t set osStack yet.</span></span><br><span class=\"line\">\t\tosStack = <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmexit(osStack)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mstart1\"><a class=\"header-anchor\" href=\"#mstart1\">¶</a>mstart1</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mstart1</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动非g0就崩盘了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _g_ != _g_.m.g0 &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;bad runtime·mstart&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">// Record the caller for use as the top of stack in mcall and</span></span><br><span class=\"line\">\t<span class=\"comment\">// for terminating the thread.</span></span><br><span class=\"line\">\t<span class=\"comment\">// We&#x27;re never coming back to mstart1 after we call schedule,</span></span><br><span class=\"line\">\t<span class=\"comment\">// so other calls can reuse the current frame.</span></span><br><span class=\"line\">\tsave(getcallerpc(), getcallersp())</span><br><span class=\"line\">\tasminit()</span><br><span class=\"line\">\tminit()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Install signal handlers; after minit so that minit can</span></span><br><span class=\"line\">    <span class=\"comment\">// prepare the thread to be able to handle the signals.</span></span><br><span class=\"line\">    <span class=\"comment\">//m0启动</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _g_.m == &amp;m0 &#123;</span><br><span class=\"line\">\t\tmstartm0()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fn := _g_.m.mstartfn; fn != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfn()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> _g_.m != &amp;m0 &#123;</span><br><span class=\"line\">\t\tacquirep(_g_.m.nextp.ptr())</span><br><span class=\"line\">\t\t_g_.m.nextp = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//开始调度</span></span><br><span class=\"line\">\tschedule()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"mstartm0\"><a class=\"header-anchor\" href=\"#mstartm0\">¶</a>mstartm0</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mstart1的具体实现，仅run在m0上</span></span><br><span class=\"line\"><span class=\"comment\">// mstartm0 implements part of mstart1 that only runs on the m0.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Write barriers are allowed here because we know the GC can&#x27;t be</span></span><br><span class=\"line\"><span class=\"comment\">// running yet, so they&#x27;ll be no-ops.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:yeswritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mstartm0</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Create an extra M for callbacks on threads not created by Go.</span></span><br><span class=\"line\">\t<span class=\"comment\">// An extra M is also needed on Windows for callbacks created by</span></span><br><span class=\"line\">    <span class=\"comment\">// syscall.NewCallback. See issue #6751 for details.</span></span><br><span class=\"line\">    <span class=\"comment\">//windows下需要一个额外的M</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (iscgo || GOOS == <span class=\"string\">&quot;windows&quot;</span>) &amp;&amp; !cgoHasExtraM &#123;</span><br><span class=\"line\">\t\tcgoHasExtraM = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\tnewextram()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//初始化信号量,用于后续调度</span></span><br><span class=\"line\">\tinitsig(<span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"后续schedule函数\"><a class=\"header-anchor\" href=\"#后续schedule函数\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L1119\">后续schedule函数</a></h4>\n<blockquote>\n<p>管家有了，那么开始调度吧…。</p>\n</blockquote>\n<h3 id=\"下节：\"><a class=\"header-anchor\" href=\"#下节：\">¶</a>下节：</h3>\n<ul>\n<li>schedule</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182201.png","popularPost_tmp_gaData":{"updated":"Wed Nov 18 2020 23:09:17 GMT+0800 (中国标准时间)","title":"「22」GPM g0和m0","path":"archives/392d66f0.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM202011182201.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>GPM算是经典的调度模型，但是每个程序都需要一个启动的函数或者入口；<br>\nGPM也不例外。<br>\n直接分析源码，显得很枯燥，如果说要你设计GPM中的G和M的执行关系，你应该怎么设计呢？</p>","date":{"_isAMomentObject":true,"_i":"2020-11-18T13:09:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-18T13:09:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3616},{"title":"「23」GPM main入口函数","date":"2020-11-21T13:00:17.000Z","updated":"2020-11-21T13:00:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"9bb71eca","_content":"\n\n前面g0和m0瞎扯了部分的入口和一些关键的点。\n\n本来应该扯扯shedule调度方面的知识，但是这个先往后放一节吧，\n\n先学习下这个「入口函数」，毕竟对于每一个项目都会有一个入口的相关逻辑，那么go源码是怎么处理的？\n\n有没有什么可以借鉴的嘞？！\n\n<!--more-->\n接下来该到main函数的相关处理。\n\n>go version: 1.14.3\n### code分析\n\n[main函数入口](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L113)\n\n```go\n\n// The main goroutine.\nfunc main() {\n\tg := getg()\n\n\t// Racectx of m0->g0 is used only as the parent of the main goroutine.\n\t// It must not be used for anything else.\n\tg.m.g0.racectx = 0\n\n\t// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.\n\t// Using decimal instead of binary GB and MB because\n    // they look nicer in the stack overflow failure message.\n    \n    //最大栈空间限制\n\tif sys.PtrSize == 8 {\n\t\tmaxstacksize = 1000000000\n\t} else {\n\t\tmaxstacksize = 250000000\n\t}\n\n\t// Allow newproc to start new Ms.\n\tmainStarted = true\n\n    //如果是wasm，就不要调度程序了.\n    if GOARCH != \"wasm\" { // no threads on wasm yet, so no sysmon\n\n\t\t//系统栈调用\n\t\tsystemstack(func() {\n            // newm的回调函数，，，一个M一个sysmon P\n\t\t\tnewm(sysmon, nil)\n\t\t})\n\t}\n\n\t// Lock the main goroutine onto this, the main OS thread,\n\t// during initialization. Most programs won't care, but a few\n\t// do require certain calls to be made by the main thread.\n\t// Those can arrange for main.main to run in the main thread\n\t// by calling runtime.LockOSThread during initialization\n\t// to preserve the lock.\n\tlockOSThread()\n\n\tif g.m != &m0 {\n\t\tthrow(\"runtime.main not on m0\")\n\t}\n\n\tdoInit(&runtime_inittask) // must be before defer\n\tif nanotime() == 0 {\n\t\tthrow(\"nanotime returning zero\")\n\t}\n\n\t// Defer unlock so that runtime.Goexit during init does the unlock too.\n\tneedUnlock := true\n\tdefer func() {\n\t\tif needUnlock {\n\t\t\tunlockOSThread()\n\t\t}\n\t}()\n\n\t// Record when the world started.\n\truntimeInitTime = nanotime()\n\n    //启动GC\n\tgcenable()\n\n\tmain_init_done = make(chan bool)\n\tif iscgo {\n\t\tif _cgo_thread_start == nil {\n\t\t\tthrow(\"_cgo_thread_start missing\")\n\t\t}\n\t\tif GOOS != \"windows\" {\n\t\t\tif _cgo_setenv == nil {\n\t\t\t\tthrow(\"_cgo_setenv missing\")\n\t\t\t}\n\t\t\tif _cgo_unsetenv == nil {\n\t\t\t\tthrow(\"_cgo_unsetenv missing\")\n\t\t\t}\n\t\t}\n\t\tif _cgo_notify_runtime_init_done == nil {\n\t\t\tthrow(\"_cgo_notify_runtime_init_done missing\")\n\t\t}\n\t\t// Start the template thread in case we enter Go from\n\t\t// a C-created thread and need to create a new thread.\n\t\tstartTemplateThread()\n\t\tcgocall(_cgo_notify_runtime_init_done, nil)\n\t}\n\n\tdoInit(&main_inittask)\n\n\tclose(main_init_done)\n\n\tneedUnlock = false\n\tunlockOSThread()\n\n\tif isarchive || islibrary {\n\t\t// A program compiled with -buildmode=c-archive or c-shared\n\t\t// has a main, but it is not executed.\n\t\treturn\n    }\n    \n    //对于main函数的回调，也就是用户写的main程序\n\tfn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime\n\tfn()\n\tif raceenabled {\n\t\tracefini()\n\t}\n\n\t// Make racy client program work: if panicking on\n\t// another goroutine at the same time as main returns,\n\t// let the other goroutine finish printing the panic trace.\n    // Once it does, it will exit. See issues 3934 and 20018.\n    //判断panicDefer函数，，，，，，\n\tif atomic.Load(&runningPanicDefers) != 0 {\n\t\t// Running deferred functions should not take long.\n\t\tfor c := 0; c < 1000; c++ {\n\t\t\tif atomic.Load(&runningPanicDefers) == 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tGosched()\n\t\t}\n    }\n    // 判断panic\n\tif atomic.Load(&panicking) != 0 {\n\t\tgopark(nil, nil, waitReasonPanicWait, traceEvGoStop, 1)\n\t}\n    //正常退出了那.....\n\texit(0)\n\tfor {\n\t\tvar x *int32\n\t\t*x = 0\n\t}\n}\n\n```\n\n### systemstack\n\n>这个函数，在整个系统中较为重要，来看看官方说明\n\n\n```go\n// systemstack runs fn on a system stack.\n// If systemstack is called from the per-OS-thread (g0) stack, or\n// if systemstack is called from the signal handling (gsignal) stack,\n// systemstack calls fn directly and returns.\n//g0 stack或者信号处理的，就直接调用并返回。\n\n// Otherwise, systemstack is being called from the limited stack\n// of an ordinary goroutine. In this case, systemstack switches\n// to the per-OS-thread stack, calls fn, and switches back.\n// It is common to use a func literal as the argument, in order\n// to share inputs and outputs with the code around the call\n// to system stack:\n//\n//\t... set up y ...\n//\tsystemstack(func() {\n//\t\tx = bigcall(y)\n//\t})\n//\t... use x ...\n//\n//go:noescape\nfunc systemstack(fn func())\n```\n\n### newm\n\n```go\n// Create a new m. It will start off with a call to fn, or else the scheduler.\n// fn needs to be static and not a heap allocated closure.\n// May run with m.p==nil, so write barriers are not allowed.\n//go:nowritebarrierrec\n\n//用于创建新的M，fn:sysmon函数，类似于事件驱动类型的。\nfunc newm(fn func(), _p_ *p) {\n\t//分配内存\n\tmp := allocm(_p_, fn)\n\tmp.nextp.set(_p_)\n\tmp.sigmask = initSigmask\n\tif gp := getg(); gp != nil && gp.m != nil && (gp.m.lockedExt != 0 || gp.m.incgo) && GOOS != \"plan9\" {\n\t\t// We're on a locked M or a thread that may have been\n\t\t// started by C. The kernel state of this thread may\n\t\t// be strange (the user may have locked it for that\n\t\t// purpose). We don't want to clone that into another\n\t\t// thread. Instead, ask a known-good thread to create\n\t\t// the thread for us.\n\t\t//\n\t\t// This is disabled on Plan 9. See golang.org/issue/22227.\n\t\t//\n\t\t// TODO: This may be unnecessary on Windows, which\n\t\t// doesn't model thread creation off fork.\n\t\tlock(&newmHandoff.lock)\n\t\tif newmHandoff.haveTemplateThread == 0 {\n\t\t\tthrow(\"on a locked thread with no template thread\")\n\t\t}\n\t\tmp.schedlink = newmHandoff.newm\n\t\tnewmHandoff.newm.set(mp)\n\t\tif newmHandoff.waiting {\n\t\t\tnewmHandoff.waiting = false\n\t\t\tnotewakeup(&newmHandoff.wake)\n\t\t}\n\t\tunlock(&newmHandoff.lock)\n\t\treturn\n\t}\n\tnewm1(mp)\n}\n```\n\n>主要是以下几个函数：\n\n* allocm\n* notewakeup\n* newm1\n\n### sysmon\n\n学习系统监控之前，先学下部分函数的使用和其大概含义：\n\n* checkdead\n* usleep\n* timeSleepUntil\n* nanotime\n* netpollinited\n* startm\n* retake\n* gcTrigger\n* injectglist\n\n\n>先看下主体流程\n```go\n\n// Always runs without a P, so write barriers are not allowed.\n//\n//go:nowritebarrierrec\nfunc sysmon() {\n\tlock(&sched.lock)\n\tsched.nmsys++\n\t//基于running中的M，检查死锁，，，，\n\tcheckdead()\n\tunlock(&sched.lock)\n\n\tlasttrace := int64(0)\n\tidle := 0 // how many cycles in succession we had not wokeup somebody\n\tdelay := uint32(0)\n\tfor {\n\t\tif idle == 0 { // start with 20us sleep...\n\t\t\tdelay = 20\n\t\t} else if idle > 50 { // start doubling the sleep after 1ms...\n\t\t\tdelay *= 2\n\t\t}\n\t\tif delay > 10*1000 { // up to 10ms\n\t\t\tdelay = 10 * 1000\n\t\t}\n\t\t//休眠时间\n\t\tusleep(delay)\n\t\t//获取时间\n\t\tnow := nanotime()\n\t\t// 休眠等待唤醒信号\n\t\tnext, _ := timeSleepUntil()\n\t\tif debug.schedtrace <= 0 && (sched.gcwaiting != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs)) {\n\t\t\tlock(&sched.lock)\n\t\t\tif atomic.Load(&sched.gcwaiting) != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs) {\n\t\t\t\tif next > now {\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 1)\n\t\t\t\t\tunlock(&sched.lock)\n\t\t\t\t\t// Make wake-up period small enough\n\t\t\t\t\t// for the sampling to be correct.\n\t\t\t\t\tsleep := forcegcperiod / 2\n\t\t\t\t\tif next-now < sleep {\n\t\t\t\t\t\tsleep = next - now\n\t\t\t\t\t}\n\t\t\t\t\tshouldRelax := sleep >= osRelaxMinNS\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(true)\n\t\t\t\t\t}\n\t\t\t\t\tnotetsleep(&sched.sysmonnote, sleep)\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(false)\n\t\t\t\t\t}\n\t\t\t\t\tnow = nanotime()\n\t\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t\t\tlock(&sched.lock)\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 0)\n\t\t\t\t\tnoteclear(&sched.sysmonnote)\n\t\t\t\t}\n\t\t\t\tidle = 0\n\t\t\t\tdelay = 20\n\t\t\t}\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t\tlock(&sched.sysmonlock)\n\t\t{\n\t\t\t// If we spent a long time blocked on sysmonlock\n\t\t\t// then we want to update now and next since it's\n\t\t\t// likely stale.\n\t\t\tnow1 := nanotime()\n\t\t\tif now1-now > 50*1000 /* 50µs */ {\n\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t}\n\t\t\tnow = now1\n\t\t}\n\n\t\t// trigger libc interceptors if needed\n\t\tif *cgo_yield != nil {\n\t\t\tasmcgocall(*cgo_yield, nil)\n\t\t}\n\t\t// poll network if not polled for more than 10ms\n\t\t//在队列中等待调度超过10ms，就给交给global抢渡了\n\t\tlastpoll := int64(atomic.Load64(&sched.lastpoll))\n\t\tif netpollinited() && lastpoll != 0 && lastpoll+10*1000*1000 < now {\n\t\t\tatomic.Cas64(&sched.lastpoll, uint64(lastpoll), uint64(now))\n\t\t\tlist := netpoll(0) // non-blocking - returns list of goroutines\n\t\t\tif !list.empty() {\n\t\t\t\t// Need to decrement number of idle locked M's\n\t\t\t\t// (pretending that one more is running) before injectglist.\n\t\t\t\t// Otherwise it can lead to the following situation:\n\t\t\t\t// injectglist grabs all P's but before it starts M's to run the P's,\n\t\t\t\t// another M returns from syscall, finishes running its G,\n\t\t\t\t// observes that there is no work to do and no other running M's\n\t\t\t\t// and reports deadlock.\n\t\t\t\tincidlelocked(-1)\n\t\t\t\t//注入全局g队列中\n\t\t\t\tinjectglist(&list)\n\t\t\t\tincidlelocked(1)\n\t\t\t}\n\t\t}\n\t\tif next < now {\n\t\t\t// There are timers that should have already run,\n\t\t\t// perhaps because there is an unpreemptible P.\n\t\t\t// Try to start an M to run them.\n\t\t\t//需要一个新的M来跑P上面的G。\n\t\t\tstartm(nil, false)\n\t\t}\n\t\tif atomic.Load(&scavenge.sysmonWake) != 0 {\n\t\t\t// Kick the scavenger awake if someone requested it.\n\t\t\twakeScavenger()\n\t\t}\n\t\t// retake P's blocked in syscalls\n\t\t// and preempt long running G's\n\t\t// 循环所有的allp，进行抢夺。\n\t\tif retake(now) != 0 {\n\t\t\tidle = 0\n\t\t} else {\n\t\t\tidle++\n\t\t}\n\t\t// check if we need to force a GC\n\t\t//强行GC\n\t\tif t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && atomic.Load(&forcegc.idle) != 0 {\n\t\t\tlock(&forcegc.lock)\n\t\t\tforcegc.idle = 0\n\t\t\tvar list gList\n\t\t\tlist.push(forcegc.g)\n\t\t\tinjectglist(&list)\n\t\t\tunlock(&forcegc.lock)\n\t\t}\n\t\tif debug.schedtrace > 0 && lasttrace+int64(debug.schedtrace)*1000000 <= now {\n\t\t\tlasttrace = now\n\t\t\tschedtrace(debug.scheddetail > 0)\n\t\t}\n\t\tunlock(&sched.sysmonlock)\n\t}\n}\n```\n\n### doInit\n\n\n>这一部分在源码看来，没有具体的作用，，，，，，，，todo标签吧。\n```go\nfunc doInit(t *initTask) {\n\tswitch t.state {\n\tcase 2: // fully initialized\n\t\treturn\n\tcase 1: // initialization in progress\n\t\tthrow(\"recursive call during initialization - linker skew\")\n\tdefault: // not initialized yet\n\t\tt.state = 1 // initialization in progress\n\t\tfor i := uintptr(0); i < t.ndeps; i++ {\n\t\t\tp := add(unsafe.Pointer(t), (3+i)*sys.PtrSize)\n\t\t\tt2 := *(**initTask)(p)\n\t\t\tdoInit(t2)\n\t\t}\n\t\tfor i := uintptr(0); i < t.nfns; i++ {\n\t\t\tp := add(unsafe.Pointer(t), (3+t.ndeps+i)*sys.PtrSize)\n\t\t\tf := *(*func())(unsafe.Pointer(&p))\n\t\t\tf()\n\t\t}\n\t\tt.state = 2 // initialization done\n\t}\n}\n```\n\n### gcenable\n\n\n```go\n// gcenable is called after the bulk of the runtime initialization,\n// just before we're about to start letting user code run.\n// It kicks off the background sweeper goroutine, the background\n// scavenger goroutine, and enables GC.\nfunc gcenable() {\n\t// Kick off sweeping and scavenging.\n\tc := make(chan int, 2)\n\tgo bgsweep(c)\n\tgo bgscavenge(c)\n\t<-c\n\t<-c\n\tmemstats.enablegc = true // now that runtime is initialized, GC is okay\n}\n```\n\n### Gosched\n\n```go\n// Gosched yields the processor, allowing other goroutines to run. It does not\n// suspend the current goroutine, so execution resumes automatically.\nfunc Gosched() {\n\tcheckTimeouts()\n\tmcall(gosched_m)\n}\n```\n\n### gopark\n\n\n```go\n// Puts the current goroutine into a waiting state and calls unlockf.\n// If unlockf returns false, the goroutine is resumed.\n// unlockf must not access this G's stack, as it may be moved between\n// the call to gopark and the call to unlockf.\n// Reason explains why the goroutine has been parked.\n// It is displayed in stack traces and heap dumps.\n// Reasons should be unique and descriptive.\n// Do not re-use reasons, add new ones.\nfunc gopark(unlockf func(*g, unsafe.Pointer) bool, lock unsafe.Pointer, reason waitReason, traceEv byte, traceskip int) {\n\tif reason != waitReasonSleep {\n\t\tcheckTimeouts() // timeouts may expire while two goroutines keep the scheduler busy\n\t}\n\tmp := acquirem()\n\tgp := mp.curg\n\tstatus := readgstatus(gp)\n\tif status != _Grunning && status != _Gscanrunning {\n\t\tthrow(\"gopark: bad g status\")\n\t}\n\tmp.waitlock = lock\n\tmp.waitunlockf = unlockf\n\tgp.waitreason = reason\n\tmp.waittraceev = traceEv\n\tmp.waittraceskip = traceskip\n\t//mp解绑\n\treleasem(mp)\n\t// can't do anything that might move the G between Ms here.\n\tmcall(park_m)\n}\n```\n\n### 后续\n\n>关于里面的重要部分实现细节，不是本次关注的重点，，，，\n\n```html\n这次主要看到的是Go围绕main函数，为了程序的正常启动，所做的工作.\n\n无论是g的启动还是调度监控方面，也就是从整个生命周期来考虑，，，，，，\n\n\n还有一个就是关于panic的处理，采用事件驱动的方式，很好的获取到panic,进行后续的处理。\n\n最后还有一个关于全局locktrhead，，，，，，粒度尽量细小，有利于提高性能。\n\n```\n\n","source":"_posts/23-GPM-main入口函数.md","raw":"---\ntitle: 「23」GPM main入口函数\ndate: '2020/11/21 21:00:17'\nupdated: '2020/11/21 21:00:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: 9bb71eca\n---\n\n\n前面g0和m0瞎扯了部分的入口和一些关键的点。\n\n本来应该扯扯shedule调度方面的知识，但是这个先往后放一节吧，\n\n先学习下这个「入口函数」，毕竟对于每一个项目都会有一个入口的相关逻辑，那么go源码是怎么处理的？\n\n有没有什么可以借鉴的嘞？！\n\n<!--more-->\n接下来该到main函数的相关处理。\n\n>go version: 1.14.3\n### code分析\n\n[main函数入口](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L113)\n\n```go\n\n// The main goroutine.\nfunc main() {\n\tg := getg()\n\n\t// Racectx of m0->g0 is used only as the parent of the main goroutine.\n\t// It must not be used for anything else.\n\tg.m.g0.racectx = 0\n\n\t// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.\n\t// Using decimal instead of binary GB and MB because\n    // they look nicer in the stack overflow failure message.\n    \n    //最大栈空间限制\n\tif sys.PtrSize == 8 {\n\t\tmaxstacksize = 1000000000\n\t} else {\n\t\tmaxstacksize = 250000000\n\t}\n\n\t// Allow newproc to start new Ms.\n\tmainStarted = true\n\n    //如果是wasm，就不要调度程序了.\n    if GOARCH != \"wasm\" { // no threads on wasm yet, so no sysmon\n\n\t\t//系统栈调用\n\t\tsystemstack(func() {\n            // newm的回调函数，，，一个M一个sysmon P\n\t\t\tnewm(sysmon, nil)\n\t\t})\n\t}\n\n\t// Lock the main goroutine onto this, the main OS thread,\n\t// during initialization. Most programs won't care, but a few\n\t// do require certain calls to be made by the main thread.\n\t// Those can arrange for main.main to run in the main thread\n\t// by calling runtime.LockOSThread during initialization\n\t// to preserve the lock.\n\tlockOSThread()\n\n\tif g.m != &m0 {\n\t\tthrow(\"runtime.main not on m0\")\n\t}\n\n\tdoInit(&runtime_inittask) // must be before defer\n\tif nanotime() == 0 {\n\t\tthrow(\"nanotime returning zero\")\n\t}\n\n\t// Defer unlock so that runtime.Goexit during init does the unlock too.\n\tneedUnlock := true\n\tdefer func() {\n\t\tif needUnlock {\n\t\t\tunlockOSThread()\n\t\t}\n\t}()\n\n\t// Record when the world started.\n\truntimeInitTime = nanotime()\n\n    //启动GC\n\tgcenable()\n\n\tmain_init_done = make(chan bool)\n\tif iscgo {\n\t\tif _cgo_thread_start == nil {\n\t\t\tthrow(\"_cgo_thread_start missing\")\n\t\t}\n\t\tif GOOS != \"windows\" {\n\t\t\tif _cgo_setenv == nil {\n\t\t\t\tthrow(\"_cgo_setenv missing\")\n\t\t\t}\n\t\t\tif _cgo_unsetenv == nil {\n\t\t\t\tthrow(\"_cgo_unsetenv missing\")\n\t\t\t}\n\t\t}\n\t\tif _cgo_notify_runtime_init_done == nil {\n\t\t\tthrow(\"_cgo_notify_runtime_init_done missing\")\n\t\t}\n\t\t// Start the template thread in case we enter Go from\n\t\t// a C-created thread and need to create a new thread.\n\t\tstartTemplateThread()\n\t\tcgocall(_cgo_notify_runtime_init_done, nil)\n\t}\n\n\tdoInit(&main_inittask)\n\n\tclose(main_init_done)\n\n\tneedUnlock = false\n\tunlockOSThread()\n\n\tif isarchive || islibrary {\n\t\t// A program compiled with -buildmode=c-archive or c-shared\n\t\t// has a main, but it is not executed.\n\t\treturn\n    }\n    \n    //对于main函数的回调，也就是用户写的main程序\n\tfn := main_main // make an indirect call, as the linker doesn't know the address of the main package when laying down the runtime\n\tfn()\n\tif raceenabled {\n\t\tracefini()\n\t}\n\n\t// Make racy client program work: if panicking on\n\t// another goroutine at the same time as main returns,\n\t// let the other goroutine finish printing the panic trace.\n    // Once it does, it will exit. See issues 3934 and 20018.\n    //判断panicDefer函数，，，，，，\n\tif atomic.Load(&runningPanicDefers) != 0 {\n\t\t// Running deferred functions should not take long.\n\t\tfor c := 0; c < 1000; c++ {\n\t\t\tif atomic.Load(&runningPanicDefers) == 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tGosched()\n\t\t}\n    }\n    // 判断panic\n\tif atomic.Load(&panicking) != 0 {\n\t\tgopark(nil, nil, waitReasonPanicWait, traceEvGoStop, 1)\n\t}\n    //正常退出了那.....\n\texit(0)\n\tfor {\n\t\tvar x *int32\n\t\t*x = 0\n\t}\n}\n\n```\n\n### systemstack\n\n>这个函数，在整个系统中较为重要，来看看官方说明\n\n\n```go\n// systemstack runs fn on a system stack.\n// If systemstack is called from the per-OS-thread (g0) stack, or\n// if systemstack is called from the signal handling (gsignal) stack,\n// systemstack calls fn directly and returns.\n//g0 stack或者信号处理的，就直接调用并返回。\n\n// Otherwise, systemstack is being called from the limited stack\n// of an ordinary goroutine. In this case, systemstack switches\n// to the per-OS-thread stack, calls fn, and switches back.\n// It is common to use a func literal as the argument, in order\n// to share inputs and outputs with the code around the call\n// to system stack:\n//\n//\t... set up y ...\n//\tsystemstack(func() {\n//\t\tx = bigcall(y)\n//\t})\n//\t... use x ...\n//\n//go:noescape\nfunc systemstack(fn func())\n```\n\n### newm\n\n```go\n// Create a new m. It will start off with a call to fn, or else the scheduler.\n// fn needs to be static and not a heap allocated closure.\n// May run with m.p==nil, so write barriers are not allowed.\n//go:nowritebarrierrec\n\n//用于创建新的M，fn:sysmon函数，类似于事件驱动类型的。\nfunc newm(fn func(), _p_ *p) {\n\t//分配内存\n\tmp := allocm(_p_, fn)\n\tmp.nextp.set(_p_)\n\tmp.sigmask = initSigmask\n\tif gp := getg(); gp != nil && gp.m != nil && (gp.m.lockedExt != 0 || gp.m.incgo) && GOOS != \"plan9\" {\n\t\t// We're on a locked M or a thread that may have been\n\t\t// started by C. The kernel state of this thread may\n\t\t// be strange (the user may have locked it for that\n\t\t// purpose). We don't want to clone that into another\n\t\t// thread. Instead, ask a known-good thread to create\n\t\t// the thread for us.\n\t\t//\n\t\t// This is disabled on Plan 9. See golang.org/issue/22227.\n\t\t//\n\t\t// TODO: This may be unnecessary on Windows, which\n\t\t// doesn't model thread creation off fork.\n\t\tlock(&newmHandoff.lock)\n\t\tif newmHandoff.haveTemplateThread == 0 {\n\t\t\tthrow(\"on a locked thread with no template thread\")\n\t\t}\n\t\tmp.schedlink = newmHandoff.newm\n\t\tnewmHandoff.newm.set(mp)\n\t\tif newmHandoff.waiting {\n\t\t\tnewmHandoff.waiting = false\n\t\t\tnotewakeup(&newmHandoff.wake)\n\t\t}\n\t\tunlock(&newmHandoff.lock)\n\t\treturn\n\t}\n\tnewm1(mp)\n}\n```\n\n>主要是以下几个函数：\n\n* allocm\n* notewakeup\n* newm1\n\n### sysmon\n\n学习系统监控之前，先学下部分函数的使用和其大概含义：\n\n* checkdead\n* usleep\n* timeSleepUntil\n* nanotime\n* netpollinited\n* startm\n* retake\n* gcTrigger\n* injectglist\n\n\n>先看下主体流程\n```go\n\n// Always runs without a P, so write barriers are not allowed.\n//\n//go:nowritebarrierrec\nfunc sysmon() {\n\tlock(&sched.lock)\n\tsched.nmsys++\n\t//基于running中的M，检查死锁，，，，\n\tcheckdead()\n\tunlock(&sched.lock)\n\n\tlasttrace := int64(0)\n\tidle := 0 // how many cycles in succession we had not wokeup somebody\n\tdelay := uint32(0)\n\tfor {\n\t\tif idle == 0 { // start with 20us sleep...\n\t\t\tdelay = 20\n\t\t} else if idle > 50 { // start doubling the sleep after 1ms...\n\t\t\tdelay *= 2\n\t\t}\n\t\tif delay > 10*1000 { // up to 10ms\n\t\t\tdelay = 10 * 1000\n\t\t}\n\t\t//休眠时间\n\t\tusleep(delay)\n\t\t//获取时间\n\t\tnow := nanotime()\n\t\t// 休眠等待唤醒信号\n\t\tnext, _ := timeSleepUntil()\n\t\tif debug.schedtrace <= 0 && (sched.gcwaiting != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs)) {\n\t\t\tlock(&sched.lock)\n\t\t\tif atomic.Load(&sched.gcwaiting) != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs) {\n\t\t\t\tif next > now {\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 1)\n\t\t\t\t\tunlock(&sched.lock)\n\t\t\t\t\t// Make wake-up period small enough\n\t\t\t\t\t// for the sampling to be correct.\n\t\t\t\t\tsleep := forcegcperiod / 2\n\t\t\t\t\tif next-now < sleep {\n\t\t\t\t\t\tsleep = next - now\n\t\t\t\t\t}\n\t\t\t\t\tshouldRelax := sleep >= osRelaxMinNS\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(true)\n\t\t\t\t\t}\n\t\t\t\t\tnotetsleep(&sched.sysmonnote, sleep)\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(false)\n\t\t\t\t\t}\n\t\t\t\t\tnow = nanotime()\n\t\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t\t\tlock(&sched.lock)\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 0)\n\t\t\t\t\tnoteclear(&sched.sysmonnote)\n\t\t\t\t}\n\t\t\t\tidle = 0\n\t\t\t\tdelay = 20\n\t\t\t}\n\t\t\tunlock(&sched.lock)\n\t\t}\n\t\tlock(&sched.sysmonlock)\n\t\t{\n\t\t\t// If we spent a long time blocked on sysmonlock\n\t\t\t// then we want to update now and next since it's\n\t\t\t// likely stale.\n\t\t\tnow1 := nanotime()\n\t\t\tif now1-now > 50*1000 /* 50µs */ {\n\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t}\n\t\t\tnow = now1\n\t\t}\n\n\t\t// trigger libc interceptors if needed\n\t\tif *cgo_yield != nil {\n\t\t\tasmcgocall(*cgo_yield, nil)\n\t\t}\n\t\t// poll network if not polled for more than 10ms\n\t\t//在队列中等待调度超过10ms，就给交给global抢渡了\n\t\tlastpoll := int64(atomic.Load64(&sched.lastpoll))\n\t\tif netpollinited() && lastpoll != 0 && lastpoll+10*1000*1000 < now {\n\t\t\tatomic.Cas64(&sched.lastpoll, uint64(lastpoll), uint64(now))\n\t\t\tlist := netpoll(0) // non-blocking - returns list of goroutines\n\t\t\tif !list.empty() {\n\t\t\t\t// Need to decrement number of idle locked M's\n\t\t\t\t// (pretending that one more is running) before injectglist.\n\t\t\t\t// Otherwise it can lead to the following situation:\n\t\t\t\t// injectglist grabs all P's but before it starts M's to run the P's,\n\t\t\t\t// another M returns from syscall, finishes running its G,\n\t\t\t\t// observes that there is no work to do and no other running M's\n\t\t\t\t// and reports deadlock.\n\t\t\t\tincidlelocked(-1)\n\t\t\t\t//注入全局g队列中\n\t\t\t\tinjectglist(&list)\n\t\t\t\tincidlelocked(1)\n\t\t\t}\n\t\t}\n\t\tif next < now {\n\t\t\t// There are timers that should have already run,\n\t\t\t// perhaps because there is an unpreemptible P.\n\t\t\t// Try to start an M to run them.\n\t\t\t//需要一个新的M来跑P上面的G。\n\t\t\tstartm(nil, false)\n\t\t}\n\t\tif atomic.Load(&scavenge.sysmonWake) != 0 {\n\t\t\t// Kick the scavenger awake if someone requested it.\n\t\t\twakeScavenger()\n\t\t}\n\t\t// retake P's blocked in syscalls\n\t\t// and preempt long running G's\n\t\t// 循环所有的allp，进行抢夺。\n\t\tif retake(now) != 0 {\n\t\t\tidle = 0\n\t\t} else {\n\t\t\tidle++\n\t\t}\n\t\t// check if we need to force a GC\n\t\t//强行GC\n\t\tif t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && atomic.Load(&forcegc.idle) != 0 {\n\t\t\tlock(&forcegc.lock)\n\t\t\tforcegc.idle = 0\n\t\t\tvar list gList\n\t\t\tlist.push(forcegc.g)\n\t\t\tinjectglist(&list)\n\t\t\tunlock(&forcegc.lock)\n\t\t}\n\t\tif debug.schedtrace > 0 && lasttrace+int64(debug.schedtrace)*1000000 <= now {\n\t\t\tlasttrace = now\n\t\t\tschedtrace(debug.scheddetail > 0)\n\t\t}\n\t\tunlock(&sched.sysmonlock)\n\t}\n}\n```\n\n### doInit\n\n\n>这一部分在源码看来，没有具体的作用，，，，，，，，todo标签吧。\n```go\nfunc doInit(t *initTask) {\n\tswitch t.state {\n\tcase 2: // fully initialized\n\t\treturn\n\tcase 1: // initialization in progress\n\t\tthrow(\"recursive call during initialization - linker skew\")\n\tdefault: // not initialized yet\n\t\tt.state = 1 // initialization in progress\n\t\tfor i := uintptr(0); i < t.ndeps; i++ {\n\t\t\tp := add(unsafe.Pointer(t), (3+i)*sys.PtrSize)\n\t\t\tt2 := *(**initTask)(p)\n\t\t\tdoInit(t2)\n\t\t}\n\t\tfor i := uintptr(0); i < t.nfns; i++ {\n\t\t\tp := add(unsafe.Pointer(t), (3+t.ndeps+i)*sys.PtrSize)\n\t\t\tf := *(*func())(unsafe.Pointer(&p))\n\t\t\tf()\n\t\t}\n\t\tt.state = 2 // initialization done\n\t}\n}\n```\n\n### gcenable\n\n\n```go\n// gcenable is called after the bulk of the runtime initialization,\n// just before we're about to start letting user code run.\n// It kicks off the background sweeper goroutine, the background\n// scavenger goroutine, and enables GC.\nfunc gcenable() {\n\t// Kick off sweeping and scavenging.\n\tc := make(chan int, 2)\n\tgo bgsweep(c)\n\tgo bgscavenge(c)\n\t<-c\n\t<-c\n\tmemstats.enablegc = true // now that runtime is initialized, GC is okay\n}\n```\n\n### Gosched\n\n```go\n// Gosched yields the processor, allowing other goroutines to run. It does not\n// suspend the current goroutine, so execution resumes automatically.\nfunc Gosched() {\n\tcheckTimeouts()\n\tmcall(gosched_m)\n}\n```\n\n### gopark\n\n\n```go\n// Puts the current goroutine into a waiting state and calls unlockf.\n// If unlockf returns false, the goroutine is resumed.\n// unlockf must not access this G's stack, as it may be moved between\n// the call to gopark and the call to unlockf.\n// Reason explains why the goroutine has been parked.\n// It is displayed in stack traces and heap dumps.\n// Reasons should be unique and descriptive.\n// Do not re-use reasons, add new ones.\nfunc gopark(unlockf func(*g, unsafe.Pointer) bool, lock unsafe.Pointer, reason waitReason, traceEv byte, traceskip int) {\n\tif reason != waitReasonSleep {\n\t\tcheckTimeouts() // timeouts may expire while two goroutines keep the scheduler busy\n\t}\n\tmp := acquirem()\n\tgp := mp.curg\n\tstatus := readgstatus(gp)\n\tif status != _Grunning && status != _Gscanrunning {\n\t\tthrow(\"gopark: bad g status\")\n\t}\n\tmp.waitlock = lock\n\tmp.waitunlockf = unlockf\n\tgp.waitreason = reason\n\tmp.waittraceev = traceEv\n\tmp.waittraceskip = traceskip\n\t//mp解绑\n\treleasem(mp)\n\t// can't do anything that might move the G between Ms here.\n\tmcall(park_m)\n}\n```\n\n### 后续\n\n>关于里面的重要部分实现细节，不是本次关注的重点，，，，\n\n```html\n这次主要看到的是Go围绕main函数，为了程序的正常启动，所做的工作.\n\n无论是g的启动还是调度监控方面，也就是从整个生命周期来考虑，，，，，，\n\n\n还有一个就是关于panic的处理，采用事件驱动的方式，很好的获取到panic,进行后续的处理。\n\n最后还有一个关于全局locktrhead，，，，，，粒度尽量细小，有利于提高性能。\n\n```\n\n","slug":"23-GPM-main入口函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4t001nzfqx4u7498g9","content":"<p>前面g0和m0瞎扯了部分的入口和一些关键的点。</p>\n<p>本来应该扯扯shedule调度方面的知识，但是这个先往后放一节吧，</p>\n<p>先学习下这个「入口函数」，毕竟对于每一个项目都会有一个入口的相关逻辑，那么go源码是怎么处理的？</p>\n<p>有没有什么可以借鉴的嘞？！</p>\n<span id=\"more\"></span>\n<p>接下来该到main函数的相关处理。</p>\n<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h3 id=\"code分析\"><a class=\"header-anchor\" href=\"#code分析\">¶</a>code分析</h3>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L113\">main函数入口</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The main goroutine.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tg := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Racectx of m0-&gt;g0 is used only as the parent of the main goroutine.</span></span><br><span class=\"line\">\t<span class=\"comment\">// It must not be used for anything else.</span></span><br><span class=\"line\">\tg.m.g0.racectx = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Using decimal instead of binary GB and MB because</span></span><br><span class=\"line\">    <span class=\"comment\">// they look nicer in the stack overflow failure message.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//最大栈空间限制</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sys.PtrSize == <span class=\"number\">8</span> &#123;</span><br><span class=\"line\">\t\tmaxstacksize = <span class=\"number\">1000000000</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tmaxstacksize = <span class=\"number\">250000000</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow newproc to start new Ms.</span></span><br><span class=\"line\">\tmainStarted = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是wasm，就不要调度程序了.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> GOARCH != <span class=\"string\">&quot;wasm&quot;</span> &#123; <span class=\"comment\">// no threads on wasm yet, so no sysmon</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//系统栈调用</span></span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// newm的回调函数，，，一个M一个sysmon P</span></span><br><span class=\"line\">\t\t\tnewm(sysmon, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Lock the main goroutine onto this, the main OS thread,</span></span><br><span class=\"line\">\t<span class=\"comment\">// during initialization. Most programs won&#x27;t care, but a few</span></span><br><span class=\"line\">\t<span class=\"comment\">// do require certain calls to be made by the main thread.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Those can arrange for main.main to run in the main thread</span></span><br><span class=\"line\">\t<span class=\"comment\">// by calling runtime.LockOSThread during initialization</span></span><br><span class=\"line\">\t<span class=\"comment\">// to preserve the lock.</span></span><br><span class=\"line\">\tlockOSThread()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> g.m != &amp;m0 &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;runtime.main not on m0&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoInit(&amp;runtime_inittask) <span class=\"comment\">// must be before defer</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nanotime() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;nanotime returning zero&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Defer unlock so that runtime.Goexit during init does the unlock too.</span></span><br><span class=\"line\">\tneedUnlock := <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> needUnlock &#123;</span><br><span class=\"line\">\t\t\tunlockOSThread()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Record when the world started.</span></span><br><span class=\"line\">\truntimeInitTime = nanotime()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动GC</span></span><br><span class=\"line\">\tgcenable()</span><br><span class=\"line\"></span><br><span class=\"line\">\tmain_init_done = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">bool</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> iscgo &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _cgo_thread_start == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;_cgo_thread_start missing&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GOOS != <span class=\"string\">&quot;windows&quot;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> _cgo_setenv == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;_cgo_setenv missing&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> _cgo_unsetenv == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;_cgo_unsetenv missing&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _cgo_notify_runtime_init_done == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;_cgo_notify_runtime_init_done missing&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Start the template thread in case we enter Go from</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a C-created thread and need to create a new thread.</span></span><br><span class=\"line\">\t\tstartTemplateThread()</span><br><span class=\"line\">\t\tcgocall(_cgo_notify_runtime_init_done, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoInit(&amp;main_inittask)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(main_init_done)</span><br><span class=\"line\"></span><br><span class=\"line\">\tneedUnlock = <span class=\"literal\">false</span></span><br><span class=\"line\">\tunlockOSThread()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> isarchive || islibrary &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// A program compiled with -buildmode=c-archive or c-shared</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// has a main, but it is not executed.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//对于main函数的回调，也就是用户写的main程序</span></span><br><span class=\"line\">\tfn := main_main <span class=\"comment\">// make an indirect call, as the linker doesn&#x27;t know the address of the main package when laying down the runtime</span></span><br><span class=\"line\">\tfn()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\tracefini()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Make racy client program work: if panicking on</span></span><br><span class=\"line\">\t<span class=\"comment\">// another goroutine at the same time as main returns,</span></span><br><span class=\"line\">\t<span class=\"comment\">// let the other goroutine finish printing the panic trace.</span></span><br><span class=\"line\">    <span class=\"comment\">// Once it does, it will exit. See issues 3934 and 20018.</span></span><br><span class=\"line\">    <span class=\"comment\">//判断panicDefer函数，，，，，，</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.Load(&amp;runningPanicDefers) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Running deferred functions should not take long.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"number\">0</span>; c &lt; <span class=\"number\">1000</span>; c++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;runningPanicDefers) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tGosched()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断panic</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.Load(&amp;panicking) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tgopark(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, waitReasonPanicWait, traceEvGoStop, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//正常退出了那.....</span></span><br><span class=\"line\">\texit(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x *<span class=\"type\">int32</span></span><br><span class=\"line\">\t\t*x = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"systemstack\"><a class=\"header-anchor\" href=\"#systemstack\">¶</a>systemstack</h3>\n<blockquote>\n<p>这个函数，在整个系统中较为重要，来看看官方说明</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// systemstack runs fn on a system stack.</span></span><br><span class=\"line\"><span class=\"comment\">// If systemstack is called from the per-OS-thread (g0) stack, or</span></span><br><span class=\"line\"><span class=\"comment\">// if systemstack is called from the signal handling (gsignal) stack,</span></span><br><span class=\"line\"><span class=\"comment\">// systemstack calls fn directly and returns.</span></span><br><span class=\"line\"><span class=\"comment\">//g0 stack或者信号处理的，就直接调用并返回。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, systemstack is being called from the limited stack</span></span><br><span class=\"line\"><span class=\"comment\">// of an ordinary goroutine. In this case, systemstack switches</span></span><br><span class=\"line\"><span class=\"comment\">// to the per-OS-thread stack, calls fn, and switches back.</span></span><br><span class=\"line\"><span class=\"comment\">// It is common to use a func literal as the argument, in order</span></span><br><span class=\"line\"><span class=\"comment\">// to share inputs and outputs with the code around the call</span></span><br><span class=\"line\"><span class=\"comment\">// to system stack:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t... set up y ...</span></span><br><span class=\"line\"><span class=\"comment\">//\tsystemstack(func() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tx = bigcall(y)</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//\t... use x ...</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:noescape</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">systemstack</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"newm\"><a class=\"header-anchor\" href=\"#newm\">¶</a>newm</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new m. It will start off with a call to fn, or else the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">// fn needs to be static and not a heap allocated closure.</span></span><br><span class=\"line\"><span class=\"comment\">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于创建新的M，fn:sysmon函数，类似于事件驱动类型的。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//分配内存</span></span><br><span class=\"line\">\tmp := allocm(_p_, fn)</span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">\tmp.sigmask = initSigmask</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp := getg(); gp != <span class=\"literal\">nil</span> &amp;&amp; gp.m != <span class=\"literal\">nil</span> &amp;&amp; (gp.m.lockedExt != <span class=\"number\">0</span> || gp.m.incgo) &amp;&amp; GOOS != <span class=\"string\">&quot;plan9&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We&#x27;re on a locked M or a thread that may have been</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// started by C. The kernel state of this thread may</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// be strange (the user may have locked it for that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// purpose). We don&#x27;t want to clone that into another</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// thread. Instead, ask a known-good thread to create</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the thread for us.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// This is disabled on Plan 9. See golang.org/issue/22227.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> This may be unnecessary on Windows, which</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// doesn&#x27;t model thread creation off fork.</span></span><br><span class=\"line\">\t\tlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.haveTemplateThread == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;on a locked thread with no template thread&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmp.schedlink = newmHandoff.newm</span><br><span class=\"line\">\t\tnewmHandoff.newm.set(mp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.waiting &#123;</span><br><span class=\"line\">\t\t\tnewmHandoff.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\tnotewakeup(&amp;newmHandoff.wake)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>主要是以下几个函数：</p>\n</blockquote>\n<ul>\n<li>allocm</li>\n<li>notewakeup</li>\n<li>newm1</li>\n</ul>\n<h3 id=\"sysmon\"><a class=\"header-anchor\" href=\"#sysmon\">¶</a>sysmon</h3>\n<p>学习系统监控之前，先学下部分函数的使用和其大概含义：</p>\n<ul>\n<li>checkdead</li>\n<li>usleep</li>\n<li>timeSleepUntil</li>\n<li>nanotime</li>\n<li>netpollinited</li>\n<li>startm</li>\n<li>retake</li>\n<li>gcTrigger</li>\n<li>injectglist</li>\n</ul>\n<blockquote>\n<p>先看下主体流程</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Always runs without a P, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sysmon</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlock(&amp;sched.lock)</span><br><span class=\"line\">\tsched.nmsys++</span><br><span class=\"line\">\t<span class=\"comment\">//基于running中的M，检查死锁，，，，</span></span><br><span class=\"line\">\tcheckdead()</span><br><span class=\"line\">\tunlock(&amp;sched.lock)</span><br><span class=\"line\"></span><br><span class=\"line\">\tlasttrace := <span class=\"type\">int64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tidle := <span class=\"number\">0</span> <span class=\"comment\">// how many cycles in succession we had not wokeup somebody</span></span><br><span class=\"line\">\tdelay := <span class=\"type\">uint32</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> idle == <span class=\"number\">0</span> &#123; <span class=\"comment\">// start with 20us sleep...</span></span><br><span class=\"line\">\t\t\tdelay = <span class=\"number\">20</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> idle &gt; <span class=\"number\">50</span> &#123; <span class=\"comment\">// start doubling the sleep after 1ms...</span></span><br><span class=\"line\">\t\t\tdelay *= <span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> delay &gt; <span class=\"number\">10</span>*<span class=\"number\">1000</span> &#123; <span class=\"comment\">// up to 10ms</span></span><br><span class=\"line\">\t\t\tdelay = <span class=\"number\">10</span> * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//休眠时间</span></span><br><span class=\"line\">\t\tusleep(delay)</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取时间</span></span><br><span class=\"line\">\t\tnow := nanotime()</span><br><span class=\"line\">\t\t<span class=\"comment\">// 休眠等待唤醒信号</span></span><br><span class=\"line\">\t\tnext, _ := timeSleepUntil()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> debug.schedtrace &lt;= <span class=\"number\">0</span> &amp;&amp; (sched.gcwaiting != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs)) &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> next &gt; now &#123;</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Make wake-up period small enough</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// for the sampling to be correct.</span></span><br><span class=\"line\">\t\t\t\t\tsleep := forcegcperiod / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> next-now &lt; sleep &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsleep = next - now</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tshouldRelax := sleep &gt;= osRelaxMinNS</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnotetsleep(&amp;sched.sysmonnote, sleep)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnow = nanotime()</span><br><span class=\"line\">\t\t\t\t\tnext, _ = timeSleepUntil()</span><br><span class=\"line\">\t\t\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tnoteclear(&amp;sched.sysmonnote)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t\tdelay = <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlock(&amp;sched.sysmonlock)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If we spent a long time blocked on sysmonlock</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// then we want to update now and next since it&#x27;s</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// likely stale.</span></span><br><span class=\"line\">\t\t\tnow1 := nanotime()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> now1-now &gt; <span class=\"number\">50</span>*<span class=\"number\">1000</span> <span class=\"comment\">/* 50µs */</span> &#123;</span><br><span class=\"line\">\t\t\t\tnext, _ = timeSleepUntil()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnow = now1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// trigger libc interceptors if needed</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> *cgo_yield != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tasmcgocall(*cgo_yield, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// poll network if not polled for more than 10ms</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//在队列中等待调度超过10ms，就给交给global抢渡了</span></span><br><span class=\"line\">\t\tlastpoll := <span class=\"type\">int64</span>(atomic.Load64(&amp;sched.lastpoll))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> netpollinited() &amp;&amp; lastpoll != <span class=\"number\">0</span> &amp;&amp; lastpoll+<span class=\"number\">10</span>*<span class=\"number\">1000</span>*<span class=\"number\">1000</span> &lt; now &#123;</span><br><span class=\"line\">\t\t\tatomic.Cas64(&amp;sched.lastpoll, <span class=\"type\">uint64</span>(lastpoll), <span class=\"type\">uint64</span>(now))</span><br><span class=\"line\">\t\t\tlist := netpoll(<span class=\"number\">0</span>) <span class=\"comment\">// non-blocking - returns list of goroutines</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !list.empty() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Need to decrement number of idle locked M&#x27;s</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// (pretending that one more is running) before injectglist.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Otherwise it can lead to the following situation:</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// another M returns from syscall, finishes running its G,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// observes that there is no work to do and no other running M&#x27;s</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// and reports deadlock.</span></span><br><span class=\"line\">\t\t\t\tincidlelocked(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//注入全局g队列中</span></span><br><span class=\"line\">\t\t\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t\t\t\tincidlelocked(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> next &lt; now &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// There are timers that should have already run,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// perhaps because there is an unpreemptible P.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to start an M to run them.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//需要一个新的M来跑P上面的G。</span></span><br><span class=\"line\">\t\t\tstartm(<span class=\"literal\">nil</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Kick the scavenger awake if someone requested it.</span></span><br><span class=\"line\">\t\t\twakeScavenger()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// retake P&#x27;s blocked in syscalls</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and preempt long running G&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环所有的allp，进行抢夺。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> retake(now) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tidle++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// check if we need to force a GC</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//强行GC</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;forcegc.lock)</span><br><span class=\"line\">\t\t\tforcegc.idle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> list gList</span><br><span class=\"line\">\t\t\tlist.push(forcegc.g)</span><br><span class=\"line\">\t\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t\t\tunlock(&amp;forcegc.lock)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> debug.schedtrace &gt; <span class=\"number\">0</span> &amp;&amp; lasttrace+<span class=\"type\">int64</span>(debug.schedtrace)*<span class=\"number\">1000000</span> &lt;= now &#123;</span><br><span class=\"line\">\t\t\tlasttrace = now</span><br><span class=\"line\">\t\t\tschedtrace(debug.scheddetail &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;sched.sysmonlock)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"doInit\"><a class=\"header-anchor\" href=\"#doInit\">¶</a>doInit</h3>\n<blockquote>\n<p>这一部分在源码看来，没有具体的作用，，，，，，，，todo标签吧。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doInit</span><span class=\"params\">(t *initTask)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> t.state &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"comment\">// fully initialized</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">// initialization in progress</span></span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;recursive call during initialization - linker skew&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>: <span class=\"comment\">// not initialized yet</span></span><br><span class=\"line\">\t\tt.state = <span class=\"number\">1</span> <span class=\"comment\">// initialization in progress</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"type\">uintptr</span>(<span class=\"number\">0</span>); i &lt; t.ndeps; i++ &#123;</span><br><span class=\"line\">\t\t\tp := add(unsafe.Pointer(t), (<span class=\"number\">3</span>+i)*sys.PtrSize)</span><br><span class=\"line\">\t\t\tt2 := *(**initTask)(p)</span><br><span class=\"line\">\t\t\tdoInit(t2)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"type\">uintptr</span>(<span class=\"number\">0</span>); i &lt; t.nfns; i++ &#123;</span><br><span class=\"line\">\t\t\tp := add(unsafe.Pointer(t), (<span class=\"number\">3</span>+t.ndeps+i)*sys.PtrSize)</span><br><span class=\"line\">\t\t\tf := *(*<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>)(unsafe.Pointer(&amp;p))</span><br><span class=\"line\">\t\t\tf()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt.state = <span class=\"number\">2</span> <span class=\"comment\">// initialization done</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gcenable\"><a class=\"header-anchor\" href=\"#gcenable\">¶</a>gcenable</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gcenable is called after the bulk of the runtime initialization,</span></span><br><span class=\"line\"><span class=\"comment\">// just before we&#x27;re about to start letting user code run.</span></span><br><span class=\"line\"><span class=\"comment\">// It kicks off the background sweeper goroutine, the background</span></span><br><span class=\"line\"><span class=\"comment\">// scavenger goroutine, and enables GC.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gcenable</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Kick off sweeping and scavenging.</span></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> bgsweep(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> bgscavenge(c)</span><br><span class=\"line\">\t&lt;-c</span><br><span class=\"line\">\t&lt;-c</span><br><span class=\"line\">\tmemstats.enablegc = <span class=\"literal\">true</span> <span class=\"comment\">// now that runtime is initialized, GC is okay</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Gosched\"><a class=\"header-anchor\" href=\"#Gosched\">¶</a>Gosched</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Gosched yields the processor, allowing other goroutines to run. It does not</span></span><br><span class=\"line\"><span class=\"comment\">// suspend the current goroutine, so execution resumes automatically.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Gosched</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcheckTimeouts()</span><br><span class=\"line\">\tmcall(gosched_m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gopark\"><a class=\"header-anchor\" href=\"#gopark\">¶</a>gopark</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Puts the current goroutine into a waiting state and calls unlockf.</span></span><br><span class=\"line\"><span class=\"comment\">// If unlockf returns false, the goroutine is resumed.</span></span><br><span class=\"line\"><span class=\"comment\">// unlockf must not access this G&#x27;s stack, as it may be moved between</span></span><br><span class=\"line\"><span class=\"comment\">// the call to gopark and the call to unlockf.</span></span><br><span class=\"line\"><span class=\"comment\">// Reason explains why the goroutine has been parked.</span></span><br><span class=\"line\"><span class=\"comment\">// It is displayed in stack traces and heap dumps.</span></span><br><span class=\"line\"><span class=\"comment\">// Reasons should be unique and descriptive.</span></span><br><span class=\"line\"><span class=\"comment\">// Do not re-use reasons, add new ones.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gopark</span><span class=\"params\">(unlockf <span class=\"keyword\">func</span>(*g, unsafe.Pointer)</span></span> <span class=\"type\">bool</span>, lock unsafe.Pointer, reason waitReason, traceEv <span class=\"type\">byte</span>, traceskip <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> reason != waitReasonSleep &#123;</span><br><span class=\"line\">\t\tcheckTimeouts() <span class=\"comment\">// timeouts may expire while two goroutines keep the scheduler busy</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp := acquirem()</span><br><span class=\"line\">\tgp := mp.curg</span><br><span class=\"line\">\tstatus := readgstatus(gp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> status != _Grunning &amp;&amp; status != _Gscanrunning &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;gopark: bad g status&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp.waitlock = lock</span><br><span class=\"line\">\tmp.waitunlockf = unlockf</span><br><span class=\"line\">\tgp.waitreason = reason</span><br><span class=\"line\">\tmp.waittraceev = traceEv</span><br><span class=\"line\">\tmp.waittraceskip = traceskip</span><br><span class=\"line\">\t<span class=\"comment\">//mp解绑</span></span><br><span class=\"line\">\treleasem(mp)</span><br><span class=\"line\">\t<span class=\"comment\">// can&#x27;t do anything that might move the G between Ms here.</span></span><br><span class=\"line\">\tmcall(park_m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"后续\"><a class=\"header-anchor\" href=\"#后续\">¶</a>后续</h3>\n<blockquote>\n<p>关于里面的重要部分实现细节，不是本次关注的重点，，，，</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这次主要看到的是Go围绕main函数，为了程序的正常启动，所做的工作.</span><br><span class=\"line\"></span><br><span class=\"line\">无论是g的启动还是调度监控方面，也就是从整个生命周期来考虑，，，，，，</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还有一个就是关于panic的处理，采用事件驱动的方式，很好的获取到panic,进行后续的处理。</span><br><span class=\"line\"></span><br><span class=\"line\">最后还有一个关于全局locktrhead，，，，，，粒度尽量细小，有利于提高性能。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>前面g0和m0瞎扯了部分的入口和一些关键的点。</p>\n<p>本来应该扯扯shedule调度方面的知识，但是这个先往后放一节吧，</p>\n<p>先学习下这个「入口函数」，毕竟对于每一个项目都会有一个入口的相关逻辑，那么go源码是怎么处理的？</p>\n<p>有没有什么可以借鉴的嘞？！</p>","more":"<p>接下来该到main函数的相关处理。</p>\n<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h3 id=\"code分析\"><a class=\"header-anchor\" href=\"#code分析\">¶</a>code分析</h3>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L113\">main函数入口</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The main goroutine.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tg := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Racectx of m0-&gt;g0 is used only as the parent of the main goroutine.</span></span><br><span class=\"line\">\t<span class=\"comment\">// It must not be used for anything else.</span></span><br><span class=\"line\">\tg.m.g0.racectx = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Using decimal instead of binary GB and MB because</span></span><br><span class=\"line\">    <span class=\"comment\">// they look nicer in the stack overflow failure message.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//最大栈空间限制</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sys.PtrSize == <span class=\"number\">8</span> &#123;</span><br><span class=\"line\">\t\tmaxstacksize = <span class=\"number\">1000000000</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tmaxstacksize = <span class=\"number\">250000000</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Allow newproc to start new Ms.</span></span><br><span class=\"line\">\tmainStarted = <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果是wasm，就不要调度程序了.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> GOARCH != <span class=\"string\">&quot;wasm&quot;</span> &#123; <span class=\"comment\">// no threads on wasm yet, so no sysmon</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//系统栈调用</span></span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// newm的回调函数，，，一个M一个sysmon P</span></span><br><span class=\"line\">\t\t\tnewm(sysmon, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Lock the main goroutine onto this, the main OS thread,</span></span><br><span class=\"line\">\t<span class=\"comment\">// during initialization. Most programs won&#x27;t care, but a few</span></span><br><span class=\"line\">\t<span class=\"comment\">// do require certain calls to be made by the main thread.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Those can arrange for main.main to run in the main thread</span></span><br><span class=\"line\">\t<span class=\"comment\">// by calling runtime.LockOSThread during initialization</span></span><br><span class=\"line\">\t<span class=\"comment\">// to preserve the lock.</span></span><br><span class=\"line\">\tlockOSThread()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> g.m != &amp;m0 &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;runtime.main not on m0&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoInit(&amp;runtime_inittask) <span class=\"comment\">// must be before defer</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nanotime() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;nanotime returning zero&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Defer unlock so that runtime.Goexit during init does the unlock too.</span></span><br><span class=\"line\">\tneedUnlock := <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> needUnlock &#123;</span><br><span class=\"line\">\t\t\tunlockOSThread()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Record when the world started.</span></span><br><span class=\"line\">\truntimeInitTime = nanotime()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//启动GC</span></span><br><span class=\"line\">\tgcenable()</span><br><span class=\"line\"></span><br><span class=\"line\">\tmain_init_done = <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">bool</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> iscgo &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _cgo_thread_start == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;_cgo_thread_start missing&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> GOOS != <span class=\"string\">&quot;windows&quot;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> _cgo_setenv == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;_cgo_setenv missing&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> _cgo_unsetenv == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;_cgo_unsetenv missing&quot;</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _cgo_notify_runtime_init_done == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;_cgo_notify_runtime_init_done missing&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Start the template thread in case we enter Go from</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// a C-created thread and need to create a new thread.</span></span><br><span class=\"line\">\t\tstartTemplateThread()</span><br><span class=\"line\">\t\tcgocall(_cgo_notify_runtime_init_done, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdoInit(&amp;main_inittask)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(main_init_done)</span><br><span class=\"line\"></span><br><span class=\"line\">\tneedUnlock = <span class=\"literal\">false</span></span><br><span class=\"line\">\tunlockOSThread()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> isarchive || islibrary &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// A program compiled with -buildmode=c-archive or c-shared</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// has a main, but it is not executed.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//对于main函数的回调，也就是用户写的main程序</span></span><br><span class=\"line\">\tfn := main_main <span class=\"comment\">// make an indirect call, as the linker doesn&#x27;t know the address of the main package when laying down the runtime</span></span><br><span class=\"line\">\tfn()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\tracefini()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Make racy client program work: if panicking on</span></span><br><span class=\"line\">\t<span class=\"comment\">// another goroutine at the same time as main returns,</span></span><br><span class=\"line\">\t<span class=\"comment\">// let the other goroutine finish printing the panic trace.</span></span><br><span class=\"line\">    <span class=\"comment\">// Once it does, it will exit. See issues 3934 and 20018.</span></span><br><span class=\"line\">    <span class=\"comment\">//判断panicDefer函数，，，，，，</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.Load(&amp;runningPanicDefers) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Running deferred functions should not take long.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> c := <span class=\"number\">0</span>; c &lt; <span class=\"number\">1000</span>; c++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;runningPanicDefers) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tGosched()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断panic</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.Load(&amp;panicking) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tgopark(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, waitReasonPanicWait, traceEvGoStop, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//正常退出了那.....</span></span><br><span class=\"line\">\texit(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> x *<span class=\"type\">int32</span></span><br><span class=\"line\">\t\t*x = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"systemstack\"><a class=\"header-anchor\" href=\"#systemstack\">¶</a>systemstack</h3>\n<blockquote>\n<p>这个函数，在整个系统中较为重要，来看看官方说明</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// systemstack runs fn on a system stack.</span></span><br><span class=\"line\"><span class=\"comment\">// If systemstack is called from the per-OS-thread (g0) stack, or</span></span><br><span class=\"line\"><span class=\"comment\">// if systemstack is called from the signal handling (gsignal) stack,</span></span><br><span class=\"line\"><span class=\"comment\">// systemstack calls fn directly and returns.</span></span><br><span class=\"line\"><span class=\"comment\">//g0 stack或者信号处理的，就直接调用并返回。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, systemstack is being called from the limited stack</span></span><br><span class=\"line\"><span class=\"comment\">// of an ordinary goroutine. In this case, systemstack switches</span></span><br><span class=\"line\"><span class=\"comment\">// to the per-OS-thread stack, calls fn, and switches back.</span></span><br><span class=\"line\"><span class=\"comment\">// It is common to use a func literal as the argument, in order</span></span><br><span class=\"line\"><span class=\"comment\">// to share inputs and outputs with the code around the call</span></span><br><span class=\"line\"><span class=\"comment\">// to system stack:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\t... set up y ...</span></span><br><span class=\"line\"><span class=\"comment\">//\tsystemstack(func() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tx = bigcall(y)</span></span><br><span class=\"line\"><span class=\"comment\">//\t&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//\t... use x ...</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:noescape</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">systemstack</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"newm\"><a class=\"header-anchor\" href=\"#newm\">¶</a>newm</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new m. It will start off with a call to fn, or else the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">// fn needs to be static and not a heap allocated closure.</span></span><br><span class=\"line\"><span class=\"comment\">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于创建新的M，fn:sysmon函数，类似于事件驱动类型的。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//分配内存</span></span><br><span class=\"line\">\tmp := allocm(_p_, fn)</span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">\tmp.sigmask = initSigmask</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp := getg(); gp != <span class=\"literal\">nil</span> &amp;&amp; gp.m != <span class=\"literal\">nil</span> &amp;&amp; (gp.m.lockedExt != <span class=\"number\">0</span> || gp.m.incgo) &amp;&amp; GOOS != <span class=\"string\">&quot;plan9&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We&#x27;re on a locked M or a thread that may have been</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// started by C. The kernel state of this thread may</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// be strange (the user may have locked it for that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// purpose). We don&#x27;t want to clone that into another</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// thread. Instead, ask a known-good thread to create</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the thread for us.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// This is disabled on Plan 9. See golang.org/issue/22227.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> This may be unnecessary on Windows, which</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// doesn&#x27;t model thread creation off fork.</span></span><br><span class=\"line\">\t\tlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.haveTemplateThread == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;on a locked thread with no template thread&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmp.schedlink = newmHandoff.newm</span><br><span class=\"line\">\t\tnewmHandoff.newm.set(mp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.waiting &#123;</span><br><span class=\"line\">\t\t\tnewmHandoff.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\tnotewakeup(&amp;newmHandoff.wake)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>主要是以下几个函数：</p>\n</blockquote>\n<ul>\n<li>allocm</li>\n<li>notewakeup</li>\n<li>newm1</li>\n</ul>\n<h3 id=\"sysmon\"><a class=\"header-anchor\" href=\"#sysmon\">¶</a>sysmon</h3>\n<p>学习系统监控之前，先学下部分函数的使用和其大概含义：</p>\n<ul>\n<li>checkdead</li>\n<li>usleep</li>\n<li>timeSleepUntil</li>\n<li>nanotime</li>\n<li>netpollinited</li>\n<li>startm</li>\n<li>retake</li>\n<li>gcTrigger</li>\n<li>injectglist</li>\n</ul>\n<blockquote>\n<p>先看下主体流程</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Always runs without a P, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sysmon</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlock(&amp;sched.lock)</span><br><span class=\"line\">\tsched.nmsys++</span><br><span class=\"line\">\t<span class=\"comment\">//基于running中的M，检查死锁，，，，</span></span><br><span class=\"line\">\tcheckdead()</span><br><span class=\"line\">\tunlock(&amp;sched.lock)</span><br><span class=\"line\"></span><br><span class=\"line\">\tlasttrace := <span class=\"type\">int64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tidle := <span class=\"number\">0</span> <span class=\"comment\">// how many cycles in succession we had not wokeup somebody</span></span><br><span class=\"line\">\tdelay := <span class=\"type\">uint32</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> idle == <span class=\"number\">0</span> &#123; <span class=\"comment\">// start with 20us sleep...</span></span><br><span class=\"line\">\t\t\tdelay = <span class=\"number\">20</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> idle &gt; <span class=\"number\">50</span> &#123; <span class=\"comment\">// start doubling the sleep after 1ms...</span></span><br><span class=\"line\">\t\t\tdelay *= <span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> delay &gt; <span class=\"number\">10</span>*<span class=\"number\">1000</span> &#123; <span class=\"comment\">// up to 10ms</span></span><br><span class=\"line\">\t\t\tdelay = <span class=\"number\">10</span> * <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//休眠时间</span></span><br><span class=\"line\">\t\tusleep(delay)</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取时间</span></span><br><span class=\"line\">\t\tnow := nanotime()</span><br><span class=\"line\">\t\t<span class=\"comment\">// 休眠等待唤醒信号</span></span><br><span class=\"line\">\t\tnext, _ := timeSleepUntil()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> debug.schedtrace &lt;= <span class=\"number\">0</span> &amp;&amp; (sched.gcwaiting != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs)) &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> next &gt; now &#123;</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Make wake-up period small enough</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// for the sampling to be correct.</span></span><br><span class=\"line\">\t\t\t\t\tsleep := forcegcperiod / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> next-now &lt; sleep &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsleep = next - now</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tshouldRelax := sleep &gt;= osRelaxMinNS</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnotetsleep(&amp;sched.sysmonnote, sleep)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnow = nanotime()</span><br><span class=\"line\">\t\t\t\t\tnext, _ = timeSleepUntil()</span><br><span class=\"line\">\t\t\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tnoteclear(&amp;sched.sysmonnote)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t\tdelay = <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlock(&amp;sched.sysmonlock)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If we spent a long time blocked on sysmonlock</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// then we want to update now and next since it&#x27;s</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// likely stale.</span></span><br><span class=\"line\">\t\t\tnow1 := nanotime()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> now1-now &gt; <span class=\"number\">50</span>*<span class=\"number\">1000</span> <span class=\"comment\">/* 50µs */</span> &#123;</span><br><span class=\"line\">\t\t\t\tnext, _ = timeSleepUntil()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnow = now1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// trigger libc interceptors if needed</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> *cgo_yield != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tasmcgocall(*cgo_yield, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// poll network if not polled for more than 10ms</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//在队列中等待调度超过10ms，就给交给global抢渡了</span></span><br><span class=\"line\">\t\tlastpoll := <span class=\"type\">int64</span>(atomic.Load64(&amp;sched.lastpoll))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> netpollinited() &amp;&amp; lastpoll != <span class=\"number\">0</span> &amp;&amp; lastpoll+<span class=\"number\">10</span>*<span class=\"number\">1000</span>*<span class=\"number\">1000</span> &lt; now &#123;</span><br><span class=\"line\">\t\t\tatomic.Cas64(&amp;sched.lastpoll, <span class=\"type\">uint64</span>(lastpoll), <span class=\"type\">uint64</span>(now))</span><br><span class=\"line\">\t\t\tlist := netpoll(<span class=\"number\">0</span>) <span class=\"comment\">// non-blocking - returns list of goroutines</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !list.empty() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Need to decrement number of idle locked M&#x27;s</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// (pretending that one more is running) before injectglist.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Otherwise it can lead to the following situation:</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// another M returns from syscall, finishes running its G,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// observes that there is no work to do and no other running M&#x27;s</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// and reports deadlock.</span></span><br><span class=\"line\">\t\t\t\tincidlelocked(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//注入全局g队列中</span></span><br><span class=\"line\">\t\t\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t\t\t\tincidlelocked(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> next &lt; now &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// There are timers that should have already run,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// perhaps because there is an unpreemptible P.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Try to start an M to run them.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//需要一个新的M来跑P上面的G。</span></span><br><span class=\"line\">\t\t\tstartm(<span class=\"literal\">nil</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Kick the scavenger awake if someone requested it.</span></span><br><span class=\"line\">\t\t\twakeScavenger()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// retake P&#x27;s blocked in syscalls</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and preempt long running G&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 循环所有的allp，进行抢夺。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> retake(now) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tidle++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// check if we need to force a GC</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//强行GC</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;forcegc.lock)</span><br><span class=\"line\">\t\t\tforcegc.idle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> list gList</span><br><span class=\"line\">\t\t\tlist.push(forcegc.g)</span><br><span class=\"line\">\t\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t\t\tunlock(&amp;forcegc.lock)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> debug.schedtrace &gt; <span class=\"number\">0</span> &amp;&amp; lasttrace+<span class=\"type\">int64</span>(debug.schedtrace)*<span class=\"number\">1000000</span> &lt;= now &#123;</span><br><span class=\"line\">\t\t\tlasttrace = now</span><br><span class=\"line\">\t\t\tschedtrace(debug.scheddetail &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;sched.sysmonlock)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"doInit\"><a class=\"header-anchor\" href=\"#doInit\">¶</a>doInit</h3>\n<blockquote>\n<p>这一部分在源码看来，没有具体的作用，，，，，，，，todo标签吧。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doInit</span><span class=\"params\">(t *initTask)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> t.state &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"comment\">// fully initialized</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">// initialization in progress</span></span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;recursive call during initialization - linker skew&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>: <span class=\"comment\">// not initialized yet</span></span><br><span class=\"line\">\t\tt.state = <span class=\"number\">1</span> <span class=\"comment\">// initialization in progress</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"type\">uintptr</span>(<span class=\"number\">0</span>); i &lt; t.ndeps; i++ &#123;</span><br><span class=\"line\">\t\t\tp := add(unsafe.Pointer(t), (<span class=\"number\">3</span>+i)*sys.PtrSize)</span><br><span class=\"line\">\t\t\tt2 := *(**initTask)(p)</span><br><span class=\"line\">\t\t\tdoInit(t2)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"type\">uintptr</span>(<span class=\"number\">0</span>); i &lt; t.nfns; i++ &#123;</span><br><span class=\"line\">\t\t\tp := add(unsafe.Pointer(t), (<span class=\"number\">3</span>+t.ndeps+i)*sys.PtrSize)</span><br><span class=\"line\">\t\t\tf := *(*<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>)(unsafe.Pointer(&amp;p))</span><br><span class=\"line\">\t\t\tf()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt.state = <span class=\"number\">2</span> <span class=\"comment\">// initialization done</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gcenable\"><a class=\"header-anchor\" href=\"#gcenable\">¶</a>gcenable</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gcenable is called after the bulk of the runtime initialization,</span></span><br><span class=\"line\"><span class=\"comment\">// just before we&#x27;re about to start letting user code run.</span></span><br><span class=\"line\"><span class=\"comment\">// It kicks off the background sweeper goroutine, the background</span></span><br><span class=\"line\"><span class=\"comment\">// scavenger goroutine, and enables GC.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gcenable</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Kick off sweeping and scavenging.</span></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> bgsweep(c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> bgscavenge(c)</span><br><span class=\"line\">\t&lt;-c</span><br><span class=\"line\">\t&lt;-c</span><br><span class=\"line\">\tmemstats.enablegc = <span class=\"literal\">true</span> <span class=\"comment\">// now that runtime is initialized, GC is okay</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Gosched\"><a class=\"header-anchor\" href=\"#Gosched\">¶</a>Gosched</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Gosched yields the processor, allowing other goroutines to run. It does not</span></span><br><span class=\"line\"><span class=\"comment\">// suspend the current goroutine, so execution resumes automatically.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Gosched</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tcheckTimeouts()</span><br><span class=\"line\">\tmcall(gosched_m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"gopark\"><a class=\"header-anchor\" href=\"#gopark\">¶</a>gopark</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Puts the current goroutine into a waiting state and calls unlockf.</span></span><br><span class=\"line\"><span class=\"comment\">// If unlockf returns false, the goroutine is resumed.</span></span><br><span class=\"line\"><span class=\"comment\">// unlockf must not access this G&#x27;s stack, as it may be moved between</span></span><br><span class=\"line\"><span class=\"comment\">// the call to gopark and the call to unlockf.</span></span><br><span class=\"line\"><span class=\"comment\">// Reason explains why the goroutine has been parked.</span></span><br><span class=\"line\"><span class=\"comment\">// It is displayed in stack traces and heap dumps.</span></span><br><span class=\"line\"><span class=\"comment\">// Reasons should be unique and descriptive.</span></span><br><span class=\"line\"><span class=\"comment\">// Do not re-use reasons, add new ones.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gopark</span><span class=\"params\">(unlockf <span class=\"keyword\">func</span>(*g, unsafe.Pointer)</span></span> <span class=\"type\">bool</span>, lock unsafe.Pointer, reason waitReason, traceEv <span class=\"type\">byte</span>, traceskip <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> reason != waitReasonSleep &#123;</span><br><span class=\"line\">\t\tcheckTimeouts() <span class=\"comment\">// timeouts may expire while two goroutines keep the scheduler busy</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp := acquirem()</span><br><span class=\"line\">\tgp := mp.curg</span><br><span class=\"line\">\tstatus := readgstatus(gp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> status != _Grunning &amp;&amp; status != _Gscanrunning &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;gopark: bad g status&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmp.waitlock = lock</span><br><span class=\"line\">\tmp.waitunlockf = unlockf</span><br><span class=\"line\">\tgp.waitreason = reason</span><br><span class=\"line\">\tmp.waittraceev = traceEv</span><br><span class=\"line\">\tmp.waittraceskip = traceskip</span><br><span class=\"line\">\t<span class=\"comment\">//mp解绑</span></span><br><span class=\"line\">\treleasem(mp)</span><br><span class=\"line\">\t<span class=\"comment\">// can&#x27;t do anything that might move the G between Ms here.</span></span><br><span class=\"line\">\tmcall(park_m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"后续\"><a class=\"header-anchor\" href=\"#后续\">¶</a>后续</h3>\n<blockquote>\n<p>关于里面的重要部分实现细节，不是本次关注的重点，，，，</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这次主要看到的是Go围绕main函数，为了程序的正常启动，所做的工作.</span><br><span class=\"line\"></span><br><span class=\"line\">无论是g的启动还是调度监控方面，也就是从整个生命周期来考虑，，，，，，</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">还有一个就是关于panic的处理，采用事件驱动的方式，很好的获取到panic,进行后续的处理。</span><br><span class=\"line\"></span><br><span class=\"line\">最后还有一个关于全局locktrhead，，，，，，粒度尽量细小，有利于提高性能。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Nov 21 2020 21:00:17 GMT+0800 (中国标准时间)","title":"「23」GPM main入口函数","path":"archives/9bb71eca.html","eyeCatchImage":null,"excerpt":"<p>前面g0和m0瞎扯了部分的入口和一些关键的点。</p>\n<p>本来应该扯扯shedule调度方面的知识，但是这个先往后放一节吧，</p>\n<p>先学习下这个「入口函数」，毕竟对于每一个项目都会有一个入口的相关逻辑，那么go源码是怎么处理的？</p>\n<p>有没有什么可以借鉴的嘞？！</p>","date":{"_isAMomentObject":true,"_i":"2020-11-21T13:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-21T13:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":11128},{"title":"「25」GPM sysmon函数","date":"2020-12-06T12:00:17.000Z","updated":"2021-05-10T05:00:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"c770fe49","_content":"\n\n前面主要是了解newm的全过程和其中难过一些细节逻辑，，，\n如果没了解的，建议先去看下大概的过程，虽然不是非常详细，\n最起码得知道newm过程，主要完成了什么操作，有利于后续理解。\n\n这次主要是来学学这个sysmon，系统监控调度的逻辑。\n<!--more-->\n### Go version\n\n>go 1.14\n\n### 前序\n\n\n在深入之前呢，先对下面这些变量有个概念，后续提到也就不陌生了。「摘抄自sysmon函数」\n\n```go\nvar (\n\tallglen    uintptr //g\n\tallm       *m      //m\n\tallp       []*p  // p     len(allp) == gomaxprocs; may change at safe points, otherwise immutable\n\tallpLock   mutex // 全局lock。   Protects P-less reads of allp and all writes\n\tgomaxprocs int32 //最大process数量\n\tncpu       int32 //cpu个数\n\tforcegc    forcegcstate //强制GC\n\tsched      schedt //预分配的一些变量值\n\tnewprocs   int32  //新的process\n\n\t// Information about what cpu features are available.\n\t// Packages outside the runtime should not use these\n\t// as they are not an external api.\n\t// Set on startup in asm_{386,amd64}.s\n\tprocessorVersionInfo uint32\n\tisIntel              bool\n\tlfenceBeforeRdtsc    bool\n\n\tgoarm                uint8 // set by cmd/link on arm systems\n\tframepointer_enabled bool  // set by cmd/link\n)\n\n```\n\n### sysmon函数\n\n#### 概览\n```go\n\nfunc sysmon() {\n\tlock(&sched.lock)//加锁\n\tsched.nmsys++ //数量+1\n\tcheckdead() //检查是否dead\n\tunlock(&sched.lock) //释放lock\n\n\tlasttrace := int64(0)\n\tidle := 0 // how many cycles in succession we had not wokeup somebody\n\tdelay := uint32(0)\n\tfor{\n\t\t......\n\t}\n}\n```\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-sysmon-1.png)\n\n\n\n### 循环干什么？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201206_085755.png)\n\n\n>一个个过吧\n\n#### 获取系统的纳秒时间\n```go\nnow := nanotime()\n```\n\n#### timeSleepUntil\n\n```go\n// timeSleepUntil returns the time when the next timer should fire,\n// and the P that holds the timer heap that that timer is on.\n// This is only called by sysmon and checkdead.\nfunc timeSleepUntil() (int64, *p) {\n\tnext := int64(maxWhen)\n\tvar pret *p\n\n\t// Prevent allp slice changes. This is like retake.\n\tlock(&allpLock)\n\tfor _, pp := range allp {\n\t\tif pp == nil {\n\t\t\t// This can happen if procresize has grown\n\t\t\t// allp but not yet created new Ps.\n\t\t\tcontinue\n\t\t}\n\n\t\tc := atomic.Load(&pp.adjustTimers)\n\t\tif c == 0 {\n\t\t\tw := int64(atomic.Load64(&pp.timer0When))\n\t\t\t//划重点\n\t\t\tif w != 0 && w < next {\n\t\t\t\tnext = w\n\t\t\t\tpret = pp\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tlock(&pp.timersLock)\n\t\tfor _, t := range pp.timers {\n\t\t\t//划重点\n\t\t\tswitch s := atomic.Load(&t.status); s {\n\t\t\tcase timerWaiting:\n\t\t\t\tif t.when < next {\n\t\t\t\t\tnext = t.when\n\t\t\t\t}\n\t\t\tcase timerModifiedEarlier, timerModifiedLater:\n\t\t\t\tif t.nextwhen < next {\n\t\t\t\t\tnext = t.nextwhen\n\t\t\t\t}\n\t\t\t\tif s == timerModifiedEarlier {\n\t\t\t\t\tc--\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The timers are sorted, so we only have to check\n\t\t\t// the first timer for each P, unless there are\n\t\t\t// some timerModifiedEarlier timers. The number\n\t\t\t// of timerModifiedEarlier timers is in the adjustTimers\n\t\t\t// field, used to initialize c, above.\n\t\t\t//\n\t\t\t// We don't worry about cases like timerModifying.\n\t\t\t// New timers can show up at any time,\n\t\t\t// so this function is necessarily imprecise.\n\t\t\t// Do a signed check here since we aren't\n\t\t\t// synchronizing the read of pp.adjustTimers\n\t\t\t// with the check of a timer status.\n\t\t\tif int32(c) <= 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tunlock(&pp.timersLock)\n\t}\n\tunlock(&allpLock)\n\n\treturn next, pret\n}\n```\n\n#### sched和gomaxprocs判断「sleep&wakeup过程」\n```go\n//双层判断，防止在加锁这段时间值发生变化\nif debug.schedtrace <= 0 && (sched.gcwaiting != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs)) {\n\t\t\tlock(&sched.lock)\n\t\t\tif atomic.Load(&sched.gcwaiting) != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs) {\n\t\t\t\tif next > now {\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 1)\n\t\t\t\t\tunlock(&sched.lock)\n\t\t\t\t\t// Make wake-up period small enough\n\t\t\t\t\t// for the sampling to be correct.\n\t\t\t\t\tsleep := forcegcperiod / 2\n\t\t\t\t\tif next-now < sleep {\n\t\t\t\t\t\tsleep = next - now\n\t\t\t\t\t}\n\t\t\t\t\tshouldRelax := sleep >= osRelaxMinNS\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(true)\n\t\t\t\t\t}\n\t\t\t\t\tnotetsleep(&sched.sysmonnote, sleep)\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(false)\n\t\t\t\t\t}\n\t\t\t\t\tnow = nanotime()\n\t\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t\t\tlock(&sched.lock)\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 0)\n\t\t\t\t\tnoteclear(&sched.sysmonnote)\n\t\t\t\t}\n\t\t\t\tidle = 0\n\t\t\t\tdelay = 20\n\t\t\t}\n\t\t\tunlock(&sched.lock)\n\t\t}\n```\n\n#### poll network\n\n```go\n\t\t// poll network if not polled for more than 10ms\n\t\tlastpoll := int64(atomic.Load64(&sched.lastpoll))\n\t\tif netpollinited() && lastpoll != 0 && lastpoll+10*1000*1000 < now {\n\t\t\tatomic.Cas64(&sched.lastpoll, uint64(lastpoll), uint64(now))\n\t\t\tlist := netpoll(0) // non-blocking - returns list of goroutines\n\t\t\tif !list.empty() {\n\t\t\t\t// Need to decrement number of idle locked M's\n\t\t\t\t// (pretending that one more is running) before injectglist.\n\t\t\t\t// Otherwise it can lead to the following situation:\n\t\t\t\t// injectglist grabs all P's but before it starts M's to run the P's,\n\t\t\t\t// another M returns from syscall, finishes running its G,\n\t\t\t\t// observes that there is no work to do and no other running M's\n\t\t\t\t// and reports deadlock.\n\t\t\t\tincidlelocked(-1)\n\t\t\t\tinjectglist(&list)\n\t\t\t\tincidlelocked(1)\n\t\t\t}\n\t\t}\n\t\tif next < now {\n\t\t\t// There are timers that should have already run,\n\t\t\t// perhaps because there is an unpreemptible P.\n\t\t\t// Try to start an M to run them.\n\t\t\t//划重点\n\t\t\tstartm(nil, false)\n\t\t}\n```\n\n#### wakeScavenger\n\n>判断需要唤醒请求\n```go\n\t\tif atomic.Load(&scavenge.sysmonWake) != 0 {\n\t\t\t// Kick the scavenger awake if someone requested it.\n\t\t\twakeScavenger()\n\t\t}\n```\n\n```go\n// wakeScavenger immediately unparks the scavenger if necessary.\n//\n// May run without a P, but it may allocate, so it must not be called\n// on any allocation path.\n//\n// mheap_.lock, scavenge.lock, and sched.lock must not be held.\nfunc wakeScavenger() {\n\tlock(&scavenge.lock)\n\tif scavenge.parked {\n\t\t// Notify sysmon that it shouldn't bother waking up the scavenger.\n\t\tatomic.Store(&scavenge.sysmonWake, 0)\n\n\t\t// Try to stop the timer but we don't really care if we succeed.\n\t\t// It's possible that either a timer was never started, or that\n\t\t// we're racing with it.\n\t\t// In the case that we're racing with there's the low chance that\n\t\t// we experience a spurious wake-up of the scavenger, but that's\n\t\t// totally safe.\n\t\tstopTimer(scavenge.timer)\n\n\t\t// Unpark the goroutine and tell it that there may have been a pacing\n\t\t// change. Note that we skip the scheduler's runnext slot because we\n\t\t// want to avoid having the scavenger interfere with the fair\n\t\t// scheduling of user goroutines. In effect, this schedules the\n\t\t// scavenger at a \"lower priority\" but that's OK because it'll\n\t\t// catch up on the work it missed when it does get scheduled.\n\t\tscavenge.parked = false\n\n\t\t// Ready the goroutine by injecting it. We use injectglist instead\n\t\t// of ready or goready in order to allow us to run this function\n\t\t// without a P. injectglist also avoids placing the goroutine in\n\t\t// the current P's runnext slot, which is desireable to prevent\n\t\t// the scavenger from interfering with user goroutine scheduling\n\t\t// too much.\n\t\tvar list gList\n\t\tlist.push(scavenge.g)\n\t\tinjectglist(&list)\n\t}\n\tunlock(&scavenge.lock)\n}\n\n```\n\n#### retake夺取\n\n>夺取空闲的P\n```go\n\t\t// retake P's blocked in syscalls\n\t\t// and preempt long running G's\n\t\tif retake(now) != 0 {\n\t\t\tidle = 0\n\t\t} else {\n\t\t\tidle++\n\t\t}\n```\n\n#### GC 判断\n\n```go\n\t\t// check if we need to force a GC\n\t\t//划重点 t.test()\n\t\tif t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && atomic.Load(&forcegc.idle) != 0 {\n\t\t\tlock(&forcegc.lock)\n\t\t\tforcegc.idle = 0\n\t\t\tvar list gList\n\t\t\tlist.push(forcegc.g)\n\t\t\tinjectglist(&list)\n\t\t\tunlock(&forcegc.lock)\n\t\t}\n```\n\n### 总结下干了什么？？\n\n* 1、强制垃圾回收。\n* 2、将长时间未处理的netpoll结果添加到任务队列。\n* 3、对长时间运行G，进行retake夺P的调度。\n* 4、回收syscall长时间阻塞的P。\n\n\n### 关于资料参考更正：\n\n#### 参考：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_014127.png)\n\n关于这个第一点的说法是建立在18年Go 1.11的时候，是没有问题，大家按不同的版本，变化的来看待。\n##### Go 1.11\n附上关于5分钟回收的链接[👉🏻👉🏻Go 1.11 proc.go](https://github.com/golang/go/blob/release-branch.go1.11/src/runtime/proc.go#L4328)\n\n调用函数：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_020832.png)\n\n##### Go 1.14\n> scavengeAll替代 scavenge函数\n\n\n[👉🏻scavengeALL](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/mheap.go#L1424)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021037.png)\n\n\n调用地方 [👉🏻runtime debug freeosMemory](https://github.com/golang/go/blob/5cf057ddedfbb149b71c85ec86050431dd6b2d9d/src/runtime/mheap.go#L1445)：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021423.png)\n\n\n### 参考：\n\n[Go学习整理笔记](https://studygolang.com/articles/12112)\n","source":"_posts/25-GPM-sysmon函数.md","raw":"---\ntitle: 「25」GPM sysmon函数\ndate: '2020/12/06 20:00:17'\nupdated: '2021/05/10 13:00:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: c770fe49\n---\n\n\n前面主要是了解newm的全过程和其中难过一些细节逻辑，，，\n如果没了解的，建议先去看下大概的过程，虽然不是非常详细，\n最起码得知道newm过程，主要完成了什么操作，有利于后续理解。\n\n这次主要是来学学这个sysmon，系统监控调度的逻辑。\n<!--more-->\n### Go version\n\n>go 1.14\n\n### 前序\n\n\n在深入之前呢，先对下面这些变量有个概念，后续提到也就不陌生了。「摘抄自sysmon函数」\n\n```go\nvar (\n\tallglen    uintptr //g\n\tallm       *m      //m\n\tallp       []*p  // p     len(allp) == gomaxprocs; may change at safe points, otherwise immutable\n\tallpLock   mutex // 全局lock。   Protects P-less reads of allp and all writes\n\tgomaxprocs int32 //最大process数量\n\tncpu       int32 //cpu个数\n\tforcegc    forcegcstate //强制GC\n\tsched      schedt //预分配的一些变量值\n\tnewprocs   int32  //新的process\n\n\t// Information about what cpu features are available.\n\t// Packages outside the runtime should not use these\n\t// as they are not an external api.\n\t// Set on startup in asm_{386,amd64}.s\n\tprocessorVersionInfo uint32\n\tisIntel              bool\n\tlfenceBeforeRdtsc    bool\n\n\tgoarm                uint8 // set by cmd/link on arm systems\n\tframepointer_enabled bool  // set by cmd/link\n)\n\n```\n\n### sysmon函数\n\n#### 概览\n```go\n\nfunc sysmon() {\n\tlock(&sched.lock)//加锁\n\tsched.nmsys++ //数量+1\n\tcheckdead() //检查是否dead\n\tunlock(&sched.lock) //释放lock\n\n\tlasttrace := int64(0)\n\tidle := 0 // how many cycles in succession we had not wokeup somebody\n\tdelay := uint32(0)\n\tfor{\n\t\t......\n\t}\n}\n```\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-sysmon-1.png)\n\n\n\n### 循环干什么？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201206_085755.png)\n\n\n>一个个过吧\n\n#### 获取系统的纳秒时间\n```go\nnow := nanotime()\n```\n\n#### timeSleepUntil\n\n```go\n// timeSleepUntil returns the time when the next timer should fire,\n// and the P that holds the timer heap that that timer is on.\n// This is only called by sysmon and checkdead.\nfunc timeSleepUntil() (int64, *p) {\n\tnext := int64(maxWhen)\n\tvar pret *p\n\n\t// Prevent allp slice changes. This is like retake.\n\tlock(&allpLock)\n\tfor _, pp := range allp {\n\t\tif pp == nil {\n\t\t\t// This can happen if procresize has grown\n\t\t\t// allp but not yet created new Ps.\n\t\t\tcontinue\n\t\t}\n\n\t\tc := atomic.Load(&pp.adjustTimers)\n\t\tif c == 0 {\n\t\t\tw := int64(atomic.Load64(&pp.timer0When))\n\t\t\t//划重点\n\t\t\tif w != 0 && w < next {\n\t\t\t\tnext = w\n\t\t\t\tpret = pp\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\tlock(&pp.timersLock)\n\t\tfor _, t := range pp.timers {\n\t\t\t//划重点\n\t\t\tswitch s := atomic.Load(&t.status); s {\n\t\t\tcase timerWaiting:\n\t\t\t\tif t.when < next {\n\t\t\t\t\tnext = t.when\n\t\t\t\t}\n\t\t\tcase timerModifiedEarlier, timerModifiedLater:\n\t\t\t\tif t.nextwhen < next {\n\t\t\t\t\tnext = t.nextwhen\n\t\t\t\t}\n\t\t\t\tif s == timerModifiedEarlier {\n\t\t\t\t\tc--\n\t\t\t\t}\n\t\t\t}\n\t\t\t// The timers are sorted, so we only have to check\n\t\t\t// the first timer for each P, unless there are\n\t\t\t// some timerModifiedEarlier timers. The number\n\t\t\t// of timerModifiedEarlier timers is in the adjustTimers\n\t\t\t// field, used to initialize c, above.\n\t\t\t//\n\t\t\t// We don't worry about cases like timerModifying.\n\t\t\t// New timers can show up at any time,\n\t\t\t// so this function is necessarily imprecise.\n\t\t\t// Do a signed check here since we aren't\n\t\t\t// synchronizing the read of pp.adjustTimers\n\t\t\t// with the check of a timer status.\n\t\t\tif int32(c) <= 0 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tunlock(&pp.timersLock)\n\t}\n\tunlock(&allpLock)\n\n\treturn next, pret\n}\n```\n\n#### sched和gomaxprocs判断「sleep&wakeup过程」\n```go\n//双层判断，防止在加锁这段时间值发生变化\nif debug.schedtrace <= 0 && (sched.gcwaiting != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs)) {\n\t\t\tlock(&sched.lock)\n\t\t\tif atomic.Load(&sched.gcwaiting) != 0 || atomic.Load(&sched.npidle) == uint32(gomaxprocs) {\n\t\t\t\tif next > now {\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 1)\n\t\t\t\t\tunlock(&sched.lock)\n\t\t\t\t\t// Make wake-up period small enough\n\t\t\t\t\t// for the sampling to be correct.\n\t\t\t\t\tsleep := forcegcperiod / 2\n\t\t\t\t\tif next-now < sleep {\n\t\t\t\t\t\tsleep = next - now\n\t\t\t\t\t}\n\t\t\t\t\tshouldRelax := sleep >= osRelaxMinNS\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(true)\n\t\t\t\t\t}\n\t\t\t\t\tnotetsleep(&sched.sysmonnote, sleep)\n\t\t\t\t\tif shouldRelax {\n\t\t\t\t\t\tosRelax(false)\n\t\t\t\t\t}\n\t\t\t\t\tnow = nanotime()\n\t\t\t\t\tnext, _ = timeSleepUntil()\n\t\t\t\t\tlock(&sched.lock)\n\t\t\t\t\tatomic.Store(&sched.sysmonwait, 0)\n\t\t\t\t\tnoteclear(&sched.sysmonnote)\n\t\t\t\t}\n\t\t\t\tidle = 0\n\t\t\t\tdelay = 20\n\t\t\t}\n\t\t\tunlock(&sched.lock)\n\t\t}\n```\n\n#### poll network\n\n```go\n\t\t// poll network if not polled for more than 10ms\n\t\tlastpoll := int64(atomic.Load64(&sched.lastpoll))\n\t\tif netpollinited() && lastpoll != 0 && lastpoll+10*1000*1000 < now {\n\t\t\tatomic.Cas64(&sched.lastpoll, uint64(lastpoll), uint64(now))\n\t\t\tlist := netpoll(0) // non-blocking - returns list of goroutines\n\t\t\tif !list.empty() {\n\t\t\t\t// Need to decrement number of idle locked M's\n\t\t\t\t// (pretending that one more is running) before injectglist.\n\t\t\t\t// Otherwise it can lead to the following situation:\n\t\t\t\t// injectglist grabs all P's but before it starts M's to run the P's,\n\t\t\t\t// another M returns from syscall, finishes running its G,\n\t\t\t\t// observes that there is no work to do and no other running M's\n\t\t\t\t// and reports deadlock.\n\t\t\t\tincidlelocked(-1)\n\t\t\t\tinjectglist(&list)\n\t\t\t\tincidlelocked(1)\n\t\t\t}\n\t\t}\n\t\tif next < now {\n\t\t\t// There are timers that should have already run,\n\t\t\t// perhaps because there is an unpreemptible P.\n\t\t\t// Try to start an M to run them.\n\t\t\t//划重点\n\t\t\tstartm(nil, false)\n\t\t}\n```\n\n#### wakeScavenger\n\n>判断需要唤醒请求\n```go\n\t\tif atomic.Load(&scavenge.sysmonWake) != 0 {\n\t\t\t// Kick the scavenger awake if someone requested it.\n\t\t\twakeScavenger()\n\t\t}\n```\n\n```go\n// wakeScavenger immediately unparks the scavenger if necessary.\n//\n// May run without a P, but it may allocate, so it must not be called\n// on any allocation path.\n//\n// mheap_.lock, scavenge.lock, and sched.lock must not be held.\nfunc wakeScavenger() {\n\tlock(&scavenge.lock)\n\tif scavenge.parked {\n\t\t// Notify sysmon that it shouldn't bother waking up the scavenger.\n\t\tatomic.Store(&scavenge.sysmonWake, 0)\n\n\t\t// Try to stop the timer but we don't really care if we succeed.\n\t\t// It's possible that either a timer was never started, or that\n\t\t// we're racing with it.\n\t\t// In the case that we're racing with there's the low chance that\n\t\t// we experience a spurious wake-up of the scavenger, but that's\n\t\t// totally safe.\n\t\tstopTimer(scavenge.timer)\n\n\t\t// Unpark the goroutine and tell it that there may have been a pacing\n\t\t// change. Note that we skip the scheduler's runnext slot because we\n\t\t// want to avoid having the scavenger interfere with the fair\n\t\t// scheduling of user goroutines. In effect, this schedules the\n\t\t// scavenger at a \"lower priority\" but that's OK because it'll\n\t\t// catch up on the work it missed when it does get scheduled.\n\t\tscavenge.parked = false\n\n\t\t// Ready the goroutine by injecting it. We use injectglist instead\n\t\t// of ready or goready in order to allow us to run this function\n\t\t// without a P. injectglist also avoids placing the goroutine in\n\t\t// the current P's runnext slot, which is desireable to prevent\n\t\t// the scavenger from interfering with user goroutine scheduling\n\t\t// too much.\n\t\tvar list gList\n\t\tlist.push(scavenge.g)\n\t\tinjectglist(&list)\n\t}\n\tunlock(&scavenge.lock)\n}\n\n```\n\n#### retake夺取\n\n>夺取空闲的P\n```go\n\t\t// retake P's blocked in syscalls\n\t\t// and preempt long running G's\n\t\tif retake(now) != 0 {\n\t\t\tidle = 0\n\t\t} else {\n\t\t\tidle++\n\t\t}\n```\n\n#### GC 判断\n\n```go\n\t\t// check if we need to force a GC\n\t\t//划重点 t.test()\n\t\tif t := (gcTrigger{kind: gcTriggerTime, now: now}); t.test() && atomic.Load(&forcegc.idle) != 0 {\n\t\t\tlock(&forcegc.lock)\n\t\t\tforcegc.idle = 0\n\t\t\tvar list gList\n\t\t\tlist.push(forcegc.g)\n\t\t\tinjectglist(&list)\n\t\t\tunlock(&forcegc.lock)\n\t\t}\n```\n\n### 总结下干了什么？？\n\n* 1、强制垃圾回收。\n* 2、将长时间未处理的netpoll结果添加到任务队列。\n* 3、对长时间运行G，进行retake夺P的调度。\n* 4、回收syscall长时间阻塞的P。\n\n\n### 关于资料参考更正：\n\n#### 参考：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_014127.png)\n\n关于这个第一点的说法是建立在18年Go 1.11的时候，是没有问题，大家按不同的版本，变化的来看待。\n##### Go 1.11\n附上关于5分钟回收的链接[👉🏻👉🏻Go 1.11 proc.go](https://github.com/golang/go/blob/release-branch.go1.11/src/runtime/proc.go#L4328)\n\n调用函数：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_020832.png)\n\n##### Go 1.14\n> scavengeAll替代 scavenge函数\n\n\n[👉🏻scavengeALL](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/mheap.go#L1424)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021037.png)\n\n\n调用地方 [👉🏻runtime debug freeosMemory](https://github.com/golang/go/blob/5cf057ddedfbb149b71c85ec86050431dd6b2d9d/src/runtime/mheap.go#L1445)：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021423.png)\n\n\n### 参考：\n\n[Go学习整理笔记](https://studygolang.com/articles/12112)\n","slug":"25-GPM-sysmon函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4u001pzfqx8qp7hvu4","content":"<p>前面主要是了解newm的全过程和其中难过一些细节逻辑，，，<br>\n如果没了解的，建议先去看下大概的过程，虽然不是非常详细，<br>\n最起码得知道newm过程，主要完成了什么操作，有利于后续理解。</p>\n<p>这次主要是来学学这个sysmon，系统监控调度的逻辑。</p>\n<span id=\"more\"></span>\n<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version</h3>\n<blockquote>\n<p>go 1.14</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>在深入之前呢，先对下面这些变量有个概念，后续提到也就不陌生了。「摘抄自sysmon函数」</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tallglen    <span class=\"type\">uintptr</span> <span class=\"comment\">//g</span></span><br><span class=\"line\">\tallm       *m      <span class=\"comment\">//m</span></span><br><span class=\"line\">\tallp       []*p  <span class=\"comment\">// p     len(allp) == gomaxprocs; may change at safe points, otherwise immutable</span></span><br><span class=\"line\">\tallpLock   mutex <span class=\"comment\">// 全局lock。   Protects P-less reads of allp and all writes</span></span><br><span class=\"line\">\tgomaxprocs <span class=\"type\">int32</span> <span class=\"comment\">//最大process数量</span></span><br><span class=\"line\">\tncpu       <span class=\"type\">int32</span> <span class=\"comment\">//cpu个数</span></span><br><span class=\"line\">\tforcegc    forcegcstate <span class=\"comment\">//强制GC</span></span><br><span class=\"line\">\tsched      schedt <span class=\"comment\">//预分配的一些变量值</span></span><br><span class=\"line\">\tnewprocs   <span class=\"type\">int32</span>  <span class=\"comment\">//新的process</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Information about what cpu features are available.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Packages outside the runtime should not use these</span></span><br><span class=\"line\">\t<span class=\"comment\">// as they are not an external api.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Set on startup in asm_&#123;386,amd64&#125;.s</span></span><br><span class=\"line\">\tprocessorVersionInfo <span class=\"type\">uint32</span></span><br><span class=\"line\">\tisIntel              <span class=\"type\">bool</span></span><br><span class=\"line\">\tlfenceBeforeRdtsc    <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgoarm                <span class=\"type\">uint8</span> <span class=\"comment\">// set by cmd/link on arm systems</span></span><br><span class=\"line\">\tframepointer_enabled <span class=\"type\">bool</span>  <span class=\"comment\">// set by cmd/link</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"sysmon函数\"><a class=\"header-anchor\" href=\"#sysmon函数\">¶</a>sysmon函数</h3>\n<h4 id=\"概览\"><a class=\"header-anchor\" href=\"#概览\">¶</a>概览</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sysmon</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlock(&amp;sched.lock)<span class=\"comment\">//加锁</span></span><br><span class=\"line\">\tsched.nmsys++ <span class=\"comment\">//数量+1</span></span><br><span class=\"line\">\tcheckdead() <span class=\"comment\">//检查是否dead</span></span><br><span class=\"line\">\tunlock(&amp;sched.lock) <span class=\"comment\">//释放lock</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlasttrace := <span class=\"type\">int64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tidle := <span class=\"number\">0</span> <span class=\"comment\">// how many cycles in succession we had not wokeup somebody</span></span><br><span class=\"line\">\tdelay := <span class=\"type\">uint32</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-sysmon-1.png\" alt=\"\"></p>\n<h3 id=\"循环干什么？\"><a class=\"header-anchor\" href=\"#循环干什么？\">¶</a>循环干什么？</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201206_085755.png\" alt=\"\"></p>\n<blockquote>\n<p>一个个过吧</p>\n</blockquote>\n<h4 id=\"获取系统的纳秒时间\"><a class=\"header-anchor\" href=\"#获取系统的纳秒时间\">¶</a>获取系统的纳秒时间</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now := nanotime()</span><br></pre></td></tr></table></figure>\n<h4 id=\"timeSleepUntil\"><a class=\"header-anchor\" href=\"#timeSleepUntil\">¶</a>timeSleepUntil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeSleepUntil returns the time when the next timer should fire,</span></span><br><span class=\"line\"><span class=\"comment\">// and the P that holds the timer heap that that timer is on.</span></span><br><span class=\"line\"><span class=\"comment\">// This is only called by sysmon and checkdead.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeSleepUntil</span><span class=\"params\">()</span></span> (<span class=\"type\">int64</span>, *p) &#123;</span><br><span class=\"line\">\tnext := <span class=\"type\">int64</span>(maxWhen)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pret *p</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prevent allp slice changes. This is like retake.</span></span><br><span class=\"line\">\tlock(&amp;allpLock)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pp := <span class=\"keyword\">range</span> allp &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pp == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// This can happen if procresize has grown</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// allp but not yet created new Ps.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tc := atomic.Load(&amp;pp.adjustTimers)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> c == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tw := <span class=\"type\">int64</span>(atomic.Load64(&amp;pp.timer0When))</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//划重点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> w != <span class=\"number\">0</span> &amp;&amp; w &lt; next &#123;</span><br><span class=\"line\">\t\t\t\tnext = w</span><br><span class=\"line\">\t\t\t\tpret = pp</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlock(&amp;pp.timersLock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> pp.timers &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//划重点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> s := atomic.Load(&amp;t.status); s &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> timerWaiting:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> t.when &lt; next &#123;</span><br><span class=\"line\">\t\t\t\t\tnext = t.when</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> timerModifiedEarlier, timerModifiedLater:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> t.nextwhen &lt; next &#123;</span><br><span class=\"line\">\t\t\t\t\tnext = t.nextwhen</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> s == timerModifiedEarlier &#123;</span><br><span class=\"line\">\t\t\t\t\tc--</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The timers are sorted, so we only have to check</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// the first timer for each P, unless there are</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// some timerModifiedEarlier timers. The number</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// of timerModifiedEarlier timers is in the adjustTimers</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// field, used to initialize c, above.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// We don&#x27;t worry about cases like timerModifying.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// New timers can show up at any time,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// so this function is necessarily imprecise.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Do a signed check here since we aren&#x27;t</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// synchronizing the read of pp.adjustTimers</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// with the check of a timer status.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"type\">int32</span>(c) &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;pp.timersLock)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tunlock(&amp;allpLock)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> next, pret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sched和gomaxprocs判断「sleep-wakeup过程」\"><a class=\"header-anchor\" href=\"#sched和gomaxprocs判断「sleep-wakeup过程」\">¶</a>sched和gomaxprocs判断「sleep&amp;wakeup过程」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双层判断，防止在加锁这段时间值发生变化</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> debug.schedtrace &lt;= <span class=\"number\">0</span> &amp;&amp; (sched.gcwaiting != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs)) &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> next &gt; now &#123;</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Make wake-up period small enough</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// for the sampling to be correct.</span></span><br><span class=\"line\">\t\t\t\t\tsleep := forcegcperiod / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> next-now &lt; sleep &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsleep = next - now</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tshouldRelax := sleep &gt;= osRelaxMinNS</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnotetsleep(&amp;sched.sysmonnote, sleep)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnow = nanotime()</span><br><span class=\"line\">\t\t\t\t\tnext, _ = timeSleepUntil()</span><br><span class=\"line\">\t\t\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tnoteclear(&amp;sched.sysmonnote)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t\tdelay = <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"poll-network\"><a class=\"header-anchor\" href=\"#poll-network\">¶</a>poll network</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// poll network if not polled for more than 10ms</span></span><br><span class=\"line\">lastpoll := <span class=\"type\">int64</span>(atomic.Load64(&amp;sched.lastpoll))</span><br><span class=\"line\"><span class=\"keyword\">if</span> netpollinited() &amp;&amp; lastpoll != <span class=\"number\">0</span> &amp;&amp; lastpoll+<span class=\"number\">10</span>*<span class=\"number\">1000</span>*<span class=\"number\">1000</span> &lt; now &#123;</span><br><span class=\"line\">\tatomic.Cas64(&amp;sched.lastpoll, <span class=\"type\">uint64</span>(lastpoll), <span class=\"type\">uint64</span>(now))</span><br><span class=\"line\">\tlist := netpoll(<span class=\"number\">0</span>) <span class=\"comment\">// non-blocking - returns list of goroutines</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !list.empty() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Need to decrement number of idle locked M&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// (pretending that one more is running) before injectglist.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Otherwise it can lead to the following situation:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// another M returns from syscall, finishes running its G,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// observes that there is no work to do and no other running M&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and reports deadlock.</span></span><br><span class=\"line\">\t\tincidlelocked(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t\tincidlelocked(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> next &lt; now &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// There are timers that should have already run,</span></span><br><span class=\"line\">\t<span class=\"comment\">// perhaps because there is an unpreemptible P.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Try to start an M to run them.</span></span><br><span class=\"line\">\t<span class=\"comment\">//划重点</span></span><br><span class=\"line\">\tstartm(<span class=\"literal\">nil</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"wakeScavenger\"><a class=\"header-anchor\" href=\"#wakeScavenger\">¶</a>wakeScavenger</h4>\n<blockquote>\n<p>判断需要唤醒请求</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Kick the scavenger awake if someone requested it.</span></span><br><span class=\"line\">\twakeScavenger()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// wakeScavenger immediately unparks the scavenger if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// May run without a P, but it may allocate, so it must not be called</span></span><br><span class=\"line\"><span class=\"comment\">// on any allocation path.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// mheap_.lock, scavenge.lock, and sched.lock must not be held.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wakeScavenger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlock(&amp;scavenge.lock)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> scavenge.parked &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Notify sysmon that it shouldn&#x27;t bother waking up the scavenger.</span></span><br><span class=\"line\">\t\tatomic.Store(&amp;scavenge.sysmonWake, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Try to stop the timer but we don&#x27;t really care if we succeed.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// It&#x27;s possible that either a timer was never started, or that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we&#x27;re racing with it.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// In the case that we&#x27;re racing with there&#x27;s the low chance that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we experience a spurious wake-up of the scavenger, but that&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// totally safe.</span></span><br><span class=\"line\">\t\tstopTimer(scavenge.timer)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Unpark the goroutine and tell it that there may have been a pacing</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// change. Note that we skip the scheduler&#x27;s runnext slot because we</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// want to avoid having the scavenger interfere with the fair</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scheduling of user goroutines. In effect, this schedules the</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scavenger at a &quot;lower priority&quot; but that&#x27;s OK because it&#x27;ll</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// catch up on the work it missed when it does get scheduled.</span></span><br><span class=\"line\">\t\tscavenge.parked = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Ready the goroutine by injecting it. We use injectglist instead</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// of ready or goready in order to allow us to run this function</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// without a P. injectglist also avoids placing the goroutine in</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the current P&#x27;s runnext slot, which is desireable to prevent</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the scavenger from interfering with user goroutine scheduling</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// too much.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> list gList</span><br><span class=\"line\">\t\tlist.push(scavenge.g)</span><br><span class=\"line\">\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tunlock(&amp;scavenge.lock)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"retake夺取\"><a class=\"header-anchor\" href=\"#retake夺取\">¶</a>retake夺取</h4>\n<blockquote>\n<p>夺取空闲的P</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// retake P&#x27;s blocked in syscalls</span></span><br><span class=\"line\"><span class=\"comment\">// and preempt long running G&#x27;s</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> retake(now) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tidle++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"GC-判断\"><a class=\"header-anchor\" href=\"#GC-判断\">¶</a>GC 判断</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// check if we need to force a GC</span></span><br><span class=\"line\"><span class=\"comment\">//划重点 t.test()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\tlock(&amp;forcegc.lock)</span><br><span class=\"line\">\tforcegc.idle = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list gList</span><br><span class=\"line\">\tlist.push(forcegc.g)</span><br><span class=\"line\">\tinjectglist(&amp;list)</span><br><span class=\"line\">\tunlock(&amp;forcegc.lock)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结下干了什么？？\"><a class=\"header-anchor\" href=\"#总结下干了什么？？\">¶</a>总结下干了什么？？</h3>\n<ul>\n<li>1、强制垃圾回收。</li>\n<li>2、将长时间未处理的netpoll结果添加到任务队列。</li>\n<li>3、对长时间运行G，进行retake夺P的调度。</li>\n<li>4、回收syscall长时间阻塞的P。</li>\n</ul>\n<h3 id=\"关于资料参考更正：\"><a class=\"header-anchor\" href=\"#关于资料参考更正：\">¶</a>关于资料参考更正：</h3>\n<h4 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_014127.png\" alt=\"\"></p>\n<p>关于这个第一点的说法是建立在18年Go 1.11的时候，是没有问题，大家按不同的版本，变化的来看待。</p>\n<h5 id=\"Go-1-11\"><a class=\"header-anchor\" href=\"#Go-1-11\">¶</a>Go 1.11</h5>\n<p>附上关于5分钟回收的链接<a href=\"https://github.com/golang/go/blob/release-branch.go1.11/src/runtime/proc.go#L4328\">👉🏻👉🏻Go 1.11 proc.go</a></p>\n<p>调用函数：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_020832.png\" alt=\"\"></p>\n<h5 id=\"Go-1-14\"><a class=\"header-anchor\" href=\"#Go-1-14\">¶</a>Go 1.14</h5>\n<blockquote>\n<p>scavengeAll替代 scavenge函数</p>\n</blockquote>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/mheap.go#L1424\">👉🏻scavengeALL</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021037.png\" alt=\"\"></p>\n<p>调用地方 <a href=\"https://github.com/golang/go/blob/5cf057ddedfbb149b71c85ec86050431dd6b2d9d/src/runtime/mheap.go#L1445\">👉🏻runtime debug freeosMemory</a>：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021423.png\" alt=\"\"></p>\n<h3 id=\"参考：-v2\"><a class=\"header-anchor\" href=\"#参考：-v2\">¶</a>参考：</h3>\n<p><a href=\"https://studygolang.com/articles/12112\">Go学习整理笔记</a></p>\n","site":{"data":{}},"excerpt":"<p>前面主要是了解newm的全过程和其中难过一些细节逻辑，，，<br>\n如果没了解的，建议先去看下大概的过程，虽然不是非常详细，<br>\n最起码得知道newm过程，主要完成了什么操作，有利于后续理解。</p>\n<p>这次主要是来学学这个sysmon，系统监控调度的逻辑。</p>","more":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version</h3>\n<blockquote>\n<p>go 1.14</p>\n</blockquote>\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>在深入之前呢，先对下面这些变量有个概念，后续提到也就不陌生了。「摘抄自sysmon函数」</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tallglen    <span class=\"type\">uintptr</span> <span class=\"comment\">//g</span></span><br><span class=\"line\">\tallm       *m      <span class=\"comment\">//m</span></span><br><span class=\"line\">\tallp       []*p  <span class=\"comment\">// p     len(allp) == gomaxprocs; may change at safe points, otherwise immutable</span></span><br><span class=\"line\">\tallpLock   mutex <span class=\"comment\">// 全局lock。   Protects P-less reads of allp and all writes</span></span><br><span class=\"line\">\tgomaxprocs <span class=\"type\">int32</span> <span class=\"comment\">//最大process数量</span></span><br><span class=\"line\">\tncpu       <span class=\"type\">int32</span> <span class=\"comment\">//cpu个数</span></span><br><span class=\"line\">\tforcegc    forcegcstate <span class=\"comment\">//强制GC</span></span><br><span class=\"line\">\tsched      schedt <span class=\"comment\">//预分配的一些变量值</span></span><br><span class=\"line\">\tnewprocs   <span class=\"type\">int32</span>  <span class=\"comment\">//新的process</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Information about what cpu features are available.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Packages outside the runtime should not use these</span></span><br><span class=\"line\">\t<span class=\"comment\">// as they are not an external api.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Set on startup in asm_&#123;386,amd64&#125;.s</span></span><br><span class=\"line\">\tprocessorVersionInfo <span class=\"type\">uint32</span></span><br><span class=\"line\">\tisIntel              <span class=\"type\">bool</span></span><br><span class=\"line\">\tlfenceBeforeRdtsc    <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgoarm                <span class=\"type\">uint8</span> <span class=\"comment\">// set by cmd/link on arm systems</span></span><br><span class=\"line\">\tframepointer_enabled <span class=\"type\">bool</span>  <span class=\"comment\">// set by cmd/link</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"sysmon函数\"><a class=\"header-anchor\" href=\"#sysmon函数\">¶</a>sysmon函数</h3>\n<h4 id=\"概览\"><a class=\"header-anchor\" href=\"#概览\">¶</a>概览</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sysmon</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlock(&amp;sched.lock)<span class=\"comment\">//加锁</span></span><br><span class=\"line\">\tsched.nmsys++ <span class=\"comment\">//数量+1</span></span><br><span class=\"line\">\tcheckdead() <span class=\"comment\">//检查是否dead</span></span><br><span class=\"line\">\tunlock(&amp;sched.lock) <span class=\"comment\">//释放lock</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tlasttrace := <span class=\"type\">int64</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\tidle := <span class=\"number\">0</span> <span class=\"comment\">// how many cycles in succession we had not wokeup somebody</span></span><br><span class=\"line\">\tdelay := <span class=\"type\">uint32</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>&#123;</span><br><span class=\"line\">\t\t......</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-sysmon-1.png\" alt=\"\"></p>\n<h3 id=\"循环干什么？\"><a class=\"header-anchor\" href=\"#循环干什么？\">¶</a>循环干什么？</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201206_085755.png\" alt=\"\"></p>\n<blockquote>\n<p>一个个过吧</p>\n</blockquote>\n<h4 id=\"获取系统的纳秒时间\"><a class=\"header-anchor\" href=\"#获取系统的纳秒时间\">¶</a>获取系统的纳秒时间</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now := nanotime()</span><br></pre></td></tr></table></figure>\n<h4 id=\"timeSleepUntil\"><a class=\"header-anchor\" href=\"#timeSleepUntil\">¶</a>timeSleepUntil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// timeSleepUntil returns the time when the next timer should fire,</span></span><br><span class=\"line\"><span class=\"comment\">// and the P that holds the timer heap that that timer is on.</span></span><br><span class=\"line\"><span class=\"comment\">// This is only called by sysmon and checkdead.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">timeSleepUntil</span><span class=\"params\">()</span></span> (<span class=\"type\">int64</span>, *p) &#123;</span><br><span class=\"line\">\tnext := <span class=\"type\">int64</span>(maxWhen)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pret *p</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prevent allp slice changes. This is like retake.</span></span><br><span class=\"line\">\tlock(&amp;allpLock)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, pp := <span class=\"keyword\">range</span> allp &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> pp == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// This can happen if procresize has grown</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// allp but not yet created new Ps.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tc := atomic.Load(&amp;pp.adjustTimers)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> c == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tw := <span class=\"type\">int64</span>(atomic.Load64(&amp;pp.timer0When))</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//划重点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> w != <span class=\"number\">0</span> &amp;&amp; w &lt; next &#123;</span><br><span class=\"line\">\t\t\t\tnext = w</span><br><span class=\"line\">\t\t\t\tpret = pp</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tlock(&amp;pp.timersLock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, t := <span class=\"keyword\">range</span> pp.timers &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//划重点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> s := atomic.Load(&amp;t.status); s &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> timerWaiting:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> t.when &lt; next &#123;</span><br><span class=\"line\">\t\t\t\t\tnext = t.when</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> timerModifiedEarlier, timerModifiedLater:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> t.nextwhen &lt; next &#123;</span><br><span class=\"line\">\t\t\t\t\tnext = t.nextwhen</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> s == timerModifiedEarlier &#123;</span><br><span class=\"line\">\t\t\t\t\tc--</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// The timers are sorted, so we only have to check</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// the first timer for each P, unless there are</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// some timerModifiedEarlier timers. The number</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// of timerModifiedEarlier timers is in the adjustTimers</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// field, used to initialize c, above.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// We don&#x27;t worry about cases like timerModifying.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// New timers can show up at any time,</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// so this function is necessarily imprecise.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Do a signed check here since we aren&#x27;t</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// synchronizing the read of pp.adjustTimers</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// with the check of a timer status.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"type\">int32</span>(c) &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;pp.timersLock)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tunlock(&amp;allpLock)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> next, pret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"sched和gomaxprocs判断「sleep-wakeup过程」\"><a class=\"header-anchor\" href=\"#sched和gomaxprocs判断「sleep-wakeup过程」\">¶</a>sched和gomaxprocs判断「sleep&amp;wakeup过程」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//双层判断，防止在加锁这段时间值发生变化</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> debug.schedtrace &lt;= <span class=\"number\">0</span> &amp;&amp; (sched.gcwaiting != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs)) &#123;</span><br><span class=\"line\">\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> atomic.Load(&amp;sched.gcwaiting) != <span class=\"number\">0</span> || atomic.Load(&amp;sched.npidle) == <span class=\"type\">uint32</span>(gomaxprocs) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> next &gt; now &#123;</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// Make wake-up period small enough</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// for the sampling to be correct.</span></span><br><span class=\"line\">\t\t\t\t\tsleep := forcegcperiod / <span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> next-now &lt; sleep &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsleep = next - now</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tshouldRelax := sleep &gt;= osRelaxMinNS</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnotetsleep(&amp;sched.sysmonnote, sleep)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> shouldRelax &#123;</span><br><span class=\"line\">\t\t\t\t\t\tosRelax(<span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tnow = nanotime()</span><br><span class=\"line\">\t\t\t\t\tnext, _ = timeSleepUntil()</span><br><span class=\"line\">\t\t\t\t\tlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t\t\t\tatomic.Store(&amp;sched.sysmonwait, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tnoteclear(&amp;sched.sysmonnote)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t\tdelay = <span class=\"number\">20</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tunlock(&amp;sched.lock)</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"poll-network\"><a class=\"header-anchor\" href=\"#poll-network\">¶</a>poll network</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// poll network if not polled for more than 10ms</span></span><br><span class=\"line\">lastpoll := <span class=\"type\">int64</span>(atomic.Load64(&amp;sched.lastpoll))</span><br><span class=\"line\"><span class=\"keyword\">if</span> netpollinited() &amp;&amp; lastpoll != <span class=\"number\">0</span> &amp;&amp; lastpoll+<span class=\"number\">10</span>*<span class=\"number\">1000</span>*<span class=\"number\">1000</span> &lt; now &#123;</span><br><span class=\"line\">\tatomic.Cas64(&amp;sched.lastpoll, <span class=\"type\">uint64</span>(lastpoll), <span class=\"type\">uint64</span>(now))</span><br><span class=\"line\">\tlist := netpoll(<span class=\"number\">0</span>) <span class=\"comment\">// non-blocking - returns list of goroutines</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !list.empty() &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Need to decrement number of idle locked M&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// (pretending that one more is running) before injectglist.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Otherwise it can lead to the following situation:</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// injectglist grabs all P&#x27;s but before it starts M&#x27;s to run the P&#x27;s,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// another M returns from syscall, finishes running its G,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// observes that there is no work to do and no other running M&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// and reports deadlock.</span></span><br><span class=\"line\">\t\tincidlelocked(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t\tincidlelocked(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> next &lt; now &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// There are timers that should have already run,</span></span><br><span class=\"line\">\t<span class=\"comment\">// perhaps because there is an unpreemptible P.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Try to start an M to run them.</span></span><br><span class=\"line\">\t<span class=\"comment\">//划重点</span></span><br><span class=\"line\">\tstartm(<span class=\"literal\">nil</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"wakeScavenger\"><a class=\"header-anchor\" href=\"#wakeScavenger\">¶</a>wakeScavenger</h4>\n<blockquote>\n<p>判断需要唤醒请求</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> atomic.Load(&amp;scavenge.sysmonWake) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Kick the scavenger awake if someone requested it.</span></span><br><span class=\"line\">\twakeScavenger()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// wakeScavenger immediately unparks the scavenger if necessary.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// May run without a P, but it may allocate, so it must not be called</span></span><br><span class=\"line\"><span class=\"comment\">// on any allocation path.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// mheap_.lock, scavenge.lock, and sched.lock must not be held.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wakeScavenger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlock(&amp;scavenge.lock)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> scavenge.parked &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Notify sysmon that it shouldn&#x27;t bother waking up the scavenger.</span></span><br><span class=\"line\">\t\tatomic.Store(&amp;scavenge.sysmonWake, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Try to stop the timer but we don&#x27;t really care if we succeed.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// It&#x27;s possible that either a timer was never started, or that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we&#x27;re racing with it.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// In the case that we&#x27;re racing with there&#x27;s the low chance that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// we experience a spurious wake-up of the scavenger, but that&#x27;s</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// totally safe.</span></span><br><span class=\"line\">\t\tstopTimer(scavenge.timer)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Unpark the goroutine and tell it that there may have been a pacing</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// change. Note that we skip the scheduler&#x27;s runnext slot because we</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// want to avoid having the scavenger interfere with the fair</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scheduling of user goroutines. In effect, this schedules the</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// scavenger at a &quot;lower priority&quot; but that&#x27;s OK because it&#x27;ll</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// catch up on the work it missed when it does get scheduled.</span></span><br><span class=\"line\">\t\tscavenge.parked = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Ready the goroutine by injecting it. We use injectglist instead</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// of ready or goready in order to allow us to run this function</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// without a P. injectglist also avoids placing the goroutine in</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the current P&#x27;s runnext slot, which is desireable to prevent</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the scavenger from interfering with user goroutine scheduling</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// too much.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> list gList</span><br><span class=\"line\">\t\tlist.push(scavenge.g)</span><br><span class=\"line\">\t\tinjectglist(&amp;list)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tunlock(&amp;scavenge.lock)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"retake夺取\"><a class=\"header-anchor\" href=\"#retake夺取\">¶</a>retake夺取</h4>\n<blockquote>\n<p>夺取空闲的P</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// retake P&#x27;s blocked in syscalls</span></span><br><span class=\"line\"><span class=\"comment\">// and preempt long running G&#x27;s</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> retake(now) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\tidle = <span class=\"number\">0</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tidle++</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"GC-判断\"><a class=\"header-anchor\" href=\"#GC-判断\">¶</a>GC 判断</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// check if we need to force a GC</span></span><br><span class=\"line\"><span class=\"comment\">//划重点 t.test()</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> t := (gcTrigger&#123;kind: gcTriggerTime, now: now&#125;); t.test() &amp;&amp; atomic.Load(&amp;forcegc.idle) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\tlock(&amp;forcegc.lock)</span><br><span class=\"line\">\tforcegc.idle = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> list gList</span><br><span class=\"line\">\tlist.push(forcegc.g)</span><br><span class=\"line\">\tinjectglist(&amp;list)</span><br><span class=\"line\">\tunlock(&amp;forcegc.lock)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结下干了什么？？\"><a class=\"header-anchor\" href=\"#总结下干了什么？？\">¶</a>总结下干了什么？？</h3>\n<ul>\n<li>1、强制垃圾回收。</li>\n<li>2、将长时间未处理的netpoll结果添加到任务队列。</li>\n<li>3、对长时间运行G，进行retake夺P的调度。</li>\n<li>4、回收syscall长时间阻塞的P。</li>\n</ul>\n<h3 id=\"关于资料参考更正：\"><a class=\"header-anchor\" href=\"#关于资料参考更正：\">¶</a>关于资料参考更正：</h3>\n<h4 id=\"参考：\"><a class=\"header-anchor\" href=\"#参考：\">¶</a>参考：</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_014127.png\" alt=\"\"></p>\n<p>关于这个第一点的说法是建立在18年Go 1.11的时候，是没有问题，大家按不同的版本，变化的来看待。</p>\n<h5 id=\"Go-1-11\"><a class=\"header-anchor\" href=\"#Go-1-11\">¶</a>Go 1.11</h5>\n<p>附上关于5分钟回收的链接<a href=\"https://github.com/golang/go/blob/release-branch.go1.11/src/runtime/proc.go#L4328\">👉🏻👉🏻Go 1.11 proc.go</a></p>\n<p>调用函数：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_020832.png\" alt=\"\"></p>\n<h5 id=\"Go-1-14\"><a class=\"header-anchor\" href=\"#Go-1-14\">¶</a>Go 1.14</h5>\n<blockquote>\n<p>scavengeAll替代 scavenge函数</p>\n</blockquote>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/mheap.go#L1424\">👉🏻scavengeALL</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021037.png\" alt=\"\"></p>\n<p>调用地方 <a href=\"https://github.com/golang/go/blob/5cf057ddedfbb149b71c85ec86050431dd6b2d9d/src/runtime/mheap.go#L1445\">👉🏻runtime debug freeosMemory</a>：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210510_021423.png\" alt=\"\"></p>\n<h3 id=\"参考：-v2\"><a class=\"header-anchor\" href=\"#参考：-v2\">¶</a>参考：</h3>\n<p><a href=\"https://studygolang.com/articles/12112\">Go学习整理笔记</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-sysmon-1.png","popularPost_tmp_gaData":{"updated":"Mon May 10 2021 13:00:17 GMT+0800 (中国标准时间)","title":"「25」GPM sysmon函数","path":"archives/c770fe49.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/GPM-sysmon-1.png","excerpt":"<p>前面主要是了解newm的全过程和其中难过一些细节逻辑，，，<br>\n如果没了解的，建议先去看下大概的过程，虽然不是非常详细，<br>\n最起码得知道newm过程，主要完成了什么操作，有利于后续理解。</p>\n<p>这次主要是来学学这个sysmon，系统监控调度的逻辑。</p>","date":{"_isAMomentObject":true,"_i":"2020-12-06T12:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-12-06T12:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6739},{"title":"「24」GPM newm函数","date":"2020-11-25T12:00:17.000Z","updated":"2020-11-25T12:00:17.000Z","keywords":"GPM,Go,Go调度器,Go资源调度器","abbrlink":"b4edbd7","_content":"\n\n\n上节看了go的入口函数，，，也就是你执行main函数前后所做的准备工作。\n\n\n\n继续深入学习。「newm」第一个M，到底是怎么来的？\n\n\n\n<!--more-->\n\n\n\n> go version: 1.14.3\n\n### 入口\n\n先看下主体，主要在M创建的过程中，干了what，，，，，「PS : 关键看值得学习的点」\n\n```go\n// Create a new m. It will start off with a call to fn, or else the scheduler.\n// fn needs to be static and not a heap allocated closure.\n// May run with m.p==nil, so write barriers are not allowed.\n//go:nowritebarrierrec\nfunc newm(fn func(), _p_ *p) {\n  //分配内存\n\tmp := allocm(_p_, fn)\n  //设置p\n\tmp.nextp.set(_p_)\n  //初始化信号量\n\tmp.sigmask = initSigmask\n  //获取到gp后，判断M&（系统锁定｜｜cgo执行中）；；；plan9的系统跳过下面操作....\n\tif gp := getg(); gp != nil && gp.m != nil && (gp.m.lockedExt != 0 || gp.m.incgo) && GOOS != \"plan9\" {\n\t\t// We're on a locked M or a thread that may have been\n\t\t// started by C. The kernel state of this thread may\n\t\t// be strange (the user may have locked it for that\n\t\t// purpose). We don't want to clone that into another\n\t\t// thread. Instead, ask a known-good thread to create\n\t\t// the thread for us.\n\t\t//\n\t\t// This is disabled on Plan 9. See golang.org/issue/22227.\n\t\t//\n\t\t// TODO: This may be unnecessary on Windows, which\n\t\t// doesn't model thread creation off fork.\n\t\tlock(&newmHandoff.lock)\n\t\tif newmHandoff.haveTemplateThread == 0 {\n\t\t\tthrow(\"on a locked thread with no template thread\")\n\t\t}\n\t\tmp.schedlink = newmHandoff.newm\n\t\tnewmHandoff.newm.set(mp)\n\t\tif newmHandoff.waiting {\n\t\t\tnewmHandoff.waiting = false\n\t\t\tnotewakeup(&newmHandoff.wake)\n\t\t}\n\t\tunlock(&newmHandoff.lock)\n\t\treturn\n\t}\n  //new m1指第一个M的创建过程.\n\tnewm1(mp)\n}\n```\n\n\n\n### newm1\n\n> go to 「newm1」\n\n看起来很简短\n\n```go\nfunc newm1(mp *m) {\n  //cgo程序执行中?\n\tif iscgo {\n\t\tvar ts cgothreadstart\n\t\tif _cgo_thread_start == nil {\n\t\t\tthrow(\"_cgo_thread_start missing\")\n\t\t}\n\t\tts.g.set(mp.g0)\n\t\tts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))\n\t\tts.fn = unsafe.Pointer(funcPC(mstart))\n\t\tif msanenabled {\n\t\t\tmsanwrite(unsafe.Pointer(&ts), unsafe.Sizeof(ts))\n\t\t}\n\t\texecLock.rlock() // Prevent process clone.\n\t\tasmcgocall(_cgo_thread_start, unsafe.Pointer(&ts))\n\t\texecLock.runlock()\n\t\treturn\n\t}\n  \n\texecLock.rlock() // Prevent process clone.\n  //涉及到系统进程创建\n\tnewosproc(mp)\n\texecLock.runlock()\n}\n```\n\n\n\n### newosproc\n\n> M创建之前，系统的操作和相关地址的变化\n\n\n\n```go\n// May run with m.p==nil, so write barriers are not allowed.\n//go:nowritebarrierrec\nfunc newosproc(mp *m) {\n//这个stk操作很奇怪，有兴趣的可以研究下....[看起来啥也没干那]\n\tstk := unsafe.Pointer(mp.g0.stack.hi)\n\tif false {\n\t\tprint(\"newosproc stk=\", stk, \" m=\", mp, \" g=\", mp.g0, \" id=\", mp.id, \" ostk=\", &mp, \"\\n\")\n\t}\n\n\t// Initialize an attribute object.\n\tvar attr pthreadattr\n\tvar err int32\n  //汇编，变量初始化\n\terr = pthread_attr_init(&attr)\n\tif err != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n\n\t// Find out OS stack size for our own stack guard.\n\tvar stacksize uintptr\n\tif pthread_attr_getstacksize(&attr, &stacksize) != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n  //M对应的g0的高位空间栈地址\n\tmp.g0.stack.hi = stacksize // for mstart\n\t//mSysStatInc(&memstats.stacks_sys, stacksize) //TODO: do this?\n\n\t// Tell the pthread library we won't join with this thread.\n\tif pthread_attr_setdetachstate(&attr, _PTHREAD_CREATE_DETACHED) != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n\n\t// Finally, create the thread. It starts at mstart_stub, which does some low-level\n\t// setup and then calls mstart.\n\tvar oset sigset\n  //所有的mask初始化\n\tsigprocmask(_SIG_SETMASK, &sigset_all, &oset)\n\terr = pthread_create(&attr, funcPC(mstart_stub), unsafe.Pointer(mp))\n  // oset地址置nil\n\tsigprocmask(_SIG_SETMASK, &oset, nil)\n\tif err != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n}\n```\n\n#### [pthread_attr_init细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L402)\n\n> 汇编代码：\n\n```go\nTEXT runtime·pthread_attr_init_trampoline(SB),NOSPLIT,$0\n\tMOVD\t0(R0), R0\t// arg 1 attr\n\tBL\tlibc_pthread_attr_init(SB)\n\tRET\n```\n\n\n\n#### [pthread_attr_getstacksize细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L407)\n\n```go\nTEXT runtime·pthread_attr_getstacksize_trampoline(SB),NOSPLIT,$0\n\tMOVD\t8(R0), R1\t// arg 2 size\n\tMOVD\t0(R0), R0\t// arg 1 attr\n\tBL\tlibc_pthread_attr_getstacksize(SB)\n\tRET\n```\n\n#### [sigprocmask_trampoline细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L266)\n\n```go\nTEXT runtime·sigprocmask_trampoline(SB),NOSPLIT,$0\n\tMOVD\t8(R0), R1\t// arg 2 new\n\tMOVD\t16(R0), R2\t// arg 3 old\n\tMOVW\t0(R0), R0\t// arg 1 how\n\tBL\tlibc_pthread_sigmask(SB)\n\tCMP\t$0, R0\n\tBEQ\t2(PC)\n\tBL\tnotok<>(SB)\n\tRET\n```\n\n#### [pthread_create细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L342)\n\n```go\n// mstart_stub is the first function executed on a new thread started by pthread_create.\n// It just does some low-level setup and then calls mstart.\n// Note: called with the C calling convention.\nTEXT runtime·mstart_stub(SB),NOSPLIT,$0\n\t// DI points to the m.\n\t// We are already on m's g0 stack.\n\n\t// Save callee-save registers.\n\tSUBQ\t$40, SP\n\tMOVQ\tBX, 0(SP)\n\tMOVQ\tR12, 8(SP)\n\tMOVQ\tR13, 16(SP)\n\tMOVQ\tR14, 24(SP)\n\tMOVQ\tR15, 32(SP)\n\n\tMOVQ\tm_g0(DI), DX // g\n\n\t// Initialize TLS entry.\n\t// See cmd/link/internal/ld/sym.go:computeTLSOffset.\n\tMOVQ\tDX, 0x30(GS)\n\n\t// Someday the convention will be D is always cleared.\n\tCLD\n\n\tCALL\truntime·mstart(SB)\n\n\t// Restore callee-save registers.\n\tMOVQ\t0(SP), BX\n\tMOVQ\t8(SP), R12\n\tMOVQ\t16(SP), R13\n\tMOVQ\t24(SP), R14\n\tMOVQ\t32(SP), R15\n\n\t// Go is all done with this OS thread.\n\t// Tell pthread everything is ok (we never join with this thread, so\n\t// the value here doesn't really matter).\n\tXORL\tAX, AX\n\n\tADDQ\t$40, SP\n\tRET\n\n```\n\n\n\n### execLock.rlock()\n\n\n\n\n\n```go\n\n// rlock locks rw for reading.\nfunc (rw *rwmutex) rlock() {\n\t// The reader must not be allowed to lose its P or else other\n\t// things blocking on the lock may consume all of the Ps and\n\t// deadlock (issue #20903). Alternatively, we could drop the P\n\t// while sleeping.\n\tacquirem()\n\tif int32(atomic.Xadd(&rw.readerCount, 1)) < 0 {\n\t\t// A writer is pending. Park on the reader queue.\n\t\tsystemstack(func() {\n\t\t\tlockWithRank(&rw.rLock, lockRankRwmutexR)\n\t\t\tif rw.readerPass > 0 {\n\t\t\t\t// Writer finished.\n\t\t\t\trw.readerPass -= 1\n\t\t\t\tunlock(&rw.rLock)\n\t\t\t} else {\n\t\t\t\t// Queue this reader to be woken by\n\t\t\t\t// the writer.\n\t\t\t\tm := getg().m\n\t\t\t\tm.schedlink = rw.readers\n\t\t\t\trw.readers.set(m)\n\t\t\t\tunlock(&rw.rLock)\n\t\t\t\tnotesleep(&m.park)\n\t\t\t\tnoteclear(&m.park)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n\n\n\n\n#### acquirem()\n\n> 加锁获取M\n\n```go\n//go:nosplit\nfunc acquirem() *m {\n\t_g_ := getg()\n\t_g_.m.locks++\n\treturn _g_.m\n}\n```\n\n#### notesleep()\n\n> 比较有趣的是sleep是用队列实现,前后加锁\n\n```go\nfunc notesleep(n *note) {\n\tgp := getg()\n\t...\n\t// Queued. Sleep.\n\tgp.m.blocked = true\n\tif *cgo_yield == nil {\n\t\tsemasleep(-1)\n\t} else {\n\t\t// Sleep for an arbitrary-but-moderate interval to poll libc interceptors.\n\t\tconst ns = 10e6\n\t\tfor atomic.Loaduintptr(&n.key) == 0 {\n\t\t\tsemasleep(ns)\n\t\t\tasmcgocall(*cgo_yield, nil)\n\t\t}\n\t}\n\tgp.m.blocked = false\n}\n```\n\n\n\n### execLock.runlock()\n\n```go\n\n// runlock undoes a single rlock call on rw.\nfunc (rw *rwmutex) runlock() {\n\tif r := int32(atomic.Xadd(&rw.readerCount, -1)); r < 0 {\n\t\t....\n\t}\n\treleasem(getg().m)\n}\n```\n\n#### releasem\n\n```go\n//go:nosplit\n//lock数量➖1，恢复到preempt的状态.\nfunc releasem(mp *m) {\n\t_g_ := getg()\n\tmp.locks--\n\tif mp.locks == 0 && _g_.preempt {\n\t\t// restore the preemption request in case we've cleared it in newstack\n\t\t_g_.stackguard0 = stackPreempt\n\t}\n}\n```\n\n\n\n先分析到这儿吧........关于这一节的流程图，会整理出来的，，，，\n\n不然就白分析这么多了，及时学习，及时总结。\n\n晚安😴......","source":"_posts/24-GPM-newm函数.md","raw":"---\ntitle: 「24」GPM newm函数\ndate: '2020/11/25 20:00:17'\nupdated: '2020/11/25 20:00:17'\nkeywords: 'GPM,Go,Go调度器,Go资源调度器'\ntags:\n  - Go\n  - GPM\n  - Go源码\nabbrlink: b4edbd7\n---\n\n\n\n上节看了go的入口函数，，，也就是你执行main函数前后所做的准备工作。\n\n\n\n继续深入学习。「newm」第一个M，到底是怎么来的？\n\n\n\n<!--more-->\n\n\n\n> go version: 1.14.3\n\n### 入口\n\n先看下主体，主要在M创建的过程中，干了what，，，，，「PS : 关键看值得学习的点」\n\n```go\n// Create a new m. It will start off with a call to fn, or else the scheduler.\n// fn needs to be static and not a heap allocated closure.\n// May run with m.p==nil, so write barriers are not allowed.\n//go:nowritebarrierrec\nfunc newm(fn func(), _p_ *p) {\n  //分配内存\n\tmp := allocm(_p_, fn)\n  //设置p\n\tmp.nextp.set(_p_)\n  //初始化信号量\n\tmp.sigmask = initSigmask\n  //获取到gp后，判断M&（系统锁定｜｜cgo执行中）；；；plan9的系统跳过下面操作....\n\tif gp := getg(); gp != nil && gp.m != nil && (gp.m.lockedExt != 0 || gp.m.incgo) && GOOS != \"plan9\" {\n\t\t// We're on a locked M or a thread that may have been\n\t\t// started by C. The kernel state of this thread may\n\t\t// be strange (the user may have locked it for that\n\t\t// purpose). We don't want to clone that into another\n\t\t// thread. Instead, ask a known-good thread to create\n\t\t// the thread for us.\n\t\t//\n\t\t// This is disabled on Plan 9. See golang.org/issue/22227.\n\t\t//\n\t\t// TODO: This may be unnecessary on Windows, which\n\t\t// doesn't model thread creation off fork.\n\t\tlock(&newmHandoff.lock)\n\t\tif newmHandoff.haveTemplateThread == 0 {\n\t\t\tthrow(\"on a locked thread with no template thread\")\n\t\t}\n\t\tmp.schedlink = newmHandoff.newm\n\t\tnewmHandoff.newm.set(mp)\n\t\tif newmHandoff.waiting {\n\t\t\tnewmHandoff.waiting = false\n\t\t\tnotewakeup(&newmHandoff.wake)\n\t\t}\n\t\tunlock(&newmHandoff.lock)\n\t\treturn\n\t}\n  //new m1指第一个M的创建过程.\n\tnewm1(mp)\n}\n```\n\n\n\n### newm1\n\n> go to 「newm1」\n\n看起来很简短\n\n```go\nfunc newm1(mp *m) {\n  //cgo程序执行中?\n\tif iscgo {\n\t\tvar ts cgothreadstart\n\t\tif _cgo_thread_start == nil {\n\t\t\tthrow(\"_cgo_thread_start missing\")\n\t\t}\n\t\tts.g.set(mp.g0)\n\t\tts.tls = (*uint64)(unsafe.Pointer(&mp.tls[0]))\n\t\tts.fn = unsafe.Pointer(funcPC(mstart))\n\t\tif msanenabled {\n\t\t\tmsanwrite(unsafe.Pointer(&ts), unsafe.Sizeof(ts))\n\t\t}\n\t\texecLock.rlock() // Prevent process clone.\n\t\tasmcgocall(_cgo_thread_start, unsafe.Pointer(&ts))\n\t\texecLock.runlock()\n\t\treturn\n\t}\n  \n\texecLock.rlock() // Prevent process clone.\n  //涉及到系统进程创建\n\tnewosproc(mp)\n\texecLock.runlock()\n}\n```\n\n\n\n### newosproc\n\n> M创建之前，系统的操作和相关地址的变化\n\n\n\n```go\n// May run with m.p==nil, so write barriers are not allowed.\n//go:nowritebarrierrec\nfunc newosproc(mp *m) {\n//这个stk操作很奇怪，有兴趣的可以研究下....[看起来啥也没干那]\n\tstk := unsafe.Pointer(mp.g0.stack.hi)\n\tif false {\n\t\tprint(\"newosproc stk=\", stk, \" m=\", mp, \" g=\", mp.g0, \" id=\", mp.id, \" ostk=\", &mp, \"\\n\")\n\t}\n\n\t// Initialize an attribute object.\n\tvar attr pthreadattr\n\tvar err int32\n  //汇编，变量初始化\n\terr = pthread_attr_init(&attr)\n\tif err != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n\n\t// Find out OS stack size for our own stack guard.\n\tvar stacksize uintptr\n\tif pthread_attr_getstacksize(&attr, &stacksize) != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n  //M对应的g0的高位空间栈地址\n\tmp.g0.stack.hi = stacksize // for mstart\n\t//mSysStatInc(&memstats.stacks_sys, stacksize) //TODO: do this?\n\n\t// Tell the pthread library we won't join with this thread.\n\tif pthread_attr_setdetachstate(&attr, _PTHREAD_CREATE_DETACHED) != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n\n\t// Finally, create the thread. It starts at mstart_stub, which does some low-level\n\t// setup and then calls mstart.\n\tvar oset sigset\n  //所有的mask初始化\n\tsigprocmask(_SIG_SETMASK, &sigset_all, &oset)\n\terr = pthread_create(&attr, funcPC(mstart_stub), unsafe.Pointer(mp))\n  // oset地址置nil\n\tsigprocmask(_SIG_SETMASK, &oset, nil)\n\tif err != 0 {\n\t\twrite(2, unsafe.Pointer(&failthreadcreate[0]), int32(len(failthreadcreate)))\n\t\texit(1)\n\t}\n}\n```\n\n#### [pthread_attr_init细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L402)\n\n> 汇编代码：\n\n```go\nTEXT runtime·pthread_attr_init_trampoline(SB),NOSPLIT,$0\n\tMOVD\t0(R0), R0\t// arg 1 attr\n\tBL\tlibc_pthread_attr_init(SB)\n\tRET\n```\n\n\n\n#### [pthread_attr_getstacksize细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L407)\n\n```go\nTEXT runtime·pthread_attr_getstacksize_trampoline(SB),NOSPLIT,$0\n\tMOVD\t8(R0), R1\t// arg 2 size\n\tMOVD\t0(R0), R0\t// arg 1 attr\n\tBL\tlibc_pthread_attr_getstacksize(SB)\n\tRET\n```\n\n#### [sigprocmask_trampoline细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L266)\n\n```go\nTEXT runtime·sigprocmask_trampoline(SB),NOSPLIT,$0\n\tMOVD\t8(R0), R1\t// arg 2 new\n\tMOVD\t16(R0), R2\t// arg 3 old\n\tMOVW\t0(R0), R0\t// arg 1 how\n\tBL\tlibc_pthread_sigmask(SB)\n\tCMP\t$0, R0\n\tBEQ\t2(PC)\n\tBL\tnotok<>(SB)\n\tRET\n```\n\n#### [pthread_create细节](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L342)\n\n```go\n// mstart_stub is the first function executed on a new thread started by pthread_create.\n// It just does some low-level setup and then calls mstart.\n// Note: called with the C calling convention.\nTEXT runtime·mstart_stub(SB),NOSPLIT,$0\n\t// DI points to the m.\n\t// We are already on m's g0 stack.\n\n\t// Save callee-save registers.\n\tSUBQ\t$40, SP\n\tMOVQ\tBX, 0(SP)\n\tMOVQ\tR12, 8(SP)\n\tMOVQ\tR13, 16(SP)\n\tMOVQ\tR14, 24(SP)\n\tMOVQ\tR15, 32(SP)\n\n\tMOVQ\tm_g0(DI), DX // g\n\n\t// Initialize TLS entry.\n\t// See cmd/link/internal/ld/sym.go:computeTLSOffset.\n\tMOVQ\tDX, 0x30(GS)\n\n\t// Someday the convention will be D is always cleared.\n\tCLD\n\n\tCALL\truntime·mstart(SB)\n\n\t// Restore callee-save registers.\n\tMOVQ\t0(SP), BX\n\tMOVQ\t8(SP), R12\n\tMOVQ\t16(SP), R13\n\tMOVQ\t24(SP), R14\n\tMOVQ\t32(SP), R15\n\n\t// Go is all done with this OS thread.\n\t// Tell pthread everything is ok (we never join with this thread, so\n\t// the value here doesn't really matter).\n\tXORL\tAX, AX\n\n\tADDQ\t$40, SP\n\tRET\n\n```\n\n\n\n### execLock.rlock()\n\n\n\n\n\n```go\n\n// rlock locks rw for reading.\nfunc (rw *rwmutex) rlock() {\n\t// The reader must not be allowed to lose its P or else other\n\t// things blocking on the lock may consume all of the Ps and\n\t// deadlock (issue #20903). Alternatively, we could drop the P\n\t// while sleeping.\n\tacquirem()\n\tif int32(atomic.Xadd(&rw.readerCount, 1)) < 0 {\n\t\t// A writer is pending. Park on the reader queue.\n\t\tsystemstack(func() {\n\t\t\tlockWithRank(&rw.rLock, lockRankRwmutexR)\n\t\t\tif rw.readerPass > 0 {\n\t\t\t\t// Writer finished.\n\t\t\t\trw.readerPass -= 1\n\t\t\t\tunlock(&rw.rLock)\n\t\t\t} else {\n\t\t\t\t// Queue this reader to be woken by\n\t\t\t\t// the writer.\n\t\t\t\tm := getg().m\n\t\t\t\tm.schedlink = rw.readers\n\t\t\t\trw.readers.set(m)\n\t\t\t\tunlock(&rw.rLock)\n\t\t\t\tnotesleep(&m.park)\n\t\t\t\tnoteclear(&m.park)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n\n\n\n\n#### acquirem()\n\n> 加锁获取M\n\n```go\n//go:nosplit\nfunc acquirem() *m {\n\t_g_ := getg()\n\t_g_.m.locks++\n\treturn _g_.m\n}\n```\n\n#### notesleep()\n\n> 比较有趣的是sleep是用队列实现,前后加锁\n\n```go\nfunc notesleep(n *note) {\n\tgp := getg()\n\t...\n\t// Queued. Sleep.\n\tgp.m.blocked = true\n\tif *cgo_yield == nil {\n\t\tsemasleep(-1)\n\t} else {\n\t\t// Sleep for an arbitrary-but-moderate interval to poll libc interceptors.\n\t\tconst ns = 10e6\n\t\tfor atomic.Loaduintptr(&n.key) == 0 {\n\t\t\tsemasleep(ns)\n\t\t\tasmcgocall(*cgo_yield, nil)\n\t\t}\n\t}\n\tgp.m.blocked = false\n}\n```\n\n\n\n### execLock.runlock()\n\n```go\n\n// runlock undoes a single rlock call on rw.\nfunc (rw *rwmutex) runlock() {\n\tif r := int32(atomic.Xadd(&rw.readerCount, -1)); r < 0 {\n\t\t....\n\t}\n\treleasem(getg().m)\n}\n```\n\n#### releasem\n\n```go\n//go:nosplit\n//lock数量➖1，恢复到preempt的状态.\nfunc releasem(mp *m) {\n\t_g_ := getg()\n\tmp.locks--\n\tif mp.locks == 0 && _g_.preempt {\n\t\t// restore the preemption request in case we've cleared it in newstack\n\t\t_g_.stackguard0 = stackPreempt\n\t}\n}\n```\n\n\n\n先分析到这儿吧........关于这一节的流程图，会整理出来的，，，，\n\n不然就白分析这么多了，及时学习，及时总结。\n\n晚安😴......","slug":"24-GPM-newm函数","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4u001rzfqx0ctn3rag","content":"<p>上节看了go的入口函数，，，也就是你执行main函数前后所做的准备工作。</p>\n<p>继续深入学习。「newm」第一个M，到底是怎么来的？</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h3 id=\"入口\"><a class=\"header-anchor\" href=\"#入口\">¶</a>入口</h3>\n<p>先看下主体，主要在M创建的过程中，干了what，，，，，「PS : 关键看值得学习的点」</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new m. It will start off with a call to fn, or else the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">// fn needs to be static and not a heap allocated closure.</span></span><br><span class=\"line\"><span class=\"comment\">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//分配内存</span></span><br><span class=\"line\">\tmp := allocm(_p_, fn)</span><br><span class=\"line\">  <span class=\"comment\">//设置p</span></span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">  <span class=\"comment\">//初始化信号量</span></span><br><span class=\"line\">\tmp.sigmask = initSigmask</span><br><span class=\"line\">  <span class=\"comment\">//获取到gp后，判断M&amp;（系统锁定｜｜cgo执行中）；；；plan9的系统跳过下面操作....</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp := getg(); gp != <span class=\"literal\">nil</span> &amp;&amp; gp.m != <span class=\"literal\">nil</span> &amp;&amp; (gp.m.lockedExt != <span class=\"number\">0</span> || gp.m.incgo) &amp;&amp; GOOS != <span class=\"string\">&quot;plan9&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We&#x27;re on a locked M or a thread that may have been</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// started by C. The kernel state of this thread may</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// be strange (the user may have locked it for that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// purpose). We don&#x27;t want to clone that into another</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// thread. Instead, ask a known-good thread to create</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the thread for us.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// This is disabled on Plan 9. See golang.org/issue/22227.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> This may be unnecessary on Windows, which</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// doesn&#x27;t model thread creation off fork.</span></span><br><span class=\"line\">\t\tlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.haveTemplateThread == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;on a locked thread with no template thread&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmp.schedlink = newmHandoff.newm</span><br><span class=\"line\">\t\tnewmHandoff.newm.set(mp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.waiting &#123;</span><br><span class=\"line\">\t\t\tnewmHandoff.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\tnotewakeup(&amp;newmHandoff.wake)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//new m1指第一个M的创建过程.</span></span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"newm1\"><a class=\"header-anchor\" href=\"#newm1\">¶</a>newm1</h3>\n<blockquote>\n<p>go to 「newm1」</p>\n</blockquote>\n<p>看起来很简短</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm1</span><span class=\"params\">(mp *m)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//cgo程序执行中?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> iscgo &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ts cgothreadstart</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _cgo_thread_start == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;_cgo_thread_start missing&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tts.g.set(mp.g0)</span><br><span class=\"line\">\t\tts.tls = (*<span class=\"type\">uint64</span>)(unsafe.Pointer(&amp;mp.tls[<span class=\"number\">0</span>]))</span><br><span class=\"line\">\t\tts.fn = unsafe.Pointer(funcPC(mstart))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> msanenabled &#123;</span><br><span class=\"line\">\t\t\tmsanwrite(unsafe.Pointer(&amp;ts), unsafe.Sizeof(ts))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texecLock.rlock() <span class=\"comment\">// Prevent process clone.</span></span><br><span class=\"line\">\t\tasmcgocall(_cgo_thread_start, unsafe.Pointer(&amp;ts))</span><br><span class=\"line\">\t\texecLock.runlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\texecLock.rlock() <span class=\"comment\">// Prevent process clone.</span></span><br><span class=\"line\">  <span class=\"comment\">//涉及到系统进程创建</span></span><br><span class=\"line\">\tnewosproc(mp)</span><br><span class=\"line\">\texecLock.runlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"newosproc\"><a class=\"header-anchor\" href=\"#newosproc\">¶</a>newosproc</h3>\n<blockquote>\n<p>M创建之前，系统的操作和相关地址的变化</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newosproc</span><span class=\"params\">(mp *m)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//这个stk操作很奇怪，有兴趣的可以研究下....[看起来啥也没干那]</span></span><br><span class=\"line\">\tstk := unsafe.Pointer(mp.g0.stack.hi)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;newosproc stk=&quot;</span>, stk, <span class=\"string\">&quot; m=&quot;</span>, mp, <span class=\"string\">&quot; g=&quot;</span>, mp.g0, <span class=\"string\">&quot; id=&quot;</span>, mp.id, <span class=\"string\">&quot; ostk=&quot;</span>, &amp;mp, <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize an attribute object.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> attr pthreadattr</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err <span class=\"type\">int32</span></span><br><span class=\"line\">  <span class=\"comment\">//汇编，变量初始化</span></span><br><span class=\"line\">\terr = pthread_attr_init(&amp;attr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Find out OS stack size for our own stack guard.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stacksize <span class=\"type\">uintptr</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pthread_attr_getstacksize(&amp;attr, &amp;stacksize) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//M对应的g0的高位空间栈地址</span></span><br><span class=\"line\">\tmp.g0.stack.hi = stacksize <span class=\"comment\">// for mstart</span></span><br><span class=\"line\">\t<span class=\"comment\">//mSysStatInc(&amp;memstats.stacks_sys, stacksize) //<span class=\"doctag\">TODO:</span> do this?</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Tell the pthread library we won&#x27;t join with this thread.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pthread_attr_setdetachstate(&amp;attr, _PTHREAD_CREATE_DETACHED) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Finally, create the thread. It starts at mstart_stub, which does some low-level</span></span><br><span class=\"line\">\t<span class=\"comment\">// setup and then calls mstart.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> oset sigset</span><br><span class=\"line\">  <span class=\"comment\">//所有的mask初始化</span></span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;sigset_all, &amp;oset)</span><br><span class=\"line\">\terr = pthread_create(&amp;attr, funcPC(mstart_stub), unsafe.Pointer(mp))</span><br><span class=\"line\">  <span class=\"comment\">// oset地址置nil</span></span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;oset, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pthread-attr-init细节\"><a class=\"header-anchor\" href=\"#pthread-attr-init细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L402\">pthread_attr_init细节</a></h4>\n<blockquote>\n<p>汇编代码：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·pthread_attr_init_trampoline(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">0</span>(R0), R0\t<span class=\"comment\">// arg 1 attr</span></span><br><span class=\"line\">\tBL\tlibc_pthread_attr_init(SB)</span><br><span class=\"line\">\tRET</span><br></pre></td></tr></table></figure>\n<h4 id=\"pthread-attr-getstacksize细节\"><a class=\"header-anchor\" href=\"#pthread-attr-getstacksize细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L407\">pthread_attr_getstacksize细节</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·pthread_attr_getstacksize_trampoline(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">8</span>(R0), R1\t<span class=\"comment\">// arg 2 size</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">0</span>(R0), R0\t<span class=\"comment\">// arg 1 attr</span></span><br><span class=\"line\">\tBL\tlibc_pthread_attr_getstacksize(SB)</span><br><span class=\"line\">\tRET</span><br></pre></td></tr></table></figure>\n<h4 id=\"sigprocmask-trampoline细节\"><a class=\"header-anchor\" href=\"#sigprocmask-trampoline细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L266\">sigprocmask_trampoline细节</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·sigprocmask_trampoline(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">8</span>(R0), R1\t<span class=\"comment\">// arg 2 new</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">16</span>(R0), R2\t<span class=\"comment\">// arg 3 old</span></span><br><span class=\"line\">\tMOVW\t<span class=\"number\">0</span>(R0), R0\t<span class=\"comment\">// arg 1 how</span></span><br><span class=\"line\">\tBL\tlibc_pthread_sigmask(SB)</span><br><span class=\"line\">\tCMP\t$<span class=\"number\">0</span>, R0</span><br><span class=\"line\">\tBEQ\t<span class=\"number\">2</span>(PC)</span><br><span class=\"line\">\tBL\tnotok&lt;&gt;(SB)</span><br><span class=\"line\">\tRET</span><br></pre></td></tr></table></figure>\n<h4 id=\"pthread-create细节\"><a class=\"header-anchor\" href=\"#pthread-create细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L342\">pthread_create细节</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mstart_stub is the first function executed on a new thread started by pthread_create.</span></span><br><span class=\"line\"><span class=\"comment\">// It just does some low-level setup and then calls mstart.</span></span><br><span class=\"line\"><span class=\"comment\">// Note: called with the C calling convention.</span></span><br><span class=\"line\">TEXT runtime·mstart_stub(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// DI points to the m.</span></span><br><span class=\"line\">\t<span class=\"comment\">// We are already on m&#x27;s g0 stack.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Save callee-save registers.</span></span><br><span class=\"line\">\tSUBQ\t$<span class=\"number\">40</span>, SP</span><br><span class=\"line\">\tMOVQ\tBX, <span class=\"number\">0</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR12, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR13, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR14, <span class=\"number\">24</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR15, <span class=\"number\">32</span>(SP)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVQ\tm_g0(DI), DX <span class=\"comment\">// g</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize TLS entry.</span></span><br><span class=\"line\">\t<span class=\"comment\">// See cmd/link/internal/ld/sym.go:computeTLSOffset.</span></span><br><span class=\"line\">\tMOVQ\tDX, <span class=\"number\">0x30</span>(GS)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Someday the convention will be D is always cleared.</span></span><br><span class=\"line\">\tCLD</span><br><span class=\"line\"></span><br><span class=\"line\">\tCALL\truntime·mstart(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Restore callee-save registers.</span></span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">0</span>(SP), BX</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">8</span>(SP), R12</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">16</span>(SP), R13</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">24</span>(SP), R14</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">32</span>(SP), R15</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Go is all done with this OS thread.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Tell pthread everything is ok (we never join with this thread, so</span></span><br><span class=\"line\">\t<span class=\"comment\">// the value here doesn&#x27;t really matter).</span></span><br><span class=\"line\">\tXORL\tAX, AX</span><br><span class=\"line\"></span><br><span class=\"line\">\tADDQ\t$<span class=\"number\">40</span>, SP</span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"execLock-rlock\"><a class=\"header-anchor\" href=\"#execLock-rlock\">¶</a>execLock.rlock()</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rlock locks rw for reading.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *rwmutex)</span></span> rlock() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// The reader must not be allowed to lose its P or else other</span></span><br><span class=\"line\">\t<span class=\"comment\">// things blocking on the lock may consume all of the Ps and</span></span><br><span class=\"line\">\t<span class=\"comment\">// deadlock (issue #20903). Alternatively, we could drop the P</span></span><br><span class=\"line\">\t<span class=\"comment\">// while sleeping.</span></span><br><span class=\"line\">\tacquirem()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"type\">int32</span>(atomic.Xadd(&amp;rw.readerCount, <span class=\"number\">1</span>)) &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// A writer is pending. Park on the reader queue.</span></span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\tlockWithRank(&amp;rw.rLock, lockRankRwmutexR)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> rw.readerPass &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Writer finished.</span></span><br><span class=\"line\">\t\t\t\trw.readerPass -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tunlock(&amp;rw.rLock)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Queue this reader to be woken by</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// the writer.</span></span><br><span class=\"line\">\t\t\t\tm := getg().m</span><br><span class=\"line\">\t\t\t\tm.schedlink = rw.readers</span><br><span class=\"line\">\t\t\t\trw.readers.set(m)</span><br><span class=\"line\">\t\t\t\tunlock(&amp;rw.rLock)</span><br><span class=\"line\">\t\t\t\tnotesleep(&amp;m.park)</span><br><span class=\"line\">\t\t\t\tnoteclear(&amp;m.park)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"acquirem\"><a class=\"header-anchor\" href=\"#acquirem\">¶</a>acquirem()</h4>\n<blockquote>\n<p>加锁获取M</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquirem</span><span class=\"params\">()</span></span> *m &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\">\t_g_.m.locks++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _g_.m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"notesleep\"><a class=\"header-anchor\" href=\"#notesleep\">¶</a>notesleep()</h4>\n<blockquote>\n<p>比较有趣的是sleep是用队列实现,前后加锁</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">notesleep</span><span class=\"params\">(n *note)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"comment\">// Queued. Sleep.</span></span><br><span class=\"line\">\tgp.m.blocked = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> *cgo_yield == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tsemasleep(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Sleep for an arbitrary-but-moderate interval to poll libc interceptors.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> ns = <span class=\"number\">10e6</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> atomic.Loaduintptr(&amp;n.key) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tsemasleep(ns)</span><br><span class=\"line\">\t\t\tasmcgocall(*cgo_yield, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgp.m.blocked = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"execLock-runlock\"><a class=\"header-anchor\" href=\"#execLock-runlock\">¶</a>execLock.runlock()</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runlock undoes a single rlock call on rw.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *rwmutex)</span></span> runlock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r := <span class=\"type\">int32</span>(atomic.Xadd(&amp;rw.readerCount, <span class=\"number\">-1</span>)); r &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treleasem(getg().m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"releasem\"><a class=\"header-anchor\" href=\"#releasem\">¶</a>releasem</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"comment\">//lock数量➖1，恢复到preempt的状态.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">releasem</span><span class=\"params\">(mp *m)</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\">\tmp.locks--</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mp.locks == <span class=\"number\">0</span> &amp;&amp; _g_.preempt &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// restore the preemption request in case we&#x27;ve cleared it in newstack</span></span><br><span class=\"line\">\t\t_g_.stackguard0 = stackPreempt</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先分析到这儿吧…关于这一节的流程图，会整理出来的，，，，</p>\n<p>不然就白分析这么多了，及时学习，及时总结。</p>\n<p>晚安😴…</p>\n","site":{"data":{}},"excerpt":"<p>上节看了go的入口函数，，，也就是你执行main函数前后所做的准备工作。</p>\n<p>继续深入学习。「newm」第一个M，到底是怎么来的？</p>","more":"<blockquote>\n<p>go version: 1.14.3</p>\n</blockquote>\n<h3 id=\"入口\"><a class=\"header-anchor\" href=\"#入口\">¶</a>入口</h3>\n<p>先看下主体，主要在M创建的过程中，干了what，，，，，「PS : 关键看值得学习的点」</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new m. It will start off with a call to fn, or else the scheduler.</span></span><br><span class=\"line\"><span class=\"comment\">// fn needs to be static and not a heap allocated closure.</span></span><br><span class=\"line\"><span class=\"comment\">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm</span><span class=\"params\">(fn <span class=\"keyword\">func</span>()</span></span>, _p_ *p) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//分配内存</span></span><br><span class=\"line\">\tmp := allocm(_p_, fn)</span><br><span class=\"line\">  <span class=\"comment\">//设置p</span></span><br><span class=\"line\">\tmp.nextp.set(_p_)</span><br><span class=\"line\">  <span class=\"comment\">//初始化信号量</span></span><br><span class=\"line\">\tmp.sigmask = initSigmask</span><br><span class=\"line\">  <span class=\"comment\">//获取到gp后，判断M&amp;（系统锁定｜｜cgo执行中）；；；plan9的系统跳过下面操作....</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp := getg(); gp != <span class=\"literal\">nil</span> &amp;&amp; gp.m != <span class=\"literal\">nil</span> &amp;&amp; (gp.m.lockedExt != <span class=\"number\">0</span> || gp.m.incgo) &amp;&amp; GOOS != <span class=\"string\">&quot;plan9&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// We&#x27;re on a locked M or a thread that may have been</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// started by C. The kernel state of this thread may</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// be strange (the user may have locked it for that</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// purpose). We don&#x27;t want to clone that into another</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// thread. Instead, ask a known-good thread to create</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// the thread for us.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// This is disabled on Plan 9. See golang.org/issue/22227.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> This may be unnecessary on Windows, which</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// doesn&#x27;t model thread creation off fork.</span></span><br><span class=\"line\">\t\tlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.haveTemplateThread == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;on a locked thread with no template thread&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmp.schedlink = newmHandoff.newm</span><br><span class=\"line\">\t\tnewmHandoff.newm.set(mp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> newmHandoff.waiting &#123;</span><br><span class=\"line\">\t\t\tnewmHandoff.waiting = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\tnotewakeup(&amp;newmHandoff.wake)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tunlock(&amp;newmHandoff.lock)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//new m1指第一个M的创建过程.</span></span><br><span class=\"line\">\tnewm1(mp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"newm1\"><a class=\"header-anchor\" href=\"#newm1\">¶</a>newm1</h3>\n<blockquote>\n<p>go to 「newm1」</p>\n</blockquote>\n<p>看起来很简短</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newm1</span><span class=\"params\">(mp *m)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//cgo程序执行中?</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> iscgo &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ts cgothreadstart</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> _cgo_thread_start == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;_cgo_thread_start missing&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tts.g.set(mp.g0)</span><br><span class=\"line\">\t\tts.tls = (*<span class=\"type\">uint64</span>)(unsafe.Pointer(&amp;mp.tls[<span class=\"number\">0</span>]))</span><br><span class=\"line\">\t\tts.fn = unsafe.Pointer(funcPC(mstart))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> msanenabled &#123;</span><br><span class=\"line\">\t\t\tmsanwrite(unsafe.Pointer(&amp;ts), unsafe.Sizeof(ts))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\texecLock.rlock() <span class=\"comment\">// Prevent process clone.</span></span><br><span class=\"line\">\t\tasmcgocall(_cgo_thread_start, unsafe.Pointer(&amp;ts))</span><br><span class=\"line\">\t\texecLock.runlock()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\texecLock.rlock() <span class=\"comment\">// Prevent process clone.</span></span><br><span class=\"line\">  <span class=\"comment\">//涉及到系统进程创建</span></span><br><span class=\"line\">\tnewosproc(mp)</span><br><span class=\"line\">\texecLock.runlock()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"newosproc\"><a class=\"header-anchor\" href=\"#newosproc\">¶</a>newosproc</h3>\n<blockquote>\n<p>M创建之前，系统的操作和相关地址的变化</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// May run with m.p==nil, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newosproc</span><span class=\"params\">(mp *m)</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//这个stk操作很奇怪，有兴趣的可以研究下....[看起来啥也没干那]</span></span><br><span class=\"line\">\tstk := unsafe.Pointer(mp.g0.stack.hi)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"literal\">false</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;newosproc stk=&quot;</span>, stk, <span class=\"string\">&quot; m=&quot;</span>, mp, <span class=\"string\">&quot; g=&quot;</span>, mp.g0, <span class=\"string\">&quot; id=&quot;</span>, mp.id, <span class=\"string\">&quot; ostk=&quot;</span>, &amp;mp, <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize an attribute object.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> attr pthreadattr</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> err <span class=\"type\">int32</span></span><br><span class=\"line\">  <span class=\"comment\">//汇编，变量初始化</span></span><br><span class=\"line\">\terr = pthread_attr_init(&amp;attr)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Find out OS stack size for our own stack guard.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> stacksize <span class=\"type\">uintptr</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pthread_attr_getstacksize(&amp;attr, &amp;stacksize) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//M对应的g0的高位空间栈地址</span></span><br><span class=\"line\">\tmp.g0.stack.hi = stacksize <span class=\"comment\">// for mstart</span></span><br><span class=\"line\">\t<span class=\"comment\">//mSysStatInc(&amp;memstats.stacks_sys, stacksize) //<span class=\"doctag\">TODO:</span> do this?</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Tell the pthread library we won&#x27;t join with this thread.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> pthread_attr_setdetachstate(&amp;attr, _PTHREAD_CREATE_DETACHED) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Finally, create the thread. It starts at mstart_stub, which does some low-level</span></span><br><span class=\"line\">\t<span class=\"comment\">// setup and then calls mstart.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> oset sigset</span><br><span class=\"line\">  <span class=\"comment\">//所有的mask初始化</span></span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;sigset_all, &amp;oset)</span><br><span class=\"line\">\terr = pthread_create(&amp;attr, funcPC(mstart_stub), unsafe.Pointer(mp))</span><br><span class=\"line\">  <span class=\"comment\">// oset地址置nil</span></span><br><span class=\"line\">\tsigprocmask(_SIG_SETMASK, &amp;oset, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\twrite(<span class=\"number\">2</span>, unsafe.Pointer(&amp;failthreadcreate[<span class=\"number\">0</span>]), <span class=\"type\">int32</span>(<span class=\"built_in\">len</span>(failthreadcreate)))</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pthread-attr-init细节\"><a class=\"header-anchor\" href=\"#pthread-attr-init细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L402\">pthread_attr_init细节</a></h4>\n<blockquote>\n<p>汇编代码：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·pthread_attr_init_trampoline(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">0</span>(R0), R0\t<span class=\"comment\">// arg 1 attr</span></span><br><span class=\"line\">\tBL\tlibc_pthread_attr_init(SB)</span><br><span class=\"line\">\tRET</span><br></pre></td></tr></table></figure>\n<h4 id=\"pthread-attr-getstacksize细节\"><a class=\"header-anchor\" href=\"#pthread-attr-getstacksize细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L407\">pthread_attr_getstacksize细节</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·pthread_attr_getstacksize_trampoline(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">8</span>(R0), R1\t<span class=\"comment\">// arg 2 size</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">0</span>(R0), R0\t<span class=\"comment\">// arg 1 attr</span></span><br><span class=\"line\">\tBL\tlibc_pthread_attr_getstacksize(SB)</span><br><span class=\"line\">\tRET</span><br></pre></td></tr></table></figure>\n<h4 id=\"sigprocmask-trampoline细节\"><a class=\"header-anchor\" href=\"#sigprocmask-trampoline细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L266\">sigprocmask_trampoline细节</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·sigprocmask_trampoline(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">8</span>(R0), R1\t<span class=\"comment\">// arg 2 new</span></span><br><span class=\"line\">\tMOVD\t<span class=\"number\">16</span>(R0), R2\t<span class=\"comment\">// arg 3 old</span></span><br><span class=\"line\">\tMOVW\t<span class=\"number\">0</span>(R0), R0\t<span class=\"comment\">// arg 1 how</span></span><br><span class=\"line\">\tBL\tlibc_pthread_sigmask(SB)</span><br><span class=\"line\">\tCMP\t$<span class=\"number\">0</span>, R0</span><br><span class=\"line\">\tBEQ\t<span class=\"number\">2</span>(PC)</span><br><span class=\"line\">\tBL\tnotok&lt;&gt;(SB)</span><br><span class=\"line\">\tRET</span><br></pre></td></tr></table></figure>\n<h4 id=\"pthread-create细节\"><a class=\"header-anchor\" href=\"#pthread-create细节\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/sys_darwin_arm64.s#L342\">pthread_create细节</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mstart_stub is the first function executed on a new thread started by pthread_create.</span></span><br><span class=\"line\"><span class=\"comment\">// It just does some low-level setup and then calls mstart.</span></span><br><span class=\"line\"><span class=\"comment\">// Note: called with the C calling convention.</span></span><br><span class=\"line\">TEXT runtime·mstart_stub(SB),NOSPLIT,$<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// DI points to the m.</span></span><br><span class=\"line\">\t<span class=\"comment\">// We are already on m&#x27;s g0 stack.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Save callee-save registers.</span></span><br><span class=\"line\">\tSUBQ\t$<span class=\"number\">40</span>, SP</span><br><span class=\"line\">\tMOVQ\tBX, <span class=\"number\">0</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR12, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR13, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR14, <span class=\"number\">24</span>(SP)</span><br><span class=\"line\">\tMOVQ\tR15, <span class=\"number\">32</span>(SP)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVQ\tm_g0(DI), DX <span class=\"comment\">// g</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Initialize TLS entry.</span></span><br><span class=\"line\">\t<span class=\"comment\">// See cmd/link/internal/ld/sym.go:computeTLSOffset.</span></span><br><span class=\"line\">\tMOVQ\tDX, <span class=\"number\">0x30</span>(GS)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Someday the convention will be D is always cleared.</span></span><br><span class=\"line\">\tCLD</span><br><span class=\"line\"></span><br><span class=\"line\">\tCALL\truntime·mstart(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Restore callee-save registers.</span></span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">0</span>(SP), BX</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">8</span>(SP), R12</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">16</span>(SP), R13</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">24</span>(SP), R14</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">32</span>(SP), R15</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Go is all done with this OS thread.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Tell pthread everything is ok (we never join with this thread, so</span></span><br><span class=\"line\">\t<span class=\"comment\">// the value here doesn&#x27;t really matter).</span></span><br><span class=\"line\">\tXORL\tAX, AX</span><br><span class=\"line\"></span><br><span class=\"line\">\tADDQ\t$<span class=\"number\">40</span>, SP</span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"execLock-rlock\"><a class=\"header-anchor\" href=\"#execLock-rlock\">¶</a>execLock.rlock()</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rlock locks rw for reading.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *rwmutex)</span></span> rlock() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// The reader must not be allowed to lose its P or else other</span></span><br><span class=\"line\">\t<span class=\"comment\">// things blocking on the lock may consume all of the Ps and</span></span><br><span class=\"line\">\t<span class=\"comment\">// deadlock (issue #20903). Alternatively, we could drop the P</span></span><br><span class=\"line\">\t<span class=\"comment\">// while sleeping.</span></span><br><span class=\"line\">\tacquirem()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"type\">int32</span>(atomic.Xadd(&amp;rw.readerCount, <span class=\"number\">1</span>)) &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// A writer is pending. Park on the reader queue.</span></span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\tlockWithRank(&amp;rw.rLock, lockRankRwmutexR)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> rw.readerPass &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Writer finished.</span></span><br><span class=\"line\">\t\t\t\trw.readerPass -= <span class=\"number\">1</span></span><br><span class=\"line\">\t\t\t\tunlock(&amp;rw.rLock)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Queue this reader to be woken by</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// the writer.</span></span><br><span class=\"line\">\t\t\t\tm := getg().m</span><br><span class=\"line\">\t\t\t\tm.schedlink = rw.readers</span><br><span class=\"line\">\t\t\t\trw.readers.set(m)</span><br><span class=\"line\">\t\t\t\tunlock(&amp;rw.rLock)</span><br><span class=\"line\">\t\t\t\tnotesleep(&amp;m.park)</span><br><span class=\"line\">\t\t\t\tnoteclear(&amp;m.park)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"acquirem\"><a class=\"header-anchor\" href=\"#acquirem\">¶</a>acquirem()</h4>\n<blockquote>\n<p>加锁获取M</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">acquirem</span><span class=\"params\">()</span></span> *m &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\">\t_g_.m.locks++</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _g_.m</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"notesleep\"><a class=\"header-anchor\" href=\"#notesleep\">¶</a>notesleep()</h4>\n<blockquote>\n<p>比较有趣的是sleep是用队列实现,前后加锁</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">notesleep</span><span class=\"params\">(n *note)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t...</span><br><span class=\"line\">\t<span class=\"comment\">// Queued. Sleep.</span></span><br><span class=\"line\">\tgp.m.blocked = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> *cgo_yield == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tsemasleep(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Sleep for an arbitrary-but-moderate interval to poll libc interceptors.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> ns = <span class=\"number\">10e6</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> atomic.Loaduintptr(&amp;n.key) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tsemasleep(ns)</span><br><span class=\"line\">\t\t\tasmcgocall(*cgo_yield, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgp.m.blocked = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"execLock-runlock\"><a class=\"header-anchor\" href=\"#execLock-runlock\">¶</a>execLock.runlock()</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runlock undoes a single rlock call on rw.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *rwmutex)</span></span> runlock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r := <span class=\"type\">int32</span>(atomic.Xadd(&amp;rw.readerCount, <span class=\"number\">-1</span>)); r &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t....</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treleasem(getg().m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"releasem\"><a class=\"header-anchor\" href=\"#releasem\">¶</a>releasem</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"comment\">//lock数量➖1，恢复到preempt的状态.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">releasem</span><span class=\"params\">(mp *m)</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\">\tmp.locks--</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> mp.locks == <span class=\"number\">0</span> &amp;&amp; _g_.preempt &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// restore the preemption request in case we&#x27;ve cleared it in newstack</span></span><br><span class=\"line\">\t\t_g_.stackguard0 = stackPreempt</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先分析到这儿吧…关于这一节的流程图，会整理出来的，，，，</p>\n<p>不然就白分析这么多了，及时学习，及时总结。</p>\n<p>晚安😴…</p>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Nov 25 2020 20:00:17 GMT+0800 (中国标准时间)","title":"「24」GPM newm函数","path":"archives/b4edbd7.html","eyeCatchImage":null,"excerpt":"<p>上节看了go的入口函数，，，也就是你执行main函数前后所做的准备工作。</p>\n<p>继续深入学习。「newm」第一个M，到底是怎么来的？</p>","date":{"_isAMomentObject":true,"_i":"2020-11-25T12:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-11-25T12:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6641},{"title":"「26」Go 1.16 特性","date":"2020-12-28T00:00:17.000Z","updated":"2021-04-24T00:00:17.000Z","keywords":"GPM,Go,特性","abbrlink":"4f05d45d","_content":"\n\n[Go 1.16特性：](https://golang.org/doc/go1.16)\n<!--more -->\n\n## json自定义[「issues 5901」](https://github.com/golang/go/issues/5901)\n### 「Feat」\n### 起源：\n\n```\nFor example, if a user wants to marshal net.IP with custom code, we should provide a way\nto do that, probably a method on *Encoder. Similarly for *Decoder.\n\nSame for encoding/xml\n```\n\n### 变更：\n\n[coding:](https://go-review.googlesource.com/c/go/+/31091)\n\n### [使用教程：](https://github.com/golang/go/issues/5901#issuecomment-566269861)\n\n\n## GMT和MDT时区问题[「issues 43354」](https://github.com/golang/go/issues/43354)\n### 「Fix」\n\n### 问题：\n>主要修复一个时区问题 MDT or GMT ？\n\n[官方reply](https://github.com/golang/go/issues/43354#issuecomment-750490418)\n[go-review](https://go-review.googlesource.com/c/go/+/280072/)\n\n\n\n## go get -d[「issues 43131」](https://github.com/golang/go/issues/43131)\n### 「Feat」\n### 变更：\n```go\ncmd/go新增：「仅下载，不使用此依赖」\n\n  go get -d\n\n```\n## go mod download无法指定版本[「issues 42524」](https://github.com/golang/go/issues/42524)\n\n### 「Fix」\n### 变更：\n```go\n  modify 指定版本可以download\n```\n\n### [review](https://go-review.googlesource.com/c/go/+/270520/)\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_011910.png)\n\n\n\n## ParseDir 指定.go作为后缀的bug[「issues 42951」](https://github.com/golang/go/issues/42951)\n\n### 「Fix」\n### 变更：\n\n```go\n  以.go结尾的文件夹，ParseDir无法转换\n```\n\n### [review](https://github.com/golang/go/commit/48838c35dc7c8e938a83db66faabf3a51f4adc3d)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_013355.png)\n\n\n\n\n## strconv:ParseComplex未处理32位数字[「issues 40706」](https://github.com/golang/go/issues/40706)\n\n### 「Fix」\n### 变更：\n```go\n  处理32bitsize，需要返回error。\n```\n\n### [review](https://go-review.googlesource.com/c/go/+/248219/)\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_051536.png)\n\n\n\n\n## runtime {getMcache} [「issues 42339」](https://github.com/golang/go/issues/42339)\n\n### 「Fix」\n### 变更\n\n```go\nruntime: make getMCache inlineable\n\n```\n\n### review\n* [runtime: decouple consistent stats from mcache and allow P-less update](https://go-review.googlesource.com/c/go/+/267158/)\n\n* [runtime: make getMCache inlineable](https://go-review.googlesource.com/c/go/+/267157/)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_081048.png)\n\n## Slice Grow Size Change\n### 「Change」\n\n### 变更\n\n[👋👋commit](https://github.com/golang/go/commit/2333c6299f340a5f76a73a4fec6db23ffa388e97)\n\n[👋➡️review](https://go-review.googlesource.com/c/go/+/257338)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012848.png)\n\n\n## End","source":"_posts/26-v1-16.md","raw":"---\ntitle: 「26」Go 1.16 特性\ndate: '2020/12/28 08:00:17'\nupdated: '2021/4/24 08:00:17'\nkeywords: 'GPM,Go,特性'\ntags:\n  - Go\n  - Go_1.16\n  - encoding/json\nabbrlink: 4f05d45d\n---\n\n\n[Go 1.16特性：](https://golang.org/doc/go1.16)\n<!--more -->\n\n## json自定义[「issues 5901」](https://github.com/golang/go/issues/5901)\n### 「Feat」\n### 起源：\n\n```\nFor example, if a user wants to marshal net.IP with custom code, we should provide a way\nto do that, probably a method on *Encoder. Similarly for *Decoder.\n\nSame for encoding/xml\n```\n\n### 变更：\n\n[coding:](https://go-review.googlesource.com/c/go/+/31091)\n\n### [使用教程：](https://github.com/golang/go/issues/5901#issuecomment-566269861)\n\n\n## GMT和MDT时区问题[「issues 43354」](https://github.com/golang/go/issues/43354)\n### 「Fix」\n\n### 问题：\n>主要修复一个时区问题 MDT or GMT ？\n\n[官方reply](https://github.com/golang/go/issues/43354#issuecomment-750490418)\n[go-review](https://go-review.googlesource.com/c/go/+/280072/)\n\n\n\n## go get -d[「issues 43131」](https://github.com/golang/go/issues/43131)\n### 「Feat」\n### 变更：\n```go\ncmd/go新增：「仅下载，不使用此依赖」\n\n  go get -d\n\n```\n## go mod download无法指定版本[「issues 42524」](https://github.com/golang/go/issues/42524)\n\n### 「Fix」\n### 变更：\n```go\n  modify 指定版本可以download\n```\n\n### [review](https://go-review.googlesource.com/c/go/+/270520/)\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_011910.png)\n\n\n\n## ParseDir 指定.go作为后缀的bug[「issues 42951」](https://github.com/golang/go/issues/42951)\n\n### 「Fix」\n### 变更：\n\n```go\n  以.go结尾的文件夹，ParseDir无法转换\n```\n\n### [review](https://github.com/golang/go/commit/48838c35dc7c8e938a83db66faabf3a51f4adc3d)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_013355.png)\n\n\n\n\n## strconv:ParseComplex未处理32位数字[「issues 40706」](https://github.com/golang/go/issues/40706)\n\n### 「Fix」\n### 变更：\n```go\n  处理32bitsize，需要返回error。\n```\n\n### [review](https://go-review.googlesource.com/c/go/+/248219/)\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_051536.png)\n\n\n\n\n## runtime {getMcache} [「issues 42339」](https://github.com/golang/go/issues/42339)\n\n### 「Fix」\n### 变更\n\n```go\nruntime: make getMCache inlineable\n\n```\n\n### review\n* [runtime: decouple consistent stats from mcache and allow P-less update](https://go-review.googlesource.com/c/go/+/267158/)\n\n* [runtime: make getMCache inlineable](https://go-review.googlesource.com/c/go/+/267157/)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_081048.png)\n\n## Slice Grow Size Change\n### 「Change」\n\n### 变更\n\n[👋👋commit](https://github.com/golang/go/commit/2333c6299f340a5f76a73a4fec6db23ffa388e97)\n\n[👋➡️review](https://go-review.googlesource.com/c/go/+/257338)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012848.png)\n\n\n## End","slug":"26-v1-16","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4v001uzfqxg23i2ef2","content":"<p><a href=\"https://golang.org/doc/go1.16\">Go 1.16特性：</a></p>\n<span id=\"more\"></span>\n<h2 id=\"json自定义「issues-5901」\"><a class=\"header-anchor\" href=\"#json自定义「issues-5901」\">¶</a>json自定义<a href=\"https://github.com/golang/go/issues/5901\">「issues 5901」</a></h2>\n<h3 id=\"「Feat」\"><a class=\"header-anchor\" href=\"#「Feat」\">¶</a>「Feat」</h3>\n<h3 id=\"起源：\"><a class=\"header-anchor\" href=\"#起源：\">¶</a>起源：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, if a user wants to marshal net.IP with custom code, we should provide a way</span><br><span class=\"line\">to do that, probably a method on *Encoder. Similarly for *Decoder.</span><br><span class=\"line\"></span><br><span class=\"line\">Same for encoding/xml</span><br></pre></td></tr></table></figure>\n<h3 id=\"变更：\"><a class=\"header-anchor\" href=\"#变更：\">¶</a>变更：</h3>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/31091\">coding:</a></p>\n<h3 id=\"使用教程：\"><a class=\"header-anchor\" href=\"#使用教程：\">¶</a><a href=\"https://github.com/golang/go/issues/5901#issuecomment-566269861\">使用教程：</a></h3>\n<h2 id=\"GMT和MDT时区问题「issues-43354」\"><a class=\"header-anchor\" href=\"#GMT和MDT时区问题「issues-43354」\">¶</a>GMT和MDT时区问题<a href=\"https://github.com/golang/go/issues/43354\">「issues 43354」</a></h2>\n<h3 id=\"「Fix」\"><a class=\"header-anchor\" href=\"#「Fix」\">¶</a>「Fix」</h3>\n<h3 id=\"问题：\"><a class=\"header-anchor\" href=\"#问题：\">¶</a>问题：</h3>\n<blockquote>\n<p>主要修复一个时区问题 MDT or GMT ？</p>\n</blockquote>\n<p><a href=\"https://github.com/golang/go/issues/43354#issuecomment-750490418\">官方reply</a><br>\n<a href=\"https://go-review.googlesource.com/c/go/+/280072/\">go-review</a></p>\n<h2 id=\"go-get-d「issues-43131」\"><a class=\"header-anchor\" href=\"#go-get-d「issues-43131」\">¶</a>go get -d<a href=\"https://github.com/golang/go/issues/43131\">「issues 43131」</a></h2>\n<h3 id=\"「Feat」-v2\"><a class=\"header-anchor\" href=\"#「Feat」-v2\">¶</a>「Feat」</h3>\n<h3 id=\"变更：-v2\"><a class=\"header-anchor\" href=\"#变更：-v2\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd/<span class=\"keyword\">go</span>新增：「仅下载，不使用此依赖」</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">go</span> get -d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"go-mod-download无法指定版本「issues-42524」\"><a class=\"header-anchor\" href=\"#go-mod-download无法指定版本「issues-42524」\">¶</a>go mod download无法指定版本<a href=\"https://github.com/golang/go/issues/42524\">「issues 42524」</a></h2>\n<h3 id=\"「Fix」-v2\"><a class=\"header-anchor\" href=\"#「Fix」-v2\">¶</a>「Fix」</h3>\n<h3 id=\"变更：-v3\"><a class=\"header-anchor\" href=\"#变更：-v3\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modify 指定版本可以download</span><br></pre></td></tr></table></figure>\n<h3 id=\"review\"><a class=\"header-anchor\" href=\"#review\">¶</a><a href=\"https://go-review.googlesource.com/c/go/+/270520/\">review</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_011910.png\" alt=\"\"></p>\n<h2 id=\"ParseDir-指定-go作为后缀的bug「issues-42951」\"><a class=\"header-anchor\" href=\"#ParseDir-指定-go作为后缀的bug「issues-42951」\">¶</a>ParseDir 指定.go作为后缀的bug<a href=\"https://github.com/golang/go/issues/42951\">「issues 42951」</a></h2>\n<h3 id=\"「Fix」-v3\"><a class=\"header-anchor\" href=\"#「Fix」-v3\">¶</a>「Fix」</h3>\n<h3 id=\"变更：-v4\"><a class=\"header-anchor\" href=\"#变更：-v4\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以.<span class=\"keyword\">go</span>结尾的文件夹，ParseDir无法转换</span><br></pre></td></tr></table></figure>\n<h3 id=\"review-v2\"><a class=\"header-anchor\" href=\"#review-v2\">¶</a><a href=\"https://github.com/golang/go/commit/48838c35dc7c8e938a83db66faabf3a51f4adc3d\">review</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_013355.png\" alt=\"\"></p>\n<h2 id=\"strconv-ParseComplex未处理32位数字「issues-40706」\"><a class=\"header-anchor\" href=\"#strconv-ParseComplex未处理32位数字「issues-40706」\">¶</a>strconv:ParseComplex未处理32位数字<a href=\"https://github.com/golang/go/issues/40706\">「issues 40706」</a></h2>\n<h3 id=\"「Fix」-v4\"><a class=\"header-anchor\" href=\"#「Fix」-v4\">¶</a>「Fix」</h3>\n<h3 id=\"变更：-v5\"><a class=\"header-anchor\" href=\"#变更：-v5\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">处理<span class=\"number\">32</span>bitsize，需要返回<span class=\"type\">error</span>。</span><br></pre></td></tr></table></figure>\n<h3 id=\"review-v3\"><a class=\"header-anchor\" href=\"#review-v3\">¶</a><a href=\"https://go-review.googlesource.com/c/go/+/248219/\">review</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_051536.png\" alt=\"\"></p>\n<h2 id=\"runtime-getMcache-「issues-42339」\"><a class=\"header-anchor\" href=\"#runtime-getMcache-「issues-42339」\">¶</a>runtime {getMcache} <a href=\"https://github.com/golang/go/issues/42339\">「issues 42339」</a></h2>\n<h3 id=\"「Fix」-v5\"><a class=\"header-anchor\" href=\"#「Fix」-v5\">¶</a>「Fix」</h3>\n<h3 id=\"变更\"><a class=\"header-anchor\" href=\"#变更\">¶</a>变更</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime: <span class=\"built_in\">make</span> getMCache inlineable</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"review-v4\"><a class=\"header-anchor\" href=\"#review-v4\">¶</a>review</h3>\n<ul>\n<li>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/267158/\">runtime: decouple consistent stats from mcache and allow P-less update</a></p>\n</li>\n<li>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/267157/\">runtime: make getMCache inlineable</a></p>\n</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_081048.png\" alt=\"\"></p>\n<h2 id=\"Slice-Grow-Size-Change\"><a class=\"header-anchor\" href=\"#Slice-Grow-Size-Change\">¶</a>Slice Grow Size Change</h2>\n<h3 id=\"「Change」\"><a class=\"header-anchor\" href=\"#「Change」\">¶</a>「Change」</h3>\n<h3 id=\"变更-v2\"><a class=\"header-anchor\" href=\"#变更-v2\">¶</a>变更</h3>\n<p><a href=\"https://github.com/golang/go/commit/2333c6299f340a5f76a73a4fec6db23ffa388e97\">👋👋commit</a></p>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/257338\">👋➡️review</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012848.png\" alt=\"\"></p>\n<h2 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h2>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://golang.org/doc/go1.16\">Go 1.16特性：</a></p>","more":"<h2 id=\"json自定义「issues-5901」\"><a class=\"header-anchor\" href=\"#json自定义「issues-5901」\">¶</a>json自定义<a href=\"https://github.com/golang/go/issues/5901\">「issues 5901」</a></h2>\n<h3 id=\"「Feat」\"><a class=\"header-anchor\" href=\"#「Feat」\">¶</a>「Feat」</h3>\n<h3 id=\"起源：\"><a class=\"header-anchor\" href=\"#起源：\">¶</a>起源：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, if a user wants to marshal net.IP with custom code, we should provide a way</span><br><span class=\"line\">to do that, probably a method on *Encoder. Similarly for *Decoder.</span><br><span class=\"line\"></span><br><span class=\"line\">Same for encoding/xml</span><br></pre></td></tr></table></figure>\n<h3 id=\"变更：\"><a class=\"header-anchor\" href=\"#变更：\">¶</a>变更：</h3>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/31091\">coding:</a></p>\n<h3 id=\"使用教程：\"><a class=\"header-anchor\" href=\"#使用教程：\">¶</a><a href=\"https://github.com/golang/go/issues/5901#issuecomment-566269861\">使用教程：</a></h3>\n<h2 id=\"GMT和MDT时区问题「issues-43354」\"><a class=\"header-anchor\" href=\"#GMT和MDT时区问题「issues-43354」\">¶</a>GMT和MDT时区问题<a href=\"https://github.com/golang/go/issues/43354\">「issues 43354」</a></h2>\n<h3 id=\"「Fix」\"><a class=\"header-anchor\" href=\"#「Fix」\">¶</a>「Fix」</h3>\n<h3 id=\"问题：\"><a class=\"header-anchor\" href=\"#问题：\">¶</a>问题：</h3>\n<blockquote>\n<p>主要修复一个时区问题 MDT or GMT ？</p>\n</blockquote>\n<p><a href=\"https://github.com/golang/go/issues/43354#issuecomment-750490418\">官方reply</a><br>\n<a href=\"https://go-review.googlesource.com/c/go/+/280072/\">go-review</a></p>\n<h2 id=\"go-get-d「issues-43131」\"><a class=\"header-anchor\" href=\"#go-get-d「issues-43131」\">¶</a>go get -d<a href=\"https://github.com/golang/go/issues/43131\">「issues 43131」</a></h2>\n<h3 id=\"「Feat」-v2\"><a class=\"header-anchor\" href=\"#「Feat」-v2\">¶</a>「Feat」</h3>\n<h3 id=\"变更：-v2\"><a class=\"header-anchor\" href=\"#变更：-v2\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmd/<span class=\"keyword\">go</span>新增：「仅下载，不使用此依赖」</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">go</span> get -d</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"go-mod-download无法指定版本「issues-42524」\"><a class=\"header-anchor\" href=\"#go-mod-download无法指定版本「issues-42524」\">¶</a>go mod download无法指定版本<a href=\"https://github.com/golang/go/issues/42524\">「issues 42524」</a></h2>\n<h3 id=\"「Fix」-v2\"><a class=\"header-anchor\" href=\"#「Fix」-v2\">¶</a>「Fix」</h3>\n<h3 id=\"变更：-v3\"><a class=\"header-anchor\" href=\"#变更：-v3\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">modify 指定版本可以download</span><br></pre></td></tr></table></figure>\n<h3 id=\"review\"><a class=\"header-anchor\" href=\"#review\">¶</a><a href=\"https://go-review.googlesource.com/c/go/+/270520/\">review</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_011910.png\" alt=\"\"></p>\n<h2 id=\"ParseDir-指定-go作为后缀的bug「issues-42951」\"><a class=\"header-anchor\" href=\"#ParseDir-指定-go作为后缀的bug「issues-42951」\">¶</a>ParseDir 指定.go作为后缀的bug<a href=\"https://github.com/golang/go/issues/42951\">「issues 42951」</a></h2>\n<h3 id=\"「Fix」-v3\"><a class=\"header-anchor\" href=\"#「Fix」-v3\">¶</a>「Fix」</h3>\n<h3 id=\"变更：-v4\"><a class=\"header-anchor\" href=\"#变更：-v4\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以.<span class=\"keyword\">go</span>结尾的文件夹，ParseDir无法转换</span><br></pre></td></tr></table></figure>\n<h3 id=\"review-v2\"><a class=\"header-anchor\" href=\"#review-v2\">¶</a><a href=\"https://github.com/golang/go/commit/48838c35dc7c8e938a83db66faabf3a51f4adc3d\">review</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_013355.png\" alt=\"\"></p>\n<h2 id=\"strconv-ParseComplex未处理32位数字「issues-40706」\"><a class=\"header-anchor\" href=\"#strconv-ParseComplex未处理32位数字「issues-40706」\">¶</a>strconv:ParseComplex未处理32位数字<a href=\"https://github.com/golang/go/issues/40706\">「issues 40706」</a></h2>\n<h3 id=\"「Fix」-v4\"><a class=\"header-anchor\" href=\"#「Fix」-v4\">¶</a>「Fix」</h3>\n<h3 id=\"变更：-v5\"><a class=\"header-anchor\" href=\"#变更：-v5\">¶</a>变更：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">处理<span class=\"number\">32</span>bitsize，需要返回<span class=\"type\">error</span>。</span><br></pre></td></tr></table></figure>\n<h3 id=\"review-v3\"><a class=\"header-anchor\" href=\"#review-v3\">¶</a><a href=\"https://go-review.googlesource.com/c/go/+/248219/\">review</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_051536.png\" alt=\"\"></p>\n<h2 id=\"runtime-getMcache-「issues-42339」\"><a class=\"header-anchor\" href=\"#runtime-getMcache-「issues-42339」\">¶</a>runtime {getMcache} <a href=\"https://github.com/golang/go/issues/42339\">「issues 42339」</a></h2>\n<h3 id=\"「Fix」-v5\"><a class=\"header-anchor\" href=\"#「Fix」-v5\">¶</a>「Fix」</h3>\n<h3 id=\"变更\"><a class=\"header-anchor\" href=\"#变更\">¶</a>变更</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runtime: <span class=\"built_in\">make</span> getMCache inlineable</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"review-v4\"><a class=\"header-anchor\" href=\"#review-v4\">¶</a>review</h3>\n<ul>\n<li>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/267158/\">runtime: decouple consistent stats from mcache and allow P-less update</a></p>\n</li>\n<li>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/267157/\">runtime: make getMCache inlineable</a></p>\n</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_081048.png\" alt=\"\"></p>\n<h2 id=\"Slice-Grow-Size-Change\"><a class=\"header-anchor\" href=\"#Slice-Grow-Size-Change\">¶</a>Slice Grow Size Change</h2>\n<h3 id=\"「Change」\"><a class=\"header-anchor\" href=\"#「Change」\">¶</a>「Change」</h3>\n<h3 id=\"变更-v2\"><a class=\"header-anchor\" href=\"#变更-v2\">¶</a>变更</h3>\n<p><a href=\"https://github.com/golang/go/commit/2333c6299f340a5f76a73a4fec6db23ffa388e97\">👋👋commit</a></p>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/257338\">👋➡️review</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012848.png\" alt=\"\"></p>\n<h2 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h2>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_011910.png","popularPost_tmp_gaData":{"updated":"Sat Apr 24 2021 08:00:17 GMT+0800 (中国标准时间)","title":"「26」Go 1.16 特性","path":"archives/4f05d45d.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_011910.png","excerpt":"<p><a href=\"https://golang.org/doc/go1.16\">Go 1.16特性：</a></p>","date":{"_isAMomentObject":true,"_i":"2020-12-28T00:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-12-28T00:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go_1.16","encoding/json"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":800},{"title":"「27」Time Zone时区详解","date":"2020-12-28T01:00:17.000Z","updated":"2020-12-28T01:00:17.000Z","keywords":"time,zone,Go","abbrlink":"513dbeba","_content":"\n\n时区，无关语言，在任何一个系统中都会用到：\n* time「时间」\n* timeID「时间作为唯一标识」\n* time to unix\n* unix to time string\n* .....\n\n>很多场景都会看到这个时间的重要性，这次看到16的特性中有一个修改项，觉得自己对time和zone了解的太少了，以此记录，以便积累。\n\n<!--more-->\n### Go version:\n\n```go\n7384 ◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 时区 UTC\\GMT\\MDT\\CST\n\n>说到时间，肯定得想到时区问题，咱们国家还好，只有一个Beijing时区，美国本土。。。。四个时区「晕了」\n\nPs: [点击查看四个时区](https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E6%99%82%E5%8D%80)\n\n\n\n\n```markdown\nGMT (Greenwich Mean Time)的缩写，指的是皇家格林威治天文台的标准时间，称作格林威治时间，因为本初子午线通过此地区，因此也称为世界标准时间。然而地球的自转不是完全规律的，而且正逐渐减慢，因此自1924年开始，格林威治时间(GMT)已经不再被视为标准时间，取而代之的是\"世界协调时间\" (UTC: Coordinated Universal Time)\n\nUTC 协调世界时（Coordinated Universal Time）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。UTC 是一个标准，而不是一个时区\n\nCST\n 北京时间，China Standard Time，中国标准时间，是中国的标准时间。在时区划分上，属东八区，比协调世界时早8小时，记为UTC+8\n```\n\n\n### Go中的时区问题\n\n有一个函数可以说明这个时区问题：\n\n* time.LoadLocation\n\n>如果你查查源码，就会发现这个函数上面写着时区的问题，也跟不用百度时区，有的自然支持，没有的写了就是乱写了。\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112003.png)\n\n```go\n查询的时区一直就在你goroot路径下的一个压缩文件中。\n```\n\n具体的有兴趣可以去看看所有的时区，后续也就有一个全面的了解了：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112408.png)\n\n\n\n### Go 中对于时间的使用\n\n>待更新....","source":"_posts/27-Time-Zone时区详解.md","raw":"---\ntitle: 「27」Time Zone时区详解\ndate: '2020/12/28 09:00:17'\nupdated: '2020/12/28 09:00:17'\nkeywords: 'time,zone,Go'\ntags:\n  - Go\n  - time\n  - Day\nabbrlink: 513dbeba\n---\n\n\n时区，无关语言，在任何一个系统中都会用到：\n* time「时间」\n* timeID「时间作为唯一标识」\n* time to unix\n* unix to time string\n* .....\n\n>很多场景都会看到这个时间的重要性，这次看到16的特性中有一个修改项，觉得自己对time和zone了解的太少了，以此记录，以便积累。\n\n<!--more-->\n### Go version:\n\n```go\n7384 ◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 时区 UTC\\GMT\\MDT\\CST\n\n>说到时间，肯定得想到时区问题，咱们国家还好，只有一个Beijing时区，美国本土。。。。四个时区「晕了」\n\nPs: [点击查看四个时区](https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E6%99%82%E5%8D%80)\n\n\n\n\n```markdown\nGMT (Greenwich Mean Time)的缩写，指的是皇家格林威治天文台的标准时间，称作格林威治时间，因为本初子午线通过此地区，因此也称为世界标准时间。然而地球的自转不是完全规律的，而且正逐渐减慢，因此自1924年开始，格林威治时间(GMT)已经不再被视为标准时间，取而代之的是\"世界协调时间\" (UTC: Coordinated Universal Time)\n\nUTC 协调世界时（Coordinated Universal Time）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。UTC 是一个标准，而不是一个时区\n\nCST\n 北京时间，China Standard Time，中国标准时间，是中国的标准时间。在时区划分上，属东八区，比协调世界时早8小时，记为UTC+8\n```\n\n\n### Go中的时区问题\n\n有一个函数可以说明这个时区问题：\n\n* time.LoadLocation\n\n>如果你查查源码，就会发现这个函数上面写着时区的问题，也跟不用百度时区，有的自然支持，没有的写了就是乱写了。\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112003.png)\n\n```go\n查询的时区一直就在你goroot路径下的一个压缩文件中。\n```\n\n具体的有兴趣可以去看看所有的时区，后续也就有一个全面的了解了：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112408.png)\n\n\n\n### Go 中对于时间的使用\n\n>待更新....","slug":"27-Time-Zone时区详解","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4v001wzfqx7evhb9c6","content":"<p>时区，无关语言，在任何一个系统中都会用到：</p>\n<ul>\n<li>time「时间」</li>\n<li>timeID「时间作为唯一标识」</li>\n<li>time to unix</li>\n<li>unix to time string</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>很多场景都会看到这个时间的重要性，这次看到16的特性中有一个修改项，觉得自己对time和zone了解的太少了，以此记录，以便积累。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"时区-UTC-GMT-MDT-CST\"><a class=\"header-anchor\" href=\"#时区-UTC-GMT-MDT-CST\">¶</a>时区 UTC\\GMT\\MDT\\CST</h3>\n<blockquote>\n<p>说到时间，肯定得想到时区问题，咱们国家还好，只有一个Beijing时区，美国本土。。。。四个时区「晕了」</p>\n</blockquote>\n<p>Ps: <a href=\"https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E6%99%82%E5%8D%80\">点击查看四个时区</a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GMT (Greenwich Mean Time)的缩写，指的是皇家格林威治天文台的标准时间，称作格林威治时间，因为本初子午线通过此地区，因此也称为世界标准时间。然而地球的自转不是完全规律的，而且正逐渐减慢，因此自1924年开始，格林威治时间(GMT)已经不再被视为标准时间，取而代之的是&quot;世界协调时间&quot; (UTC: Coordinated Universal Time)</span><br><span class=\"line\"></span><br><span class=\"line\">UTC 协调世界时（Coordinated Universal Time）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。UTC 是一个标准，而不是一个时区</span><br><span class=\"line\"></span><br><span class=\"line\">CST</span><br><span class=\"line\"> 北京时间，China Standard Time，中国标准时间，是中国的标准时间。在时区划分上，属东八区，比协调世界时早8小时，记为UTC+8</span><br></pre></td></tr></table></figure>\n<h3 id=\"Go中的时区问题\"><a class=\"header-anchor\" href=\"#Go中的时区问题\">¶</a>Go中的时区问题</h3>\n<p>有一个函数可以说明这个时区问题：</p>\n<ul>\n<li>time.LoadLocation</li>\n</ul>\n<blockquote>\n<p>如果你查查源码，就会发现这个函数上面写着时区的问题，也跟不用百度时区，有的自然支持，没有的写了就是乱写了。</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112003.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询的时区一直就在你goroot路径下的一个压缩文件中。</span><br></pre></td></tr></table></figure>\n<p>具体的有兴趣可以去看看所有的时区，后续也就有一个全面的了解了：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112408.png\" alt=\"\"></p>\n<h3 id=\"Go-中对于时间的使用\"><a class=\"header-anchor\" href=\"#Go-中对于时间的使用\">¶</a>Go 中对于时间的使用</h3>\n<blockquote>\n<p>待更新…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>时区，无关语言，在任何一个系统中都会用到：</p>\n<ul>\n<li>time「时间」</li>\n<li>timeID「时间作为唯一标识」</li>\n<li>time to unix</li>\n<li>unix to time string</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>很多场景都会看到这个时间的重要性，这次看到16的特性中有一个修改项，觉得自己对time和zone了解的太少了，以此记录，以便积累。</p>\n</blockquote>","more":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"时区-UTC-GMT-MDT-CST\"><a class=\"header-anchor\" href=\"#时区-UTC-GMT-MDT-CST\">¶</a>时区 UTC\\GMT\\MDT\\CST</h3>\n<blockquote>\n<p>说到时间，肯定得想到时区问题，咱们国家还好，只有一个Beijing时区，美国本土。。。。四个时区「晕了」</p>\n</blockquote>\n<p>Ps: <a href=\"https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E6%99%82%E5%8D%80\">点击查看四个时区</a></p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GMT (Greenwich Mean Time)的缩写，指的是皇家格林威治天文台的标准时间，称作格林威治时间，因为本初子午线通过此地区，因此也称为世界标准时间。然而地球的自转不是完全规律的，而且正逐渐减慢，因此自1924年开始，格林威治时间(GMT)已经不再被视为标准时间，取而代之的是&quot;世界协调时间&quot; (UTC: Coordinated Universal Time)</span><br><span class=\"line\"></span><br><span class=\"line\">UTC 协调世界时（Coordinated Universal Time）是最主要的世界时间标准，其以原子时秒长为基础，在时刻上尽量接近于格林尼治标准时间。UTC 是一个标准，而不是一个时区</span><br><span class=\"line\"></span><br><span class=\"line\">CST</span><br><span class=\"line\"> 北京时间，China Standard Time，中国标准时间，是中国的标准时间。在时区划分上，属东八区，比协调世界时早8小时，记为UTC+8</span><br></pre></td></tr></table></figure>\n<h3 id=\"Go中的时区问题\"><a class=\"header-anchor\" href=\"#Go中的时区问题\">¶</a>Go中的时区问题</h3>\n<p>有一个函数可以说明这个时区问题：</p>\n<ul>\n<li>time.LoadLocation</li>\n</ul>\n<blockquote>\n<p>如果你查查源码，就会发现这个函数上面写着时区的问题，也跟不用百度时区，有的自然支持，没有的写了就是乱写了。</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112003.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查询的时区一直就在你goroot路径下的一个压缩文件中。</span><br></pre></td></tr></table></figure>\n<p>具体的有兴趣可以去看看所有的时区，后续也就有一个全面的了解了：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112408.png\" alt=\"\"></p>\n<h3 id=\"Go-中对于时间的使用\"><a class=\"header-anchor\" href=\"#Go-中对于时间的使用\">¶</a>Go 中对于时间的使用</h3>\n<blockquote>\n<p>待更新…</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112003.png","popularPost_tmp_gaData":{"updated":"Mon Dec 28 2020 09:00:17 GMT+0800 (中国标准时间)","title":"「27」Time Zone时区详解","path":"archives/513dbeba.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20201228_112003.png","excerpt":"<p>时区，无关语言，在任何一个系统中都会用到：</p>\n<ul>\n<li>time「时间」</li>\n<li>timeID「时间作为唯一标识」</li>\n<li>time to unix</li>\n<li>unix to time string</li>\n<li>…</li>\n</ul>\n<blockquote>\n<p>很多场景都会看到这个时间的重要性，这次看到16的特性中有一个修改项，觉得自己对time和zone了解的太少了，以此记录，以便积累。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-12-28T01:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-12-28T01:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","time"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":802},{"title":"「28」sync-mutex传参复制问题","date":"2021-01-02T13:00:17.000Z","updated":"2021-01-02T13:00:17.000Z","keywords":"time,zone,Go,sync,Mutex","abbrlink":"a82ae489","_content":"### Go version:\n\n```go\n7384 ◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 起因:\n\n```\nsync.Mutex当参数,值传递后出错.\n\n```\n\n### 现象:\n\n>不废话,上代码:\n\n\n<!--more-->\n\n```go\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nvar wg sync.WaitGroup\nvar age int\n\ntype Person struct {\n\tmux sync.Mutex\n}\n\nfunc (p Person) AddAge() {\n\tdefer wg.Done()\n\tp.mux.Lock()\n\tage++\n\tdefer p.mux.Unlock()\n}\n\nfunc main() {\n\tp1 := Person{\n\t\tmux: sync.Mutex{},\n\t}\n\twg.Add(100)\n\tfor i := 0; i < 100; i++ {\n\t\tgo p1.AddAge()\n\t}\n    wg.Wait()\n    \n\tfmt.Println(age)\n}\n\n```\n#### 这个age的输出应该是多少?\n\n#### 不妨可以多尝试几次,结果:\n\n>100/99/98都有可能.\n\n\n### What? Lock难道不是加锁的么\n\n>Lock加锁难道不是这么用的么,颠覆认知!\n\n#### Lock源码: \n*A Mutex must not be copied after first use*\n\n### 根源:\n\n* Go参数传递属于值传递\n* Mutex复制后中的state属于前一状态,没有改变\n* Mutex中的Lock和Unlock「方法」属于指针类型<sup>图1</sup>\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210102_102753.png)\n**<center>图<sup>1</sup></center>**\n\n### 解决办法\n\n\n* 当然是参考源码,「图1」\n\n```go\n\n缺点:\n    每次使用之前需要初始化,毕竟是指针类型的\n\n优点:\n    设计源于源码,追随Go的设计.\n\n```\n* 加锁的地方尽量是全局的\n\n```go\n这个就不分析了,毕竟不适用所有场景.\n\n不适用的场景:\n    临时的Map需要加锁,如果用全局锁,则效率降低.\n```\n\n### Sync包不可复制性\n\n```go\n使用sync包下的功能,可能得注意了,都是不可复制的.\n```\n\n\n### End\n\n>每次看源码,都会有不一样的收获.「也许是我理解能力差哈」\n","source":"_posts/28-sync-mutex传参复制问题.md","raw":"---\ntitle: 「28」sync-mutex传参复制问题\ndate: '2021/1/2 21:00:17'\nupdated: '2021/1/2 21:00:17'\nkeywords: 'time,zone,Go,sync,Mutex'\ntags:\n  - Go\n  - sync\n  - Day\n  - Mutex\nabbrlink: a82ae489\n---\n### Go version:\n\n```go\n7384 ◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 起因:\n\n```\nsync.Mutex当参数,值传递后出错.\n\n```\n\n### 现象:\n\n>不废话,上代码:\n\n\n<!--more-->\n\n```go\n\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n\nvar wg sync.WaitGroup\nvar age int\n\ntype Person struct {\n\tmux sync.Mutex\n}\n\nfunc (p Person) AddAge() {\n\tdefer wg.Done()\n\tp.mux.Lock()\n\tage++\n\tdefer p.mux.Unlock()\n}\n\nfunc main() {\n\tp1 := Person{\n\t\tmux: sync.Mutex{},\n\t}\n\twg.Add(100)\n\tfor i := 0; i < 100; i++ {\n\t\tgo p1.AddAge()\n\t}\n    wg.Wait()\n    \n\tfmt.Println(age)\n}\n\n```\n#### 这个age的输出应该是多少?\n\n#### 不妨可以多尝试几次,结果:\n\n>100/99/98都有可能.\n\n\n### What? Lock难道不是加锁的么\n\n>Lock加锁难道不是这么用的么,颠覆认知!\n\n#### Lock源码: \n*A Mutex must not be copied after first use*\n\n### 根源:\n\n* Go参数传递属于值传递\n* Mutex复制后中的state属于前一状态,没有改变\n* Mutex中的Lock和Unlock「方法」属于指针类型<sup>图1</sup>\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210102_102753.png)\n**<center>图<sup>1</sup></center>**\n\n### 解决办法\n\n\n* 当然是参考源码,「图1」\n\n```go\n\n缺点:\n    每次使用之前需要初始化,毕竟是指针类型的\n\n优点:\n    设计源于源码,追随Go的设计.\n\n```\n* 加锁的地方尽量是全局的\n\n```go\n这个就不分析了,毕竟不适用所有场景.\n\n不适用的场景:\n    临时的Map需要加锁,如果用全局锁,则效率降低.\n```\n\n### Sync包不可复制性\n\n```go\n使用sync包下的功能,可能得注意了,都是不可复制的.\n```\n\n\n### End\n\n>每次看源码,都会有不一样的收获.「也许是我理解能力差哈」\n","slug":"28-sync-mutex传参复制问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4w001zzfqx44ys0i5i","content":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因:</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync.Mutex当参数,值传递后出错.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"现象\"><a class=\"header-anchor\" href=\"#现象\">¶</a>现象:</h3>\n<blockquote>\n<p>不废话,上代码:</p>\n</blockquote>\n<span id=\"more\"></span>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmux sync.Mutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> AddAge() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\tp.mux.Lock()</span><br><span class=\"line\">\tage++</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> p.mux.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;</span><br><span class=\"line\">\t\tmux: sync.Mutex&#123;&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twg.Add(<span class=\"number\">100</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> p1.AddAge()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">    </span><br><span class=\"line\">\tfmt.Println(age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"这个age的输出应该是多少\"><a class=\"header-anchor\" href=\"#这个age的输出应该是多少\">¶</a>这个age的输出应该是多少?</h4>\n<h4 id=\"不妨可以多尝试几次-结果\"><a class=\"header-anchor\" href=\"#不妨可以多尝试几次-结果\">¶</a>不妨可以多尝试几次,结果:</h4>\n<blockquote>\n<p>100/99/98都有可能.</p>\n</blockquote>\n<h3 id=\"What-Lock难道不是加锁的么\"><a class=\"header-anchor\" href=\"#What-Lock难道不是加锁的么\">¶</a>What? Lock难道不是加锁的么</h3>\n<blockquote>\n<p>Lock加锁难道不是这么用的么,颠覆认知!</p>\n</blockquote>\n<h4 id=\"Lock源码\"><a class=\"header-anchor\" href=\"#Lock源码\">¶</a>Lock源码:</h4>\n<p><em>A Mutex must not be copied after first use</em></p>\n<h3 id=\"根源\"><a class=\"header-anchor\" href=\"#根源\">¶</a>根源:</h3>\n<ul>\n<li>Go参数传递属于值传递</li>\n<li>Mutex复制后中的state属于前一状态,没有改变</li>\n<li>Mutex中的Lock和Unlock「方法」属于指针类型<sup>图1</sup></li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210102_102753.png\" alt=\"\"><br>\n<strong><center>图<sup>1</sup></center></strong></p>\n<h3 id=\"解决办法\"><a class=\"header-anchor\" href=\"#解决办法\">¶</a>解决办法</h3>\n<ul>\n<li>当然是参考源码,「图1」</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">缺点:</span><br><span class=\"line\">    每次使用之前需要初始化,毕竟是指针类型的</span><br><span class=\"line\"></span><br><span class=\"line\">优点:</span><br><span class=\"line\">    设计源于源码,追随Go的设计.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>加锁的地方尽量是全局的</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个就不分析了,毕竟不适用所有场景.</span><br><span class=\"line\"></span><br><span class=\"line\">不适用的场景:</span><br><span class=\"line\">    临时的Map需要加锁,如果用全局锁,则效率降低.</span><br></pre></td></tr></table></figure>\n<h3 id=\"Sync包不可复制性\"><a class=\"header-anchor\" href=\"#Sync包不可复制性\">¶</a>Sync包不可复制性</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用sync包下的功能,可能得注意了,都是不可复制的.</span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n<blockquote>\n<p>每次看源码,都会有不一样的收获.「也许是我理解能力差哈」</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因:</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync.Mutex当参数,值传递后出错.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"现象\"><a class=\"header-anchor\" href=\"#现象\">¶</a>现象:</h3>\n<blockquote>\n<p>不废话,上代码:</p>\n</blockquote>","more":"<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> wg sync.WaitGroup</span><br><span class=\"line\"><span class=\"keyword\">var</span> age <span class=\"type\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tmux sync.Mutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> AddAge() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> wg.Done()</span><br><span class=\"line\">\tp.mux.Lock()</span><br><span class=\"line\">\tage++</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> p.mux.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp1 := Person&#123;</span><br><span class=\"line\">\t\tmux: sync.Mutex&#123;&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\twg.Add(<span class=\"number\">100</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> p1.AddAge()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    wg.Wait()</span><br><span class=\"line\">    </span><br><span class=\"line\">\tfmt.Println(age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"这个age的输出应该是多少\"><a class=\"header-anchor\" href=\"#这个age的输出应该是多少\">¶</a>这个age的输出应该是多少?</h4>\n<h4 id=\"不妨可以多尝试几次-结果\"><a class=\"header-anchor\" href=\"#不妨可以多尝试几次-结果\">¶</a>不妨可以多尝试几次,结果:</h4>\n<blockquote>\n<p>100/99/98都有可能.</p>\n</blockquote>\n<h3 id=\"What-Lock难道不是加锁的么\"><a class=\"header-anchor\" href=\"#What-Lock难道不是加锁的么\">¶</a>What? Lock难道不是加锁的么</h3>\n<blockquote>\n<p>Lock加锁难道不是这么用的么,颠覆认知!</p>\n</blockquote>\n<h4 id=\"Lock源码\"><a class=\"header-anchor\" href=\"#Lock源码\">¶</a>Lock源码:</h4>\n<p><em>A Mutex must not be copied after first use</em></p>\n<h3 id=\"根源\"><a class=\"header-anchor\" href=\"#根源\">¶</a>根源:</h3>\n<ul>\n<li>Go参数传递属于值传递</li>\n<li>Mutex复制后中的state属于前一状态,没有改变</li>\n<li>Mutex中的Lock和Unlock「方法」属于指针类型<sup>图1</sup></li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210102_102753.png\" alt=\"\"><br>\n<strong><center>图<sup>1</sup></center></strong></p>\n<h3 id=\"解决办法\"><a class=\"header-anchor\" href=\"#解决办法\">¶</a>解决办法</h3>\n<ul>\n<li>当然是参考源码,「图1」</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">缺点:</span><br><span class=\"line\">    每次使用之前需要初始化,毕竟是指针类型的</span><br><span class=\"line\"></span><br><span class=\"line\">优点:</span><br><span class=\"line\">    设计源于源码,追随Go的设计.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>加锁的地方尽量是全局的</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个就不分析了,毕竟不适用所有场景.</span><br><span class=\"line\"></span><br><span class=\"line\">不适用的场景:</span><br><span class=\"line\">    临时的Map需要加锁,如果用全局锁,则效率降低.</span><br></pre></td></tr></table></figure>\n<h3 id=\"Sync包不可复制性\"><a class=\"header-anchor\" href=\"#Sync包不可复制性\">¶</a>Sync包不可复制性</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用sync包下的功能,可能得注意了,都是不可复制的.</span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n<blockquote>\n<p>每次看源码,都会有不一样的收获.「也许是我理解能力差哈」</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210102_102753.png","popularPost_tmp_gaData":{"updated":"Sat Jan 02 2021 21:00:17 GMT+0800 (中国标准时间)","title":"「28」sync-mutex传参复制问题","path":"archives/a82ae489.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210102_102753.png","excerpt":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"起因\"><a class=\"header-anchor\" href=\"#起因\">¶</a>起因:</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync.Mutex当参数,值传递后出错.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"现象\"><a class=\"header-anchor\" href=\"#现象\">¶</a>现象:</h3>\n<blockquote>\n<p>不废话,上代码:</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2021-01-02T13:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-01-02T13:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","sync","Mutex"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":907},{"title":"「29」map delete Mem不释放问题","date":"2021-01-06T04:00:17.000Z","updated":"2021-01-06T04:00:17.000Z","keywords":"Go,Map,Hash,delete","abbrlink":"2de36dd7","_content":"\n### Go version:\n\n```go\n7384 ◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n###  最近有这么个坑:\n\n>碰到内存泄露问题，大致是这样的：\n\n* 1、定义一个全局map\n* 2、给里面放值\n* 3、用完之后删除Key/value\n\n### 问题：map删除完key后，Mem有没有被释放？\n\n<!--more-->\n\n\n### 观察内存变化：\n\n#### 情景1: 只删除Map的k/v\n```go\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\t//intMap = nil\n\truntime.GC()\n\tprintMemStats()\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n\n```\n\n##### 输出：\n```go\n2021/01/06 16:12:26 Alloc = 162 TotalAlloc = 162 Sys = 69714 NumGC = 0\n2021/01/06 16:12:26 Alloc = 471 TotalAlloc = 487 Sys = 70290 NumGC = 1\n2021/01/06 16:12:26 8192\n2021/01/06 16:12:26 0\n2021/01/06 16:12:26 Alloc = 473 TotalAlloc = 490 Sys = 70610 NumGC = 2\n2021/01/06 16:12:26 Alloc = 475 TotalAlloc = 494 Sys = 70610 NumGC = 3\n```\n\n\n\n#### 情景2: 删除map的k/v,并置map为nil\n\n```go\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\tintMap = nil\n\truntime.GC()\n\tprintMemStats()\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n\n```\n\n##### 输出：\n```go\n2021/01/06 16:15:40 Alloc = 161 TotalAlloc = 161 Sys = 69714 NumGC = 0\n2021/01/06 16:15:40 Alloc = 469 TotalAlloc = 484 Sys = 71696 NumGC = 1\n2021/01/06 16:15:40 8192\n2021/01/06 16:15:40 0\n2021/01/06 16:15:40 Alloc = 471 TotalAlloc = 488 Sys = 71760 NumGC = 2\n2021/01/06 16:15:40 Alloc = 160 TotalAlloc = 492 Sys = 71760 NumGC = 3\n```\n\n\n#### 情景3: map放在函数中，并删除map的k/v,不置nil\n\n```go\n\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tother()\n\truntime.GC()\n\tprintMemStats()\n}\n\nfunc other(){\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\t//intMap = nil\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n\n```\n\n##### 输出：\n\n```go\n2021/01/06 16:18:35 Alloc = 161 TotalAlloc = 161 Sys = 69458 NumGC = 0\n2021/01/06 16:18:35 Alloc = 469 TotalAlloc = 484 Sys = 71440 NumGC = 1\n2021/01/06 16:18:35 8192\n2021/01/06 16:18:35 0\n2021/01/06 16:18:35 Alloc = 471 TotalAlloc = 488 Sys = 71504 NumGC = 2\n2021/01/06 16:18:35 Alloc = 473 TotalAlloc = 492 Sys = 71504 NumGC = 3\n```\n\n#### 情景4: map放在函数中，并删除map的k/v,map置为nil\n\n```go\n\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tother()\n\truntime.GC()\n\tprintMemStats()\n}\n\nfunc other(){\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\tintMap = nil\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n```\n\n##### 输出：\n```go\n2021/01/06 16:20:02 Alloc = 161 TotalAlloc = 161 Sys = 69714 NumGC = 0\n2021/01/06 16:20:02 Alloc = 469 TotalAlloc = 484 Sys = 70034 NumGC = 1\n2021/01/06 16:20:02 8192\n2021/01/06 16:20:02 0\n2021/01/06 16:20:02 Alloc = 471 TotalAlloc = 488 Sys = 70098 NumGC = 2\n2021/01/06 16:20:02 Alloc = 160 TotalAlloc = 492 Sys = 70098 NumGC = 3\n```\n\n#### 情景5: map定义放在局部变量中：\n\n```go\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tother()\n\truntime.GC()\n\tprintMemStats()\n}\n\nfunc other() {\n\tvar intMap map[int]int\n\tintMap = initMap(intMap)\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\t//intMap = nil\n}\nfunc initMap(intMap map[int]int) map[int]int {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n\treturn intMap\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n```\n\n##### 输出：\n\n```go\n2021/01/06 16:29:54 Alloc = 161 TotalAlloc = 161 Sys = 69458 NumGC = 0\n2021/01/06 16:29:54 Alloc = 469 TotalAlloc = 484 Sys = 71440 NumGC = 1\n2021/01/06 16:29:54 8192\n2021/01/06 16:29:54 0\n2021/01/06 16:29:54 Alloc = 158 TotalAlloc = 488 Sys = 71504 NumGC = 2\n2021/01/06 16:29:54 Alloc = 160 TotalAlloc = 491 Sys = 71504 NumGC = 3\n```\n\n##### 汇编输出：\n\n比较有意思的一行：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_051000.png)\n\n```\nXORL 异或运算符 \n\nXORL AX,AX --->将AX置0值\n```\n\n\n#### delete函数：\n\n```go\n0x0125 00293 (../1126/main.go:26)\tCALL\truntime.mapdelete_fast64(SB)\n```\n\n##### mapdelete_fast64函数作用：\n\n\n[点击Github查看](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/map_fast64.go#L272)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_052140.png)\n\n\n>有意思的是：map的设计就是这样，删除key，只是把这个槽位置empty，并没有释放内存.\n\n### Others:\n\n#### 其它场景：\n\n>场景有很多，这里只是逻列最简单的，至于用指针之类的，有兴趣了再研究研究，方法都是一样的。\n\n#### 汇编代码生成\n* 详细见此文：[「15」Plan9 汇编小记](https://blog.imrcrab.com/archives/2ce846ed.html)","source":"_posts/29-map-delete-Mem不释放问题.md","raw":"---\ntitle: 「29」map delete Mem不释放问题\ndate: '2021/1/6 12:00:17'\nupdated: '2021/1/6 12:00:17'\nkeywords: 'Go,Map,Hash,delete'\ntags:\n  - Day\n  - Go\n  - Map\n  - Hash\nabbrlink: 2de36dd7\n---\n\n### Go version:\n\n```go\n7384 ◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n###  最近有这么个坑:\n\n>碰到内存泄露问题，大致是这样的：\n\n* 1、定义一个全局map\n* 2、给里面放值\n* 3、用完之后删除Key/value\n\n### 问题：map删除完key后，Mem有没有被释放？\n\n<!--more-->\n\n\n### 观察内存变化：\n\n#### 情景1: 只删除Map的k/v\n```go\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\t//intMap = nil\n\truntime.GC()\n\tprintMemStats()\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n\n```\n\n##### 输出：\n```go\n2021/01/06 16:12:26 Alloc = 162 TotalAlloc = 162 Sys = 69714 NumGC = 0\n2021/01/06 16:12:26 Alloc = 471 TotalAlloc = 487 Sys = 70290 NumGC = 1\n2021/01/06 16:12:26 8192\n2021/01/06 16:12:26 0\n2021/01/06 16:12:26 Alloc = 473 TotalAlloc = 490 Sys = 70610 NumGC = 2\n2021/01/06 16:12:26 Alloc = 475 TotalAlloc = 494 Sys = 70610 NumGC = 3\n```\n\n\n\n#### 情景2: 删除map的k/v,并置map为nil\n\n```go\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\tintMap = nil\n\truntime.GC()\n\tprintMemStats()\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n\n```\n\n##### 输出：\n```go\n2021/01/06 16:15:40 Alloc = 161 TotalAlloc = 161 Sys = 69714 NumGC = 0\n2021/01/06 16:15:40 Alloc = 469 TotalAlloc = 484 Sys = 71696 NumGC = 1\n2021/01/06 16:15:40 8192\n2021/01/06 16:15:40 0\n2021/01/06 16:15:40 Alloc = 471 TotalAlloc = 488 Sys = 71760 NumGC = 2\n2021/01/06 16:15:40 Alloc = 160 TotalAlloc = 492 Sys = 71760 NumGC = 3\n```\n\n\n#### 情景3: map放在函数中，并删除map的k/v,不置nil\n\n```go\n\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tother()\n\truntime.GC()\n\tprintMemStats()\n}\n\nfunc other(){\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\t//intMap = nil\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n\n```\n\n##### 输出：\n\n```go\n2021/01/06 16:18:35 Alloc = 161 TotalAlloc = 161 Sys = 69458 NumGC = 0\n2021/01/06 16:18:35 Alloc = 469 TotalAlloc = 484 Sys = 71440 NumGC = 1\n2021/01/06 16:18:35 8192\n2021/01/06 16:18:35 0\n2021/01/06 16:18:35 Alloc = 471 TotalAlloc = 488 Sys = 71504 NumGC = 2\n2021/01/06 16:18:35 Alloc = 473 TotalAlloc = 492 Sys = 71504 NumGC = 3\n```\n\n#### 情景4: map放在函数中，并删除map的k/v,map置为nil\n\n```go\n\nvar intMap map[int]int\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tother()\n\truntime.GC()\n\tprintMemStats()\n}\n\nfunc other(){\n\tinitMap()\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\tintMap = nil\n}\nfunc initMap() {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n```\n\n##### 输出：\n```go\n2021/01/06 16:20:02 Alloc = 161 TotalAlloc = 161 Sys = 69714 NumGC = 0\n2021/01/06 16:20:02 Alloc = 469 TotalAlloc = 484 Sys = 70034 NumGC = 1\n2021/01/06 16:20:02 8192\n2021/01/06 16:20:02 0\n2021/01/06 16:20:02 Alloc = 471 TotalAlloc = 488 Sys = 70098 NumGC = 2\n2021/01/06 16:20:02 Alloc = 160 TotalAlloc = 492 Sys = 70098 NumGC = 3\n```\n\n#### 情景5: map定义放在局部变量中：\n\n```go\nvar cnt = 8192\n\nfunc main() {\n\tprintMemStats()\n\tother()\n\truntime.GC()\n\tprintMemStats()\n}\n\nfunc other() {\n\tvar intMap map[int]int\n\tintMap = initMap(intMap)\n\truntime.GC()\n\tprintMemStats()\n\tlog.Println(len(intMap))\n\tfor i := 0; i < cnt; i++ {\n\t\tdelete(intMap, i)\n\t}\n\tlog.Println(len(intMap))\n\truntime.GC()\n\tprintMemStats()\n\t//intMap = nil\n}\nfunc initMap(intMap map[int]int) map[int]int {\n\tintMap = make(map[int]int, cnt)\n\tfor i := 0; i < cnt; i++ {\n\t\tintMap[i] = i\n\t}\n\treturn intMap\n}\nfunc printMemStats() {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tlog.Printf(\"Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n\", m.Alloc/1024, m.TotalAlloc/1024, m.Sys/1024, m.NumGC)\n}\n```\n\n##### 输出：\n\n```go\n2021/01/06 16:29:54 Alloc = 161 TotalAlloc = 161 Sys = 69458 NumGC = 0\n2021/01/06 16:29:54 Alloc = 469 TotalAlloc = 484 Sys = 71440 NumGC = 1\n2021/01/06 16:29:54 8192\n2021/01/06 16:29:54 0\n2021/01/06 16:29:54 Alloc = 158 TotalAlloc = 488 Sys = 71504 NumGC = 2\n2021/01/06 16:29:54 Alloc = 160 TotalAlloc = 491 Sys = 71504 NumGC = 3\n```\n\n##### 汇编输出：\n\n比较有意思的一行：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_051000.png)\n\n```\nXORL 异或运算符 \n\nXORL AX,AX --->将AX置0值\n```\n\n\n#### delete函数：\n\n```go\n0x0125 00293 (../1126/main.go:26)\tCALL\truntime.mapdelete_fast64(SB)\n```\n\n##### mapdelete_fast64函数作用：\n\n\n[点击Github查看](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/map_fast64.go#L272)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_052140.png)\n\n\n>有意思的是：map的设计就是这样，删除key，只是把这个槽位置empty，并没有释放内存.\n\n### Others:\n\n#### 其它场景：\n\n>场景有很多，这里只是逻列最简单的，至于用指针之类的，有兴趣了再研究研究，方法都是一样的。\n\n#### 汇编代码生成\n* 详细见此文：[「15」Plan9 汇编小记](https://blog.imrcrab.com/archives/2ce846ed.html)","slug":"29-map-delete-Mem不释放问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4x0021zfqxdnwx5i37","content":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"最近有这么个坑\"><a class=\"header-anchor\" href=\"#最近有这么个坑\">¶</a>最近有这么个坑:</h3>\n<blockquote>\n<p>碰到内存泄露问题，大致是这样的：</p>\n</blockquote>\n<ul>\n<li>1、定义一个全局map</li>\n<li>2、给里面放值</li>\n<li>3、用完之后删除Key/value</li>\n</ul>\n<h3 id=\"问题：map删除完key后，Mem有没有被释放？\"><a class=\"header-anchor\" href=\"#问题：map删除完key后，Mem有没有被释放？\">¶</a>问题：map删除完key后，Mem有没有被释放？</h3>\n<span id=\"more\"></span>\n<h3 id=\"观察内存变化：\"><a class=\"header-anchor\" href=\"#观察内存变化：\">¶</a>观察内存变化：</h3>\n<h4 id=\"情景1-只删除Map的k-v\"><a class=\"header-anchor\" href=\"#情景1-只删除Map的k-v\">¶</a>情景1: 只删除Map的k/v</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\t<span class=\"comment\">//intMap = nil</span></span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：\"><a class=\"header-anchor\" href=\"#输出：\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">162</span> TotalAlloc = <span class=\"number\">162</span> Sys = <span class=\"number\">69714</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">487</span> Sys = <span class=\"number\">70290</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">473</span> TotalAlloc = <span class=\"number\">490</span> Sys = <span class=\"number\">70610</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">475</span> TotalAlloc = <span class=\"number\">494</span> Sys = <span class=\"number\">70610</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景2-删除map的k-v-并置map为nil\"><a class=\"header-anchor\" href=\"#情景2-删除map的k-v-并置map为nil\">¶</a>情景2: 删除map的k/v,并置map为nil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tintMap = <span class=\"literal\">nil</span></span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v2\"><a class=\"header-anchor\" href=\"#输出：-v2\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69714</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">71696</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">71760</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">160</span> TotalAlloc = <span class=\"number\">492</span> Sys = <span class=\"number\">71760</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景3-map放在函数中，并删除map的k-v-不置nil\"><a class=\"header-anchor\" href=\"#情景3-map放在函数中，并删除map的k-v-不置nil\">¶</a>情景3: map放在函数中，并删除map的k/v,不置nil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tother()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">other</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\t<span class=\"comment\">//intMap = nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v3\"><a class=\"header-anchor\" href=\"#输出：-v3\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69458</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">71440</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">473</span> TotalAlloc = <span class=\"number\">492</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景4-map放在函数中，并删除map的k-v-map置为nil\"><a class=\"header-anchor\" href=\"#情景4-map放在函数中，并删除map的k-v-map置为nil\">¶</a>情景4: map放在函数中，并删除map的k/v,map置为nil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tother()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">other</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tintMap = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v4\"><a class=\"header-anchor\" href=\"#输出：-v4\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69714</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">70034</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">70098</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">160</span> TotalAlloc = <span class=\"number\">492</span> Sys = <span class=\"number\">70098</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景5-map定义放在局部变量中：\"><a class=\"header-anchor\" href=\"#情景5-map定义放在局部变量中：\">¶</a>情景5: map定义放在局部变量中：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tother()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">other</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tintMap = initMap(intMap)</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\t<span class=\"comment\">//intMap = nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">(intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> intMap</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v5\"><a class=\"header-anchor\" href=\"#输出：-v5\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69458</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">71440</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">158</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">160</span> TotalAlloc = <span class=\"number\">491</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"汇编输出：\"><a class=\"header-anchor\" href=\"#汇编输出：\">¶</a>汇编输出：</h5>\n<p>比较有意思的一行：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_051000.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XORL 异或运算符 </span><br><span class=\"line\"></span><br><span class=\"line\">XORL AX,AX ---&gt;将AX置0值</span><br></pre></td></tr></table></figure>\n<h4 id=\"delete函数：\"><a class=\"header-anchor\" href=\"#delete函数：\">¶</a>delete函数：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0125</span> <span class=\"number\">00293</span> (../<span class=\"number\">1126</span>/main.<span class=\"keyword\">go</span>:<span class=\"number\">26</span>)\tCALL\truntime.mapdelete_fast64(SB)</span><br></pre></td></tr></table></figure>\n<h5 id=\"mapdelete-fast64函数作用：\"><a class=\"header-anchor\" href=\"#mapdelete-fast64函数作用：\">¶</a>mapdelete_fast64函数作用：</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/map_fast64.go#L272\">点击Github查看</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_052140.png\" alt=\"\"></p>\n<blockquote>\n<p>有意思的是：map的设计就是这样，删除key，只是把这个槽位置empty，并没有释放内存.</p>\n</blockquote>\n<h3 id=\"Others\"><a class=\"header-anchor\" href=\"#Others\">¶</a>Others:</h3>\n<h4 id=\"其它场景：\"><a class=\"header-anchor\" href=\"#其它场景：\">¶</a>其它场景：</h4>\n<blockquote>\n<p>场景有很多，这里只是逻列最简单的，至于用指针之类的，有兴趣了再研究研究，方法都是一样的。</p>\n</blockquote>\n<h4 id=\"汇编代码生成\"><a class=\"header-anchor\" href=\"#汇编代码生成\">¶</a>汇编代码生成</h4>\n<ul>\n<li>详细见此文：<a href=\"https://blog.imrcrab.com/archives/2ce846ed.html\">「15」Plan9 汇编小记</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"最近有这么个坑\"><a class=\"header-anchor\" href=\"#最近有这么个坑\">¶</a>最近有这么个坑:</h3>\n<blockquote>\n<p>碰到内存泄露问题，大致是这样的：</p>\n</blockquote>\n<ul>\n<li>1、定义一个全局map</li>\n<li>2、给里面放值</li>\n<li>3、用完之后删除Key/value</li>\n</ul>\n<h3 id=\"问题：map删除完key后，Mem有没有被释放？\"><a class=\"header-anchor\" href=\"#问题：map删除完key后，Mem有没有被释放？\">¶</a>问题：map删除完key后，Mem有没有被释放？</h3>","more":"<h3 id=\"观察内存变化：\"><a class=\"header-anchor\" href=\"#观察内存变化：\">¶</a>观察内存变化：</h3>\n<h4 id=\"情景1-只删除Map的k-v\"><a class=\"header-anchor\" href=\"#情景1-只删除Map的k-v\">¶</a>情景1: 只删除Map的k/v</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\t<span class=\"comment\">//intMap = nil</span></span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：\"><a class=\"header-anchor\" href=\"#输出：\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">162</span> TotalAlloc = <span class=\"number\">162</span> Sys = <span class=\"number\">69714</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">487</span> Sys = <span class=\"number\">70290</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">473</span> TotalAlloc = <span class=\"number\">490</span> Sys = <span class=\"number\">70610</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">12</span>:<span class=\"number\">26</span> Alloc = <span class=\"number\">475</span> TotalAlloc = <span class=\"number\">494</span> Sys = <span class=\"number\">70610</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景2-删除map的k-v-并置map为nil\"><a class=\"header-anchor\" href=\"#情景2-删除map的k-v-并置map为nil\">¶</a>情景2: 删除map的k/v,并置map为nil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tintMap = <span class=\"literal\">nil</span></span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v2\"><a class=\"header-anchor\" href=\"#输出：-v2\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69714</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">71696</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">71760</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">15</span>:<span class=\"number\">40</span> Alloc = <span class=\"number\">160</span> TotalAlloc = <span class=\"number\">492</span> Sys = <span class=\"number\">71760</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景3-map放在函数中，并删除map的k-v-不置nil\"><a class=\"header-anchor\" href=\"#情景3-map放在函数中，并删除map的k-v-不置nil\">¶</a>情景3: map放在函数中，并删除map的k/v,不置nil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tother()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">other</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\t<span class=\"comment\">//intMap = nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v3\"><a class=\"header-anchor\" href=\"#输出：-v3\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69458</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">71440</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">18</span>:<span class=\"number\">35</span> Alloc = <span class=\"number\">473</span> TotalAlloc = <span class=\"number\">492</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景4-map放在函数中，并删除map的k-v-map置为nil\"><a class=\"header-anchor\" href=\"#情景4-map放在函数中，并删除map的k-v-map置为nil\">¶</a>情景4: map放在函数中，并删除map的k/v,map置为nil</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tother()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">other</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\tinitMap()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tintMap = <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v4\"><a class=\"header-anchor\" href=\"#输出：-v4\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69714</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">70034</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">471</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">70098</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">20</span>:<span class=\"number\">02</span> Alloc = <span class=\"number\">160</span> TotalAlloc = <span class=\"number\">492</span> Sys = <span class=\"number\">70098</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"情景5-map定义放在局部变量中：\"><a class=\"header-anchor\" href=\"#情景5-map定义放在局部变量中：\">¶</a>情景5: map定义放在局部变量中：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cnt = <span class=\"number\">8192</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tother()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">other</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span></span><br><span class=\"line\">\tintMap = initMap(intMap)</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">delete</span>(intMap, i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Println(<span class=\"built_in\">len</span>(intMap))</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tprintMemStats()</span><br><span class=\"line\">\t<span class=\"comment\">//intMap = nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initMap</span><span class=\"params\">(intMap <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tintMap = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">int</span>]<span class=\"type\">int</span>, cnt)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; cnt; i++ &#123;</span><br><span class=\"line\">\t\tintMap[i] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> intMap</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMemStats</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Alloc = %v TotalAlloc = %v Sys = %v NumGC = %v\\n&quot;</span>, m.Alloc/<span class=\"number\">1024</span>, m.TotalAlloc/<span class=\"number\">1024</span>, m.Sys/<span class=\"number\">1024</span>, m.NumGC)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出：-v5\"><a class=\"header-anchor\" href=\"#输出：-v5\">¶</a>输出：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">161</span> TotalAlloc = <span class=\"number\">161</span> Sys = <span class=\"number\">69458</span> NumGC = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">469</span> TotalAlloc = <span class=\"number\">484</span> Sys = <span class=\"number\">71440</span> NumGC = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> <span class=\"number\">8192</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">158</span> TotalAlloc = <span class=\"number\">488</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2021</span>/<span class=\"number\">01</span>/<span class=\"number\">06</span> <span class=\"number\">16</span>:<span class=\"number\">29</span>:<span class=\"number\">54</span> Alloc = <span class=\"number\">160</span> TotalAlloc = <span class=\"number\">491</span> Sys = <span class=\"number\">71504</span> NumGC = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"汇编输出：\"><a class=\"header-anchor\" href=\"#汇编输出：\">¶</a>汇编输出：</h5>\n<p>比较有意思的一行：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_051000.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XORL 异或运算符 </span><br><span class=\"line\"></span><br><span class=\"line\">XORL AX,AX ---&gt;将AX置0值</span><br></pre></td></tr></table></figure>\n<h4 id=\"delete函数：\"><a class=\"header-anchor\" href=\"#delete函数：\">¶</a>delete函数：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0125</span> <span class=\"number\">00293</span> (../<span class=\"number\">1126</span>/main.<span class=\"keyword\">go</span>:<span class=\"number\">26</span>)\tCALL\truntime.mapdelete_fast64(SB)</span><br></pre></td></tr></table></figure>\n<h5 id=\"mapdelete-fast64函数作用：\"><a class=\"header-anchor\" href=\"#mapdelete-fast64函数作用：\">¶</a>mapdelete_fast64函数作用：</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/map_fast64.go#L272\">点击Github查看</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_052140.png\" alt=\"\"></p>\n<blockquote>\n<p>有意思的是：map的设计就是这样，删除key，只是把这个槽位置empty，并没有释放内存.</p>\n</blockquote>\n<h3 id=\"Others\"><a class=\"header-anchor\" href=\"#Others\">¶</a>Others:</h3>\n<h4 id=\"其它场景：\"><a class=\"header-anchor\" href=\"#其它场景：\">¶</a>其它场景：</h4>\n<blockquote>\n<p>场景有很多，这里只是逻列最简单的，至于用指针之类的，有兴趣了再研究研究，方法都是一样的。</p>\n</blockquote>\n<h4 id=\"汇编代码生成\"><a class=\"header-anchor\" href=\"#汇编代码生成\">¶</a>汇编代码生成</h4>\n<ul>\n<li>详细见此文：<a href=\"https://blog.imrcrab.com/archives/2ce846ed.html\">「15」Plan9 汇编小记</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_051000.png","popularPost_tmp_gaData":{"updated":"Wed Jan 06 2021 12:00:17 GMT+0800 (中国标准时间)","title":"「29」map delete Mem不释放问题","path":"archives/2de36dd7.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210106_051000.png","excerpt":"<h3 id=\"Go-version\"><a class=\"header-anchor\" href=\"#Go-version\">¶</a>Go version:</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">7384</span> ◯  <span class=\"keyword\">go</span> version</span><br><span class=\"line\"><span class=\"keyword\">go</span> version go1<span class=\"number\">.14</span><span class=\"number\">.9</span> darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"最近有这么个坑\"><a class=\"header-anchor\" href=\"#最近有这么个坑\">¶</a>最近有这么个坑:</h3>\n<blockquote>\n<p>碰到内存泄露问题，大致是这样的：</p>\n</blockquote>\n<ul>\n<li>1、定义一个全局map</li>\n<li>2、给里面放值</li>\n<li>3、用完之后删除Key/value</li>\n</ul>\n<h3 id=\"问题：map删除完key后，Mem有没有被释放？\"><a class=\"header-anchor\" href=\"#问题：map删除完key后，Mem有没有被释放？\">¶</a>问题：map删除完key后，Mem有没有被释放？</h3>","date":{"_isAMomentObject":true,"_i":"2021-01-06T04:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-01-06T04:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Map","Hash"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5138},{"title":"「3」git cz规范提交","date":"2020-08-31T12:14:33.000Z","updated":"2020-08-31T12:14:33.000Z","keywords":"git,git commit,git提交规范","abbrlink":"458b44c2","_content":"\n### 定义\n\n[官方 specification](https://github.com/commitizen/cz-cli)\n简单的说为了代码提交更加规范\n\n\n### 场景\ngit commit使用\n![](https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png)\n\n### 使用步骤\n* 安装nodejs，版本建议最新.[官网](https://nodejs.org/zh-cn/) \n* 打开你的命令行：\n<!-- more -->\n```\n        输入：npm install -g commitizen\n        windows应该是cmd吧。\n        mac用终端或者iterm2都可以。\n```\n>提示以下信息即成功。\n```\n        -> % sudo npm install -g commitizen\n        Password:\n        npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\n        npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\n        /usr/local/bin/cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/git-cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/commitizen -> /usr/local/lib/node_modules/commitizen/bin/commitizen\n        + commitizen@4.2.1\n        updated 1 package in 8.132s\n```\n3、进入git项目中，执行下面命令初始化环境。\n```commitizen init cz-conventional-changelog --save --save-exact```\n\n4、在提交代码时使用\n>git cz 替换 git commit命令\n\n### 注意事项\n\n* 安装方式可选择全局安装\n```\nnpm install -g commitizen cz-conventional-changelog\necho '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n\n```","source":"_posts/3-git-cz规范提交.md","raw":"---\ntitle: 「3」git cz规范提交\ndate: '2020/08/31 20:14:33'\nupdated: '2020/08/31 20:14:33'\nkeywords: 'git,git commit,git提交规范'\ntags:\n  - Git\nabbrlink: 458b44c2\n---\n\n### 定义\n\n[官方 specification](https://github.com/commitizen/cz-cli)\n简单的说为了代码提交更加规范\n\n\n### 场景\ngit commit使用\n![](https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png)\n\n### 使用步骤\n* 安装nodejs，版本建议最新.[官网](https://nodejs.org/zh-cn/) \n* 打开你的命令行：\n<!-- more -->\n```\n        输入：npm install -g commitizen\n        windows应该是cmd吧。\n        mac用终端或者iterm2都可以。\n```\n>提示以下信息即成功。\n```\n        -> % sudo npm install -g commitizen\n        Password:\n        npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated\n        npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated\n        /usr/local/bin/cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/git-cz -> /usr/local/lib/node_modules/commitizen/bin/git-cz\n        /usr/local/bin/commitizen -> /usr/local/lib/node_modules/commitizen/bin/commitizen\n        + commitizen@4.2.1\n        updated 1 package in 8.132s\n```\n3、进入git项目中，执行下面命令初始化环境。\n```commitizen init cz-conventional-changelog --save --save-exact```\n\n4、在提交代码时使用\n>git cz 替换 git commit命令\n\n### 注意事项\n\n* 安装方式可选择全局安装\n```\nnpm install -g commitizen cz-conventional-changelog\necho '{ \"path\": \"cz-conventional-changelog\" }' > ~/.czrc\n\n```","slug":"3-git-cz规范提交","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4y0024zfqxarcr4n5t","content":"<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p><a href=\"https://github.com/commitizen/cz-cli\">官方 specification</a><br>\n简单的说为了代码提交更加规范</p>\n<h3 id=\"场景\"><a class=\"header-anchor\" href=\"#场景\">¶</a>场景</h3>\n<p>git commit使用<br>\n<img src=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\" alt=\"\"></p>\n<h3 id=\"使用步骤\"><a class=\"header-anchor\" href=\"#使用步骤\">¶</a>使用步骤</h3>\n<ul>\n<li>安装nodejs，版本建议最新.<a href=\"https://nodejs.org/zh-cn/\">官网</a></li>\n<li>打开你的命令行：</li>\n</ul>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：npm install -g commitizen</span><br><span class=\"line\">windows应该是cmd吧。</span><br><span class=\"line\">mac用终端或者iterm2都可以。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提示以下信息即成功。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; % sudo npm install -g commitizen</span><br><span class=\"line\">Password:</span><br><span class=\"line\">npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated</span><br><span class=\"line\">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class=\"line\">/usr/local/bin/cz -&gt; /usr/local/lib/node_modules/commitizen/bin/git-cz</span><br><span class=\"line\">/usr/local/bin/git-cz -&gt; /usr/local/lib/node_modules/commitizen/bin/git-cz</span><br><span class=\"line\">/usr/local/bin/commitizen -&gt; /usr/local/lib/node_modules/commitizen/bin/commitizen</span><br><span class=\"line\">+ commitizen@4.2.1</span><br><span class=\"line\">updated 1 package in 8.132s</span><br></pre></td></tr></table></figure>\n<p>3、进入git项目中，执行下面命令初始化环境。<br>\n<code>commitizen init cz-conventional-changelog --save --save-exact</code></p>\n<p>4、在提交代码时使用</p>\n<blockquote>\n<p>git cz 替换 git commit命令</p>\n</blockquote>\n<h3 id=\"注意事项\"><a class=\"header-anchor\" href=\"#注意事项\">¶</a>注意事项</h3>\n<ul>\n<li>安装方式可选择全局安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen cz-conventional-changelog</span><br><span class=\"line\">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p><a href=\"https://github.com/commitizen/cz-cli\">官方 specification</a><br>\n简单的说为了代码提交更加规范</p>\n<h3 id=\"场景\"><a class=\"header-anchor\" href=\"#场景\">¶</a>场景</h3>\n<p>git commit使用<br>\n<img src=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\" alt=\"\"></p>\n<h3 id=\"使用步骤\"><a class=\"header-anchor\" href=\"#使用步骤\">¶</a>使用步骤</h3>\n<ul>\n<li>安装nodejs，版本建议最新.<a href=\"https://nodejs.org/zh-cn/\">官网</a></li>\n<li>打开你的命令行：</li>\n</ul>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：npm install -g commitizen</span><br><span class=\"line\">windows应该是cmd吧。</span><br><span class=\"line\">mac用终端或者iterm2都可以。</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>提示以下信息即成功。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-&gt; % sudo npm install -g commitizen</span><br><span class=\"line\">Password:</span><br><span class=\"line\">npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url#deprecated</span><br><span class=\"line\">npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix#deprecated</span><br><span class=\"line\">/usr/local/bin/cz -&gt; /usr/local/lib/node_modules/commitizen/bin/git-cz</span><br><span class=\"line\">/usr/local/bin/git-cz -&gt; /usr/local/lib/node_modules/commitizen/bin/git-cz</span><br><span class=\"line\">/usr/local/bin/commitizen -&gt; /usr/local/lib/node_modules/commitizen/bin/commitizen</span><br><span class=\"line\">+ commitizen@4.2.1</span><br><span class=\"line\">updated 1 package in 8.132s</span><br></pre></td></tr></table></figure>\n<p>3、进入git项目中，执行下面命令初始化环境。<br>\n<code>commitizen init cz-conventional-changelog --save --save-exact</code></p>\n<p>4、在提交代码时使用</p>\n<blockquote>\n<p>git cz 替换 git commit命令</p>\n</blockquote>\n<h3 id=\"注意事项\"><a class=\"header-anchor\" href=\"#注意事项\">¶</a>注意事项</h3>\n<ul>\n<li>安装方式可选择全局安装</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g commitizen cz-conventional-changelog</span><br><span class=\"line\">echo &#x27;&#123; &quot;path&quot;: &quot;cz-conventional-changelog&quot; &#125;&#x27; &gt; ~/.czrc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png","popularPost_tmp_gaData":{"updated":"Mon Aug 31 2020 20:14:33 GMT+0800 (中国标准时间)","title":"「3」git cz规范提交","path":"archives/458b44c2.html","eyeCatchImage":"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png","excerpt":"<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p><a href=\"https://github.com/commitizen/cz-cli\">官方 specification</a><br>\n简单的说为了代码提交更加规范</p>\n<h3 id=\"场景\"><a class=\"header-anchor\" href=\"#场景\">¶</a>场景</h3>\n<p>git commit使用<br>\n<img src=\"https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png\" alt=\"\"></p>\n<h3 id=\"使用步骤\"><a class=\"header-anchor\" href=\"#使用步骤\">¶</a>使用步骤</h3>\n<ul>\n<li>安装nodejs，版本建议最新.<a href=\"https://nodejs.org/zh-cn/\">官网</a></li>\n<li>打开你的命令行：</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2020-08-31T12:14:33.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-08-31T12:14:33.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":895},{"title":"「30」redis rdb源码-1","date":"2021-01-25T14:00:17.000Z","updated":"2021-03-15T23:01:00.000Z","keywords":"redis,RDB","abbrlink":"44b34745","_content":"\n>RDB和AOF常常被提起,好奇RDB这个到底是怎么实现的,这样才能运用的更加灵活和精准.\n### 学完预期的目标:\n* 学习数据异步处理流程 \n* RDB持久化数据的关键过程\n* RDB的缺点\n* RDB适用的场景\n* RDB改进点或bug?\n* 数据持久化,应该是个什么过程?\n<!--more-->\n\n### Version\n\n>Redis 6.0.9\n\n### 实现流程:\n\n* 这里罗列了几个比较重要的过程:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-rdb-1.png)\n\n#### rdbSaveBackground\n```c++\nint rdbSaveBackground(char *filename, rdbSaveInfo *rsi) {\n    pid_t childpid;\n\n    if (hasActiveChildProcess()) return C_ERR;\n\n    server.dirty_before_bgsave = server.dirty;\n    server.lastbgsave_try = time(NULL);\n    openChildInfoPipe();\n\n    if ((childpid = redisFork(CHILD_TYPE_RDB)) == 0) { // fork一个子进程\n        int retval;\n\n        /* Child */\n        redisSetProcTitle(\"redis-rdb-bgsave\"); // 设置标题\n        redisSetCpuAffinity(server.bgsave_cpulist); // 设置cpu亲和力\n        retval = rdbSave(filename,rsi); // rdb保存\n        if (retval == C_OK) {\n            sendChildCOWInfo(CHILD_TYPE_RDB, \"RDB\");\n        }\n        exitFromChild((retval == C_OK) ? 0 : 1); // 子进程退出\n    } else {\n        /* Parent */\n        if (childpid == -1) { // -1 发生错误了\n            closeChildInfoPipe();\n            server.lastbgsave_status = C_ERR;\n            serverLog(LL_WARNING,\"Can't save in background: fork: %s\",\n                strerror(errno));\n            return C_ERR;\n        }\n        serverLog(LL_NOTICE,\"Background saving started by pid %d\",childpid); // 下面是一些重新初始化的部分\n        server.rdb_save_time_start = time(NULL);\n        server.rdb_child_pid = childpid;\n        server.rdb_child_type = RDB_CHILD_TYPE_DISK;\n        return C_OK;\n    }\n    return C_OK; /* unreached */\n}\n\n```\n\n##### rdbSaveInfo「struct」\n```c++\n/* This structure can be optionally passed to RDB save/load functions in\n * order to implement additional functionalities, by storing and loading\n * metadata to the RDB file.\n *\n * Currently the only use is to select a DB at load time, useful in\n * replication in order to make sure that chained slaves (slaves of slaves)\n * select the correct DB and are able to accept the stream coming from the\n * top-level master. */\ntypedef struct rdbSaveInfo {\n    /* Used saving and loading. */\n    int repl_stream_db;  /* DB to select in server.master client. */ // 选中复制的db\n\n    /* Used only loading. */\n    int repl_id_is_set;  /* True if repl_id field is set. */\n    char repl_id[CONFIG_RUN_ID_SIZE+1];     /* Replication ID. */ 副本ID\n    long long repl_offset;                  /* Replication offset. */ 偏移量\n} rdbSaveInfo;\n```\n\n#### rdbSave\n```c++\n/* Save the DB on disk. Return C_ERR on error, C_OK on success. */\nint rdbSave(char *filename, rdbSaveInfo *rsi) {\n    char tmpfile[256];\n    char cwd[MAXPATHLEN]; /* Current working dir path for error messages. */\n    FILE *fp = NULL;\n    rio rdb;\n    int error = 0;\n\n    snprintf(tmpfile,256,\"temp-%d.rdb\", (int) getpid()); // 临时文件命名 pid\n    fp = fopen(tmpfile,\"w\"); // 只读模式\n    if (!fp) {\n        char *cwdp = getcwd(cwd,MAXPATHLEN);\n        serverLog(LL_WARNING,\n            \"Failed opening the RDB file %s (in server root dir %s) \"\n            \"for saving: %s\",\n            filename,\n            cwdp ? cwdp : \"unknown\",\n            strerror(errno));\n        return C_ERR;\n    }\n\n    rioInitWithFile(&rdb,fp); // rdb初始化\n    startSaving(RDBFLAGS_NONE);\n\n    if (server.rdb_save_incremental_fsync)\n        rioSetAutoSync(&rdb,REDIS_AUTOSYNC_BYTES);\n\n    if (rdbSaveRio(&rdb,&error,RDBFLAGS_NONE,rsi) == C_ERR) { // rdb保存「重点」\n        errno = error;\n        goto werr;\n    }\n\n    /* Make sure data will not remain on the OS's output buffers */ // 刷新fp文件中内容\n    if (fflush(fp)) goto werr;\n    if (fsync(fileno(fp))) goto werr;\n    if (fclose(fp)) { fp = NULL; goto werr; }\n    fp = NULL;\n    \n    /* Use RENAME to make sure the DB file is changed atomically only\n     * if the generate DB file is ok. */\n    if (rename(tmpfile,filename) == -1) { // 临时文件重新命名\n        char *cwdp = getcwd(cwd,MAXPATHLEN);\n        serverLog(LL_WARNING,\n            \"Error moving temp DB file %s on the final \"\n            \"destination %s (in server root dir %s): %s\",\n            tmpfile,\n            filename,\n            cwdp ? cwdp : \"unknown\",\n            strerror(errno));\n        unlink(tmpfile);\n        stopSaving(0);\n        return C_ERR;\n    }\n\n    serverLog(LL_NOTICE,\"DB saved on disk\"); // 日志保存\n    server.dirty = 0; // 最后的变量该置空&该保存状态的\n    server.lastsave = time(NULL);\n    server.lastbgsave_status = C_OK;\n    stopSaving(1); // 停止保存\n    return C_OK;\n\nwerr:\n    serverLog(LL_WARNING,\"Write error saving DB on disk: %s\", strerror(errno));\n    if (fp) fclose(fp);\n    unlink(tmpfile);\n    stopSaving(0);\n    return C_ERR;\n}\n\n```\n\n#### rdbSaveRio\n```c\n\n/* Produces a dump of the database in RDB format sending it to the specified\n * Redis I/O channel. On success C_OK is returned, otherwise C_ERR\n * is returned and part of the output, or all the output, can be\n * missing because of I/O errors.\n *\n * When the function returns C_ERR and if 'error' is not NULL, the\n * integer pointed by 'error' is set to the value of errno just after the I/O\n * error. */\nint rdbSaveRio(rio *rdb, int *error, int rdbflags, rdbSaveInfo *rsi) {\n    dictIterator *di = NULL;\n    dictEntry *de;\n    char magic[10];\n    int j;\n    uint64_t cksum;\n    size_t processed = 0;\n\n    if (server.rdb_checksum)\n        rdb->update_cksum = rioGenericUpdateChecksum;\n    snprintf(magic,sizeof(magic),\"REDIS%04d\",RDB_VERSION); // 04指的是版本号\n    if (rdbWriteRaw(rdb,magic,9) == -1) goto werr;\n    if (rdbSaveInfoAuxFields(rdb,rdbflags,rsi) == -1) goto werr; // redis辅助信息，返回了-1，代表还是比较重要的\n    if (rdbSaveModulesAux(rdb, REDISMODULE_AUX_BEFORE_RDB) == -1) goto werr; // 模块化信息\n\n    for (j = 0; j < server.dbnum; j++) {\n        redisDb *db = server.db+j;\n        dict *d = db->dict;\n        if (dictSize(d) == 0) continue; // 大小为0，则跳过\n        di = dictGetSafeIterator(d); // 分配内存，返回迭代器\n\n        /* Write the SELECT DB opcode */\n        if (rdbSaveType(rdb,RDB_OPCODE_SELECTDB) == -1) goto werr;\n        if (rdbSaveLen(rdb,j) == -1) goto werr;\n\n        /* Write the RESIZE DB opcode. */\n        uint64_t db_size, expires_size;\n        db_size = dictSize(db->dict);\n        expires_size = dictSize(db->expires);\n        if (rdbSaveType(rdb,RDB_OPCODE_RESIZEDB) == -1) goto werr;\n        if (rdbSaveLen(rdb,db_size) == -1) goto werr;\n        if (rdbSaveLen(rdb,expires_size) == -1) goto werr;\n\n        /* Iterate this DB writing every entry */ // 遍历每一个entry\n        while((de = dictNext(di)) != NULL) { // dictNext为函数取值的方式\n            sds keystr = dictGetKey(de); // 获取key\n            robj key, *o = dictGetVal(de); //获取value\n            long long expire;\n\n            initStaticStringObject(key,keystr); // 初始化obj，「类型，数量，指针指向的地址」\n            expire = getExpire(db,&key); // 通过key来找过期时间\n            if (rdbSaveKeyValuePair(rdb,&key,o,expire) == -1) goto werr;\n\n            /* When this RDB is produced as part of an AOF rewrite, move\n             * accumulated diff from parent to child while rewriting in\n             * order to have a smaller final write. */  // 把父级别的积累缓冲到缓冲区，在重写完成后串联在一起。\n            if (rdbflags & RDBFLAGS_AOF_PREAMBLE &&\n                rdb->processed_bytes > processed+AOF_READ_DIFF_INTERVAL_BYTES)\n            {\n                processed = rdb->processed_bytes;\n                aofReadDiffFromParent();\n            }\n        }\n        dictReleaseIterator(di); // 内存释放，在每一次循环中，用完就释放，「内存周期管理」\n        di = NULL; /* So that we don't release it again on error. */\n    }\n\n    /* If we are storing the replication information on disk, persist\n     * the script cache as well: on successful PSYNC after a restart, we need\n     * to be able to process any EVALSHA inside the replication backlog the\n     * master will send us. */\n    if (rsi && dictSize(server.lua_scripts)) {\n        di = dictGetIterator(server.lua_scripts);\n        while((de = dictNext(di)) != NULL) {\n            robj *body = dictGetVal(de);\n            if (rdbSaveAuxField(rdb,\"lua\",3,body->ptr,sdslen(body->ptr)) == -1)\n                goto werr;\n        }\n        dictReleaseIterator(di);\n        di = NULL; /* So that we don't release it again on error. */\n    }\n\n    if (rdbSaveModulesAux(rdb, REDISMODULE_AUX_AFTER_RDB) == -1) goto werr; // 再次保存辅助的信息，「上一步可能会改变」\n\n    /* EOF opcode */\n    if (rdbSaveType(rdb,RDB_OPCODE_EOF) == -1) goto werr; // 保存文件类型，结束位置的标志\n\n    /* CRC64 checksum. It will be zero if checksum computation is disabled, the\n     * loading code skips the check in this case. */\n    cksum = rdb->cksum;\n    memrev64ifbe(&cksum);\n    if (rioWrite(rdb,&cksum,8) == 0) goto werr; // checksum 校验位插入文件最后\n    return C_OK; // 返回0，一切ok\n\nwerr:\n    if (error) *error = errno;\n    if (di) dictReleaseIterator(di); // 一旦错误发生后，及时释放内存\n    return C_ERR;\n}\n\n```\n\n#### rdbSaveKeyValuePair实现\n\n* 错误返回-1,正常返回1,其它返回0\n* 主逻辑只需负责入参和返回值「抽象」\n* 优先级: expire > lru > lfu > [<key,values>]\n\n\n```c\n/* Save a key-value pair, with expire time, type, key, value.\n * On error -1 is returned.\n * On success if the key was actually saved 1 is returned, otherwise 0\n * is returned (the key was already expired). */\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val, long long expiretime) {\n    int savelru = server.maxmemory_policy & MAXMEMORY_FLAG_LRU;\n    int savelfu = server.maxmemory_policy & MAXMEMORY_FLAG_LFU;\n\n    //  保存过期时间\n    /* Save the expire time */\n    if (expiretime != -1) {\n        if (rdbSaveType(rdb,RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\n    }\n\n    // LRU方式保存\n    /* Save the LRU info. */\n    if (savelru) {\n        uint64_t idletime = estimateObjectIdleTime(val);\n        idletime /= 1000; /* Using seconds is enough and requires less space.*/\n        if (rdbSaveType(rdb,RDB_OPCODE_IDLE) == -1) return -1;\n        if (rdbSaveLen(rdb,idletime) == -1) return -1;\n    }\n\n    // LFU方式保存\n    /* Save the LFU info. */\n    if (savelfu) {\n        uint8_t buf[1];\n        buf[0] = LFUDecrAndReturn(val);\n        /* We can encode this in exactly two bytes: the opcode and an 8\n         * bit counter, since the frequency is logarithmic with a 0-255 range.\n         * Note that we do not store the halving time because to reset it\n         * a single time when loading does not affect the frequency much. */\n        if (rdbSaveType(rdb,RDB_OPCODE_FREQ) == -1) return -1;\n        if (rdbWriteRaw(rdb,buf,1) == -1) return -1;\n    }\n\n    // 保存类型、key、value等\n    /* Save type, key, value */\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\n    if (rdbSaveObject(rdb,val,key) == -1) return -1;\n\n    // 延迟请求\n    /* Delay return if required (for testing) */\n    if (server.rdb_key_save_delay)\n        usleep(server.rdb_key_save_delay);\n\n    return 1;\n}\n\n```\n\n### 使用场景:「2021-03-16」\n* 执行command\n* 条件命令 conf配置\n* shutdown时\n\n#### rdbSave usage location:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_083902.png)\n\n>关于rdbSaveBackgroud的使用地方:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_085205.png)\n\n### 关于rdbsave和redis如何联系的？\n>写到这里的才慢慢理解这个里面的关系，如果你问我为啥不在前面就列出来关系图呢？\n\n>那我只能说这是一个学习的正常流程，抓住其中的关键点，先看实现，然后再向外扩散，由内而外.\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-48-23.png)\n\n\n**如果区分下redis的上下层面的关系，那就可以大致分为三层：command+底层实现+最底层的IO操作等.**\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-58-41.png)\n\n**再细分下中间的过程**\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-14-13-35.png)\n\n### Todo\n- [x] rdb快速备份原因: fork主进程\n- [ ] 故障「断电」等恢复机制\n- [ ] 主备复制怎么进行的？\n\n### End","source":"_posts/30-redis-rdb数据保存.md","raw":"---\ntitle: 「30」redis rdb源码-1\ndate: '2021/1/25 22:00:17'\nupdated: '2021/03/16 07:01:00'\nkeywords: 'redis,RDB'\ntags:\n  - Day\n  - Redis\n  - RDB\n  - 源码\nabbrlink: 44b34745\n---\n\n>RDB和AOF常常被提起,好奇RDB这个到底是怎么实现的,这样才能运用的更加灵活和精准.\n### 学完预期的目标:\n* 学习数据异步处理流程 \n* RDB持久化数据的关键过程\n* RDB的缺点\n* RDB适用的场景\n* RDB改进点或bug?\n* 数据持久化,应该是个什么过程?\n<!--more-->\n\n### Version\n\n>Redis 6.0.9\n\n### 实现流程:\n\n* 这里罗列了几个比较重要的过程:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-rdb-1.png)\n\n#### rdbSaveBackground\n```c++\nint rdbSaveBackground(char *filename, rdbSaveInfo *rsi) {\n    pid_t childpid;\n\n    if (hasActiveChildProcess()) return C_ERR;\n\n    server.dirty_before_bgsave = server.dirty;\n    server.lastbgsave_try = time(NULL);\n    openChildInfoPipe();\n\n    if ((childpid = redisFork(CHILD_TYPE_RDB)) == 0) { // fork一个子进程\n        int retval;\n\n        /* Child */\n        redisSetProcTitle(\"redis-rdb-bgsave\"); // 设置标题\n        redisSetCpuAffinity(server.bgsave_cpulist); // 设置cpu亲和力\n        retval = rdbSave(filename,rsi); // rdb保存\n        if (retval == C_OK) {\n            sendChildCOWInfo(CHILD_TYPE_RDB, \"RDB\");\n        }\n        exitFromChild((retval == C_OK) ? 0 : 1); // 子进程退出\n    } else {\n        /* Parent */\n        if (childpid == -1) { // -1 发生错误了\n            closeChildInfoPipe();\n            server.lastbgsave_status = C_ERR;\n            serverLog(LL_WARNING,\"Can't save in background: fork: %s\",\n                strerror(errno));\n            return C_ERR;\n        }\n        serverLog(LL_NOTICE,\"Background saving started by pid %d\",childpid); // 下面是一些重新初始化的部分\n        server.rdb_save_time_start = time(NULL);\n        server.rdb_child_pid = childpid;\n        server.rdb_child_type = RDB_CHILD_TYPE_DISK;\n        return C_OK;\n    }\n    return C_OK; /* unreached */\n}\n\n```\n\n##### rdbSaveInfo「struct」\n```c++\n/* This structure can be optionally passed to RDB save/load functions in\n * order to implement additional functionalities, by storing and loading\n * metadata to the RDB file.\n *\n * Currently the only use is to select a DB at load time, useful in\n * replication in order to make sure that chained slaves (slaves of slaves)\n * select the correct DB and are able to accept the stream coming from the\n * top-level master. */\ntypedef struct rdbSaveInfo {\n    /* Used saving and loading. */\n    int repl_stream_db;  /* DB to select in server.master client. */ // 选中复制的db\n\n    /* Used only loading. */\n    int repl_id_is_set;  /* True if repl_id field is set. */\n    char repl_id[CONFIG_RUN_ID_SIZE+1];     /* Replication ID. */ 副本ID\n    long long repl_offset;                  /* Replication offset. */ 偏移量\n} rdbSaveInfo;\n```\n\n#### rdbSave\n```c++\n/* Save the DB on disk. Return C_ERR on error, C_OK on success. */\nint rdbSave(char *filename, rdbSaveInfo *rsi) {\n    char tmpfile[256];\n    char cwd[MAXPATHLEN]; /* Current working dir path for error messages. */\n    FILE *fp = NULL;\n    rio rdb;\n    int error = 0;\n\n    snprintf(tmpfile,256,\"temp-%d.rdb\", (int) getpid()); // 临时文件命名 pid\n    fp = fopen(tmpfile,\"w\"); // 只读模式\n    if (!fp) {\n        char *cwdp = getcwd(cwd,MAXPATHLEN);\n        serverLog(LL_WARNING,\n            \"Failed opening the RDB file %s (in server root dir %s) \"\n            \"for saving: %s\",\n            filename,\n            cwdp ? cwdp : \"unknown\",\n            strerror(errno));\n        return C_ERR;\n    }\n\n    rioInitWithFile(&rdb,fp); // rdb初始化\n    startSaving(RDBFLAGS_NONE);\n\n    if (server.rdb_save_incremental_fsync)\n        rioSetAutoSync(&rdb,REDIS_AUTOSYNC_BYTES);\n\n    if (rdbSaveRio(&rdb,&error,RDBFLAGS_NONE,rsi) == C_ERR) { // rdb保存「重点」\n        errno = error;\n        goto werr;\n    }\n\n    /* Make sure data will not remain on the OS's output buffers */ // 刷新fp文件中内容\n    if (fflush(fp)) goto werr;\n    if (fsync(fileno(fp))) goto werr;\n    if (fclose(fp)) { fp = NULL; goto werr; }\n    fp = NULL;\n    \n    /* Use RENAME to make sure the DB file is changed atomically only\n     * if the generate DB file is ok. */\n    if (rename(tmpfile,filename) == -1) { // 临时文件重新命名\n        char *cwdp = getcwd(cwd,MAXPATHLEN);\n        serverLog(LL_WARNING,\n            \"Error moving temp DB file %s on the final \"\n            \"destination %s (in server root dir %s): %s\",\n            tmpfile,\n            filename,\n            cwdp ? cwdp : \"unknown\",\n            strerror(errno));\n        unlink(tmpfile);\n        stopSaving(0);\n        return C_ERR;\n    }\n\n    serverLog(LL_NOTICE,\"DB saved on disk\"); // 日志保存\n    server.dirty = 0; // 最后的变量该置空&该保存状态的\n    server.lastsave = time(NULL);\n    server.lastbgsave_status = C_OK;\n    stopSaving(1); // 停止保存\n    return C_OK;\n\nwerr:\n    serverLog(LL_WARNING,\"Write error saving DB on disk: %s\", strerror(errno));\n    if (fp) fclose(fp);\n    unlink(tmpfile);\n    stopSaving(0);\n    return C_ERR;\n}\n\n```\n\n#### rdbSaveRio\n```c\n\n/* Produces a dump of the database in RDB format sending it to the specified\n * Redis I/O channel. On success C_OK is returned, otherwise C_ERR\n * is returned and part of the output, or all the output, can be\n * missing because of I/O errors.\n *\n * When the function returns C_ERR and if 'error' is not NULL, the\n * integer pointed by 'error' is set to the value of errno just after the I/O\n * error. */\nint rdbSaveRio(rio *rdb, int *error, int rdbflags, rdbSaveInfo *rsi) {\n    dictIterator *di = NULL;\n    dictEntry *de;\n    char magic[10];\n    int j;\n    uint64_t cksum;\n    size_t processed = 0;\n\n    if (server.rdb_checksum)\n        rdb->update_cksum = rioGenericUpdateChecksum;\n    snprintf(magic,sizeof(magic),\"REDIS%04d\",RDB_VERSION); // 04指的是版本号\n    if (rdbWriteRaw(rdb,magic,9) == -1) goto werr;\n    if (rdbSaveInfoAuxFields(rdb,rdbflags,rsi) == -1) goto werr; // redis辅助信息，返回了-1，代表还是比较重要的\n    if (rdbSaveModulesAux(rdb, REDISMODULE_AUX_BEFORE_RDB) == -1) goto werr; // 模块化信息\n\n    for (j = 0; j < server.dbnum; j++) {\n        redisDb *db = server.db+j;\n        dict *d = db->dict;\n        if (dictSize(d) == 0) continue; // 大小为0，则跳过\n        di = dictGetSafeIterator(d); // 分配内存，返回迭代器\n\n        /* Write the SELECT DB opcode */\n        if (rdbSaveType(rdb,RDB_OPCODE_SELECTDB) == -1) goto werr;\n        if (rdbSaveLen(rdb,j) == -1) goto werr;\n\n        /* Write the RESIZE DB opcode. */\n        uint64_t db_size, expires_size;\n        db_size = dictSize(db->dict);\n        expires_size = dictSize(db->expires);\n        if (rdbSaveType(rdb,RDB_OPCODE_RESIZEDB) == -1) goto werr;\n        if (rdbSaveLen(rdb,db_size) == -1) goto werr;\n        if (rdbSaveLen(rdb,expires_size) == -1) goto werr;\n\n        /* Iterate this DB writing every entry */ // 遍历每一个entry\n        while((de = dictNext(di)) != NULL) { // dictNext为函数取值的方式\n            sds keystr = dictGetKey(de); // 获取key\n            robj key, *o = dictGetVal(de); //获取value\n            long long expire;\n\n            initStaticStringObject(key,keystr); // 初始化obj，「类型，数量，指针指向的地址」\n            expire = getExpire(db,&key); // 通过key来找过期时间\n            if (rdbSaveKeyValuePair(rdb,&key,o,expire) == -1) goto werr;\n\n            /* When this RDB is produced as part of an AOF rewrite, move\n             * accumulated diff from parent to child while rewriting in\n             * order to have a smaller final write. */  // 把父级别的积累缓冲到缓冲区，在重写完成后串联在一起。\n            if (rdbflags & RDBFLAGS_AOF_PREAMBLE &&\n                rdb->processed_bytes > processed+AOF_READ_DIFF_INTERVAL_BYTES)\n            {\n                processed = rdb->processed_bytes;\n                aofReadDiffFromParent();\n            }\n        }\n        dictReleaseIterator(di); // 内存释放，在每一次循环中，用完就释放，「内存周期管理」\n        di = NULL; /* So that we don't release it again on error. */\n    }\n\n    /* If we are storing the replication information on disk, persist\n     * the script cache as well: on successful PSYNC after a restart, we need\n     * to be able to process any EVALSHA inside the replication backlog the\n     * master will send us. */\n    if (rsi && dictSize(server.lua_scripts)) {\n        di = dictGetIterator(server.lua_scripts);\n        while((de = dictNext(di)) != NULL) {\n            robj *body = dictGetVal(de);\n            if (rdbSaveAuxField(rdb,\"lua\",3,body->ptr,sdslen(body->ptr)) == -1)\n                goto werr;\n        }\n        dictReleaseIterator(di);\n        di = NULL; /* So that we don't release it again on error. */\n    }\n\n    if (rdbSaveModulesAux(rdb, REDISMODULE_AUX_AFTER_RDB) == -1) goto werr; // 再次保存辅助的信息，「上一步可能会改变」\n\n    /* EOF opcode */\n    if (rdbSaveType(rdb,RDB_OPCODE_EOF) == -1) goto werr; // 保存文件类型，结束位置的标志\n\n    /* CRC64 checksum. It will be zero if checksum computation is disabled, the\n     * loading code skips the check in this case. */\n    cksum = rdb->cksum;\n    memrev64ifbe(&cksum);\n    if (rioWrite(rdb,&cksum,8) == 0) goto werr; // checksum 校验位插入文件最后\n    return C_OK; // 返回0，一切ok\n\nwerr:\n    if (error) *error = errno;\n    if (di) dictReleaseIterator(di); // 一旦错误发生后，及时释放内存\n    return C_ERR;\n}\n\n```\n\n#### rdbSaveKeyValuePair实现\n\n* 错误返回-1,正常返回1,其它返回0\n* 主逻辑只需负责入参和返回值「抽象」\n* 优先级: expire > lru > lfu > [<key,values>]\n\n\n```c\n/* Save a key-value pair, with expire time, type, key, value.\n * On error -1 is returned.\n * On success if the key was actually saved 1 is returned, otherwise 0\n * is returned (the key was already expired). */\nint rdbSaveKeyValuePair(rio *rdb, robj *key, robj *val, long long expiretime) {\n    int savelru = server.maxmemory_policy & MAXMEMORY_FLAG_LRU;\n    int savelfu = server.maxmemory_policy & MAXMEMORY_FLAG_LFU;\n\n    //  保存过期时间\n    /* Save the expire time */\n    if (expiretime != -1) {\n        if (rdbSaveType(rdb,RDB_OPCODE_EXPIRETIME_MS) == -1) return -1;\n        if (rdbSaveMillisecondTime(rdb,expiretime) == -1) return -1;\n    }\n\n    // LRU方式保存\n    /* Save the LRU info. */\n    if (savelru) {\n        uint64_t idletime = estimateObjectIdleTime(val);\n        idletime /= 1000; /* Using seconds is enough and requires less space.*/\n        if (rdbSaveType(rdb,RDB_OPCODE_IDLE) == -1) return -1;\n        if (rdbSaveLen(rdb,idletime) == -1) return -1;\n    }\n\n    // LFU方式保存\n    /* Save the LFU info. */\n    if (savelfu) {\n        uint8_t buf[1];\n        buf[0] = LFUDecrAndReturn(val);\n        /* We can encode this in exactly two bytes: the opcode and an 8\n         * bit counter, since the frequency is logarithmic with a 0-255 range.\n         * Note that we do not store the halving time because to reset it\n         * a single time when loading does not affect the frequency much. */\n        if (rdbSaveType(rdb,RDB_OPCODE_FREQ) == -1) return -1;\n        if (rdbWriteRaw(rdb,buf,1) == -1) return -1;\n    }\n\n    // 保存类型、key、value等\n    /* Save type, key, value */\n    if (rdbSaveObjectType(rdb,val) == -1) return -1;\n    if (rdbSaveStringObject(rdb,key) == -1) return -1;\n    if (rdbSaveObject(rdb,val,key) == -1) return -1;\n\n    // 延迟请求\n    /* Delay return if required (for testing) */\n    if (server.rdb_key_save_delay)\n        usleep(server.rdb_key_save_delay);\n\n    return 1;\n}\n\n```\n\n### 使用场景:「2021-03-16」\n* 执行command\n* 条件命令 conf配置\n* shutdown时\n\n#### rdbSave usage location:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_083902.png)\n\n>关于rdbSaveBackgroud的使用地方:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_085205.png)\n\n### 关于rdbsave和redis如何联系的？\n>写到这里的才慢慢理解这个里面的关系，如果你问我为啥不在前面就列出来关系图呢？\n\n>那我只能说这是一个学习的正常流程，抓住其中的关键点，先看实现，然后再向外扩散，由内而外.\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-48-23.png)\n\n\n**如果区分下redis的上下层面的关系，那就可以大致分为三层：command+底层实现+最底层的IO操作等.**\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-58-41.png)\n\n**再细分下中间的过程**\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-14-13-35.png)\n\n### Todo\n- [x] rdb快速备份原因: fork主进程\n- [ ] 故障「断电」等恢复机制\n- [ ] 主备复制怎么进行的？\n\n### End","slug":"30-redis-rdb数据保存","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4y0026zfqx1wy50tnl","content":"<blockquote>\n<p>RDB和AOF常常被提起,好奇RDB这个到底是怎么实现的,这样才能运用的更加灵活和精准.</p>\n</blockquote>\n<h3 id=\"学完预期的目标\"><a class=\"header-anchor\" href=\"#学完预期的目标\">¶</a>学完预期的目标:</h3>\n<ul>\n<li>学习数据异步处理流程</li>\n<li>RDB持久化数据的关键过程</li>\n<li>RDB的缺点</li>\n<li>RDB适用的场景</li>\n<li>RDB改进点或bug?</li>\n<li>数据持久化,应该是个什么过程?</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"Version\"><a class=\"header-anchor\" href=\"#Version\">¶</a>Version</h3>\n<blockquote>\n<p>Redis 6.0.9</p>\n</blockquote>\n<h3 id=\"实现流程\"><a class=\"header-anchor\" href=\"#实现流程\">¶</a>实现流程:</h3>\n<ul>\n<li>这里罗列了几个比较重要的过程:</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-rdb-1.png\" alt=\"\"></p>\n<h4 id=\"rdbSaveBackground\"><a class=\"header-anchor\" href=\"#rdbSaveBackground\">¶</a>rdbSaveBackground</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rdbSaveBackground</span><span class=\"params\">(<span class=\"type\">char</span> *filename, rdbSaveInfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> childpid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">hasActiveChildProcess</span>()) <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.dirty_before_bgsave = server.dirty;</span><br><span class=\"line\">    server.lastbgsave_try = <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">openChildInfoPipe</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((childpid = <span class=\"built_in\">redisFork</span>(CHILD_TYPE_RDB)) == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// fork一个子进程</span></span><br><span class=\"line\">        <span class=\"type\">int</span> retval;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Child */</span></span><br><span class=\"line\">        <span class=\"built_in\">redisSetProcTitle</span>(<span class=\"string\">&quot;redis-rdb-bgsave&quot;</span>); <span class=\"comment\">// 设置标题</span></span><br><span class=\"line\">        <span class=\"built_in\">redisSetCpuAffinity</span>(server.bgsave_cpulist); <span class=\"comment\">// 设置cpu亲和力</span></span><br><span class=\"line\">        retval = <span class=\"built_in\">rdbSave</span>(filename,rsi); <span class=\"comment\">// rdb保存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (retval == C_OK) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sendChildCOWInfo</span>(CHILD_TYPE_RDB, <span class=\"string\">&quot;RDB&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">exitFromChild</span>((retval == C_OK) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>); <span class=\"comment\">// 子进程退出</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Parent */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childpid == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// -1 发生错误了</span></span><br><span class=\"line\">            <span class=\"built_in\">closeChildInfoPipe</span>();</span><br><span class=\"line\">            server.lastbgsave_status = C_ERR;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Can&#x27;t save in background: fork: %s&quot;</span>,</span><br><span class=\"line\">                <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;Background saving started by pid %d&quot;</span>,childpid); <span class=\"comment\">// 下面是一些重新初始化的部分</span></span><br><span class=\"line\">        server.rdb_save_time_start = <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        server.rdb_child_pid = childpid;</span><br><span class=\"line\">        server.rdb_child_type = RDB_CHILD_TYPE_DISK;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK; <span class=\"comment\">/* unreached */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"rdbSaveInfo「struct」\"><a class=\"header-anchor\" href=\"#rdbSaveInfo「struct」\">¶</a>rdbSaveInfo「struct」</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This structure can be optionally passed to RDB save/load functions in</span></span><br><span class=\"line\"><span class=\"comment\"> * order to implement additional functionalities, by storing and loading</span></span><br><span class=\"line\"><span class=\"comment\"> * metadata to the RDB file.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Currently the only use is to select a DB at load time, useful in</span></span><br><span class=\"line\"><span class=\"comment\"> * replication in order to make sure that chained slaves (slaves of slaves)</span></span><br><span class=\"line\"><span class=\"comment\"> * select the correct DB and are able to accept the stream coming from the</span></span><br><span class=\"line\"><span class=\"comment\"> * top-level master. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">rdbSaveInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Used saving and loading. */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> repl_stream_db;  <span class=\"comment\">/* DB to select in server.master client. */</span> <span class=\"comment\">// 选中复制的db</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Used only loading. */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> repl_id_is_set;  <span class=\"comment\">/* True if repl_id field is set. */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> repl_id[CONFIG_RUN_ID_SIZE+<span class=\"number\">1</span>];     <span class=\"comment\">/* Replication ID. */</span> 副本ID</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> repl_offset;                  <span class=\"comment\">/* Replication offset. */</span> 偏移量</span><br><span class=\"line\">&#125; rdbSaveInfo;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rdbSave\"><a class=\"header-anchor\" href=\"#rdbSave\">¶</a>rdbSave</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Save the DB on disk. Return C_ERR on error, C_OK on success. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rdbSave</span><span class=\"params\">(<span class=\"type\">char</span> *filename, rdbSaveInfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> tmpfile[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> cwd[MAXPATHLEN]; <span class=\"comment\">/* Current working dir path for error messages. */</span></span><br><span class=\"line\">    FILE *fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    rio rdb;</span><br><span class=\"line\">    <span class=\"type\">int</span> error = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">snprintf</span>(tmpfile,<span class=\"number\">256</span>,<span class=\"string\">&quot;temp-%d.rdb&quot;</span>, (<span class=\"type\">int</span>) <span class=\"built_in\">getpid</span>()); <span class=\"comment\">// 临时文件命名 pid</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">fopen</span>(tmpfile,<span class=\"string\">&quot;w&quot;</span>); <span class=\"comment\">// 只读模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fp) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *cwdp = <span class=\"built_in\">getcwd</span>(cwd,MAXPATHLEN);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">            <span class=\"string\">&quot;Failed opening the RDB file %s (in server root dir %s) &quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;for saving: %s&quot;</span>,</span><br><span class=\"line\">            filename,</span><br><span class=\"line\">            cwdp ? cwdp : <span class=\"string\">&quot;unknown&quot;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rioInitWithFile</span>(&amp;rdb,fp); <span class=\"comment\">// rdb初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">startSaving</span>(RDBFLAGS_NONE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.rdb_save_incremental_fsync)</span><br><span class=\"line\">        <span class=\"built_in\">rioSetAutoSync</span>(&amp;rdb,REDIS_AUTOSYNC_BYTES);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">rdbSaveRio</span>(&amp;rdb,&amp;error,RDBFLAGS_NONE,rsi) == C_ERR) &#123; <span class=\"comment\">// rdb保存「重点」</span></span><br><span class=\"line\">        errno = error;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Make sure data will not remain on the OS&#x27;s output buffers */</span> <span class=\"comment\">// 刷新fp文件中内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fflush</span>(fp)) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fsync</span>(<span class=\"built_in\">fileno</span>(fp))) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fclose</span>(fp)) &#123; fp = <span class=\"literal\">NULL</span>; <span class=\"keyword\">goto</span> werr; &#125;</span><br><span class=\"line\">    fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* Use RENAME to make sure the DB file is changed atomically only</span></span><br><span class=\"line\"><span class=\"comment\">     * if the generate DB file is ok. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">rename</span>(tmpfile,filename) == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// 临时文件重新命名</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *cwdp = <span class=\"built_in\">getcwd</span>(cwd,MAXPATHLEN);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">            <span class=\"string\">&quot;Error moving temp DB file %s on the final &quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;destination %s (in server root dir %s): %s&quot;</span>,</span><br><span class=\"line\">            tmpfile,</span><br><span class=\"line\">            filename,</span><br><span class=\"line\">            cwdp ? cwdp : <span class=\"string\">&quot;unknown&quot;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"built_in\">unlink</span>(tmpfile);</span><br><span class=\"line\">        <span class=\"built_in\">stopSaving</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;DB saved on disk&quot;</span>); <span class=\"comment\">// 日志保存</span></span><br><span class=\"line\">    server.dirty = <span class=\"number\">0</span>; <span class=\"comment\">// 最后的变量该置空&amp;该保存状态的</span></span><br><span class=\"line\">    server.lastsave = <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    server.lastbgsave_status = C_OK;</span><br><span class=\"line\">    <span class=\"built_in\">stopSaving</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 停止保存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">werr:</span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Write error saving DB on disk: %s&quot;</span>, <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp) <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">unlink</span>(tmpfile);</span><br><span class=\"line\">    <span class=\"built_in\">stopSaving</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"rdbSaveRio\"><a class=\"header-anchor\" href=\"#rdbSaveRio\">¶</a>rdbSaveRio</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Produces a dump of the database in RDB format sending it to the specified</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis I/O channel. On success C_OK is returned, otherwise C_ERR</span></span><br><span class=\"line\"><span class=\"comment\"> * is returned and part of the output, or all the output, can be</span></span><br><span class=\"line\"><span class=\"comment\"> * missing because of I/O errors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * When the function returns C_ERR and if &#x27;error&#x27; is not NULL, the</span></span><br><span class=\"line\"><span class=\"comment\"> * integer pointed by &#x27;error&#x27; is set to the value of errno just after the I/O</span></span><br><span class=\"line\"><span class=\"comment\"> * error. */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">rdbSaveRio</span><span class=\"params\">(rio *rdb, <span class=\"type\">int</span> *error, <span class=\"type\">int</span> rdbflags, rdbSaveInfo *rsi)</span> &#123;</span><br><span class=\"line\">    dictIterator *di = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    dictEntry *de;</span><br><span class=\"line\">    <span class=\"type\">char</span> magic[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\">    <span class=\"type\">uint64_t</span> cksum;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> processed = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.rdb_checksum)</span><br><span class=\"line\">        rdb-&gt;update_cksum = rioGenericUpdateChecksum;</span><br><span class=\"line\">    <span class=\"built_in\">snprintf</span>(magic,<span class=\"keyword\">sizeof</span>(magic),<span class=\"string\">&quot;REDIS%04d&quot;</span>,RDB_VERSION); <span class=\"comment\">// 04指的是版本号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbWriteRaw(rdb,magic,<span class=\"number\">9</span>) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveInfoAuxFields(rdb,rdbflags,rsi) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// redis辅助信息，返回了-1，代表还是比较重要的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveModulesAux(rdb, REDISMODULE_AUX_BEFORE_RDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// 模块化信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class=\"line\">        redisDb *db = server.db+j;</span><br><span class=\"line\">        dict *d = db-&gt;dict;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dictSize(d) == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 大小为0，则跳过</span></span><br><span class=\"line\">        di = dictGetSafeIterator(d); <span class=\"comment\">// 分配内存，返回迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Write the SELECT DB opcode */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_SELECTDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,j) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Write the RESIZE DB opcode. */</span></span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> db_size, expires_size;</span><br><span class=\"line\">        db_size = dictSize(db-&gt;dict);</span><br><span class=\"line\">        expires_size = dictSize(db-&gt;expires);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_RESIZEDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,db_size) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,expires_size) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Iterate this DB writing every entry */</span> <span class=\"comment\">// 遍历每一个entry</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// dictNext为函数取值的方式</span></span><br><span class=\"line\">            sds keystr = dictGetKey(de); <span class=\"comment\">// 获取key</span></span><br><span class=\"line\">            robj key, *o = dictGetVal(de); <span class=\"comment\">//获取value</span></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> expire;</span><br><span class=\"line\"></span><br><span class=\"line\">            initStaticStringObject(key,keystr); <span class=\"comment\">// 初始化obj，「类型，数量，指针指向的地址」</span></span><br><span class=\"line\">            expire = getExpire(db,&amp;key); <span class=\"comment\">// 通过key来找过期时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rdbSaveKeyValuePair(rdb,&amp;key,o,expire) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* When this RDB is produced as part of an AOF rewrite, move</span></span><br><span class=\"line\"><span class=\"comment\">             * accumulated diff from parent to child while rewriting in</span></span><br><span class=\"line\"><span class=\"comment\">             * order to have a smaller final write. */</span>  <span class=\"comment\">// 把父级别的积累缓冲到缓冲区，在重写完成后串联在一起。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE &amp;&amp;</span><br><span class=\"line\">                rdb-&gt;processed_bytes &gt; processed+AOF_READ_DIFF_INTERVAL_BYTES)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                processed = rdb-&gt;processed_bytes;</span><br><span class=\"line\">                aofReadDiffFromParent();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dictReleaseIterator(di); <span class=\"comment\">// 内存释放，在每一次循环中，用完就释放，「内存周期管理」</span></span><br><span class=\"line\">        di = <span class=\"literal\">NULL</span>; <span class=\"comment\">/* So that we don&#x27;t release it again on error. */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* If we are storing the replication information on disk, persist</span></span><br><span class=\"line\"><span class=\"comment\">     * the script cache as well: on successful PSYNC after a restart, we need</span></span><br><span class=\"line\"><span class=\"comment\">     * to be able to process any EVALSHA inside the replication backlog the</span></span><br><span class=\"line\"><span class=\"comment\">     * master will send us. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rsi &amp;&amp; dictSize(server.lua_scripts)) &#123;</span><br><span class=\"line\">        di = dictGetIterator(server.lua_scripts);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            robj *body = dictGetVal(de);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rdbSaveAuxField(rdb,<span class=\"string\">&quot;lua&quot;</span>,<span class=\"number\">3</span>,body-&gt;ptr,sdslen(body-&gt;ptr)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dictReleaseIterator(di);</span><br><span class=\"line\">        di = <span class=\"literal\">NULL</span>; <span class=\"comment\">/* So that we don&#x27;t release it again on error. */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveModulesAux(rdb, REDISMODULE_AUX_AFTER_RDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// 再次保存辅助的信息，「上一步可能会改变」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* EOF opcode */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_EOF) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// 保存文件类型，结束位置的标志</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* CRC64 checksum. It will be zero if checksum computation is disabled, the</span></span><br><span class=\"line\"><span class=\"comment\">     * loading code skips the check in this case. */</span></span><br><span class=\"line\">    cksum = rdb-&gt;cksum;</span><br><span class=\"line\">    memrev64ifbe(&amp;cksum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rioWrite(rdb,&amp;cksum,<span class=\"number\">8</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// checksum 校验位插入文件最后</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK; <span class=\"comment\">// 返回0，一切ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">werr:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) *error = errno;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (di) dictReleaseIterator(di); <span class=\"comment\">// 一旦错误发生后，及时释放内存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"rdbSaveKeyValuePair实现\"><a class=\"header-anchor\" href=\"#rdbSaveKeyValuePair实现\">¶</a>rdbSaveKeyValuePair实现</h4>\n<ul>\n<li>错误返回-1,正常返回1,其它返回0</li>\n<li>主逻辑只需负责入参和返回值「抽象」</li>\n<li>优先级: expire &gt; lru &gt; lfu &gt; [&lt;key,values&gt;]</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Save a key-value pair, with expire time, type, key, value.</span></span><br><span class=\"line\"><span class=\"comment\"> * On error -1 is returned.</span></span><br><span class=\"line\"><span class=\"comment\"> * On success if the key was actually saved 1 is returned, otherwise 0</span></span><br><span class=\"line\"><span class=\"comment\"> * is returned (the key was already expired). */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">rdbSaveKeyValuePair</span><span class=\"params\">(rio *rdb, robj *key, robj *val, <span class=\"type\">long</span> <span class=\"type\">long</span> expiretime)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> savelru = server.maxmemory_policy &amp; MAXMEMORY_FLAG_LRU;</span><br><span class=\"line\">    <span class=\"type\">int</span> savelfu = server.maxmemory_policy &amp; MAXMEMORY_FLAG_LFU;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  保存过期时间</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save the expire time */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expiretime != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_EXPIRETIME_MS) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveMillisecondTime(rdb,expiretime) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LRU方式保存</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save the LRU info. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (savelru) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> idletime = estimateObjectIdleTime(val);</span><br><span class=\"line\">        idletime /= <span class=\"number\">1000</span>; <span class=\"comment\">/* Using seconds is enough and requires less space.*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_IDLE) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,idletime) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LFU方式保存</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save the LFU info. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (savelfu) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> buf[<span class=\"number\">1</span>];</span><br><span class=\"line\">        buf[<span class=\"number\">0</span>] = LFUDecrAndReturn(val);</span><br><span class=\"line\">        <span class=\"comment\">/* We can encode this in exactly two bytes: the opcode and an 8</span></span><br><span class=\"line\"><span class=\"comment\">         * bit counter, since the frequency is logarithmic with a 0-255 range.</span></span><br><span class=\"line\"><span class=\"comment\">         * Note that we do not store the halving time because to reset it</span></span><br><span class=\"line\"><span class=\"comment\">         * a single time when loading does not affect the frequency much. */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_FREQ) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbWriteRaw(rdb,buf,<span class=\"number\">1</span>) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存类型、key、value等</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save type, key, value */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveObjectType(rdb,val) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveStringObject(rdb,key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveObject(rdb,val,key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟请求</span></span><br><span class=\"line\">    <span class=\"comment\">/* Delay return if required (for testing) */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.rdb_key_save_delay)</span><br><span class=\"line\">        usleep(server.rdb_key_save_delay);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用场景-「2021-03-16」\"><a class=\"header-anchor\" href=\"#使用场景-「2021-03-16」\">¶</a>使用场景:「2021-03-16」</h3>\n<ul>\n<li>执行command</li>\n<li>条件命令 conf配置</li>\n<li>shutdown时</li>\n</ul>\n<h4 id=\"rdbSave-usage-location\"><a class=\"header-anchor\" href=\"#rdbSave-usage-location\">¶</a>rdbSave usage location:</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_083902.png\" alt=\"\"></p>\n<blockquote>\n<p>关于rdbSaveBackgroud的使用地方:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_085205.png\" alt=\"\"></p>\n<h3 id=\"关于rdbsave和redis如何联系的？\"><a class=\"header-anchor\" href=\"#关于rdbsave和redis如何联系的？\">¶</a>关于rdbsave和redis如何联系的？</h3>\n<blockquote>\n<p>写到这里的才慢慢理解这个里面的关系，如果你问我为啥不在前面就列出来关系图呢？</p>\n</blockquote>\n<blockquote>\n<p>那我只能说这是一个学习的正常流程，抓住其中的关键点，先看实现，然后再向外扩散，由内而外.</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-48-23.png\" alt=\"\"></p>\n<p><strong>如果区分下redis的上下层面的关系，那就可以大致分为三层：command+底层实现+最底层的IO操作等.</strong></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-58-41.png\" alt=\"\"></p>\n<p><strong>再细分下中间的过程</strong><br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-14-13-35.png\" alt=\"\"></p>\n<h3 id=\"Todo\"><a class=\"header-anchor\" href=\"#Todo\">¶</a>Todo</h3>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\" checked=\"true\"><label for=\"checkbox0\">rdb快速备份原因: fork主进程</label></li>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\">故障「断电」等恢复机制</label></li>\n<li><input type=\"checkbox\" id=\"checkbox2\"><label for=\"checkbox2\">主备复制怎么进行的？</label></li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>RDB和AOF常常被提起,好奇RDB这个到底是怎么实现的,这样才能运用的更加灵活和精准.</p>\n</blockquote>\n<h3 id=\"学完预期的目标\"><a class=\"header-anchor\" href=\"#学完预期的目标\">¶</a>学完预期的目标:</h3>\n<ul>\n<li>学习数据异步处理流程</li>\n<li>RDB持久化数据的关键过程</li>\n<li>RDB的缺点</li>\n<li>RDB适用的场景</li>\n<li>RDB改进点或bug?</li>\n<li>数据持久化,应该是个什么过程?</li>\n</ul>","more":"<h3 id=\"Version\"><a class=\"header-anchor\" href=\"#Version\">¶</a>Version</h3>\n<blockquote>\n<p>Redis 6.0.9</p>\n</blockquote>\n<h3 id=\"实现流程\"><a class=\"header-anchor\" href=\"#实现流程\">¶</a>实现流程:</h3>\n<ul>\n<li>这里罗列了几个比较重要的过程:</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-rdb-1.png\" alt=\"\"></p>\n<h4 id=\"rdbSaveBackground\"><a class=\"header-anchor\" href=\"#rdbSaveBackground\">¶</a>rdbSaveBackground</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rdbSaveBackground</span><span class=\"params\">(<span class=\"type\">char</span> *filename, rdbSaveInfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> childpid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">hasActiveChildProcess</span>()) <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\"></span><br><span class=\"line\">    server.dirty_before_bgsave = server.dirty;</span><br><span class=\"line\">    server.lastbgsave_try = <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"built_in\">openChildInfoPipe</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((childpid = <span class=\"built_in\">redisFork</span>(CHILD_TYPE_RDB)) == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// fork一个子进程</span></span><br><span class=\"line\">        <span class=\"type\">int</span> retval;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Child */</span></span><br><span class=\"line\">        <span class=\"built_in\">redisSetProcTitle</span>(<span class=\"string\">&quot;redis-rdb-bgsave&quot;</span>); <span class=\"comment\">// 设置标题</span></span><br><span class=\"line\">        <span class=\"built_in\">redisSetCpuAffinity</span>(server.bgsave_cpulist); <span class=\"comment\">// 设置cpu亲和力</span></span><br><span class=\"line\">        retval = <span class=\"built_in\">rdbSave</span>(filename,rsi); <span class=\"comment\">// rdb保存</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (retval == C_OK) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">sendChildCOWInfo</span>(CHILD_TYPE_RDB, <span class=\"string\">&quot;RDB&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">exitFromChild</span>((retval == C_OK) ? <span class=\"number\">0</span> : <span class=\"number\">1</span>); <span class=\"comment\">// 子进程退出</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Parent */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childpid == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// -1 发生错误了</span></span><br><span class=\"line\">            <span class=\"built_in\">closeChildInfoPipe</span>();</span><br><span class=\"line\">            server.lastbgsave_status = C_ERR;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Can&#x27;t save in background: fork: %s&quot;</span>,</span><br><span class=\"line\">                <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;Background saving started by pid %d&quot;</span>,childpid); <span class=\"comment\">// 下面是一些重新初始化的部分</span></span><br><span class=\"line\">        server.rdb_save_time_start = <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">        server.rdb_child_pid = childpid;</span><br><span class=\"line\">        server.rdb_child_type = RDB_CHILD_TYPE_DISK;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK; <span class=\"comment\">/* unreached */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"rdbSaveInfo「struct」\"><a class=\"header-anchor\" href=\"#rdbSaveInfo「struct」\">¶</a>rdbSaveInfo「struct」</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This structure can be optionally passed to RDB save/load functions in</span></span><br><span class=\"line\"><span class=\"comment\"> * order to implement additional functionalities, by storing and loading</span></span><br><span class=\"line\"><span class=\"comment\"> * metadata to the RDB file.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Currently the only use is to select a DB at load time, useful in</span></span><br><span class=\"line\"><span class=\"comment\"> * replication in order to make sure that chained slaves (slaves of slaves)</span></span><br><span class=\"line\"><span class=\"comment\"> * select the correct DB and are able to accept the stream coming from the</span></span><br><span class=\"line\"><span class=\"comment\"> * top-level master. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">rdbSaveInfo</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Used saving and loading. */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> repl_stream_db;  <span class=\"comment\">/* DB to select in server.master client. */</span> <span class=\"comment\">// 选中复制的db</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Used only loading. */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> repl_id_is_set;  <span class=\"comment\">/* True if repl_id field is set. */</span></span><br><span class=\"line\">    <span class=\"type\">char</span> repl_id[CONFIG_RUN_ID_SIZE+<span class=\"number\">1</span>];     <span class=\"comment\">/* Replication ID. */</span> 副本ID</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> repl_offset;                  <span class=\"comment\">/* Replication offset. */</span> 偏移量</span><br><span class=\"line\">&#125; rdbSaveInfo;</span><br></pre></td></tr></table></figure>\n<h4 id=\"rdbSave\"><a class=\"header-anchor\" href=\"#rdbSave\">¶</a>rdbSave</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Save the DB on disk. Return C_ERR on error, C_OK on success. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">rdbSave</span><span class=\"params\">(<span class=\"type\">char</span> *filename, rdbSaveInfo *rsi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> tmpfile[<span class=\"number\">256</span>];</span><br><span class=\"line\">    <span class=\"type\">char</span> cwd[MAXPATHLEN]; <span class=\"comment\">/* Current working dir path for error messages. */</span></span><br><span class=\"line\">    FILE *fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    rio rdb;</span><br><span class=\"line\">    <span class=\"type\">int</span> error = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">snprintf</span>(tmpfile,<span class=\"number\">256</span>,<span class=\"string\">&quot;temp-%d.rdb&quot;</span>, (<span class=\"type\">int</span>) <span class=\"built_in\">getpid</span>()); <span class=\"comment\">// 临时文件命名 pid</span></span><br><span class=\"line\">    fp = <span class=\"built_in\">fopen</span>(tmpfile,<span class=\"string\">&quot;w&quot;</span>); <span class=\"comment\">// 只读模式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!fp) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> *cwdp = <span class=\"built_in\">getcwd</span>(cwd,MAXPATHLEN);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">            <span class=\"string\">&quot;Failed opening the RDB file %s (in server root dir %s) &quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;for saving: %s&quot;</span>,</span><br><span class=\"line\">            filename,</span><br><span class=\"line\">            cwdp ? cwdp : <span class=\"string\">&quot;unknown&quot;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">rioInitWithFile</span>(&amp;rdb,fp); <span class=\"comment\">// rdb初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">startSaving</span>(RDBFLAGS_NONE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.rdb_save_incremental_fsync)</span><br><span class=\"line\">        <span class=\"built_in\">rioSetAutoSync</span>(&amp;rdb,REDIS_AUTOSYNC_BYTES);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">rdbSaveRio</span>(&amp;rdb,&amp;error,RDBFLAGS_NONE,rsi) == C_ERR) &#123; <span class=\"comment\">// rdb保存「重点」</span></span><br><span class=\"line\">        errno = error;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Make sure data will not remain on the OS&#x27;s output buffers */</span> <span class=\"comment\">// 刷新fp文件中内容</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fflush</span>(fp)) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fsync</span>(<span class=\"built_in\">fileno</span>(fp))) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fclose</span>(fp)) &#123; fp = <span class=\"literal\">NULL</span>; <span class=\"keyword\">goto</span> werr; &#125;</span><br><span class=\"line\">    fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/* Use RENAME to make sure the DB file is changed atomically only</span></span><br><span class=\"line\"><span class=\"comment\">     * if the generate DB file is ok. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">rename</span>(tmpfile,filename) == <span class=\"number\">-1</span>) &#123; <span class=\"comment\">// 临时文件重新命名</span></span><br><span class=\"line\">        <span class=\"type\">char</span> *cwdp = <span class=\"built_in\">getcwd</span>(cwd,MAXPATHLEN);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">            <span class=\"string\">&quot;Error moving temp DB file %s on the final &quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;destination %s (in server root dir %s): %s&quot;</span>,</span><br><span class=\"line\">            tmpfile,</span><br><span class=\"line\">            filename,</span><br><span class=\"line\">            cwdp ? cwdp : <span class=\"string\">&quot;unknown&quot;</span>,</span><br><span class=\"line\">            <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"built_in\">unlink</span>(tmpfile);</span><br><span class=\"line\">        <span class=\"built_in\">stopSaving</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;DB saved on disk&quot;</span>); <span class=\"comment\">// 日志保存</span></span><br><span class=\"line\">    server.dirty = <span class=\"number\">0</span>; <span class=\"comment\">// 最后的变量该置空&amp;该保存状态的</span></span><br><span class=\"line\">    server.lastsave = <span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    server.lastbgsave_status = C_OK;</span><br><span class=\"line\">    <span class=\"built_in\">stopSaving</span>(<span class=\"number\">1</span>); <span class=\"comment\">// 停止保存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">werr:</span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Write error saving DB on disk: %s&quot;</span>, <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp) <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">unlink</span>(tmpfile);</span><br><span class=\"line\">    <span class=\"built_in\">stopSaving</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"rdbSaveRio\"><a class=\"header-anchor\" href=\"#rdbSaveRio\">¶</a>rdbSaveRio</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Produces a dump of the database in RDB format sending it to the specified</span></span><br><span class=\"line\"><span class=\"comment\"> * Redis I/O channel. On success C_OK is returned, otherwise C_ERR</span></span><br><span class=\"line\"><span class=\"comment\"> * is returned and part of the output, or all the output, can be</span></span><br><span class=\"line\"><span class=\"comment\"> * missing because of I/O errors.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * When the function returns C_ERR and if &#x27;error&#x27; is not NULL, the</span></span><br><span class=\"line\"><span class=\"comment\"> * integer pointed by &#x27;error&#x27; is set to the value of errno just after the I/O</span></span><br><span class=\"line\"><span class=\"comment\"> * error. */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">rdbSaveRio</span><span class=\"params\">(rio *rdb, <span class=\"type\">int</span> *error, <span class=\"type\">int</span> rdbflags, rdbSaveInfo *rsi)</span> &#123;</span><br><span class=\"line\">    dictIterator *di = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    dictEntry *de;</span><br><span class=\"line\">    <span class=\"type\">char</span> magic[<span class=\"number\">10</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> j;</span><br><span class=\"line\">    <span class=\"type\">uint64_t</span> cksum;</span><br><span class=\"line\">    <span class=\"type\">size_t</span> processed = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.rdb_checksum)</span><br><span class=\"line\">        rdb-&gt;update_cksum = rioGenericUpdateChecksum;</span><br><span class=\"line\">    <span class=\"built_in\">snprintf</span>(magic,<span class=\"keyword\">sizeof</span>(magic),<span class=\"string\">&quot;REDIS%04d&quot;</span>,RDB_VERSION); <span class=\"comment\">// 04指的是版本号</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbWriteRaw(rdb,magic,<span class=\"number\">9</span>) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveInfoAuxFields(rdb,rdbflags,rsi) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// redis辅助信息，返回了-1，代表还是比较重要的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveModulesAux(rdb, REDISMODULE_AUX_BEFORE_RDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// 模块化信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; server.dbnum; j++) &#123;</span><br><span class=\"line\">        redisDb *db = server.db+j;</span><br><span class=\"line\">        dict *d = db-&gt;dict;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dictSize(d) == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>; <span class=\"comment\">// 大小为0，则跳过</span></span><br><span class=\"line\">        di = dictGetSafeIterator(d); <span class=\"comment\">// 分配内存，返回迭代器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Write the SELECT DB opcode */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_SELECTDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,j) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Write the RESIZE DB opcode. */</span></span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> db_size, expires_size;</span><br><span class=\"line\">        db_size = dictSize(db-&gt;dict);</span><br><span class=\"line\">        expires_size = dictSize(db-&gt;expires);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_RESIZEDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,db_size) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,expires_size) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Iterate this DB writing every entry */</span> <span class=\"comment\">// 遍历每一个entry</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123; <span class=\"comment\">// dictNext为函数取值的方式</span></span><br><span class=\"line\">            sds keystr = dictGetKey(de); <span class=\"comment\">// 获取key</span></span><br><span class=\"line\">            robj key, *o = dictGetVal(de); <span class=\"comment\">//获取value</span></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> expire;</span><br><span class=\"line\"></span><br><span class=\"line\">            initStaticStringObject(key,keystr); <span class=\"comment\">// 初始化obj，「类型，数量，指针指向的地址」</span></span><br><span class=\"line\">            expire = getExpire(db,&amp;key); <span class=\"comment\">// 通过key来找过期时间</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rdbSaveKeyValuePair(rdb,&amp;key,o,expire) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* When this RDB is produced as part of an AOF rewrite, move</span></span><br><span class=\"line\"><span class=\"comment\">             * accumulated diff from parent to child while rewriting in</span></span><br><span class=\"line\"><span class=\"comment\">             * order to have a smaller final write. */</span>  <span class=\"comment\">// 把父级别的积累缓冲到缓冲区，在重写完成后串联在一起。</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rdbflags &amp; RDBFLAGS_AOF_PREAMBLE &amp;&amp;</span><br><span class=\"line\">                rdb-&gt;processed_bytes &gt; processed+AOF_READ_DIFF_INTERVAL_BYTES)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                processed = rdb-&gt;processed_bytes;</span><br><span class=\"line\">                aofReadDiffFromParent();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dictReleaseIterator(di); <span class=\"comment\">// 内存释放，在每一次循环中，用完就释放，「内存周期管理」</span></span><br><span class=\"line\">        di = <span class=\"literal\">NULL</span>; <span class=\"comment\">/* So that we don&#x27;t release it again on error. */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* If we are storing the replication information on disk, persist</span></span><br><span class=\"line\"><span class=\"comment\">     * the script cache as well: on successful PSYNC after a restart, we need</span></span><br><span class=\"line\"><span class=\"comment\">     * to be able to process any EVALSHA inside the replication backlog the</span></span><br><span class=\"line\"><span class=\"comment\">     * master will send us. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rsi &amp;&amp; dictSize(server.lua_scripts)) &#123;</span><br><span class=\"line\">        di = dictGetIterator(server.lua_scripts);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((de = dictNext(di)) != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            robj *body = dictGetVal(de);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rdbSaveAuxField(rdb,<span class=\"string\">&quot;lua&quot;</span>,<span class=\"number\">3</span>,body-&gt;ptr,sdslen(body-&gt;ptr)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> werr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dictReleaseIterator(di);</span><br><span class=\"line\">        di = <span class=\"literal\">NULL</span>; <span class=\"comment\">/* So that we don&#x27;t release it again on error. */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveModulesAux(rdb, REDISMODULE_AUX_AFTER_RDB) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// 再次保存辅助的信息，「上一步可能会改变」</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* EOF opcode */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_EOF) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// 保存文件类型，结束位置的标志</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* CRC64 checksum. It will be zero if checksum computation is disabled, the</span></span><br><span class=\"line\"><span class=\"comment\">     * loading code skips the check in this case. */</span></span><br><span class=\"line\">    cksum = rdb-&gt;cksum;</span><br><span class=\"line\">    memrev64ifbe(&amp;cksum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rioWrite(rdb,&amp;cksum,<span class=\"number\">8</span>) == <span class=\"number\">0</span>) <span class=\"keyword\">goto</span> werr; <span class=\"comment\">// checksum 校验位插入文件最后</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK; <span class=\"comment\">// 返回0，一切ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">werr:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) *error = errno;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (di) dictReleaseIterator(di); <span class=\"comment\">// 一旦错误发生后，及时释放内存</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"rdbSaveKeyValuePair实现\"><a class=\"header-anchor\" href=\"#rdbSaveKeyValuePair实现\">¶</a>rdbSaveKeyValuePair实现</h4>\n<ul>\n<li>错误返回-1,正常返回1,其它返回0</li>\n<li>主逻辑只需负责入参和返回值「抽象」</li>\n<li>优先级: expire &gt; lru &gt; lfu &gt; [&lt;key,values&gt;]</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Save a key-value pair, with expire time, type, key, value.</span></span><br><span class=\"line\"><span class=\"comment\"> * On error -1 is returned.</span></span><br><span class=\"line\"><span class=\"comment\"> * On success if the key was actually saved 1 is returned, otherwise 0</span></span><br><span class=\"line\"><span class=\"comment\"> * is returned (the key was already expired). */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">rdbSaveKeyValuePair</span><span class=\"params\">(rio *rdb, robj *key, robj *val, <span class=\"type\">long</span> <span class=\"type\">long</span> expiretime)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> savelru = server.maxmemory_policy &amp; MAXMEMORY_FLAG_LRU;</span><br><span class=\"line\">    <span class=\"type\">int</span> savelfu = server.maxmemory_policy &amp; MAXMEMORY_FLAG_LFU;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  保存过期时间</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save the expire time */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (expiretime != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_EXPIRETIME_MS) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveMillisecondTime(rdb,expiretime) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LRU方式保存</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save the LRU info. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (savelru) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint64_t</span> idletime = estimateObjectIdleTime(val);</span><br><span class=\"line\">        idletime /= <span class=\"number\">1000</span>; <span class=\"comment\">/* Using seconds is enough and requires less space.*/</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_IDLE) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveLen(rdb,idletime) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// LFU方式保存</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save the LFU info. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (savelfu) &#123;</span><br><span class=\"line\">        <span class=\"type\">uint8_t</span> buf[<span class=\"number\">1</span>];</span><br><span class=\"line\">        buf[<span class=\"number\">0</span>] = LFUDecrAndReturn(val);</span><br><span class=\"line\">        <span class=\"comment\">/* We can encode this in exactly two bytes: the opcode and an 8</span></span><br><span class=\"line\"><span class=\"comment\">         * bit counter, since the frequency is logarithmic with a 0-255 range.</span></span><br><span class=\"line\"><span class=\"comment\">         * Note that we do not store the halving time because to reset it</span></span><br><span class=\"line\"><span class=\"comment\">         * a single time when loading does not affect the frequency much. */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbSaveType(rdb,RDB_OPCODE_FREQ) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rdbWriteRaw(rdb,buf,<span class=\"number\">1</span>) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 保存类型、key、value等</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save type, key, value */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveObjectType(rdb,val) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveStringObject(rdb,key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rdbSaveObject(rdb,val,key) == <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟请求</span></span><br><span class=\"line\">    <span class=\"comment\">/* Delay return if required (for testing) */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.rdb_key_save_delay)</span><br><span class=\"line\">        usleep(server.rdb_key_save_delay);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用场景-「2021-03-16」\"><a class=\"header-anchor\" href=\"#使用场景-「2021-03-16」\">¶</a>使用场景:「2021-03-16」</h3>\n<ul>\n<li>执行command</li>\n<li>条件命令 conf配置</li>\n<li>shutdown时</li>\n</ul>\n<h4 id=\"rdbSave-usage-location\"><a class=\"header-anchor\" href=\"#rdbSave-usage-location\">¶</a>rdbSave usage location:</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_083902.png\" alt=\"\"></p>\n<blockquote>\n<p>关于rdbSaveBackgroud的使用地方:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210316_085205.png\" alt=\"\"></p>\n<h3 id=\"关于rdbsave和redis如何联系的？\"><a class=\"header-anchor\" href=\"#关于rdbsave和redis如何联系的？\">¶</a>关于rdbsave和redis如何联系的？</h3>\n<blockquote>\n<p>写到这里的才慢慢理解这个里面的关系，如果你问我为啥不在前面就列出来关系图呢？</p>\n</blockquote>\n<blockquote>\n<p>那我只能说这是一个学习的正常流程，抓住其中的关键点，先看实现，然后再向外扩散，由内而外.</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-48-23.png\" alt=\"\"></p>\n<p><strong>如果区分下redis的上下层面的关系，那就可以大致分为三层：command+底层实现+最底层的IO操作等.</strong></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-13-58-41.png\" alt=\"\"></p>\n<p><strong>再细分下中间的过程</strong><br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-16-14-13-35.png\" alt=\"\"></p>\n<h3 id=\"Todo\"><a class=\"header-anchor\" href=\"#Todo\">¶</a>Todo</h3>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\" checked=\"true\"><label for=\"checkbox0\">rdb快速备份原因: fork主进程</label></li>\n<li><input type=\"checkbox\" id=\"checkbox1\"><label for=\"checkbox1\">故障「断电」等恢复机制</label></li>\n<li><input type=\"checkbox\" id=\"checkbox2\"><label for=\"checkbox2\">主备复制怎么进行的？</label></li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-rdb-1.png","popularPost_tmp_gaData":{"updated":"Tue Mar 16 2021 07:01:00 GMT+0800 (中国标准时间)","title":"「30」redis rdb源码-1","path":"archives/44b34745.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-rdb-1.png","excerpt":"<blockquote>\n<p>RDB和AOF常常被提起,好奇RDB这个到底是怎么实现的,这样才能运用的更加灵活和精准.</p>\n</blockquote>\n<h3 id=\"学完预期的目标\"><a class=\"header-anchor\" href=\"#学完预期的目标\">¶</a>学完预期的目标:</h3>\n<ul>\n<li>学习数据异步处理流程</li>\n<li>RDB持久化数据的关键过程</li>\n<li>RDB的缺点</li>\n<li>RDB适用的场景</li>\n<li>RDB改进点或bug?</li>\n<li>数据持久化,应该是个什么过程?</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-01-25T14:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-01-25T14:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","Redis","RDB","源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":9062},{"title":"「31」Float类型易踩的坑","date":"2021-02-04T04:00:17.000Z","updated":"2021-02-04T04:57:28.000Z","keywords":"Go,Float","abbrlink":"cb90ed2a","_content":"\n### 前序\n最近快过年了吧，但是有很多需求要搞，，，，\n\n突然来了个锅，被人投诉说数据统计的有问题，打开电脑一看，float类型的统计，「我慌了，float在统计中一直都很头疼。」\n\n### 触发点\n\n#### 先来看问题吧「写了个例子」：\n\n>下面的结果，a应该是什么值？why？\n\n<!--more-->\n\n>go version go1.14.14 darwin/amd64\n\n```go\nfunc main() {\n\tvar floatNumber float64 = 0\n\n\ta := floatNumber / 0\n\tfmt.Println(a)\n}\n```\n\n##### 输出结果：\n\nNAN\n\n##### why?「究其根源」\n\n[官方解释](https://golang.google.cn/ref/spec#Representability)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_030335.png)\n\n\n>简单的说就是 0/0 为负无穷大，所以为 NAN.\n\n### 如何规避？\n\n* 提前判断分母，为0，不计算「根源解决」\n* 利用math.IsNaN(xxx)，选择性跳过。 「治标」\n\n### 拓展：\n\n#### 下面这个输出什么？\n\n\n```go\nfunc main() {\n\tvar number int\n\tfmt.Println(number / 0)\n}\n```\n\n##### 输出结果：\n\n> division by zero\n\n##### why?\n\n* 除数不能为0.\n\n#### 关于float类型\n\n```html\n这么简单，估计会被说很菜，，，，\n\n关于float类型的使用和注意事项「和语言无关」，一直都很零散，下来整理下，系统性的学习学习。\n```\n\n### END\n\n快过年了，提前预祝大家新年快乐。。。。\n\n🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨","source":"_posts/31-float类型易踩的坑.md","raw":"---\ntitle: 「31」Float类型易踩的坑\ndate: '2021/02/04 12:00:17'\nupdated: '2021/02/04 12:57:28'\nkeywords: 'Go,Float'\ntags:\n  - Day\n  - Go\n  - Golang\n  - Float\n  - IEEE\nabbrlink: cb90ed2a\n---\n\n### 前序\n最近快过年了吧，但是有很多需求要搞，，，，\n\n突然来了个锅，被人投诉说数据统计的有问题，打开电脑一看，float类型的统计，「我慌了，float在统计中一直都很头疼。」\n\n### 触发点\n\n#### 先来看问题吧「写了个例子」：\n\n>下面的结果，a应该是什么值？why？\n\n<!--more-->\n\n>go version go1.14.14 darwin/amd64\n\n```go\nfunc main() {\n\tvar floatNumber float64 = 0\n\n\ta := floatNumber / 0\n\tfmt.Println(a)\n}\n```\n\n##### 输出结果：\n\nNAN\n\n##### why?「究其根源」\n\n[官方解释](https://golang.google.cn/ref/spec#Representability)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_030335.png)\n\n\n>简单的说就是 0/0 为负无穷大，所以为 NAN.\n\n### 如何规避？\n\n* 提前判断分母，为0，不计算「根源解决」\n* 利用math.IsNaN(xxx)，选择性跳过。 「治标」\n\n### 拓展：\n\n#### 下面这个输出什么？\n\n\n```go\nfunc main() {\n\tvar number int\n\tfmt.Println(number / 0)\n}\n```\n\n##### 输出结果：\n\n> division by zero\n\n##### why?\n\n* 除数不能为0.\n\n#### 关于float类型\n\n```html\n这么简单，估计会被说很菜，，，，\n\n关于float类型的使用和注意事项「和语言无关」，一直都很零散，下来整理下，系统性的学习学习。\n```\n\n### END\n\n快过年了，提前预祝大家新年快乐。。。。\n\n🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨","slug":"31-float类型易踩的坑","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d4z0029zfqxhvklfcd6","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>最近快过年了吧，但是有很多需求要搞，，，，</p>\n<p>突然来了个锅，被人投诉说数据统计的有问题，打开电脑一看，float类型的统计，「我慌了，float在统计中一直都很头疼。」</p>\n<h3 id=\"触发点\"><a class=\"header-anchor\" href=\"#触发点\">¶</a>触发点</h3>\n<h4 id=\"先来看问题吧「写了个例子」：\"><a class=\"header-anchor\" href=\"#先来看问题吧「写了个例子」：\">¶</a>先来看问题吧「写了个例子」：</h4>\n<blockquote>\n<p>下面的结果，a应该是什么值？why？</p>\n</blockquote>\n<span id=\"more\"></span>\n<blockquote>\n<p>go version go1.14.14 darwin/amd64</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> floatNumber <span class=\"type\">float64</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta := floatNumber / <span class=\"number\">0</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出结果：\"><a class=\"header-anchor\" href=\"#输出结果：\">¶</a>输出结果：</h5>\n<p>NAN</p>\n<h5 id=\"why-「究其根源」\"><a class=\"header-anchor\" href=\"#why-「究其根源」\">¶</a>why?「究其根源」</h5>\n<p><a href=\"https://golang.google.cn/ref/spec#Representability\">官方解释</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_030335.png\" alt=\"\"></p>\n<blockquote>\n<p>简单的说就是 0/0 为负无穷大，所以为 NAN.</p>\n</blockquote>\n<h3 id=\"如何规避？\"><a class=\"header-anchor\" href=\"#如何规避？\">¶</a>如何规避？</h3>\n<ul>\n<li>提前判断分母，为0，不计算「根源解决」</li>\n<li>利用math.IsNaN(xxx)，选择性跳过。 「治标」</li>\n</ul>\n<h3 id=\"拓展：\"><a class=\"header-anchor\" href=\"#拓展：\">¶</a>拓展：</h3>\n<h4 id=\"下面这个输出什么？\"><a class=\"header-anchor\" href=\"#下面这个输出什么？\">¶</a>下面这个输出什么？</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> number <span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(number / <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出结果：-v2\"><a class=\"header-anchor\" href=\"#输出结果：-v2\">¶</a>输出结果：</h5>\n<blockquote>\n<p>division by zero</p>\n</blockquote>\n<h5 id=\"why\"><a class=\"header-anchor\" href=\"#why\">¶</a>why?</h5>\n<ul>\n<li>除数不能为0.</li>\n</ul>\n<h4 id=\"关于float类型\"><a class=\"header-anchor\" href=\"#关于float类型\">¶</a>关于float类型</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这么简单，估计会被说很菜，，，，</span><br><span class=\"line\"></span><br><span class=\"line\">关于float类型的使用和注意事项「和语言无关」，一直都很零散，下来整理下，系统性的学习学习。</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n<p>快过年了，提前预祝大家新年快乐。。。。</p>\n<p>🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>最近快过年了吧，但是有很多需求要搞，，，，</p>\n<p>突然来了个锅，被人投诉说数据统计的有问题，打开电脑一看，float类型的统计，「我慌了，float在统计中一直都很头疼。」</p>\n<h3 id=\"触发点\"><a class=\"header-anchor\" href=\"#触发点\">¶</a>触发点</h3>\n<h4 id=\"先来看问题吧「写了个例子」：\"><a class=\"header-anchor\" href=\"#先来看问题吧「写了个例子」：\">¶</a>先来看问题吧「写了个例子」：</h4>\n<blockquote>\n<p>下面的结果，a应该是什么值？why？</p>\n</blockquote>","more":"<blockquote>\n<p>go version go1.14.14 darwin/amd64</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> floatNumber <span class=\"type\">float64</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\ta := floatNumber / <span class=\"number\">0</span></span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出结果：\"><a class=\"header-anchor\" href=\"#输出结果：\">¶</a>输出结果：</h5>\n<p>NAN</p>\n<h5 id=\"why-「究其根源」\"><a class=\"header-anchor\" href=\"#why-「究其根源」\">¶</a>why?「究其根源」</h5>\n<p><a href=\"https://golang.google.cn/ref/spec#Representability\">官方解释</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_030335.png\" alt=\"\"></p>\n<blockquote>\n<p>简单的说就是 0/0 为负无穷大，所以为 NAN.</p>\n</blockquote>\n<h3 id=\"如何规避？\"><a class=\"header-anchor\" href=\"#如何规避？\">¶</a>如何规避？</h3>\n<ul>\n<li>提前判断分母，为0，不计算「根源解决」</li>\n<li>利用math.IsNaN(xxx)，选择性跳过。 「治标」</li>\n</ul>\n<h3 id=\"拓展：\"><a class=\"header-anchor\" href=\"#拓展：\">¶</a>拓展：</h3>\n<h4 id=\"下面这个输出什么？\"><a class=\"header-anchor\" href=\"#下面这个输出什么？\">¶</a>下面这个输出什么？</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> number <span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(number / <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"输出结果：-v2\"><a class=\"header-anchor\" href=\"#输出结果：-v2\">¶</a>输出结果：</h5>\n<blockquote>\n<p>division by zero</p>\n</blockquote>\n<h5 id=\"why\"><a class=\"header-anchor\" href=\"#why\">¶</a>why?</h5>\n<ul>\n<li>除数不能为0.</li>\n</ul>\n<h4 id=\"关于float类型\"><a class=\"header-anchor\" href=\"#关于float类型\">¶</a>关于float类型</h4>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这么简单，估计会被说很菜，，，，</span><br><span class=\"line\"></span><br><span class=\"line\">关于float类型的使用和注意事项「和语言无关」，一直都很零散，下来整理下，系统性的学习学习。</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n<p>快过年了，提前预祝大家新年快乐。。。。</p>\n<p>🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨🧨</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_030335.png","popularPost_tmp_gaData":{"updated":"Thu Feb 04 2021 12:57:28 GMT+0800 (中国标准时间)","title":"「31」Float类型易踩的坑","path":"archives/cb90ed2a.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_030335.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>最近快过年了吧，但是有很多需求要搞，，，，</p>\n<p>突然来了个锅，被人投诉说数据统计的有问题，打开电脑一看，float类型的统计，「我慌了，float在统计中一直都很头疼。」</p>\n<h3 id=\"触发点\"><a class=\"header-anchor\" href=\"#触发点\">¶</a>触发点</h3>\n<h4 id=\"先来看问题吧「写了个例子」：\"><a class=\"header-anchor\" href=\"#先来看问题吧「写了个例子」：\">¶</a>先来看问题吧「写了个例子」：</h4>\n<blockquote>\n<p>下面的结果，a应该是什么值？why？</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2021-02-04T04:00:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-04T04:00:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Golang","Float","IEEE"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":566},{"title":"「32」Go  Ticker 内存泄露","date":"2021-02-04T04:01:17.000Z","updated":"2021-02-04T04:01:17.000Z","keywords":"time,zone,Go,ticker,定时器","abbrlink":"53e1932f","_content":"\n### 前序：\n不知道你们有没有经历过这种情况：\n>测试示例图片：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp)\n\n<!--more-->\n\n>说的简单点：内存炸了呗....OOM\n\n\n### 引言\n\n>go version go1.14.14 darwin/amd64\n\n```go\n最近的坑是真的多，当然这种坑在大项目中，一不小心就写出来了,\n\n人多，项目大，各种各样的花式操作都出来了,在所难免，\n能做的就是分析问题，总结，记录，防止下次自己犯错，同时也可以加深理解。\n```\n\n### 起因：\n\n```go\nfunc XXX() {\n    // 业务代码 几十行...\n    for i:=0;i<100000;i++{\n\t    ticker := time.NewTicker(10 * time.Second)\n\t\tdefer func() {\n            //模拟业务代码\n\t\t\tfmt.Println(\"defer close\")\n\t\t}()\n\t\tgo func(){\n            for {\n                select {\n                case <-ticker.C:\n                // 业务代码.....\n                    fmt.Println(\"time 5\")\n                case <-doneChan:\n                    return\n\t\t\t}\n\t\t}\n        }()\n\n        \n    }\n    // 业务代码 几十行...\n    return\n}\n```\n\n#### 发生了什么？\n\n>上面的代码，不晓得看出来什么问题了么.....\n\n### 关键点：\n\nticker没有stop\n\n[官方解释](https://github.com/golang/go/blob/master/src/time/tick.go#L62)\n\n#### Ticker不能被回收导致\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_053201.webp)\n\n\n#### 为何不能被回收？\n\n##### NewTicker实现：\n\n[NewTicker官方实现](https://github.com/golang/go/blob/master/src/time/tick.go#L39)\n\n\n[startTimer底层实现](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203)\n\n###### addtimer\n```go\n// addtimer adds a timer to the current P.\n// This should only be called with a newly created timer.\n// That avoids the risk of changing the when field of a timer in some P's heap,\n// which could cause the heap to become unsorted.\nfunc addtimer(t *timer) {\n\t// when must never be negative; otherwise runtimer will overflow\n\t// during its delta calculation and never expire other runtime timers.\n\tif t.when < 0 {\n\t\tt.when = maxWhen\n\t}\n\tif t.status != timerNoStatus {\n\t\tthrow(\"addtimer called with initialized timer\")\n\t}\n\tt.status = timerWaiting\n\n\twhen := t.when\n\n\tpp := getg().m.p.ptr() // 获取当前的P\n\tlock(&pp.timersLock) // 加锁\n\tcleantimers(pp) // 调整p.timers栈顶元素\n\tdoaddtimer(pp, t) // t绑定下p\n\tunlock(&pp.timersLock) \n\n\twakeNetPoller(when)\n}\n```\n\n###### doaddtimer\n\n```go\n// doaddtimer adds t to the current P's heap.\n// The caller must have locked the timers for pp.\nfunc doaddtimer(pp *p, t *timer) {\n\t// Timers rely on the network poller, so make sure the poller\n\t// has started.\n\tif netpollInited == 0 {\n\t\tnetpollGenericInit()\n\t}\n\n\tif t.pp != 0 {\n\t\tthrow(\"doaddtimer: P already set in timer\")\n\t}\n\tt.pp.set(pp)\n\ti := len(pp.timers)\n\tpp.timers = append(pp.timers, t) // p上添加一个timer\n\tsiftupTimer(pp.timers, i) // 堆调整算法\n\tif t == pp.timers[0] {\n\t\tatomic.Store64(&pp.timer0When, uint64(t.when))\n\t}\n\tatomic.Xadd(&pp.numTimers, 1)\n}\n```\n\n\n### 拓展：\n#### cleantimers过程：\n\n* 判断长度\n* 判断上一个timer状态\n\n```go\n// cleantimers cleans up the head of the timer queue. This speeds up\n// programs that create and delete timers; leaving them in the heap\n// slows down addtimer. Reports whether no timer problems were found.\n// The caller must have locked the timers for pp.\nfunc cleantimers(pp *p) {\n\tfor {\n\t\tif len(pp.timers) == 0 { // 判断长度\n\t\t\treturn\n\t\t}\n\t\tt := pp.timers[0] //取第一个\n\t\tif t.pp.ptr() != pp {\n\t\t\tthrow(\"cleantimers: bad p\")\n\t\t}\n\t\tswitch s := atomic.Load(&t.status); s { //需要判断状态\n\t\tcase timerDeleted:\n\t\t\tif !atomic.Cas(&t.status, s, timerRemoving) { //非删除中\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdodeltimer0(pp) //移除timer0\n\t\t\tif !atomic.Cas(&t.status, timerRemoving, timerRemoved) {\n\t\t\t\tbadTimer()\n\t\t\t}\n\t\t\tatomic.Xadd(&pp.deletedTimers, -1)\n\t\tcase timerModifiedEarlier, timerModifiedLater: // 修改前或者修改后的状态\n\t\t\tif !atomic.Cas(&t.status, s, timerMoving) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Now we can change the when field.\n\t\t\tt.when = t.nextwhen // 指针后移\n\t\t\t// Move t to the right position.\n\t\t\tdodeltimer0(pp) // 删除最底下的元素\n\t\t\tdoaddtimer(pp, t) // 重新绑定P和t的关系\n\t\t\tif s == timerModifiedEarlier {\n\t\t\t\tatomic.Xadd(&pp.adjustTimers, -1)\n\t\t\t}\n\t\t\tif !atomic.Cas(&t.status, timerMoving, timerWaiting) {\n\t\t\t\tbadTimer()\n\t\t\t}\n\t\tdefault:\n\t\t\t// Head of timers does not need adjustment.\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n##### dodeltimer0\n\n```go\n// dodeltimer0 removes timer 0 from the current P's heap.\n// We are locked on the P when this is called.\n// It reports whether it saw no problems due to races.\n// The caller must have locked the timers for pp.\nfunc dodeltimer0(pp *p) {\n\tif t := pp.timers[0]; t.pp.ptr() != pp {\n\t\tthrow(\"dodeltimer0: wrong P\")\n\t} else {\n\t\tt.pp = 0\n\t}\n\tlast := len(pp.timers) - 1 // 获取第一个timers\n\tif last > 0 {\n\t\tpp.timers[0] = pp.timers[last] // 栈底--->栈顶\n\t}\n\tpp.timers[last] = nil // 置空\n\tpp.timers = pp.timers[:last] //重新赋值\n\tif last > 0 {\n\t\tsiftdownTimer(pp.timers, 0)  // 重新排序\n\t}\n\tupdateTimer0When(pp) // 更新P中的when\n\tatomic.Xadd(&pp.numTimers, -1) // 更新数量\n}\n\n```\n\n### 参考\n* [NewTicker官方实现](https://github.com/golang/go/blob/master/src/time/tick.go#L39)\n\n\n* [StartTimer底层实现](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203)\n* atomic\n    * atomic.Store64\n    * atomic.Xadd","source":"_posts/32-go-ticker-内存泄露.md","raw":"---\ntitle: 「32」Go  Ticker 内存泄露\ndate: '2021/2/4 12:01:17'\nupdated: '2021/2/4 12:01:17'\nkeywords: 'time,zone,Go,ticker,定时器'\ntags:\n  - Go\n  - ticker\n  - Day\n  - defer\nabbrlink: 53e1932f\n---\n\n### 前序：\n不知道你们有没有经历过这种情况：\n>测试示例图片：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp)\n\n<!--more-->\n\n>说的简单点：内存炸了呗....OOM\n\n\n### 引言\n\n>go version go1.14.14 darwin/amd64\n\n```go\n最近的坑是真的多，当然这种坑在大项目中，一不小心就写出来了,\n\n人多，项目大，各种各样的花式操作都出来了,在所难免，\n能做的就是分析问题，总结，记录，防止下次自己犯错，同时也可以加深理解。\n```\n\n### 起因：\n\n```go\nfunc XXX() {\n    // 业务代码 几十行...\n    for i:=0;i<100000;i++{\n\t    ticker := time.NewTicker(10 * time.Second)\n\t\tdefer func() {\n            //模拟业务代码\n\t\t\tfmt.Println(\"defer close\")\n\t\t}()\n\t\tgo func(){\n            for {\n                select {\n                case <-ticker.C:\n                // 业务代码.....\n                    fmt.Println(\"time 5\")\n                case <-doneChan:\n                    return\n\t\t\t}\n\t\t}\n        }()\n\n        \n    }\n    // 业务代码 几十行...\n    return\n}\n```\n\n#### 发生了什么？\n\n>上面的代码，不晓得看出来什么问题了么.....\n\n### 关键点：\n\nticker没有stop\n\n[官方解释](https://github.com/golang/go/blob/master/src/time/tick.go#L62)\n\n#### Ticker不能被回收导致\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_053201.webp)\n\n\n#### 为何不能被回收？\n\n##### NewTicker实现：\n\n[NewTicker官方实现](https://github.com/golang/go/blob/master/src/time/tick.go#L39)\n\n\n[startTimer底层实现](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203)\n\n###### addtimer\n```go\n// addtimer adds a timer to the current P.\n// This should only be called with a newly created timer.\n// That avoids the risk of changing the when field of a timer in some P's heap,\n// which could cause the heap to become unsorted.\nfunc addtimer(t *timer) {\n\t// when must never be negative; otherwise runtimer will overflow\n\t// during its delta calculation and never expire other runtime timers.\n\tif t.when < 0 {\n\t\tt.when = maxWhen\n\t}\n\tif t.status != timerNoStatus {\n\t\tthrow(\"addtimer called with initialized timer\")\n\t}\n\tt.status = timerWaiting\n\n\twhen := t.when\n\n\tpp := getg().m.p.ptr() // 获取当前的P\n\tlock(&pp.timersLock) // 加锁\n\tcleantimers(pp) // 调整p.timers栈顶元素\n\tdoaddtimer(pp, t) // t绑定下p\n\tunlock(&pp.timersLock) \n\n\twakeNetPoller(when)\n}\n```\n\n###### doaddtimer\n\n```go\n// doaddtimer adds t to the current P's heap.\n// The caller must have locked the timers for pp.\nfunc doaddtimer(pp *p, t *timer) {\n\t// Timers rely on the network poller, so make sure the poller\n\t// has started.\n\tif netpollInited == 0 {\n\t\tnetpollGenericInit()\n\t}\n\n\tif t.pp != 0 {\n\t\tthrow(\"doaddtimer: P already set in timer\")\n\t}\n\tt.pp.set(pp)\n\ti := len(pp.timers)\n\tpp.timers = append(pp.timers, t) // p上添加一个timer\n\tsiftupTimer(pp.timers, i) // 堆调整算法\n\tif t == pp.timers[0] {\n\t\tatomic.Store64(&pp.timer0When, uint64(t.when))\n\t}\n\tatomic.Xadd(&pp.numTimers, 1)\n}\n```\n\n\n### 拓展：\n#### cleantimers过程：\n\n* 判断长度\n* 判断上一个timer状态\n\n```go\n// cleantimers cleans up the head of the timer queue. This speeds up\n// programs that create and delete timers; leaving them in the heap\n// slows down addtimer. Reports whether no timer problems were found.\n// The caller must have locked the timers for pp.\nfunc cleantimers(pp *p) {\n\tfor {\n\t\tif len(pp.timers) == 0 { // 判断长度\n\t\t\treturn\n\t\t}\n\t\tt := pp.timers[0] //取第一个\n\t\tif t.pp.ptr() != pp {\n\t\t\tthrow(\"cleantimers: bad p\")\n\t\t}\n\t\tswitch s := atomic.Load(&t.status); s { //需要判断状态\n\t\tcase timerDeleted:\n\t\t\tif !atomic.Cas(&t.status, s, timerRemoving) { //非删除中\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdodeltimer0(pp) //移除timer0\n\t\t\tif !atomic.Cas(&t.status, timerRemoving, timerRemoved) {\n\t\t\t\tbadTimer()\n\t\t\t}\n\t\t\tatomic.Xadd(&pp.deletedTimers, -1)\n\t\tcase timerModifiedEarlier, timerModifiedLater: // 修改前或者修改后的状态\n\t\t\tif !atomic.Cas(&t.status, s, timerMoving) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\t// Now we can change the when field.\n\t\t\tt.when = t.nextwhen // 指针后移\n\t\t\t// Move t to the right position.\n\t\t\tdodeltimer0(pp) // 删除最底下的元素\n\t\t\tdoaddtimer(pp, t) // 重新绑定P和t的关系\n\t\t\tif s == timerModifiedEarlier {\n\t\t\t\tatomic.Xadd(&pp.adjustTimers, -1)\n\t\t\t}\n\t\t\tif !atomic.Cas(&t.status, timerMoving, timerWaiting) {\n\t\t\t\tbadTimer()\n\t\t\t}\n\t\tdefault:\n\t\t\t// Head of timers does not need adjustment.\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n##### dodeltimer0\n\n```go\n// dodeltimer0 removes timer 0 from the current P's heap.\n// We are locked on the P when this is called.\n// It reports whether it saw no problems due to races.\n// The caller must have locked the timers for pp.\nfunc dodeltimer0(pp *p) {\n\tif t := pp.timers[0]; t.pp.ptr() != pp {\n\t\tthrow(\"dodeltimer0: wrong P\")\n\t} else {\n\t\tt.pp = 0\n\t}\n\tlast := len(pp.timers) - 1 // 获取第一个timers\n\tif last > 0 {\n\t\tpp.timers[0] = pp.timers[last] // 栈底--->栈顶\n\t}\n\tpp.timers[last] = nil // 置空\n\tpp.timers = pp.timers[:last] //重新赋值\n\tif last > 0 {\n\t\tsiftdownTimer(pp.timers, 0)  // 重新排序\n\t}\n\tupdateTimer0When(pp) // 更新P中的when\n\tatomic.Xadd(&pp.numTimers, -1) // 更新数量\n}\n\n```\n\n### 参考\n* [NewTicker官方实现](https://github.com/golang/go/blob/master/src/time/tick.go#L39)\n\n\n* [StartTimer底层实现](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203)\n* atomic\n    * atomic.Store64\n    * atomic.Xadd","slug":"32-go-ticker-内存泄露","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d50002bzfqxgiinhgpt","content":"<h3 id=\"前序：\"><a class=\"header-anchor\" href=\"#前序：\">¶</a>前序：</h3>\n<p>不知道你们有没有经历过这种情况：</p>\n<blockquote>\n<p>测试示例图片：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp\" alt=\"\"></p>\n<span id=\"more\"></span>\n<blockquote>\n<p>说的简单点：内存炸了呗…OOM</p>\n</blockquote>\n<h3 id=\"引言\"><a class=\"header-anchor\" href=\"#引言\">¶</a>引言</h3>\n<blockquote>\n<p>go version go1.14.14 darwin/amd64</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最近的坑是真的多，当然这种坑在大项目中，一不小心就写出来了,</span><br><span class=\"line\"></span><br><span class=\"line\">人多，项目大，各种各样的花式操作都出来了,在所难免，</span><br><span class=\"line\">能做的就是分析问题，总结，记录，防止下次自己犯错，同时也可以加深理解。</span><br></pre></td></tr></table></figure>\n<h3 id=\"起因：\"><a class=\"header-anchor\" href=\"#起因：\">¶</a>起因：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">XXX</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码 几十行...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++&#123;</span><br><span class=\"line\">\t    ticker := time.NewTicker(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟业务代码</span></span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;defer close&quot;</span>)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> &lt;-ticker.C:</span><br><span class=\"line\">                <span class=\"comment\">// 业务代码.....</span></span><br><span class=\"line\">                    fmt.Println(<span class=\"string\">&quot;time 5&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">case</span> &lt;-doneChan:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码 几十行...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发生了什么？\"><a class=\"header-anchor\" href=\"#发生了什么？\">¶</a>发生了什么？</h4>\n<blockquote>\n<p>上面的代码，不晓得看出来什么问题了么…</p>\n</blockquote>\n<h3 id=\"关键点：\"><a class=\"header-anchor\" href=\"#关键点：\">¶</a>关键点：</h3>\n<p>ticker没有stop</p>\n<p><a href=\"https://github.com/golang/go/blob/master/src/time/tick.go#L62\">官方解释</a></p>\n<h4 id=\"Ticker不能被回收导致\"><a class=\"header-anchor\" href=\"#Ticker不能被回收导致\">¶</a>Ticker不能被回收导致</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_053201.webp\" alt=\"\"></p>\n<h4 id=\"为何不能被回收？\"><a class=\"header-anchor\" href=\"#为何不能被回收？\">¶</a>为何不能被回收？</h4>\n<h5 id=\"NewTicker实现：\"><a class=\"header-anchor\" href=\"#NewTicker实现：\">¶</a>NewTicker实现：</h5>\n<p><a href=\"https://github.com/golang/go/blob/master/src/time/tick.go#L39\">NewTicker官方实现</a></p>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203\">startTimer底层实现</a></p>\n<h6 id=\"addtimer\"><a class=\"header-anchor\" href=\"#addtimer\">¶</a>addtimer</h6>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// addtimer adds a timer to the current P.</span></span><br><span class=\"line\"><span class=\"comment\">// This should only be called with a newly created timer.</span></span><br><span class=\"line\"><span class=\"comment\">// That avoids the risk of changing the when field of a timer in some P&#x27;s heap,</span></span><br><span class=\"line\"><span class=\"comment\">// which could cause the heap to become unsorted.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addtimer</span><span class=\"params\">(t *timer)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// when must never be negative; otherwise runtimer will overflow</span></span><br><span class=\"line\">\t<span class=\"comment\">// during its delta calculation and never expire other runtime timers.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t.when &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tt.when = maxWhen</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t.status != timerNoStatus &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;addtimer called with initialized timer&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt.status = timerWaiting</span><br><span class=\"line\"></span><br><span class=\"line\">\twhen := t.when</span><br><span class=\"line\"></span><br><span class=\"line\">\tpp := getg().m.p.ptr() <span class=\"comment\">// 获取当前的P</span></span><br><span class=\"line\">\tlock(&amp;pp.timersLock) <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">\tcleantimers(pp) <span class=\"comment\">// 调整p.timers栈顶元素</span></span><br><span class=\"line\">\tdoaddtimer(pp, t) <span class=\"comment\">// t绑定下p</span></span><br><span class=\"line\">\tunlock(&amp;pp.timersLock) </span><br><span class=\"line\"></span><br><span class=\"line\">\twakeNetPoller(when)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"doaddtimer\"><a class=\"header-anchor\" href=\"#doaddtimer\">¶</a>doaddtimer</h6>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// doaddtimer adds t to the current P&#x27;s heap.</span></span><br><span class=\"line\"><span class=\"comment\">// The caller must have locked the timers for pp.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doaddtimer</span><span class=\"params\">(pp *p, t *timer)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Timers rely on the network poller, so make sure the poller</span></span><br><span class=\"line\">\t<span class=\"comment\">// has started.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> netpollInited == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tnetpollGenericInit()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t.pp != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;doaddtimer: P already set in timer&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt.pp.set(pp)</span><br><span class=\"line\">\ti := <span class=\"built_in\">len</span>(pp.timers)</span><br><span class=\"line\">\tpp.timers = <span class=\"built_in\">append</span>(pp.timers, t) <span class=\"comment\">// p上添加一个timer</span></span><br><span class=\"line\">\tsiftupTimer(pp.timers, i) <span class=\"comment\">// 堆调整算法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t == pp.timers[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tatomic.Store64(&amp;pp.timer0When, <span class=\"type\">uint64</span>(t.when))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tatomic.Xadd(&amp;pp.numTimers, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展：\"><a class=\"header-anchor\" href=\"#拓展：\">¶</a>拓展：</h3>\n<h4 id=\"cleantimers过程：\"><a class=\"header-anchor\" href=\"#cleantimers过程：\">¶</a>cleantimers过程：</h4>\n<ul>\n<li>判断长度</li>\n<li>判断上一个timer状态</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cleantimers cleans up the head of the timer queue. This speeds up</span></span><br><span class=\"line\"><span class=\"comment\">// programs that create and delete timers; leaving them in the heap</span></span><br><span class=\"line\"><span class=\"comment\">// slows down addtimer. Reports whether no timer problems were found.</span></span><br><span class=\"line\"><span class=\"comment\">// The caller must have locked the timers for pp.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cleantimers</span><span class=\"params\">(pp *p)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(pp.timers) == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 判断长度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt := pp.timers[<span class=\"number\">0</span>] <span class=\"comment\">//取第一个</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t.pp.ptr() != pp &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;cleantimers: bad p&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> s := atomic.Load(&amp;t.status); s &#123; <span class=\"comment\">//需要判断状态</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> timerDeleted:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, s, timerRemoving) &#123; <span class=\"comment\">//非删除中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tdodeltimer0(pp) <span class=\"comment\">//移除timer0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, timerRemoving, timerRemoved) &#123;</span><br><span class=\"line\">\t\t\t\tbadTimer()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tatomic.Xadd(&amp;pp.deletedTimers, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> timerModifiedEarlier, timerModifiedLater: <span class=\"comment\">// 修改前或者修改后的状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, s, timerMoving) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Now we can change the when field.</span></span><br><span class=\"line\">\t\t\tt.when = t.nextwhen <span class=\"comment\">// 指针后移</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Move t to the right position.</span></span><br><span class=\"line\">\t\t\tdodeltimer0(pp) <span class=\"comment\">// 删除最底下的元素</span></span><br><span class=\"line\">\t\t\tdoaddtimer(pp, t) <span class=\"comment\">// 重新绑定P和t的关系</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> s == timerModifiedEarlier &#123;</span><br><span class=\"line\">\t\t\t\tatomic.Xadd(&amp;pp.adjustTimers, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, timerMoving, timerWaiting) &#123;</span><br><span class=\"line\">\t\t\t\tbadTimer()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Head of timers does not need adjustment.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"dodeltimer0\"><a class=\"header-anchor\" href=\"#dodeltimer0\">¶</a>dodeltimer0</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dodeltimer0 removes timer 0 from the current P&#x27;s heap.</span></span><br><span class=\"line\"><span class=\"comment\">// We are locked on the P when this is called.</span></span><br><span class=\"line\"><span class=\"comment\">// It reports whether it saw no problems due to races.</span></span><br><span class=\"line\"><span class=\"comment\">// The caller must have locked the timers for pp.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dodeltimer0</span><span class=\"params\">(pp *p)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t := pp.timers[<span class=\"number\">0</span>]; t.pp.ptr() != pp &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;dodeltimer0: wrong P&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tt.pp = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlast := <span class=\"built_in\">len</span>(pp.timers) - <span class=\"number\">1</span> <span class=\"comment\">// 获取第一个timers</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> last &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tpp.timers[<span class=\"number\">0</span>] = pp.timers[last] <span class=\"comment\">// 栈底---&gt;栈顶</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpp.timers[last] = <span class=\"literal\">nil</span> <span class=\"comment\">// 置空</span></span><br><span class=\"line\">\tpp.timers = pp.timers[:last] <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> last &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tsiftdownTimer(pp.timers, <span class=\"number\">0</span>)  <span class=\"comment\">// 重新排序</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tupdateTimer0When(pp) <span class=\"comment\">// 更新P中的when</span></span><br><span class=\"line\">\tatomic.Xadd(&amp;pp.numTimers, <span class=\"number\">-1</span>) <span class=\"comment\">// 更新数量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/golang/go/blob/master/src/time/tick.go#L39\">NewTicker官方实现</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203\">StartTimer底层实现</a></p>\n</li>\n<li>\n<p>atomic</p>\n<ul>\n<li>atomic.Store64</li>\n<li>atomic.Xadd</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序：\"><a class=\"header-anchor\" href=\"#前序：\">¶</a>前序：</h3>\n<p>不知道你们有没有经历过这种情况：</p>\n<blockquote>\n<p>测试示例图片：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp\" alt=\"\"></p>","more":"<blockquote>\n<p>说的简单点：内存炸了呗…OOM</p>\n</blockquote>\n<h3 id=\"引言\"><a class=\"header-anchor\" href=\"#引言\">¶</a>引言</h3>\n<blockquote>\n<p>go version go1.14.14 darwin/amd64</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">最近的坑是真的多，当然这种坑在大项目中，一不小心就写出来了,</span><br><span class=\"line\"></span><br><span class=\"line\">人多，项目大，各种各样的花式操作都出来了,在所难免，</span><br><span class=\"line\">能做的就是分析问题，总结，记录，防止下次自己犯错，同时也可以加深理解。</span><br></pre></td></tr></table></figure>\n<h3 id=\"起因：\"><a class=\"header-anchor\" href=\"#起因：\">¶</a>起因：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">XXX</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码 几十行...</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100000</span>;i++&#123;</span><br><span class=\"line\">\t    ticker := time.NewTicker(<span class=\"number\">10</span> * time.Second)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟业务代码</span></span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;defer close&quot;</span>)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> &lt;-ticker.C:</span><br><span class=\"line\">                <span class=\"comment\">// 业务代码.....</span></span><br><span class=\"line\">                    fmt.Println(<span class=\"string\">&quot;time 5&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">case</span> &lt;-doneChan:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码 几十行...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"发生了什么？\"><a class=\"header-anchor\" href=\"#发生了什么？\">¶</a>发生了什么？</h4>\n<blockquote>\n<p>上面的代码，不晓得看出来什么问题了么…</p>\n</blockquote>\n<h3 id=\"关键点：\"><a class=\"header-anchor\" href=\"#关键点：\">¶</a>关键点：</h3>\n<p>ticker没有stop</p>\n<p><a href=\"https://github.com/golang/go/blob/master/src/time/tick.go#L62\">官方解释</a></p>\n<h4 id=\"Ticker不能被回收导致\"><a class=\"header-anchor\" href=\"#Ticker不能被回收导致\">¶</a>Ticker不能被回收导致</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_053201.webp\" alt=\"\"></p>\n<h4 id=\"为何不能被回收？\"><a class=\"header-anchor\" href=\"#为何不能被回收？\">¶</a>为何不能被回收？</h4>\n<h5 id=\"NewTicker实现：\"><a class=\"header-anchor\" href=\"#NewTicker实现：\">¶</a>NewTicker实现：</h5>\n<p><a href=\"https://github.com/golang/go/blob/master/src/time/tick.go#L39\">NewTicker官方实现</a></p>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203\">startTimer底层实现</a></p>\n<h6 id=\"addtimer\"><a class=\"header-anchor\" href=\"#addtimer\">¶</a>addtimer</h6>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// addtimer adds a timer to the current P.</span></span><br><span class=\"line\"><span class=\"comment\">// This should only be called with a newly created timer.</span></span><br><span class=\"line\"><span class=\"comment\">// That avoids the risk of changing the when field of a timer in some P&#x27;s heap,</span></span><br><span class=\"line\"><span class=\"comment\">// which could cause the heap to become unsorted.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addtimer</span><span class=\"params\">(t *timer)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// when must never be negative; otherwise runtimer will overflow</span></span><br><span class=\"line\">\t<span class=\"comment\">// during its delta calculation and never expire other runtime timers.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t.when &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tt.when = maxWhen</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t.status != timerNoStatus &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;addtimer called with initialized timer&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt.status = timerWaiting</span><br><span class=\"line\"></span><br><span class=\"line\">\twhen := t.when</span><br><span class=\"line\"></span><br><span class=\"line\">\tpp := getg().m.p.ptr() <span class=\"comment\">// 获取当前的P</span></span><br><span class=\"line\">\tlock(&amp;pp.timersLock) <span class=\"comment\">// 加锁</span></span><br><span class=\"line\">\tcleantimers(pp) <span class=\"comment\">// 调整p.timers栈顶元素</span></span><br><span class=\"line\">\tdoaddtimer(pp, t) <span class=\"comment\">// t绑定下p</span></span><br><span class=\"line\">\tunlock(&amp;pp.timersLock) </span><br><span class=\"line\"></span><br><span class=\"line\">\twakeNetPoller(when)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"doaddtimer\"><a class=\"header-anchor\" href=\"#doaddtimer\">¶</a>doaddtimer</h6>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// doaddtimer adds t to the current P&#x27;s heap.</span></span><br><span class=\"line\"><span class=\"comment\">// The caller must have locked the timers for pp.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doaddtimer</span><span class=\"params\">(pp *p, t *timer)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Timers rely on the network poller, so make sure the poller</span></span><br><span class=\"line\">\t<span class=\"comment\">// has started.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> netpollInited == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tnetpollGenericInit()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t.pp != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;doaddtimer: P already set in timer&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt.pp.set(pp)</span><br><span class=\"line\">\ti := <span class=\"built_in\">len</span>(pp.timers)</span><br><span class=\"line\">\tpp.timers = <span class=\"built_in\">append</span>(pp.timers, t) <span class=\"comment\">// p上添加一个timer</span></span><br><span class=\"line\">\tsiftupTimer(pp.timers, i) <span class=\"comment\">// 堆调整算法</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t == pp.timers[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t\tatomic.Store64(&amp;pp.timer0When, <span class=\"type\">uint64</span>(t.when))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tatomic.Xadd(&amp;pp.numTimers, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展：\"><a class=\"header-anchor\" href=\"#拓展：\">¶</a>拓展：</h3>\n<h4 id=\"cleantimers过程：\"><a class=\"header-anchor\" href=\"#cleantimers过程：\">¶</a>cleantimers过程：</h4>\n<ul>\n<li>判断长度</li>\n<li>判断上一个timer状态</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cleantimers cleans up the head of the timer queue. This speeds up</span></span><br><span class=\"line\"><span class=\"comment\">// programs that create and delete timers; leaving them in the heap</span></span><br><span class=\"line\"><span class=\"comment\">// slows down addtimer. Reports whether no timer problems were found.</span></span><br><span class=\"line\"><span class=\"comment\">// The caller must have locked the timers for pp.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cleantimers</span><span class=\"params\">(pp *p)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(pp.timers) == <span class=\"number\">0</span> &#123; <span class=\"comment\">// 判断长度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tt := pp.timers[<span class=\"number\">0</span>] <span class=\"comment\">//取第一个</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> t.pp.ptr() != pp &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;cleantimers: bad p&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> s := atomic.Load(&amp;t.status); s &#123; <span class=\"comment\">//需要判断状态</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> timerDeleted:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, s, timerRemoving) &#123; <span class=\"comment\">//非删除中</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tdodeltimer0(pp) <span class=\"comment\">//移除timer0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, timerRemoving, timerRemoved) &#123;</span><br><span class=\"line\">\t\t\t\tbadTimer()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tatomic.Xadd(&amp;pp.deletedTimers, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> timerModifiedEarlier, timerModifiedLater: <span class=\"comment\">// 修改前或者修改后的状态</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, s, timerMoving) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Now we can change the when field.</span></span><br><span class=\"line\">\t\t\tt.when = t.nextwhen <span class=\"comment\">// 指针后移</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Move t to the right position.</span></span><br><span class=\"line\">\t\t\tdodeltimer0(pp) <span class=\"comment\">// 删除最底下的元素</span></span><br><span class=\"line\">\t\t\tdoaddtimer(pp, t) <span class=\"comment\">// 重新绑定P和t的关系</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> s == timerModifiedEarlier &#123;</span><br><span class=\"line\">\t\t\t\tatomic.Xadd(&amp;pp.adjustTimers, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !atomic.Cas(&amp;t.status, timerMoving, timerWaiting) &#123;</span><br><span class=\"line\">\t\t\t\tbadTimer()</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Head of timers does not need adjustment.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"dodeltimer0\"><a class=\"header-anchor\" href=\"#dodeltimer0\">¶</a>dodeltimer0</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dodeltimer0 removes timer 0 from the current P&#x27;s heap.</span></span><br><span class=\"line\"><span class=\"comment\">// We are locked on the P when this is called.</span></span><br><span class=\"line\"><span class=\"comment\">// It reports whether it saw no problems due to races.</span></span><br><span class=\"line\"><span class=\"comment\">// The caller must have locked the timers for pp.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dodeltimer0</span><span class=\"params\">(pp *p)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> t := pp.timers[<span class=\"number\">0</span>]; t.pp.ptr() != pp &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;dodeltimer0: wrong P&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tt.pp = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlast := <span class=\"built_in\">len</span>(pp.timers) - <span class=\"number\">1</span> <span class=\"comment\">// 获取第一个timers</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> last &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tpp.timers[<span class=\"number\">0</span>] = pp.timers[last] <span class=\"comment\">// 栈底---&gt;栈顶</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpp.timers[last] = <span class=\"literal\">nil</span> <span class=\"comment\">// 置空</span></span><br><span class=\"line\">\tpp.timers = pp.timers[:last] <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> last &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tsiftdownTimer(pp.timers, <span class=\"number\">0</span>)  <span class=\"comment\">// 重新排序</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tupdateTimer0When(pp) <span class=\"comment\">// 更新P中的when</span></span><br><span class=\"line\">\tatomic.Xadd(&amp;pp.numTimers, <span class=\"number\">-1</span>) <span class=\"comment\">// 更新数量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\">¶</a>参考</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/golang/go/blob/master/src/time/tick.go#L39\">NewTicker官方实现</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/time.go#L203\">StartTimer底层实现</a></p>\n</li>\n<li>\n<p>atomic</p>\n<ul>\n<li>atomic.Store64</li>\n<li>atomic.Xadd</li>\n</ul>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp","popularPost_tmp_gaData":{"updated":"Thu Feb 04 2021 12:01:17 GMT+0800 (中国标准时间)","title":"「32」Go  Ticker 内存泄露","path":"archives/53e1932f.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp","excerpt":"<h3 id=\"前序：\"><a class=\"header-anchor\" href=\"#前序：\">¶</a>前序：</h3>\n<p>不知道你们有没有经历过这种情况：</p>\n<blockquote>\n<p>测试示例图片：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210204_051425.webp\" alt=\"\"></p>","date":{"_isAMomentObject":true,"_i":"2021-02-04T04:01:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-04T04:01:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","ticker","defer"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3849},{"title":"「33」Float IEEE标准","date":"2021-02-06T02:01:17.000Z","updated":"2021-02-06T02:01:17.000Z","keywords":"Go,IEEE,Float","mathjax":true,"abbrlink":"257c4ce2","_content":"\n### 前序\n\n前几天踩坑Float类型的计算问题,今天来系统的总结下float相关的知识点.\n\n### 掌握关键点:\n\n* float的标准是什么?\n* float的位计算规则\n* float场景\n* float计算改进\n\n<!--more-->\n### Float的标准?\n\n#### 国际组织定义\n\n[wiki-->float定义](https://zh.wikipedia.org/wiki/IEEE_754)\n\n\n#### 表示方法\n\n$$ value =  sign * exponent * fraction $$\n\n* value: 实际值\n* sign bit: 符号位\n* exponent bit: 指数便宜位\n* fraction: 分数值\n\n具体表示:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_104959.webp)\n\n#### 单精度和双精度\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_110116.png)\n\n\n\n#### 特殊值:\n\n* 无穷: Inf\n* 非数值: NaN\n\n### Float位计算规则\n\n#### 原码\n\n* 高位表示符号位,其余为值; ⚠️:不能直接参与计算\n\n#### 反码\n\n* 正数反码为本身\n* 负数保留符号位,其它位按位取反.\n\n```\n例如 :\n[+7]原 = 00000111 [+7]反 = 00000111 \n[-7]原 = 10000111 [-7]反 = 11111000\n```\n\n#### 补码\n* 正数的补码==原码==补码\n* 负数补码=反码+1\n\n#### 计算形式:\n\n$$ v = (-1)^s * M * 2^E $$\n\n##### 说明:\n\n* $(-1)^s$表示符号位\n* M表示有效数字\n* $2^E$表示指数位\n\n\n```go\neg:\n-0.5 => -0.1[二进制]\n=> -1.0 * 2^-1\n=> (-1)^1 * 1.0 * 2^-1\n=> s=1，M=1.0，E=-1\n```\n\n#### float类型的加法:\n\n* 对阶\n* 尾数\n* 规格化\n* 舍入处理\n* 溢出判断\n\n#### $0.3+1.6=?$\n```\na=(0.3)10=(0011 1110 1001 1001 1001 1001 1001 1010)2    Sa=0    Ea=011 1110 1    Ma=1.001 1001 1001 1001 1001 1010\n\nb=(1.6)10=(0011 1111 1100 1100 1100 1100 1100 1101)2      Sb=0    Eb=011 1111 1     Mb=1.100 1100 1100 1100 1100 1101\n```\n\n##### 对阶\n\n\n>简单的说就是需要阶码对齐,使其尾数可以进行加减运算,即:\n\n$ ⊿E = E_b -E_a $ \n\n\n```go\nEa<Eb   Eb-Ea=2\n\nMa要调整为 0.0 1001 1001 1001 1001 1001 10       10\n\nE=011 1111 1\n```\n\n##### 尾数\n```go\n  0.01001100110011001100110\n+ 1.10011001100110011001101\n----------------------------\n  1.11100110011001100110011\n```\n\n##### 规格化\n尾数的格式 $ 1.M $,尾数可能是非规格化的,所以需要左规和右规操作:\n\n* 左规操作: 尾数左移,阶码减值\n* 右规操作: 尾数右移,阶码+值\n\n\n$ 目的: 1 \\leq M < 2 $\n\n- [x] 1.11100110011001100110011‬ \n \n##### 舍入处理\n\n>四种舍入方式:\n\n* 就近舍入: 四舍五入\n* 朝+∞舍入\n* 朝-∞舍入\n* 朝0舍入\n\n\n```go\n在对阶时，Ma有右移，且第一次最高为1，第二次为0，\n所以按\"0舍1入\"， ==> 精度丢失的关键, \n尾数运算结果调整为 1.11100110011001100110100\n```\n\n##### 溢出判断\n\n> 判断结果标准: 运算结果的阶码\n\n```go\na+b=(0  01111111  11100110011001100110100)2\n=(0011 1111 1111 0011 0011 0011 0011 0100)2=(3FF33334)16\n\n转为10进制\n\na+b=1.90000010\n```\n\n\n### float计算改进\n\n#### 尽量避免使用高精度且重要的数据计算: 如: ¥\n\n#### 统一取舍位数\n* 统一保留\n* 统一取舍算法\n\n\n#### 建议用int/string类型\n\n* 缺点:\n    * 牺牲性能\n    * 转换复杂\n* 优点:\n    * 提高准确度 \n    * 处理可多元化\n\n","source":"_posts/33-IEEE745-Float.md","raw":"---\ntitle: 「33」Float IEEE标准\ndate: '2021/2/6 10:01:17'\nupdated: '2021/2/6 10:01:17'\nkeywords: 'Go,IEEE,Float'\ntags:\n  - Go\n  - IEEE\n  - Day\n  - Float\n  - 位运算\nmathjax: true\nabbrlink: 257c4ce2\n---\n\n### 前序\n\n前几天踩坑Float类型的计算问题,今天来系统的总结下float相关的知识点.\n\n### 掌握关键点:\n\n* float的标准是什么?\n* float的位计算规则\n* float场景\n* float计算改进\n\n<!--more-->\n### Float的标准?\n\n#### 国际组织定义\n\n[wiki-->float定义](https://zh.wikipedia.org/wiki/IEEE_754)\n\n\n#### 表示方法\n\n$$ value =  sign * exponent * fraction $$\n\n* value: 实际值\n* sign bit: 符号位\n* exponent bit: 指数便宜位\n* fraction: 分数值\n\n具体表示:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_104959.webp)\n\n#### 单精度和双精度\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_110116.png)\n\n\n\n#### 特殊值:\n\n* 无穷: Inf\n* 非数值: NaN\n\n### Float位计算规则\n\n#### 原码\n\n* 高位表示符号位,其余为值; ⚠️:不能直接参与计算\n\n#### 反码\n\n* 正数反码为本身\n* 负数保留符号位,其它位按位取反.\n\n```\n例如 :\n[+7]原 = 00000111 [+7]反 = 00000111 \n[-7]原 = 10000111 [-7]反 = 11111000\n```\n\n#### 补码\n* 正数的补码==原码==补码\n* 负数补码=反码+1\n\n#### 计算形式:\n\n$$ v = (-1)^s * M * 2^E $$\n\n##### 说明:\n\n* $(-1)^s$表示符号位\n* M表示有效数字\n* $2^E$表示指数位\n\n\n```go\neg:\n-0.5 => -0.1[二进制]\n=> -1.0 * 2^-1\n=> (-1)^1 * 1.0 * 2^-1\n=> s=1，M=1.0，E=-1\n```\n\n#### float类型的加法:\n\n* 对阶\n* 尾数\n* 规格化\n* 舍入处理\n* 溢出判断\n\n#### $0.3+1.6=?$\n```\na=(0.3)10=(0011 1110 1001 1001 1001 1001 1001 1010)2    Sa=0    Ea=011 1110 1    Ma=1.001 1001 1001 1001 1001 1010\n\nb=(1.6)10=(0011 1111 1100 1100 1100 1100 1100 1101)2      Sb=0    Eb=011 1111 1     Mb=1.100 1100 1100 1100 1100 1101\n```\n\n##### 对阶\n\n\n>简单的说就是需要阶码对齐,使其尾数可以进行加减运算,即:\n\n$ ⊿E = E_b -E_a $ \n\n\n```go\nEa<Eb   Eb-Ea=2\n\nMa要调整为 0.0 1001 1001 1001 1001 1001 10       10\n\nE=011 1111 1\n```\n\n##### 尾数\n```go\n  0.01001100110011001100110\n+ 1.10011001100110011001101\n----------------------------\n  1.11100110011001100110011\n```\n\n##### 规格化\n尾数的格式 $ 1.M $,尾数可能是非规格化的,所以需要左规和右规操作:\n\n* 左规操作: 尾数左移,阶码减值\n* 右规操作: 尾数右移,阶码+值\n\n\n$ 目的: 1 \\leq M < 2 $\n\n- [x] 1.11100110011001100110011‬ \n \n##### 舍入处理\n\n>四种舍入方式:\n\n* 就近舍入: 四舍五入\n* 朝+∞舍入\n* 朝-∞舍入\n* 朝0舍入\n\n\n```go\n在对阶时，Ma有右移，且第一次最高为1，第二次为0，\n所以按\"0舍1入\"， ==> 精度丢失的关键, \n尾数运算结果调整为 1.11100110011001100110100\n```\n\n##### 溢出判断\n\n> 判断结果标准: 运算结果的阶码\n\n```go\na+b=(0  01111111  11100110011001100110100)2\n=(0011 1111 1111 0011 0011 0011 0011 0100)2=(3FF33334)16\n\n转为10进制\n\na+b=1.90000010\n```\n\n\n### float计算改进\n\n#### 尽量避免使用高精度且重要的数据计算: 如: ¥\n\n#### 统一取舍位数\n* 统一保留\n* 统一取舍算法\n\n\n#### 建议用int/string类型\n\n* 缺点:\n    * 牺牲性能\n    * 转换复杂\n* 优点:\n    * 提高准确度 \n    * 处理可多元化\n\n","slug":"33-IEEE745-Float","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d50002dzfqxetry7cc4","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>前几天踩坑Float类型的计算问题,今天来系统的总结下float相关的知识点.</p>\n<h3 id=\"掌握关键点\"><a class=\"header-anchor\" href=\"#掌握关键点\">¶</a>掌握关键点:</h3>\n<ul>\n<li>float的标准是什么?</li>\n<li>float的位计算规则</li>\n<li>float场景</li>\n<li>float计算改进</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"Float的标准\"><a class=\"header-anchor\" href=\"#Float的标准\">¶</a>Float的标准?</h3>\n<h4 id=\"国际组织定义\"><a class=\"header-anchor\" href=\"#国际组织定义\">¶</a>国际组织定义</h4>\n<p><a href=\"https://zh.wikipedia.org/wiki/IEEE_754\">wiki–&gt;float定义</a></p>\n<h4 id=\"表示方法\"><a class=\"header-anchor\" href=\"#表示方法\">¶</a>表示方法</h4>\n<p style=\"\"><img src=\"https://math.now.sh?from=value%20%3D%20%20sign%20*%20exponent%20*%20fraction%20%0A\" /></p><ul>\n<li>value: 实际值</li>\n<li>sign bit: 符号位</li>\n<li>exponent bit: 指数便宜位</li>\n<li>fraction: 分数值</li>\n</ul>\n<p>具体表示:</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_104959.webp\" alt=\"\"></p>\n<h4 id=\"单精度和双精度\"><a class=\"header-anchor\" href=\"#单精度和双精度\">¶</a>单精度和双精度</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_110116.png\" alt=\"\"></p>\n<h4 id=\"特殊值\"><a class=\"header-anchor\" href=\"#特殊值\">¶</a>特殊值:</h4>\n<ul>\n<li>无穷: Inf</li>\n<li>非数值: NaN</li>\n</ul>\n<h3 id=\"Float位计算规则\"><a class=\"header-anchor\" href=\"#Float位计算规则\">¶</a>Float位计算规则</h3>\n<h4 id=\"原码\"><a class=\"header-anchor\" href=\"#原码\">¶</a>原码</h4>\n<ul>\n<li>高位表示符号位,其余为值; ⚠️:不能直接参与计算</li>\n</ul>\n<h4 id=\"反码\"><a class=\"header-anchor\" href=\"#反码\">¶</a>反码</h4>\n<ul>\n<li>正数反码为本身</li>\n<li>负数保留符号位,其它位按位取反.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如 :</span><br><span class=\"line\">[+7]原 = 00000111 [+7]反 = 00000111 </span><br><span class=\"line\">[-7]原 = 10000111 [-7]反 = 11111000</span><br></pre></td></tr></table></figure>\n<h4 id=\"补码\"><a class=\"header-anchor\" href=\"#补码\">¶</a>补码</h4>\n<ul>\n<li>正数的补码==原码==补码</li>\n<li>负数补码=反码+1</li>\n</ul>\n<h4 id=\"计算形式\"><a class=\"header-anchor\" href=\"#计算形式\">¶</a>计算形式:</h4>\n<p style=\"\"><img src=\"https://math.now.sh?from=v%20%3D%20%28-1%29%5Es%20*%20M%20*%202%5EE%20%0A\" /></p><h5 id=\"说明\"><a class=\"header-anchor\" href=\"#说明\">¶</a>说明:</h5>\n<ul>\n<li><img src=\"https://math.now.sh?inline=%28-1%29%5Es\" style=\"display:inline-block;margin: 0;\"/>表示符号位</li>\n<li>M表示有效数字</li>\n<li><img src=\"https://math.now.sh?inline=2%5EE\" style=\"display:inline-block;margin: 0;\"/>表示指数位</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"number\">-0.5</span> =&gt; <span class=\"number\">-0.1</span>[二进制]</span><br><span class=\"line\">=&gt; <span class=\"number\">-1.0</span> * <span class=\"number\">2</span>^<span class=\"number\">-1</span></span><br><span class=\"line\">=&gt; (<span class=\"number\">-1</span>)^<span class=\"number\">1</span> * <span class=\"number\">1.0</span> * <span class=\"number\">2</span>^<span class=\"number\">-1</span></span><br><span class=\"line\">=&gt; s=<span class=\"number\">1</span>，M=<span class=\"number\">1.0</span>，E=<span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"float类型的加法\"><a class=\"header-anchor\" href=\"#float类型的加法\">¶</a>float类型的加法:</h4>\n<ul>\n<li>对阶</li>\n<li>尾数</li>\n<li>规格化</li>\n<li>舍入处理</li>\n<li>溢出判断</li>\n</ul>\n<h4 id=\"0-3-1-6\"><a class=\"header-anchor\" href=\"#0-3-1-6\">¶</a><img src=\"https://math.now.sh?inline=0.3%2B1.6%3D%3F\" style=\"display:inline-block;margin: 0;\"/></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=(0.3)10=(0011 1110 1001 1001 1001 1001 1001 1010)2    Sa=0    Ea=011 1110 1    Ma=1.001 1001 1001 1001 1001 1010</span><br><span class=\"line\"></span><br><span class=\"line\">b=(1.6)10=(0011 1111 1100 1100 1100 1100 1100 1101)2      Sb=0    Eb=011 1111 1     Mb=1.100 1100 1100 1100 1100 1101</span><br></pre></td></tr></table></figure>\n<h5 id=\"对阶\"><a class=\"header-anchor\" href=\"#对阶\">¶</a>对阶</h5>\n<blockquote>\n<p>简单的说就是需要阶码对齐,使其尾数可以进行加减运算,即:</p>\n</blockquote>\n<p>$ ⊿E = E_b -E_a $</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ea&lt;Eb   Eb-Ea=<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ma要调整为 <span class=\"number\">0.0</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">10</span>       <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">E=<span class=\"number\">011</span> <span class=\"number\">1111</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"尾数\"><a class=\"header-anchor\" href=\"#尾数\">¶</a>尾数</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">0.01001100110011001100110</span></span><br><span class=\"line\">+ <span class=\"number\">1.10011001100110011001101</span></span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">  <span class=\"number\">1.11100110011001100110011</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"规格化\"><a class=\"header-anchor\" href=\"#规格化\">¶</a>规格化</h5>\n<p>尾数的格式 $ 1.M $,尾数可能是非规格化的,所以需要左规和右规操作:</p>\n<ul>\n<li>左规操作: 尾数左移,阶码减值</li>\n<li>右规操作: 尾数右移,阶码+值</li>\n</ul>\n<p>$ 目的: 1 \\leq M &lt; 2 $</p>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\" checked=\"true\"><label for=\"checkbox0\">1.11100110011001100110011‬</label></li>\n</ul>\n<h5 id=\"舍入处理\"><a class=\"header-anchor\" href=\"#舍入处理\">¶</a>舍入处理</h5>\n<blockquote>\n<p>四种舍入方式:</p>\n</blockquote>\n<ul>\n<li>就近舍入: 四舍五入</li>\n<li>朝+∞舍入</li>\n<li>朝-∞舍入</li>\n<li>朝0舍入</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在对阶时，Ma有右移，且第一次最高为<span class=\"number\">1</span>，第二次为<span class=\"number\">0</span>，</span><br><span class=\"line\">所以按<span class=\"string\">&quot;0舍1入&quot;</span>， ==&gt; 精度丢失的关键, </span><br><span class=\"line\">尾数运算结果调整为 <span class=\"number\">1.11100110011001100110100</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"溢出判断\"><a class=\"header-anchor\" href=\"#溢出判断\">¶</a>溢出判断</h5>\n<blockquote>\n<p>判断结果标准: 运算结果的阶码</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a+b=(<span class=\"number\">0</span>  <span class=\"number\">01111111</span>  <span class=\"number\">11100110011001100110100</span>)<span class=\"number\">2</span></span><br><span class=\"line\">=(<span class=\"number\">0011</span> <span class=\"number\">1111</span> <span class=\"number\">1111</span> <span class=\"number\">0011</span> <span class=\"number\">0011</span> <span class=\"number\">0011</span> <span class=\"number\">0011</span> <span class=\"number\">0100</span>)<span class=\"number\">2</span>=(<span class=\"number\">3</span>FF33334)<span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\">转为<span class=\"number\">10</span>进制</span><br><span class=\"line\"></span><br><span class=\"line\">a+b=<span class=\"number\">1.90000010</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"float计算改进\"><a class=\"header-anchor\" href=\"#float计算改进\">¶</a>float计算改进</h3>\n<h4 id=\"尽量避免使用高精度且重要的数据计算-如-¥\"><a class=\"header-anchor\" href=\"#尽量避免使用高精度且重要的数据计算-如-¥\">¶</a>尽量避免使用高精度且重要的数据计算: 如: ¥</h4>\n<h4 id=\"统一取舍位数\"><a class=\"header-anchor\" href=\"#统一取舍位数\">¶</a>统一取舍位数</h4>\n<ul>\n<li>统一保留</li>\n<li>统一取舍算法</li>\n</ul>\n<h4 id=\"建议用int-string类型\"><a class=\"header-anchor\" href=\"#建议用int-string类型\">¶</a>建议用int/string类型</h4>\n<ul>\n<li>缺点:\n<ul>\n<li>牺牲性能</li>\n<li>转换复杂</li>\n</ul>\n</li>\n<li>优点:\n<ul>\n<li>提高准确度</li>\n<li>处理可多元化</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>前几天踩坑Float类型的计算问题,今天来系统的总结下float相关的知识点.</p>\n<h3 id=\"掌握关键点\"><a class=\"header-anchor\" href=\"#掌握关键点\">¶</a>掌握关键点:</h3>\n<ul>\n<li>float的标准是什么?</li>\n<li>float的位计算规则</li>\n<li>float场景</li>\n<li>float计算改进</li>\n</ul>","more":"<h3 id=\"Float的标准\"><a class=\"header-anchor\" href=\"#Float的标准\">¶</a>Float的标准?</h3>\n<h4 id=\"国际组织定义\"><a class=\"header-anchor\" href=\"#国际组织定义\">¶</a>国际组织定义</h4>\n<p><a href=\"https://zh.wikipedia.org/wiki/IEEE_754\">wiki–&gt;float定义</a></p>\n<h4 id=\"表示方法\"><a class=\"header-anchor\" href=\"#表示方法\">¶</a>表示方法</h4>\n<p style=\"\"><img src=\"https://math.now.sh?from=value%20%3D%20%20sign%20*%20exponent%20*%20fraction%20%0A\" /></p><ul>\n<li>value: 实际值</li>\n<li>sign bit: 符号位</li>\n<li>exponent bit: 指数便宜位</li>\n<li>fraction: 分数值</li>\n</ul>\n<p>具体表示:</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_104959.webp\" alt=\"\"></p>\n<h4 id=\"单精度和双精度\"><a class=\"header-anchor\" href=\"#单精度和双精度\">¶</a>单精度和双精度</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210206_110116.png\" alt=\"\"></p>\n<h4 id=\"特殊值\"><a class=\"header-anchor\" href=\"#特殊值\">¶</a>特殊值:</h4>\n<ul>\n<li>无穷: Inf</li>\n<li>非数值: NaN</li>\n</ul>\n<h3 id=\"Float位计算规则\"><a class=\"header-anchor\" href=\"#Float位计算规则\">¶</a>Float位计算规则</h3>\n<h4 id=\"原码\"><a class=\"header-anchor\" href=\"#原码\">¶</a>原码</h4>\n<ul>\n<li>高位表示符号位,其余为值; ⚠️:不能直接参与计算</li>\n</ul>\n<h4 id=\"反码\"><a class=\"header-anchor\" href=\"#反码\">¶</a>反码</h4>\n<ul>\n<li>正数反码为本身</li>\n<li>负数保留符号位,其它位按位取反.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如 :</span><br><span class=\"line\">[+7]原 = 00000111 [+7]反 = 00000111 </span><br><span class=\"line\">[-7]原 = 10000111 [-7]反 = 11111000</span><br></pre></td></tr></table></figure>\n<h4 id=\"补码\"><a class=\"header-anchor\" href=\"#补码\">¶</a>补码</h4>\n<ul>\n<li>正数的补码==原码==补码</li>\n<li>负数补码=反码+1</li>\n</ul>\n<h4 id=\"计算形式\"><a class=\"header-anchor\" href=\"#计算形式\">¶</a>计算形式:</h4>\n<p style=\"\"><img src=\"https://math.now.sh?from=v%20%3D%20%28-1%29%5Es%20*%20M%20*%202%5EE%20%0A\" /></p><h5 id=\"说明\"><a class=\"header-anchor\" href=\"#说明\">¶</a>说明:</h5>\n<ul>\n<li><img src=\"https://math.now.sh?inline=%28-1%29%5Es\" style=\"display:inline-block;margin: 0;\"/>表示符号位</li>\n<li>M表示有效数字</li>\n<li><img src=\"https://math.now.sh?inline=2%5EE\" style=\"display:inline-block;margin: 0;\"/>表示指数位</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eg:</span><br><span class=\"line\"><span class=\"number\">-0.5</span> =&gt; <span class=\"number\">-0.1</span>[二进制]</span><br><span class=\"line\">=&gt; <span class=\"number\">-1.0</span> * <span class=\"number\">2</span>^<span class=\"number\">-1</span></span><br><span class=\"line\">=&gt; (<span class=\"number\">-1</span>)^<span class=\"number\">1</span> * <span class=\"number\">1.0</span> * <span class=\"number\">2</span>^<span class=\"number\">-1</span></span><br><span class=\"line\">=&gt; s=<span class=\"number\">1</span>，M=<span class=\"number\">1.0</span>，E=<span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"float类型的加法\"><a class=\"header-anchor\" href=\"#float类型的加法\">¶</a>float类型的加法:</h4>\n<ul>\n<li>对阶</li>\n<li>尾数</li>\n<li>规格化</li>\n<li>舍入处理</li>\n<li>溢出判断</li>\n</ul>\n<h4 id=\"0-3-1-6\"><a class=\"header-anchor\" href=\"#0-3-1-6\">¶</a><img src=\"https://math.now.sh?inline=0.3%2B1.6%3D%3F\" style=\"display:inline-block;margin: 0;\"/></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=(0.3)10=(0011 1110 1001 1001 1001 1001 1001 1010)2    Sa=0    Ea=011 1110 1    Ma=1.001 1001 1001 1001 1001 1010</span><br><span class=\"line\"></span><br><span class=\"line\">b=(1.6)10=(0011 1111 1100 1100 1100 1100 1100 1101)2      Sb=0    Eb=011 1111 1     Mb=1.100 1100 1100 1100 1100 1101</span><br></pre></td></tr></table></figure>\n<h5 id=\"对阶\"><a class=\"header-anchor\" href=\"#对阶\">¶</a>对阶</h5>\n<blockquote>\n<p>简单的说就是需要阶码对齐,使其尾数可以进行加减运算,即:</p>\n</blockquote>\n<p>$ ⊿E = E_b -E_a $</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ea&lt;Eb   Eb-Ea=<span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ma要调整为 <span class=\"number\">0.0</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">1001</span> <span class=\"number\">10</span>       <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">E=<span class=\"number\">011</span> <span class=\"number\">1111</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"尾数\"><a class=\"header-anchor\" href=\"#尾数\">¶</a>尾数</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"number\">0.01001100110011001100110</span></span><br><span class=\"line\">+ <span class=\"number\">1.10011001100110011001101</span></span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">  <span class=\"number\">1.11100110011001100110011</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"规格化\"><a class=\"header-anchor\" href=\"#规格化\">¶</a>规格化</h5>\n<p>尾数的格式 $ 1.M $,尾数可能是非规格化的,所以需要左规和右规操作:</p>\n<ul>\n<li>左规操作: 尾数左移,阶码减值</li>\n<li>右规操作: 尾数右移,阶码+值</li>\n</ul>\n<p>$ 目的: 1 \\leq M &lt; 2 $</p>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\" checked=\"true\"><label for=\"checkbox0\">1.11100110011001100110011‬</label></li>\n</ul>\n<h5 id=\"舍入处理\"><a class=\"header-anchor\" href=\"#舍入处理\">¶</a>舍入处理</h5>\n<blockquote>\n<p>四种舍入方式:</p>\n</blockquote>\n<ul>\n<li>就近舍入: 四舍五入</li>\n<li>朝+∞舍入</li>\n<li>朝-∞舍入</li>\n<li>朝0舍入</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在对阶时，Ma有右移，且第一次最高为<span class=\"number\">1</span>，第二次为<span class=\"number\">0</span>，</span><br><span class=\"line\">所以按<span class=\"string\">&quot;0舍1入&quot;</span>， ==&gt; 精度丢失的关键, </span><br><span class=\"line\">尾数运算结果调整为 <span class=\"number\">1.11100110011001100110100</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"溢出判断\"><a class=\"header-anchor\" href=\"#溢出判断\">¶</a>溢出判断</h5>\n<blockquote>\n<p>判断结果标准: 运算结果的阶码</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a+b=(<span class=\"number\">0</span>  <span class=\"number\">01111111</span>  <span class=\"number\">11100110011001100110100</span>)<span class=\"number\">2</span></span><br><span class=\"line\">=(<span class=\"number\">0011</span> <span class=\"number\">1111</span> <span class=\"number\">1111</span> <span class=\"number\">0011</span> <span class=\"number\">0011</span> <span class=\"number\">0011</span> <span class=\"number\">0011</span> <span class=\"number\">0100</span>)<span class=\"number\">2</span>=(<span class=\"number\">3</span>FF33334)<span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\">转为<span class=\"number\">10</span>进制</span><br><span class=\"line\"></span><br><span class=\"line\">a+b=<span class=\"number\">1.90000010</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"float计算改进\"><a class=\"header-anchor\" href=\"#float计算改进\">¶</a>float计算改进</h3>\n<h4 id=\"尽量避免使用高精度且重要的数据计算-如-¥\"><a class=\"header-anchor\" href=\"#尽量避免使用高精度且重要的数据计算-如-¥\">¶</a>尽量避免使用高精度且重要的数据计算: 如: ¥</h4>\n<h4 id=\"统一取舍位数\"><a class=\"header-anchor\" href=\"#统一取舍位数\">¶</a>统一取舍位数</h4>\n<ul>\n<li>统一保留</li>\n<li>统一取舍算法</li>\n</ul>\n<h4 id=\"建议用int-string类型\"><a class=\"header-anchor\" href=\"#建议用int-string类型\">¶</a>建议用int/string类型</h4>\n<ul>\n<li>缺点:\n<ul>\n<li>牺牲性能</li>\n<li>转换复杂</li>\n</ul>\n</li>\n<li>优点:\n<ul>\n<li>提高准确度</li>\n<li>处理可多元化</li>\n</ul>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://math.now.sh?from=value%20%3D%20%20sign%20*%20exponent%20*%20fraction%20%0A","popularPost_tmp_gaData":{"updated":"Sat Feb 06 2021 10:01:17 GMT+0800 (中国标准时间)","title":"「33」Float IEEE标准","path":"archives/257c4ce2.html","eyeCatchImage":"https://math.now.sh?from=value%20%3D%20%20sign%20*%20exponent%20*%20fraction%20%0A","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>前几天踩坑Float类型的计算问题,今天来系统的总结下float相关的知识点.</p>\n<h3 id=\"掌握关键点\"><a class=\"header-anchor\" href=\"#掌握关键点\">¶</a>掌握关键点:</h3>\n<ul>\n<li>float的标准是什么?</li>\n<li>float的位计算规则</li>\n<li>float场景</li>\n<li>float计算改进</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-02-06T02:01:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-06T02:01:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Float","IEEE","位运算"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1350},{"title":"「34」Go memory leak about RSS","date":"2021-02-17T13:01:17.000Z","updated":"2021-02-17T13:01:17.000Z","keywords":"Go,Runtime","mathjax":true,"abbrlink":"c0e329b8","_content":"\n### 前序:\n今天收到了封邮件 Go 1.16 release:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp)\n\n进去了看了看全部的特性,发现有个关于memory  leak「RSS」相关的issues,去看看关于Go的RSS到底是怎么计算的,\n顺带也看看这个老哥为何会问内存泄露的问题.\n\n<!--more-->\n\n### 问题:\n\n[runtime: memory leaked observed in go program #40448](https://github.com/golang/go/issues/40448)\n\n#### 简述起因:\n\n>一个tcp接受程序导致RSS不断上升. \n> 这个起了5个goroutine协程来处理请求,但是请求处理结束后,RAM并没有趋于稳定或者降低.导致了看似的memory leak.\n\n* 描述:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_095036.png)\n\n#### [关于RSS解释](https://github.com/golang/go/issues/40448#issuecomment-666350046)\n\n```\nThe current minimum heap size of a Go program is 4mb. In addition to this the operating system threads that back goroutines should be added to that as well as some non heap memory used by the runtime. In your case this may be somewhere between 7 and 9mb.\n\n// 下面的解释划重点,简单的说就是RSS受很多值的影响:swap,avaliability values等\nPlease remember that RSS is not how much memory is a program using, it is the resident segment size. Many things influence the value reported in RSS including the availability of swap and how much of the process may be swapped, if the system has reclaimed pages which we have madvise(DONTNEED) as part of the scavenger. A high RSS value does not necessarily mean that memory is not available for other processes, and so on.\n\nIf memory consumption is your primary objective I would suggest investigating https://tinygo.org/ who may (I cannot confirm) have a different approach to memory allocation.\n\nI'll defer to @randall77 and @mknyszek on the question of if the minimum heap size can be reduced.\n```\n\n### [解决办法](https://github.com/golang/go/issues/40448#issuecomment-667196117)\n\n* runtime/debug.SetGCPercent (设置gc的百分比,-1为不GC)\n* runtime.GC (调用系统GC)\n* runtime/debug.FreeOSMemory (accelerate the pace of returning unused pages to the OS)\n\n### 其它方面的问题\n\n>从这里看的话,其实这个哥们的问题并不属于go的bug,只是说对于内存使用的理解有偏差,\n觉得go运行时环境很像是unix系统,内存有多少用多少,不会是用完就释放给系统.\n\n毕竟有句话: ***空间换时间***","source":"_posts/34-Go-memory-leak-about-RSS.md","raw":"---\ntitle: 「34」Go memory leak about RSS\ndate: '2021/2/17 21:01:17'\nupdated: '2021/2/17 21:01:17'\nkeywords: 'Go,Runtime'\ntags:\n  - Go\n  - Runtime\n  - Day\n  - v1.16\nmathjax: true\nabbrlink: c0e329b8\n---\n\n### 前序:\n今天收到了封邮件 Go 1.16 release:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp)\n\n进去了看了看全部的特性,发现有个关于memory  leak「RSS」相关的issues,去看看关于Go的RSS到底是怎么计算的,\n顺带也看看这个老哥为何会问内存泄露的问题.\n\n<!--more-->\n\n### 问题:\n\n[runtime: memory leaked observed in go program #40448](https://github.com/golang/go/issues/40448)\n\n#### 简述起因:\n\n>一个tcp接受程序导致RSS不断上升. \n> 这个起了5个goroutine协程来处理请求,但是请求处理结束后,RAM并没有趋于稳定或者降低.导致了看似的memory leak.\n\n* 描述:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_095036.png)\n\n#### [关于RSS解释](https://github.com/golang/go/issues/40448#issuecomment-666350046)\n\n```\nThe current minimum heap size of a Go program is 4mb. In addition to this the operating system threads that back goroutines should be added to that as well as some non heap memory used by the runtime. In your case this may be somewhere between 7 and 9mb.\n\n// 下面的解释划重点,简单的说就是RSS受很多值的影响:swap,avaliability values等\nPlease remember that RSS is not how much memory is a program using, it is the resident segment size. Many things influence the value reported in RSS including the availability of swap and how much of the process may be swapped, if the system has reclaimed pages which we have madvise(DONTNEED) as part of the scavenger. A high RSS value does not necessarily mean that memory is not available for other processes, and so on.\n\nIf memory consumption is your primary objective I would suggest investigating https://tinygo.org/ who may (I cannot confirm) have a different approach to memory allocation.\n\nI'll defer to @randall77 and @mknyszek on the question of if the minimum heap size can be reduced.\n```\n\n### [解决办法](https://github.com/golang/go/issues/40448#issuecomment-667196117)\n\n* runtime/debug.SetGCPercent (设置gc的百分比,-1为不GC)\n* runtime.GC (调用系统GC)\n* runtime/debug.FreeOSMemory (accelerate the pace of returning unused pages to the OS)\n\n### 其它方面的问题\n\n>从这里看的话,其实这个哥们的问题并不属于go的bug,只是说对于内存使用的理解有偏差,\n觉得go运行时环境很像是unix系统,内存有多少用多少,不会是用完就释放给系统.\n\n毕竟有句话: ***空间换时间***","slug":"34-Go-memory-leak-about-RSS","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d51002gzfqx9reu990v","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p>今天收到了封邮件 Go 1.16 release:</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp\" alt=\"\"></p>\n<p>进去了看了看全部的特性,发现有个关于memory  leak「RSS」相关的issues,去看看关于Go的RSS到底是怎么计算的,<br>\n顺带也看看这个老哥为何会问内存泄露的问题.</p>\n<span id=\"more\"></span>\n<h3 id=\"问题\"><a class=\"header-anchor\" href=\"#问题\">¶</a>问题:</h3>\n<p><a href=\"https://github.com/golang/go/issues/40448\">runtime: memory leaked observed in go program #40448</a></p>\n<h4 id=\"简述起因\"><a class=\"header-anchor\" href=\"#简述起因\">¶</a>简述起因:</h4>\n<blockquote>\n<p>一个tcp接受程序导致RSS不断上升.<br>\n这个起了5个goroutine协程来处理请求,但是请求处理结束后,RAM并没有趋于稳定或者降低.导致了看似的memory leak.</p>\n</blockquote>\n<ul>\n<li>描述:</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_095036.png\" alt=\"\"></p>\n<h4 id=\"关于RSS解释\"><a class=\"header-anchor\" href=\"#关于RSS解释\">¶</a><a href=\"https://github.com/golang/go/issues/40448#issuecomment-666350046\">关于RSS解释</a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The current minimum heap size of a Go program is 4mb. In addition to this the operating system threads that back goroutines should be added to that as well as some non heap memory used by the runtime. In your case this may be somewhere between 7 and 9mb.</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面的解释划重点,简单的说就是RSS受很多值的影响:swap,avaliability values等</span><br><span class=\"line\">Please remember that RSS is not how much memory is a program using, it is the resident segment size. Many things influence the value reported in RSS including the availability of swap and how much of the process may be swapped, if the system has reclaimed pages which we have madvise(DONTNEED) as part of the scavenger. A high RSS value does not necessarily mean that memory is not available for other processes, and so on.</span><br><span class=\"line\"></span><br><span class=\"line\">If memory consumption is your primary objective I would suggest investigating https://tinygo.org/ who may (I cannot confirm) have a different approach to memory allocation.</span><br><span class=\"line\"></span><br><span class=\"line\">I&#x27;ll defer to @randall77 and @mknyszek on the question of if the minimum heap size can be reduced.</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a class=\"header-anchor\" href=\"#解决办法\">¶</a><a href=\"https://github.com/golang/go/issues/40448#issuecomment-667196117\">解决办法</a></h3>\n<ul>\n<li>runtime/debug.SetGCPercent (设置gc的百分比,-1为不GC)</li>\n<li>runtime.GC (调用系统GC)</li>\n<li>runtime/debug.FreeOSMemory (accelerate the pace of returning unused pages to the OS)</li>\n</ul>\n<h3 id=\"其它方面的问题\"><a class=\"header-anchor\" href=\"#其它方面的问题\">¶</a>其它方面的问题</h3>\n<blockquote>\n<p>从这里看的话,其实这个哥们的问题并不属于go的bug,只是说对于内存使用的理解有偏差,<br>\n觉得go运行时环境很像是unix系统,内存有多少用多少,不会是用完就释放给系统.</p>\n</blockquote>\n<p>毕竟有句话: <em><strong>空间换时间</strong></em></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p>今天收到了封邮件 Go 1.16 release:</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp\" alt=\"\"></p>\n<p>进去了看了看全部的特性,发现有个关于memory  leak「RSS」相关的issues,去看看关于Go的RSS到底是怎么计算的,<br>\n顺带也看看这个老哥为何会问内存泄露的问题.</p>","more":"<h3 id=\"问题\"><a class=\"header-anchor\" href=\"#问题\">¶</a>问题:</h3>\n<p><a href=\"https://github.com/golang/go/issues/40448\">runtime: memory leaked observed in go program #40448</a></p>\n<h4 id=\"简述起因\"><a class=\"header-anchor\" href=\"#简述起因\">¶</a>简述起因:</h4>\n<blockquote>\n<p>一个tcp接受程序导致RSS不断上升.<br>\n这个起了5个goroutine协程来处理请求,但是请求处理结束后,RAM并没有趋于稳定或者降低.导致了看似的memory leak.</p>\n</blockquote>\n<ul>\n<li>描述:</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_095036.png\" alt=\"\"></p>\n<h4 id=\"关于RSS解释\"><a class=\"header-anchor\" href=\"#关于RSS解释\">¶</a><a href=\"https://github.com/golang/go/issues/40448#issuecomment-666350046\">关于RSS解释</a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The current minimum heap size of a Go program is 4mb. In addition to this the operating system threads that back goroutines should be added to that as well as some non heap memory used by the runtime. In your case this may be somewhere between 7 and 9mb.</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面的解释划重点,简单的说就是RSS受很多值的影响:swap,avaliability values等</span><br><span class=\"line\">Please remember that RSS is not how much memory is a program using, it is the resident segment size. Many things influence the value reported in RSS including the availability of swap and how much of the process may be swapped, if the system has reclaimed pages which we have madvise(DONTNEED) as part of the scavenger. A high RSS value does not necessarily mean that memory is not available for other processes, and so on.</span><br><span class=\"line\"></span><br><span class=\"line\">If memory consumption is your primary objective I would suggest investigating https://tinygo.org/ who may (I cannot confirm) have a different approach to memory allocation.</span><br><span class=\"line\"></span><br><span class=\"line\">I&#x27;ll defer to @randall77 and @mknyszek on the question of if the minimum heap size can be reduced.</span><br></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a class=\"header-anchor\" href=\"#解决办法\">¶</a><a href=\"https://github.com/golang/go/issues/40448#issuecomment-667196117\">解决办法</a></h3>\n<ul>\n<li>runtime/debug.SetGCPercent (设置gc的百分比,-1为不GC)</li>\n<li>runtime.GC (调用系统GC)</li>\n<li>runtime/debug.FreeOSMemory (accelerate the pace of returning unused pages to the OS)</li>\n</ul>\n<h3 id=\"其它方面的问题\"><a class=\"header-anchor\" href=\"#其它方面的问题\">¶</a>其它方面的问题</h3>\n<blockquote>\n<p>从这里看的话,其实这个哥们的问题并不属于go的bug,只是说对于内存使用的理解有偏差,<br>\n觉得go运行时环境很像是unix系统,内存有多少用多少,不会是用完就释放给系统.</p>\n</blockquote>\n<p>毕竟有句话: <em><strong>空间换时间</strong></em></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp","popularPost_tmp_gaData":{"updated":"Wed Feb 17 2021 21:01:17 GMT+0800 (中国标准时间)","title":"「34」Go memory leak about RSS","path":"archives/c0e329b8.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p>今天收到了封邮件 Go 1.16 release:</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_094336.webp\" alt=\"\"></p>\n<p>进去了看了看全部的特性,发现有个关于memory  leak「RSS」相关的issues,去看看关于Go的RSS到底是怎么计算的,<br>\n顺带也看看这个老哥为何会问内存泄露的问题.</p>","date":{"_isAMomentObject":true,"_i":"2021-02-17T13:01:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-17T13:01:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Runtime","v1.16"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1352},{"title":"「35」runtime:recover not correctly recover from panic","date":"2021-02-17T14:10:17.000Z","updated":"2021-02-17T14:10:17.000Z","keywords":"Go,Runtime","mathjax":true,"abbrlink":"d586b949","_content":"\n\n接着上面的继续看看v1.16更新,runtime包改动的:\n\n[runtime: recover does not correctly recover from panic](https://github.com/golang/go/issues/43921)\n\n简单的说原因,你认为下面程序的输出结果为what?\n<!--more-->\n\n### eg\n\n```go\n\nfunc main() {\n\tdefer func() {\n\t\texpect(1, recover())\n\t}()\n\tfunc() {\n\t\tdefer func() {\n\t\t\tdefer func() {\n\t\t\t\texpect(4, recover())\n\t\t\t}()\n\t\t\tpanic(4)\n\t\t}()\n\t\tpanic(1)\n\n\t\t// Prevent open-coded defers; not executed.\n\t\tfor {\n\t\t\tdefer panic(-1)\n\t\t\tbreak\n\t\t}\n\t}()\n}\n\nfunc expect(n int, err interface{}) {\n\tprintln(\"expect\", n)\n\tif n != err {\n\t\tlog.Fatalf(\"have %v, want %v\", err, n)\n\t}\n}\n```\n\n#### 理想型:\n\n```\nexpect 4\nexpect 1\n```\n#### 现实:「base v1.14.15」\n\n```go\n./prog.go:19:3: unreachable code\nGo vet exited.\n\nexpect 4\npanic: 1\n\ngoroutine 1 [running]:\nmain.main.func2()\n\t/tmp/sandbox701237149/prog.go:16 +0x65\nmain.main()\n\t/tmp/sandbox701237149/prog.go:23 +0x45\n```\n\n### why?发生了what?\n\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_110058.png)\n\n>从上面的修改可以看出,是没有遍历现有的整个defer链表结构导致的.\n\n\n### defer、panic、recover是如何的结构连接在一起的呢?\n\n[Next-->](https://blog.imrcrab.com/archives/b630d910.html#more)","source":"_posts/35-defer-panic-recover.md","raw":"---\ntitle: '「35」runtime:recover not correctly recover from panic'\ndate: '2021/2/17 22:10:17'\nupdated: '2021/2/17 22:10:17'\nkeywords: 'Go,Runtime'\ntags:\n  - Go\n  - Runtime\n  - Day\n  - v1.14\nmathjax: true\nabbrlink: d586b949\n---\n\n\n接着上面的继续看看v1.16更新,runtime包改动的:\n\n[runtime: recover does not correctly recover from panic](https://github.com/golang/go/issues/43921)\n\n简单的说原因,你认为下面程序的输出结果为what?\n<!--more-->\n\n### eg\n\n```go\n\nfunc main() {\n\tdefer func() {\n\t\texpect(1, recover())\n\t}()\n\tfunc() {\n\t\tdefer func() {\n\t\t\tdefer func() {\n\t\t\t\texpect(4, recover())\n\t\t\t}()\n\t\t\tpanic(4)\n\t\t}()\n\t\tpanic(1)\n\n\t\t// Prevent open-coded defers; not executed.\n\t\tfor {\n\t\t\tdefer panic(-1)\n\t\t\tbreak\n\t\t}\n\t}()\n}\n\nfunc expect(n int, err interface{}) {\n\tprintln(\"expect\", n)\n\tif n != err {\n\t\tlog.Fatalf(\"have %v, want %v\", err, n)\n\t}\n}\n```\n\n#### 理想型:\n\n```\nexpect 4\nexpect 1\n```\n#### 现实:「base v1.14.15」\n\n```go\n./prog.go:19:3: unreachable code\nGo vet exited.\n\nexpect 4\npanic: 1\n\ngoroutine 1 [running]:\nmain.main.func2()\n\t/tmp/sandbox701237149/prog.go:16 +0x65\nmain.main()\n\t/tmp/sandbox701237149/prog.go:23 +0x45\n```\n\n### why?发生了what?\n\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_110058.png)\n\n>从上面的修改可以看出,是没有遍历现有的整个defer链表结构导致的.\n\n\n### defer、panic、recover是如何的结构连接在一起的呢?\n\n[Next-->](https://blog.imrcrab.com/archives/b630d910.html#more)","slug":"35-defer-panic-recover","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d52002izfqxfeu186bn","content":"<p>接着上面的继续看看v1.16更新,runtime包改动的:</p>\n<p><a href=\"https://github.com/golang/go/issues/43921\">runtime: recover does not correctly recover from panic</a></p>\n<p>简单的说原因,你认为下面程序的输出结果为what?</p>\n<span id=\"more\"></span>\n<h3 id=\"eg\"><a class=\"header-anchor\" href=\"#eg\">¶</a>eg</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\texpect(<span class=\"number\">1</span>, <span class=\"built_in\">recover</span>())</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\texpect(<span class=\"number\">4</span>, <span class=\"built_in\">recover</span>())</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Prevent open-coded defers; not executed.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">panic</span>(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">expect</span><span class=\"params\">(n <span class=\"type\">int</span>, err <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;expect&quot;</span>, n)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n != err &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">&quot;have %v, want %v&quot;</span>, err, n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"理想型\"><a class=\"header-anchor\" href=\"#理想型\">¶</a>理想型:</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect 4</span><br><span class=\"line\">expect 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"现实-「base-v1-14-15」\"><a class=\"header-anchor\" href=\"#现实-「base-v1-14-15」\">¶</a>现实:「base v1.14.15」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./prog.<span class=\"keyword\">go</span>:<span class=\"number\">19</span>:<span class=\"number\">3</span>: unreachable code</span><br><span class=\"line\">Go vet exited.</span><br><span class=\"line\"></span><br><span class=\"line\">expect <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"built_in\">panic</span>: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">1</span> [running]:</span><br><span class=\"line\">main.main.func2()</span><br><span class=\"line\">\t/tmp/sandbox701237149/prog.<span class=\"keyword\">go</span>:<span class=\"number\">16</span> +<span class=\"number\">0x65</span></span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox701237149/prog.<span class=\"keyword\">go</span>:<span class=\"number\">23</span> +<span class=\"number\">0x45</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"why-发生了what\"><a class=\"header-anchor\" href=\"#why-发生了what\">¶</a>why?发生了what?</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_110058.png\" alt=\"\"></p>\n<blockquote>\n<p>从上面的修改可以看出,是没有遍历现有的整个defer链表结构导致的.</p>\n</blockquote>\n<h3 id=\"defer、panic、recover是如何的结构连接在一起的呢\"><a class=\"header-anchor\" href=\"#defer、panic、recover是如何的结构连接在一起的呢\">¶</a>defer、panic、recover是如何的结构连接在一起的呢?</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/b630d910.html#more\">Next–&gt;</a></p>\n","site":{"data":{}},"excerpt":"<p>接着上面的继续看看v1.16更新,runtime包改动的:</p>\n<p><a href=\"https://github.com/golang/go/issues/43921\">runtime: recover does not correctly recover from panic</a></p>\n<p>简单的说原因,你认为下面程序的输出结果为what?</p>","more":"<h3 id=\"eg\"><a class=\"header-anchor\" href=\"#eg\">¶</a>eg</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\texpect(<span class=\"number\">1</span>, <span class=\"built_in\">recover</span>())</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\texpect(<span class=\"number\">4</span>, <span class=\"built_in\">recover</span>())</span><br><span class=\"line\">\t\t\t&#125;()</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Prevent open-coded defers; not executed.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">defer</span> <span class=\"built_in\">panic</span>(<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">expect</span><span class=\"params\">(n <span class=\"type\">int</span>, err <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;expect&quot;</span>, n)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n != err &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">&quot;have %v, want %v&quot;</span>, err, n)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"理想型\"><a class=\"header-anchor\" href=\"#理想型\">¶</a>理想型:</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">expect 4</span><br><span class=\"line\">expect 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"现实-「base-v1-14-15」\"><a class=\"header-anchor\" href=\"#现实-「base-v1-14-15」\">¶</a>现实:「base v1.14.15」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./prog.<span class=\"keyword\">go</span>:<span class=\"number\">19</span>:<span class=\"number\">3</span>: unreachable code</span><br><span class=\"line\">Go vet exited.</span><br><span class=\"line\"></span><br><span class=\"line\">expect <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"built_in\">panic</span>: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">1</span> [running]:</span><br><span class=\"line\">main.main.func2()</span><br><span class=\"line\">\t/tmp/sandbox701237149/prog.<span class=\"keyword\">go</span>:<span class=\"number\">16</span> +<span class=\"number\">0x65</span></span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox701237149/prog.<span class=\"keyword\">go</span>:<span class=\"number\">23</span> +<span class=\"number\">0x45</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"why-发生了what\"><a class=\"header-anchor\" href=\"#why-发生了what\">¶</a>why?发生了what?</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_110058.png\" alt=\"\"></p>\n<blockquote>\n<p>从上面的修改可以看出,是没有遍历现有的整个defer链表结构导致的.</p>\n</blockquote>\n<h3 id=\"defer、panic、recover是如何的结构连接在一起的呢\"><a class=\"header-anchor\" href=\"#defer、panic、recover是如何的结构连接在一起的呢\">¶</a>defer、panic、recover是如何的结构连接在一起的呢?</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/b630d910.html#more\">Next–&gt;</a></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_110058.png","popularPost_tmp_gaData":{"updated":"Wed Feb 17 2021 22:10:17 GMT+0800 (中国标准时间)","title":"「35」runtime:recover not correctly recover from panic","path":"archives/d586b949.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210217_110058.png","excerpt":"<p>接着上面的继续看看v1.16更新,runtime包改动的:</p>\n<p><a href=\"https://github.com/golang/go/issues/43921\">runtime: recover does not correctly recover from panic</a></p>\n<p>简单的说原因,你认为下面程序的输出结果为what?</p>","date":{"_isAMomentObject":true,"_i":"2021-02-17T14:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-17T14:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Runtime","v1.14"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":859},{"title":"「36」defer panic源码分析","date":"2021-02-18T03:10:17.000Z","updated":"2021-02-18T03:10:17.000Z","keywords":"Go,Runtime","mathjax":true,"abbrlink":"b630d910","_content":"\n\n### 前序\n\n[「35」runtime:recover not correctly recover from panic](https://blog.imrcrab.com/archives/d586b949.html#more)说到了v1.16修复的一个panic问题,这次顺带看看底层关于defer的处理.\n\n<!--more-->\n### version\n\n>go version go1.14.14 darwin/amd64\n### defer处理\n\n#### 程序\n\n```go\npackage main\n\nfunc main() {\n\tf()\n}\n\nfunc f() {\n\tdefer sum(1, 2)\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n\n#### 汇编表示:「关于汇编的参考[Plan 9汇编相关](https://blog.imrcrab.com/archives/2ce846ed.html)」\n\n\n```go\n    0x0000 00000 (src/main/ssp.go:7)        TEXT    \"\".f(SB), ABIInternal, $128-0\n    0x0000 00000 (src/main/ssp.go:7)        MOVQ    (TLS), CX\n    0x0009 00009 (src/main/ssp.go:7)        CMPQ    SP, 16(CX)\n    0x000d 00013 (src/main/ssp.go:7)        PCDATA  $0, $-2\n    0x000d 00013 (src/main/ssp.go:7)        JLS     119\n    0x000f 00015 (src/main/ssp.go:7)        PCDATA  $0, $-1\n    0x000f 00015 (src/main/ssp.go:7)        ADDQ    $-128, SP\n    0x0013 00019 (src/main/ssp.go:7)        MOVQ    BP, 120(SP)\n    0x0018 00024 (src/main/ssp.go:7)        LEAQ    120(SP), BP\n    0x001d 00029 (src/main/ssp.go:7)        FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n    0x001d 00029 (src/main/ssp.go:7)        FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n    0x001d 00029 (src/main/ssp.go:8)        MOVL    $24, \"\"..autotmp_0+24(SP)\n    0x0025 00037 (src/main/ssp.go:8)        LEAQ    \"\".sum·f(SB), AX\n    0x002c 00044 (src/main/ssp.go:8)        MOVQ    AX, \"\"..autotmp_0+48(SP)\n    0x0031 00049 (src/main/ssp.go:8)        MOVQ    $1, \"\"..autotmp_0+96(SP)\n    0x003a 00058 (src/main/ssp.go:8)        MOVQ    $2, \"\"..autotmp_0+104(SP)\n    0x0043 00067 (src/main/ssp.go:8)        LEAQ    \"\"..autotmp_0+24(SP), AX\n    0x0048 00072 (src/main/ssp.go:8)        MOVQ    AX, (SP)\n    0x004c 00076 (src/main/ssp.go:8)        PCDATA  $1, $0\n    0x004c 00076 (src/main/ssp.go:8)        CALL    runtime.deferprocStack(SB) // 划重点,函数调用部分\n    0x0051 00081 (src/main/ssp.go:8)        TESTL   AX, AX\n    0x0053 00083 (src/main/ssp.go:8)        JNE     103\n    0x0055 00085 (src/main/ssp.go:8)        JMP     87\n    0x0057 00087 (src/main/ssp.go:9)        XCHGL   AX, AX\n    0x0058 00088 (src/main/ssp.go:9)        CALL    runtime.deferreturn(SB)  // 划重点,函数调用部分\n    0x005d 00093 (src/main/ssp.go:9)        MOVQ    120(SP), BP\n    0x0062 00098 (src/main/ssp.go:9)        SUBQ    $-128, SP\n    0x0066 00102 (src/main/ssp.go:9)        RET\n    0x0067 00103 (src/main/ssp.go:8)        XCHGL   AX, AX\n    0x0068 00104 (src/main/ssp.go:8)        CALL    runtime.deferreturn(SB)  // 划重点,函数调用部分\n    0x006d 00109 (src/main/ssp.go:8)        MOVQ    120(SP), BP\n    0x0072 00114 (src/main/ssp.go:8)        SUBQ    $-128, SP\n    0x0076 00118 (src/main/ssp.go:8)        RET\n    0x0077 00119 (src/main/ssp.go:8)        NOP\n    0x0077 00119 (src/main/ssp.go:7)        PCDATA  $1, $-1\n    0x0077 00119 (src/main/ssp.go:7)        PCDATA  $0, $-2\n    0x0077 00119 (src/main/ssp.go:7)        CALL    runtime.morestack_noctxt(SB)\n    0x007c 00124 (src/main/ssp.go:7)        PCDATA  $0, $-1\n    0x007c 00124 (src/main/ssp.go:7)        JMP     0\n\n```\n\n#### [defer官方定义](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865):\n\n```go\n// A _defer holds an entry on the list of deferred calls.\n// If you add a field here, add code to clear it in freedefer and deferProcStack\n// This struct must match the code in cmd/compile/internal/gc/reflect.go:deferstruct\n// and cmd/compile/internal/gc/ssa.go:(*state).call.\n// Some defers will be allocated on the stack and some on the heap. // 堆栈的不确定性\n// All defers are logically part of the stack, so write barriers to\n// initialize them are not required. All defers must be manually scanned,\n// and for heap defers, marked.\ntype _defer struct {\n\tsiz     int32 // includes both arguments and results\n\tstarted bool\n\theap    bool\n\t// openDefer indicates that this _defer is for a frame with open-coded\n\t// defers. We have only one defer record for the entire frame (which may\n\t// currently have 0, 1, or more defers active).\n\topenDefer bool\n\tsp        uintptr  // sp at time of defer\n\tpc        uintptr  // pc at time of defer\n\tfn        *funcval // can be nil for open-coded defers 指向函数\n\t_panic    *_panic  // panic that is running defer\n\tlink      *_defer  // 同一个goroutine所有的defer连城的链表\n\n\t// If openDefer is true, the fields below record values about the stack\n\t// frame and associated function that has the open-coded defer(s). sp\n\t// above will be the sp for the frame, and pc will be address of the\n\t// deferreturn call in the function.\n\tfd   unsafe.Pointer // funcdata for the function associated with the frame\n\tvarp uintptr        // value of varp for the stack frame\n\t// framepc is the current pc associated with the stack frame. Together,\n\t// with sp above (which is the sp associated with the stack frame),\n\t// framepc/sp can be used as pc/sp pair to continue a stack trace via\n\t// gentraceback().\n\tframepc uintptr\n}\n\n```\n\n#### [deferproc](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L218)\n\n```go\n// Create a new deferred function fn with siz bytes of arguments.\n// The compiler turns a defer statement into a call to this.\n//go:nosplit\nfunc deferproc(siz int32, fn *funcval) { // arguments of fn follow fn\n\tgp := getg()\n\tif gp.m.curg != gp {\n\t\t// go code on the system stack can't defer\n\t\tthrow(\"defer on system stack\")\n\t}\n\n\t// the arguments of fn are in a perilous state. The stack map\n\t// for deferproc does not describe them. So we can't let garbage\n\t// collection or stack copying trigger until we've copied them out\n\t// to somewhere safe. The memmove below does that.\n\t// Until the copy completes, we can only call nosplit routines.\n    // 获取调用者的sp「栈顶」\n\tsp := getcallersp()\n\targp := uintptr(unsafe.Pointer(&fn)) + unsafe.Sizeof(fn)\n\tcallerpc := getcallerpc() // 获取caller的pc\n\n    // 从poll中获取或allocate一个\n\td := newdefer(siz)\n\tif d._panic != nil {\n\t\tthrow(\"deferproc: d.panic != nil after newdefer\")\n\t}\n    // 变量的初始化信息\n\td.link = gp._defer\n\tgp._defer = d\n\td.fn = fn\n\td.pc = callerpc\n\td.sp = sp\n\tswitch siz { // 关于siz的值的处理\n\tcase 0:\n\t\t// Do nothing.\n\tcase sys.PtrSize:\n\t\t*(*uintptr)(deferArgs(d)) = *(*uintptr)(unsafe.Pointer(argp))\n\tdefault:\n\t\tmemmove(deferArgs(d), unsafe.Pointer(argp), uintptr(siz))\n\t}\n\n\t// deferproc returns 0 normally.\n\t// a deferred func that stops a panic\n\t// makes the deferproc return 1.\n\t// the code the compiler generates always\n\t// checks the return value and jumps to the\n\t// end of the function if deferproc returns != 0.\n    // 正常返回0,异常返回1\n\treturn0()\n\t// No code can go here - the C return register has\n\t// been set and must not be clobbered.\n}\n```\n\n#### newdefer\n\n```go\n// Allocate a Defer, usually using per-P pool. // pool池子\n// Each defer must be released with freedefer.  The defer is not\n// added to any defer chain yet.\n//\n// This must not grow the stack because there may be a frame without\n// stack map information when this is called.\n//\n//go:nosplit\nfunc newdefer(siz int32) *_defer {\n\tvar d *_defer\n\tsc := deferclass(uintptr(siz)) // 计算sc\n\tgp := getg()\n\tif sc < uintptr(len(p{}.deferpool)) {\n\t\tpp := gp.m.p.ptr()\n\t\tif len(pp.deferpool[sc]) == 0 && sched.deferpool[sc] != nil {\n\t\t\t// Take the slow path on the system stack so\n\t\t\t// we don't grow newdefer's stack.\n            // 当缓存没有值了，就从全局pool中搞出来一部分\n\t\t\tsystemstack(func() {\n\t\t\t\tlock(&sched.deferlock)\n\t\t\t\tfor len(pp.deferpool[sc]) < cap(pp.deferpool[sc])/2 && sched.deferpool[sc] != nil {\n\t\t\t\t\td := sched.deferpool[sc]\n\t\t\t\t\tsched.deferpool[sc] = d.link\n\t\t\t\t\td.link = nil\n\t\t\t\t\tpp.deferpool[sc] = append(pp.deferpool[sc], d)\n\t\t\t\t}\n\t\t\t\tunlock(&sched.deferlock)\n\t\t\t})\n\t\t}\n\t\tif n := len(pp.deferpool[sc]); n > 0 {\n\t\t\td = pp.deferpool[sc][n-1]\n\t\t\tpp.deferpool[sc][n-1] = nil\n\t\t\tpp.deferpool[sc] = pp.deferpool[sc][:n-1]\n\t\t}\n\t}\n\tif d == nil {\n\t\t// Allocate new defer+args.\n        // 全局的pool不足/args过长\n\t\tsystemstack(func() {\n\t\t\ttotal := roundupsize(totaldefersize(uintptr(siz)))\n\t\t\td = (*_defer)(mallocgc(total, deferType, true))\n\t\t})\n\t\tif debugCachedWork {\n\t\t\t// Duplicate the tail below so if there's a\n\t\t\t// crash in checkPut we can tell if d was just\n\t\t\t// allocated or came from the pool.\n\t\t\td.siz = siz\n\t\t\td.link = gp._defer // 与之前绑定的g形成链表\n\t\t\tgp._defer = d\n\t\t\treturn d\n\t\t}\n\t}\n\td.siz = siz\n\td.heap = true\n\treturn d\n}\n```\n\n#### [deferprocStack](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L271)\n\n```go\n// deferprocStack queues a new deferred function with a defer record on the stack.\n// The defer record must have its siz and fn fields initialized. siz和fn必须初始化\n// All other fields can contain junk.\n// The defer record must be immediately followed in memory by\n// the arguments of the defer.\n// Nosplit because the arguments on the stack won't be scanned\n// until the defer record is spliced into the gp._defer list.\n//go:nosplit\nfunc deferprocStack(d *_defer) {\n\tgp := getg() // 获取当前的g,也说明一件事,这个defer和g是相关联的哦\n\tif gp.m.curg != gp {\n\t\t// go code on the system stack can't defer\n\t\tthrow(\"defer on system stack\")\n\t}\n\t// siz and fn are already set.\n\t// The other fields are junk on entry to deferprocStack and\n\t// are initialized here. \n    // 这里写的很清楚了,siz和fn必须 提前初始化,其它的变量在这初始化.\n\td.started = false\n\td.heap = false\n\td.openDefer = false\n\td.sp = getcallersp()\n\td.pc = getcallerpc()\n\td.framepc = 0\n\td.varp = 0\n\t// The lines below implement:\n\t//   d.panic = nil\n\t//   d.fd = nil\n\t//   d.link = gp._defer\n\t//   gp._defer = d\n\t// But without write barriers. The first three are writes to\n\t// the stack so they don't need a write barrier, and furthermore\n\t// are to uninitialized memory, so they must not use a write barrier.\n\t// The fourth write does not require a write barrier because we\n\t// explicitly mark all the defer structures, so we don't need to\n\t// keep track of pointers to them with a write barrier.\n\t*(*uintptr)(unsafe.Pointer(&d._panic)) = 0\n\t*(*uintptr)(unsafe.Pointer(&d.fd)) = 0\n\t*(*uintptr)(unsafe.Pointer(&d.link)) = uintptr(unsafe.Pointer(gp._defer))\n\t*(*uintptr)(unsafe.Pointer(&gp._defer)) = uintptr(unsafe.Pointer(d))\n\n\treturn0()\n\t// No code can go here - the C return register has\n\t// been set and must not be clobbered.\n}\n\n```\n\n#### [deferreturn](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L528)\n\n```go\n// Run a deferred function if there is one.\n// The compiler inserts a call to this at the end of any\n// function which calls defer.\n// If there is a deferred function, this will call runtime·jmpdefer,\n// which will jump to the deferred function such that it appears\n// to have been called by the caller of deferreturn at the point\n// just before deferreturn was called. The effect is that deferreturn\n// is called again and again until there are no more deferred functions.\n//\n// Declared as nosplit, because the function should not be preempted once we start\n// modifying the caller's frame in order to reuse the frame to call the deferred\n// function.\n//\n// The single argument isn't actually used - it just has its address\n// taken so it can be matched against pending defers.\n//go:nosplit\nfunc deferreturn(arg0 uintptr) {\n\tgp := getg()\n\td := gp._defer\n\tif d == nil { // 递归调用的终止条件\n\t\treturn\n\t}\n\tsp := getcallersp() \n\tif d.sp != sp { // 当前的调用栈和defer中是否相同\n\t\treturn\n\t}\n\tif d.openDefer {\n\t\tdone := runOpenDeferFrame(gp, d)\n\t\tif !done {\n\t\t\tthrow(\"unfinished open-coded defers in deferreturn\")\n\t\t}\n\t\tgp._defer = d.link\n\t\tfreedefer(d)\n\t\treturn\n\t}\n\n\t// Moving arguments around.\n\t//\n\t// Everything called after this point must be recursively\n\t// nosplit because the garbage collector won't know the form\n\t// of the arguments until the jmpdefer can flip the PC over to\n\t// fn.\n\tswitch d.siz {\n\tcase 0:\n\t\t// Do nothing.\n\tcase sys.PtrSize:\n\t\t*(*uintptr)(unsafe.Pointer(&arg0)) = *(*uintptr)(deferArgs(d))\n\tdefault:\n\t\tmemmove(unsafe.Pointer(&arg0), deferArgs(d), uintptr(d.siz))\n\t}\n\tfn := d.fn\n\td.fn = nil\n\tgp._defer = d.link\n\tfreedefer(d) // 释放d,重新放回pool中\n\t// If the defer function pointer is nil, force the seg fault to happen\n\t// here rather than in jmpdefer. gentraceback() throws an error if it is\n\t// called with a callback on an LR architecture and jmpdefer is on the\n\t// stack, because the stack trace can be incorrect in that case - see\n\t// issue #8153).\n\t_ = fn.fn\n\tjmpdefer(fn, uintptr(unsafe.Pointer(&arg0)))\n}\n\n```\n\n\n### panic\n\n#### [官方定义-->](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903)\n\n\n```go\n// A _panic holds information about an active panic.\n//\n// This is marked go:notinheap because _panic values must only ever\n// live on the stack.\n//\n// The argp and link fields are stack pointers, but don't need special\n// handling during stack growth: because they are pointer-typed and\n// _panic values only live on the stack, regular stack pointer\n// adjustment takes care of them.\n//\n//go:notinheap\ntype _panic struct {\n\targp      unsafe.Pointer // pointer to arguments of deferred call run during panic; cannot move - known to liblink\n\targ       interface{}    // argument to panic\n\tlink      *_panic        // link to earlier panic\n\tpc        uintptr        // where to return to in runtime if this panic is bypassed\n\tsp        unsafe.Pointer // where to return to in runtime if this panic is bypassed\n\trecovered bool           // whether this panic is over // recover标识\n\taborted   bool           // the panic was aborted // 终止标记\n\tgoexit    bool\n}\n\n```\n\n#### [gopanic](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L889)\n\n```go\n// reflectcallSave calls reflectcall after saving the caller's pc and sp in the\n// panic record. This allows the runtime to return to the Goexit defer processing\n// loop, in the unusual case where the Goexit may be bypassed by a successful\n// recover.\nfunc reflectcallSave(p *_panic, fn, arg unsafe.Pointer, argsize uint32) {\n\tif p != nil {\n\t\tp.argp = unsafe.Pointer(getargp(0))\n\t\tp.pc = getcallerpc()\n\t\tp.sp = unsafe.Pointer(getcallersp())\n\t}\n\treflectcall(nil, fn, arg, argsize, argsize)\n\tif p != nil {\n\t\tp.pc = 0\n\t\tp.sp = unsafe.Pointer(nil)\n\t}\n}\n\n// The implementation of the predeclared function panic.\nfunc gopanic(e interface{}) {\n\tgp := getg()\n\tif gp.m.curg != gp {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic on system stack\")\n\t}\n\n\tif gp.m.mallocing != 0 {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic during malloc\")\n\t}\n\tif gp.m.preemptoff != \"\" {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tprint(\"preempt off reason: \")\n\t\tprint(gp.m.preemptoff)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic during preemptoff\")\n\t}\n\tif gp.m.locks != 0 {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic holding locks\")\n\t}\n\n\tvar p _panic\n\tp.arg = e\n\tp.link = gp._panic\n\tgp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\tatomic.Xadd(&runningPanicDefers, 1)\n\n\t// By calculating getcallerpc/getcallersp here, we avoid scanning the\n\t// gopanic frame (stack scanning is slow...)\n\taddOneOpenDeferFrame(gp, getcallerpc(), unsafe.Pointer(getcallersp()))\n\t//\t遍历链表\n\tfor {\n\t\td := gp._defer\n\t\tif d == nil {\n\t\t\tbreak\n\t\t}\n\n\t\t// If defer was started by earlier panic or Goexit (and, since we're back here, that triggered a new panic),\n\t\t// take defer off list. An earlier panic will not continue running, but we will make sure below that an\n\t\t// earlier Goexit does continue running.\n\t\tif d.started { // 已经启动\n\t\t\tif d._panic != nil {\n\t\t\t\td._panic.aborted = true\n\t\t\t}\n\t\t\td._panic = nil\n\t\t\tif !d.openDefer { // 没有打开则跳过\n\t\t\t\t// For open-coded defers, we need to process the\n\t\t\t\t// defer again, in case there are any other defers\n\t\t\t\t// to call in the frame (not including the defer\n\t\t\t\t// call that caused the panic).\n\t\t\t\td.fn = nil\n\t\t\t\tgp._defer = d.link\n\t\t\t\tfreedefer(d)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// Mark defer as started, but keep on list, so that traceback\n\t\t// can find and update the defer's argument frame if stack growth\n\t\t// or a garbage collection happens before reflectcall starts executing d.fn.\n\t\td.started = true //初始化\n\n\t\t// Record the panic that is running the defer.\n\t\t// If there is a new panic during the deferred call, that panic\n\t\t// will find d in the list and will mark d._panic (this panic) aborted.\n\t\t// 记录这个panic，如果在运行期间有了新的panic，标记这个Panic abort=true(强制终止)\n\t\td._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\t\tdone := true\n\t\tif d.openDefer {\n\t\t\tdone = runOpenDeferFrame(gp, d)\n\t\t\tif done && !d._panic.recovered {\n\t\t\t\taddOneOpenDeferFrame(gp, 0, nil)\n\t\t\t}\n\t\t} else {\n\t\t\tp.argp = unsafe.Pointer(getargp(0))\n\t\t\t// 调用defer\n\t\t\treflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n\t\t}\n\t\tp.argp = nil\n\n\t\t// reflectcall did not panic. Remove d.\n\t\tif gp._defer != d {\n\t\t\tthrow(\"bad defer entry in panic\")\n\t\t}\n\t\td._panic = nil\n\n\t\t// trigger shrinkage to test stack copy. See stack_test.go:TestStackPanic\n\t\t//GC()\n\n\t\tpc := d.pc\n\t\tsp := unsafe.Pointer(d.sp) // must be pointer so it gets adjusted during stack copy\n\t\tif done {\n\t\t\td.fn = nil\n\t\t\tgp._defer = d.link // 遍历下一个\n\t\t\tfreedefer(d)\n\t\t}\n\t\tif p.recovered { // 已经有recover被调用\n\t\t\tgp._panic = p.link\n\t\t\tif gp._panic != nil && gp._panic.goexit && gp._panic.aborted {\n\t\t\t\t// A normal recover would bypass/abort the Goexit.  Instead,\n\t\t\t\t// we return to the processing loop of the Goexit.\n\t\t\t\tgp.sigcode0 = uintptr(gp._panic.sp)\n\t\t\t\tgp.sigcode1 = uintptr(gp._panic.pc)\n\t\t\t\tmcall(recovery)\n\t\t\t\tthrow(\"bypassed recovery failed\") // mcall should not return\n\t\t\t}\n\t\t\tatomic.Xadd(&runningPanicDefers, -1)\n\n\t\t\tif done {\n\t\t\t\t// Remove any remaining non-started, open-coded\n\t\t\t\t// defer entries after a recover, since the\n\t\t\t\t// corresponding defers will be executed normally\n\t\t\t\t// (inline). Any such entry will become stale once\n\t\t\t\t// we run the corresponding defers inline and exit\n\t\t\t\t// the associated stack frame.\n\t\t\t\td := gp._defer\n\t\t\t\tvar prev *_defer\n\t\t\t\tfor d != nil {\n\t\t\t\t\tif d.openDefer {\n\t\t\t\t\t\tif d.started {\n\t\t\t\t\t\t\t// This defer is started but we\n\t\t\t\t\t\t\t// are in the middle of a\n\t\t\t\t\t\t\t// defer-panic-recover inside of\n\t\t\t\t\t\t\t// it, so don't remove it or any\n\t\t\t\t\t\t\t// further defer entries\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif prev == nil {\n\t\t\t\t\t\t\tgp._defer = d.link\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprev.link = d.link\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewd := d.link\n\t\t\t\t\t\tfreedefer(d)\n\t\t\t\t\t\td = newd\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprev = d\n\t\t\t\t\t\td = d.link\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgp._panic = p.link\n\t\t\t// Aborted panics are marked but remain on the g.panic list.\n\t\t\t// Remove them from the list.\n\t\t\tfor gp._panic != nil && gp._panic.aborted {\n\t\t\t\tgp._panic = gp._panic.link\n\t\t\t}\n\t\t\tif gp._panic == nil { // must be done with signal\n\t\t\t\tgp.sig = 0\n\t\t\t}\n\t\t\t// Pass information about recovering frame to recovery.\n\t\t\tgp.sigcode0 = uintptr(sp)\n\t\t\tgp.sigcode1 = pc\n\t\t\tmcall(recovery)\n\t\t\tthrow(\"recovery failed\") // mcall should not return\n\t\t}\n\t}\n\n\t// ran out of deferred calls - old-school panic now\n\t// Because it is unsafe to call arbitrary user code after freezing\n\t// the world, we call preprintpanics to invoke all necessary Error\n\t// and String methods to prepare the panic strings before startpanic.\n\tpreprintpanics(gp._panic)\n\n\tfatalpanic(gp._panic) // should not return\n\t*(*int)(nil) = 0      // not reached\n}\n```\n\n### recover\n\n#### 官方定义\n>panic中的一个bool型\nrecovered bool           // whether this panic is over // recover标识\n\n#### 实现\n\n```go\n// The implementation of the predeclared function recover.\n// Cannot split the stack because it needs to reliably\n// find the stack segment of its caller.\n//\n// TODO(rsc): Once we commit to CopyStackAlways,\n// this doesn't need to be nosplit.\n//go:nosplit\nfunc gorecover(argp uintptr) interface{} {\n\t// Must be in a function running as part of a deferred call during the panic.\n\t// Must be called from the topmost function of the call\n\t// (the function used in the defer statement).\n\t// p.argp is the argument pointer of that topmost deferred function call.\n\t// Compare against argp reported by caller.\n\t// If they match, the caller is the one who can recover.\n\tgp := getg()\n\tp := gp._panic\n\tif p != nil && !p.goexit && !p.recovered && argp == uintptr(p.argp) {\n\t\tp.recovered = true // revover标识为true\n\t\treturn p.arg\n\t}\n\treturn nil\n}\n\n```\n### 拓展:「下面程序会输出什么值」\n\n#### eg-1:\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===>\",err)\n\t\t}\n\t}()\n\tf()\n\n\tselect {\n\t}\n}\n\nfunc f() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===\",err)\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer sum(1, 2)\n\t\tpanic(1)\n\t}()\n\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n\n##### output:\n\n```go\npanic: 1\n\ngoroutine 18 [running]:\nmain.f.func2()\n        /Users/k/learn/go-memory/src/main/ssp.go:26 +0x6d\ncreated by main.f\n        /Users/k/learn/go-memory/src/main/ssp.go:24 +0x57\n```\n\n#### eg-2:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===>\",err)\n\t\t}\n\t}()\n\tf()\n\n\tselect {\n\t}\n}\n\nfunc f() {\n\n\tgo func() {\n\t\tdefer sum(1, 2)\n\t\tdefer func() {\n\t\t\tif err:=recover();err!= nil {\n\t\t\t\tfmt.Println(\"===\",err)\n\t\t\t}\n\t\t}()\n\t\tpanic(1)\n\t}()\n\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n##### output:\n\n```go\n=== 1\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [select (no cases)]:\nmain.main()\n        /Users/k/learn/go-memory/src/main/ssp.go:13 +0x4a\n```\n\n\n#### eg-3:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===>\",err)\n\t\t}\n\t}()\n\tf()\n\n\tselect {\n\t}\n}\n\nfunc f() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"panic--f ===\",err)\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer sum(1, 2)\n\t\tdefer func() {\n\t\t\tif err:=recover();err!= nil {\n\t\t\t\tfmt.Println(\"===\",err)\n\t\t\t}\n\t\t}()\n\t\tpanic(1)\n\t}()\n\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n\n##### output:\n\n```go\n\n=== 1\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [select (no cases)]:\nmain.main()\n        /Users/k/learn/go-memory/src/main/ssp.go:13 +0x4a\n\n```","source":"_posts/36-defer-panic.md","raw":"---\ntitle: 「36」defer panic源码分析\ndate: '2021/2/18 11:10:17'\nupdated: '2021/2/18 11:10:17'\nkeywords: 'Go,Runtime'\ntags:\n  - Go\n  - Runtime\n  - Day\n  - 源码\nmathjax: true\nabbrlink: b630d910\n---\n\n\n### 前序\n\n[「35」runtime:recover not correctly recover from panic](https://blog.imrcrab.com/archives/d586b949.html#more)说到了v1.16修复的一个panic问题,这次顺带看看底层关于defer的处理.\n\n<!--more-->\n### version\n\n>go version go1.14.14 darwin/amd64\n### defer处理\n\n#### 程序\n\n```go\npackage main\n\nfunc main() {\n\tf()\n}\n\nfunc f() {\n\tdefer sum(1, 2)\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n\n#### 汇编表示:「关于汇编的参考[Plan 9汇编相关](https://blog.imrcrab.com/archives/2ce846ed.html)」\n\n\n```go\n    0x0000 00000 (src/main/ssp.go:7)        TEXT    \"\".f(SB), ABIInternal, $128-0\n    0x0000 00000 (src/main/ssp.go:7)        MOVQ    (TLS), CX\n    0x0009 00009 (src/main/ssp.go:7)        CMPQ    SP, 16(CX)\n    0x000d 00013 (src/main/ssp.go:7)        PCDATA  $0, $-2\n    0x000d 00013 (src/main/ssp.go:7)        JLS     119\n    0x000f 00015 (src/main/ssp.go:7)        PCDATA  $0, $-1\n    0x000f 00015 (src/main/ssp.go:7)        ADDQ    $-128, SP\n    0x0013 00019 (src/main/ssp.go:7)        MOVQ    BP, 120(SP)\n    0x0018 00024 (src/main/ssp.go:7)        LEAQ    120(SP), BP\n    0x001d 00029 (src/main/ssp.go:7)        FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n    0x001d 00029 (src/main/ssp.go:7)        FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n    0x001d 00029 (src/main/ssp.go:8)        MOVL    $24, \"\"..autotmp_0+24(SP)\n    0x0025 00037 (src/main/ssp.go:8)        LEAQ    \"\".sum·f(SB), AX\n    0x002c 00044 (src/main/ssp.go:8)        MOVQ    AX, \"\"..autotmp_0+48(SP)\n    0x0031 00049 (src/main/ssp.go:8)        MOVQ    $1, \"\"..autotmp_0+96(SP)\n    0x003a 00058 (src/main/ssp.go:8)        MOVQ    $2, \"\"..autotmp_0+104(SP)\n    0x0043 00067 (src/main/ssp.go:8)        LEAQ    \"\"..autotmp_0+24(SP), AX\n    0x0048 00072 (src/main/ssp.go:8)        MOVQ    AX, (SP)\n    0x004c 00076 (src/main/ssp.go:8)        PCDATA  $1, $0\n    0x004c 00076 (src/main/ssp.go:8)        CALL    runtime.deferprocStack(SB) // 划重点,函数调用部分\n    0x0051 00081 (src/main/ssp.go:8)        TESTL   AX, AX\n    0x0053 00083 (src/main/ssp.go:8)        JNE     103\n    0x0055 00085 (src/main/ssp.go:8)        JMP     87\n    0x0057 00087 (src/main/ssp.go:9)        XCHGL   AX, AX\n    0x0058 00088 (src/main/ssp.go:9)        CALL    runtime.deferreturn(SB)  // 划重点,函数调用部分\n    0x005d 00093 (src/main/ssp.go:9)        MOVQ    120(SP), BP\n    0x0062 00098 (src/main/ssp.go:9)        SUBQ    $-128, SP\n    0x0066 00102 (src/main/ssp.go:9)        RET\n    0x0067 00103 (src/main/ssp.go:8)        XCHGL   AX, AX\n    0x0068 00104 (src/main/ssp.go:8)        CALL    runtime.deferreturn(SB)  // 划重点,函数调用部分\n    0x006d 00109 (src/main/ssp.go:8)        MOVQ    120(SP), BP\n    0x0072 00114 (src/main/ssp.go:8)        SUBQ    $-128, SP\n    0x0076 00118 (src/main/ssp.go:8)        RET\n    0x0077 00119 (src/main/ssp.go:8)        NOP\n    0x0077 00119 (src/main/ssp.go:7)        PCDATA  $1, $-1\n    0x0077 00119 (src/main/ssp.go:7)        PCDATA  $0, $-2\n    0x0077 00119 (src/main/ssp.go:7)        CALL    runtime.morestack_noctxt(SB)\n    0x007c 00124 (src/main/ssp.go:7)        PCDATA  $0, $-1\n    0x007c 00124 (src/main/ssp.go:7)        JMP     0\n\n```\n\n#### [defer官方定义](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865):\n\n```go\n// A _defer holds an entry on the list of deferred calls.\n// If you add a field here, add code to clear it in freedefer and deferProcStack\n// This struct must match the code in cmd/compile/internal/gc/reflect.go:deferstruct\n// and cmd/compile/internal/gc/ssa.go:(*state).call.\n// Some defers will be allocated on the stack and some on the heap. // 堆栈的不确定性\n// All defers are logically part of the stack, so write barriers to\n// initialize them are not required. All defers must be manually scanned,\n// and for heap defers, marked.\ntype _defer struct {\n\tsiz     int32 // includes both arguments and results\n\tstarted bool\n\theap    bool\n\t// openDefer indicates that this _defer is for a frame with open-coded\n\t// defers. We have only one defer record for the entire frame (which may\n\t// currently have 0, 1, or more defers active).\n\topenDefer bool\n\tsp        uintptr  // sp at time of defer\n\tpc        uintptr  // pc at time of defer\n\tfn        *funcval // can be nil for open-coded defers 指向函数\n\t_panic    *_panic  // panic that is running defer\n\tlink      *_defer  // 同一个goroutine所有的defer连城的链表\n\n\t// If openDefer is true, the fields below record values about the stack\n\t// frame and associated function that has the open-coded defer(s). sp\n\t// above will be the sp for the frame, and pc will be address of the\n\t// deferreturn call in the function.\n\tfd   unsafe.Pointer // funcdata for the function associated with the frame\n\tvarp uintptr        // value of varp for the stack frame\n\t// framepc is the current pc associated with the stack frame. Together,\n\t// with sp above (which is the sp associated with the stack frame),\n\t// framepc/sp can be used as pc/sp pair to continue a stack trace via\n\t// gentraceback().\n\tframepc uintptr\n}\n\n```\n\n#### [deferproc](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L218)\n\n```go\n// Create a new deferred function fn with siz bytes of arguments.\n// The compiler turns a defer statement into a call to this.\n//go:nosplit\nfunc deferproc(siz int32, fn *funcval) { // arguments of fn follow fn\n\tgp := getg()\n\tif gp.m.curg != gp {\n\t\t// go code on the system stack can't defer\n\t\tthrow(\"defer on system stack\")\n\t}\n\n\t// the arguments of fn are in a perilous state. The stack map\n\t// for deferproc does not describe them. So we can't let garbage\n\t// collection or stack copying trigger until we've copied them out\n\t// to somewhere safe. The memmove below does that.\n\t// Until the copy completes, we can only call nosplit routines.\n    // 获取调用者的sp「栈顶」\n\tsp := getcallersp()\n\targp := uintptr(unsafe.Pointer(&fn)) + unsafe.Sizeof(fn)\n\tcallerpc := getcallerpc() // 获取caller的pc\n\n    // 从poll中获取或allocate一个\n\td := newdefer(siz)\n\tif d._panic != nil {\n\t\tthrow(\"deferproc: d.panic != nil after newdefer\")\n\t}\n    // 变量的初始化信息\n\td.link = gp._defer\n\tgp._defer = d\n\td.fn = fn\n\td.pc = callerpc\n\td.sp = sp\n\tswitch siz { // 关于siz的值的处理\n\tcase 0:\n\t\t// Do nothing.\n\tcase sys.PtrSize:\n\t\t*(*uintptr)(deferArgs(d)) = *(*uintptr)(unsafe.Pointer(argp))\n\tdefault:\n\t\tmemmove(deferArgs(d), unsafe.Pointer(argp), uintptr(siz))\n\t}\n\n\t// deferproc returns 0 normally.\n\t// a deferred func that stops a panic\n\t// makes the deferproc return 1.\n\t// the code the compiler generates always\n\t// checks the return value and jumps to the\n\t// end of the function if deferproc returns != 0.\n    // 正常返回0,异常返回1\n\treturn0()\n\t// No code can go here - the C return register has\n\t// been set and must not be clobbered.\n}\n```\n\n#### newdefer\n\n```go\n// Allocate a Defer, usually using per-P pool. // pool池子\n// Each defer must be released with freedefer.  The defer is not\n// added to any defer chain yet.\n//\n// This must not grow the stack because there may be a frame without\n// stack map information when this is called.\n//\n//go:nosplit\nfunc newdefer(siz int32) *_defer {\n\tvar d *_defer\n\tsc := deferclass(uintptr(siz)) // 计算sc\n\tgp := getg()\n\tif sc < uintptr(len(p{}.deferpool)) {\n\t\tpp := gp.m.p.ptr()\n\t\tif len(pp.deferpool[sc]) == 0 && sched.deferpool[sc] != nil {\n\t\t\t// Take the slow path on the system stack so\n\t\t\t// we don't grow newdefer's stack.\n            // 当缓存没有值了，就从全局pool中搞出来一部分\n\t\t\tsystemstack(func() {\n\t\t\t\tlock(&sched.deferlock)\n\t\t\t\tfor len(pp.deferpool[sc]) < cap(pp.deferpool[sc])/2 && sched.deferpool[sc] != nil {\n\t\t\t\t\td := sched.deferpool[sc]\n\t\t\t\t\tsched.deferpool[sc] = d.link\n\t\t\t\t\td.link = nil\n\t\t\t\t\tpp.deferpool[sc] = append(pp.deferpool[sc], d)\n\t\t\t\t}\n\t\t\t\tunlock(&sched.deferlock)\n\t\t\t})\n\t\t}\n\t\tif n := len(pp.deferpool[sc]); n > 0 {\n\t\t\td = pp.deferpool[sc][n-1]\n\t\t\tpp.deferpool[sc][n-1] = nil\n\t\t\tpp.deferpool[sc] = pp.deferpool[sc][:n-1]\n\t\t}\n\t}\n\tif d == nil {\n\t\t// Allocate new defer+args.\n        // 全局的pool不足/args过长\n\t\tsystemstack(func() {\n\t\t\ttotal := roundupsize(totaldefersize(uintptr(siz)))\n\t\t\td = (*_defer)(mallocgc(total, deferType, true))\n\t\t})\n\t\tif debugCachedWork {\n\t\t\t// Duplicate the tail below so if there's a\n\t\t\t// crash in checkPut we can tell if d was just\n\t\t\t// allocated or came from the pool.\n\t\t\td.siz = siz\n\t\t\td.link = gp._defer // 与之前绑定的g形成链表\n\t\t\tgp._defer = d\n\t\t\treturn d\n\t\t}\n\t}\n\td.siz = siz\n\td.heap = true\n\treturn d\n}\n```\n\n#### [deferprocStack](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L271)\n\n```go\n// deferprocStack queues a new deferred function with a defer record on the stack.\n// The defer record must have its siz and fn fields initialized. siz和fn必须初始化\n// All other fields can contain junk.\n// The defer record must be immediately followed in memory by\n// the arguments of the defer.\n// Nosplit because the arguments on the stack won't be scanned\n// until the defer record is spliced into the gp._defer list.\n//go:nosplit\nfunc deferprocStack(d *_defer) {\n\tgp := getg() // 获取当前的g,也说明一件事,这个defer和g是相关联的哦\n\tif gp.m.curg != gp {\n\t\t// go code on the system stack can't defer\n\t\tthrow(\"defer on system stack\")\n\t}\n\t// siz and fn are already set.\n\t// The other fields are junk on entry to deferprocStack and\n\t// are initialized here. \n    // 这里写的很清楚了,siz和fn必须 提前初始化,其它的变量在这初始化.\n\td.started = false\n\td.heap = false\n\td.openDefer = false\n\td.sp = getcallersp()\n\td.pc = getcallerpc()\n\td.framepc = 0\n\td.varp = 0\n\t// The lines below implement:\n\t//   d.panic = nil\n\t//   d.fd = nil\n\t//   d.link = gp._defer\n\t//   gp._defer = d\n\t// But without write barriers. The first three are writes to\n\t// the stack so they don't need a write barrier, and furthermore\n\t// are to uninitialized memory, so they must not use a write barrier.\n\t// The fourth write does not require a write barrier because we\n\t// explicitly mark all the defer structures, so we don't need to\n\t// keep track of pointers to them with a write barrier.\n\t*(*uintptr)(unsafe.Pointer(&d._panic)) = 0\n\t*(*uintptr)(unsafe.Pointer(&d.fd)) = 0\n\t*(*uintptr)(unsafe.Pointer(&d.link)) = uintptr(unsafe.Pointer(gp._defer))\n\t*(*uintptr)(unsafe.Pointer(&gp._defer)) = uintptr(unsafe.Pointer(d))\n\n\treturn0()\n\t// No code can go here - the C return register has\n\t// been set and must not be clobbered.\n}\n\n```\n\n#### [deferreturn](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L528)\n\n```go\n// Run a deferred function if there is one.\n// The compiler inserts a call to this at the end of any\n// function which calls defer.\n// If there is a deferred function, this will call runtime·jmpdefer,\n// which will jump to the deferred function such that it appears\n// to have been called by the caller of deferreturn at the point\n// just before deferreturn was called. The effect is that deferreturn\n// is called again and again until there are no more deferred functions.\n//\n// Declared as nosplit, because the function should not be preempted once we start\n// modifying the caller's frame in order to reuse the frame to call the deferred\n// function.\n//\n// The single argument isn't actually used - it just has its address\n// taken so it can be matched against pending defers.\n//go:nosplit\nfunc deferreturn(arg0 uintptr) {\n\tgp := getg()\n\td := gp._defer\n\tif d == nil { // 递归调用的终止条件\n\t\treturn\n\t}\n\tsp := getcallersp() \n\tif d.sp != sp { // 当前的调用栈和defer中是否相同\n\t\treturn\n\t}\n\tif d.openDefer {\n\t\tdone := runOpenDeferFrame(gp, d)\n\t\tif !done {\n\t\t\tthrow(\"unfinished open-coded defers in deferreturn\")\n\t\t}\n\t\tgp._defer = d.link\n\t\tfreedefer(d)\n\t\treturn\n\t}\n\n\t// Moving arguments around.\n\t//\n\t// Everything called after this point must be recursively\n\t// nosplit because the garbage collector won't know the form\n\t// of the arguments until the jmpdefer can flip the PC over to\n\t// fn.\n\tswitch d.siz {\n\tcase 0:\n\t\t// Do nothing.\n\tcase sys.PtrSize:\n\t\t*(*uintptr)(unsafe.Pointer(&arg0)) = *(*uintptr)(deferArgs(d))\n\tdefault:\n\t\tmemmove(unsafe.Pointer(&arg0), deferArgs(d), uintptr(d.siz))\n\t}\n\tfn := d.fn\n\td.fn = nil\n\tgp._defer = d.link\n\tfreedefer(d) // 释放d,重新放回pool中\n\t// If the defer function pointer is nil, force the seg fault to happen\n\t// here rather than in jmpdefer. gentraceback() throws an error if it is\n\t// called with a callback on an LR architecture and jmpdefer is on the\n\t// stack, because the stack trace can be incorrect in that case - see\n\t// issue #8153).\n\t_ = fn.fn\n\tjmpdefer(fn, uintptr(unsafe.Pointer(&arg0)))\n}\n\n```\n\n\n### panic\n\n#### [官方定义-->](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903)\n\n\n```go\n// A _panic holds information about an active panic.\n//\n// This is marked go:notinheap because _panic values must only ever\n// live on the stack.\n//\n// The argp and link fields are stack pointers, but don't need special\n// handling during stack growth: because they are pointer-typed and\n// _panic values only live on the stack, regular stack pointer\n// adjustment takes care of them.\n//\n//go:notinheap\ntype _panic struct {\n\targp      unsafe.Pointer // pointer to arguments of deferred call run during panic; cannot move - known to liblink\n\targ       interface{}    // argument to panic\n\tlink      *_panic        // link to earlier panic\n\tpc        uintptr        // where to return to in runtime if this panic is bypassed\n\tsp        unsafe.Pointer // where to return to in runtime if this panic is bypassed\n\trecovered bool           // whether this panic is over // recover标识\n\taborted   bool           // the panic was aborted // 终止标记\n\tgoexit    bool\n}\n\n```\n\n#### [gopanic](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L889)\n\n```go\n// reflectcallSave calls reflectcall after saving the caller's pc and sp in the\n// panic record. This allows the runtime to return to the Goexit defer processing\n// loop, in the unusual case where the Goexit may be bypassed by a successful\n// recover.\nfunc reflectcallSave(p *_panic, fn, arg unsafe.Pointer, argsize uint32) {\n\tif p != nil {\n\t\tp.argp = unsafe.Pointer(getargp(0))\n\t\tp.pc = getcallerpc()\n\t\tp.sp = unsafe.Pointer(getcallersp())\n\t}\n\treflectcall(nil, fn, arg, argsize, argsize)\n\tif p != nil {\n\t\tp.pc = 0\n\t\tp.sp = unsafe.Pointer(nil)\n\t}\n}\n\n// The implementation of the predeclared function panic.\nfunc gopanic(e interface{}) {\n\tgp := getg()\n\tif gp.m.curg != gp {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic on system stack\")\n\t}\n\n\tif gp.m.mallocing != 0 {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic during malloc\")\n\t}\n\tif gp.m.preemptoff != \"\" {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tprint(\"preempt off reason: \")\n\t\tprint(gp.m.preemptoff)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic during preemptoff\")\n\t}\n\tif gp.m.locks != 0 {\n\t\tprint(\"panic: \")\n\t\tprintany(e)\n\t\tprint(\"\\n\")\n\t\tthrow(\"panic holding locks\")\n\t}\n\n\tvar p _panic\n\tp.arg = e\n\tp.link = gp._panic\n\tgp._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\tatomic.Xadd(&runningPanicDefers, 1)\n\n\t// By calculating getcallerpc/getcallersp here, we avoid scanning the\n\t// gopanic frame (stack scanning is slow...)\n\taddOneOpenDeferFrame(gp, getcallerpc(), unsafe.Pointer(getcallersp()))\n\t//\t遍历链表\n\tfor {\n\t\td := gp._defer\n\t\tif d == nil {\n\t\t\tbreak\n\t\t}\n\n\t\t// If defer was started by earlier panic or Goexit (and, since we're back here, that triggered a new panic),\n\t\t// take defer off list. An earlier panic will not continue running, but we will make sure below that an\n\t\t// earlier Goexit does continue running.\n\t\tif d.started { // 已经启动\n\t\t\tif d._panic != nil {\n\t\t\t\td._panic.aborted = true\n\t\t\t}\n\t\t\td._panic = nil\n\t\t\tif !d.openDefer { // 没有打开则跳过\n\t\t\t\t// For open-coded defers, we need to process the\n\t\t\t\t// defer again, in case there are any other defers\n\t\t\t\t// to call in the frame (not including the defer\n\t\t\t\t// call that caused the panic).\n\t\t\t\td.fn = nil\n\t\t\t\tgp._defer = d.link\n\t\t\t\tfreedefer(d)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// Mark defer as started, but keep on list, so that traceback\n\t\t// can find and update the defer's argument frame if stack growth\n\t\t// or a garbage collection happens before reflectcall starts executing d.fn.\n\t\td.started = true //初始化\n\n\t\t// Record the panic that is running the defer.\n\t\t// If there is a new panic during the deferred call, that panic\n\t\t// will find d in the list and will mark d._panic (this panic) aborted.\n\t\t// 记录这个panic，如果在运行期间有了新的panic，标记这个Panic abort=true(强制终止)\n\t\td._panic = (*_panic)(noescape(unsafe.Pointer(&p)))\n\n\t\tdone := true\n\t\tif d.openDefer {\n\t\t\tdone = runOpenDeferFrame(gp, d)\n\t\t\tif done && !d._panic.recovered {\n\t\t\t\taddOneOpenDeferFrame(gp, 0, nil)\n\t\t\t}\n\t\t} else {\n\t\t\tp.argp = unsafe.Pointer(getargp(0))\n\t\t\t// 调用defer\n\t\t\treflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))\n\t\t}\n\t\tp.argp = nil\n\n\t\t// reflectcall did not panic. Remove d.\n\t\tif gp._defer != d {\n\t\t\tthrow(\"bad defer entry in panic\")\n\t\t}\n\t\td._panic = nil\n\n\t\t// trigger shrinkage to test stack copy. See stack_test.go:TestStackPanic\n\t\t//GC()\n\n\t\tpc := d.pc\n\t\tsp := unsafe.Pointer(d.sp) // must be pointer so it gets adjusted during stack copy\n\t\tif done {\n\t\t\td.fn = nil\n\t\t\tgp._defer = d.link // 遍历下一个\n\t\t\tfreedefer(d)\n\t\t}\n\t\tif p.recovered { // 已经有recover被调用\n\t\t\tgp._panic = p.link\n\t\t\tif gp._panic != nil && gp._panic.goexit && gp._panic.aborted {\n\t\t\t\t// A normal recover would bypass/abort the Goexit.  Instead,\n\t\t\t\t// we return to the processing loop of the Goexit.\n\t\t\t\tgp.sigcode0 = uintptr(gp._panic.sp)\n\t\t\t\tgp.sigcode1 = uintptr(gp._panic.pc)\n\t\t\t\tmcall(recovery)\n\t\t\t\tthrow(\"bypassed recovery failed\") // mcall should not return\n\t\t\t}\n\t\t\tatomic.Xadd(&runningPanicDefers, -1)\n\n\t\t\tif done {\n\t\t\t\t// Remove any remaining non-started, open-coded\n\t\t\t\t// defer entries after a recover, since the\n\t\t\t\t// corresponding defers will be executed normally\n\t\t\t\t// (inline). Any such entry will become stale once\n\t\t\t\t// we run the corresponding defers inline and exit\n\t\t\t\t// the associated stack frame.\n\t\t\t\td := gp._defer\n\t\t\t\tvar prev *_defer\n\t\t\t\tfor d != nil {\n\t\t\t\t\tif d.openDefer {\n\t\t\t\t\t\tif d.started {\n\t\t\t\t\t\t\t// This defer is started but we\n\t\t\t\t\t\t\t// are in the middle of a\n\t\t\t\t\t\t\t// defer-panic-recover inside of\n\t\t\t\t\t\t\t// it, so don't remove it or any\n\t\t\t\t\t\t\t// further defer entries\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif prev == nil {\n\t\t\t\t\t\t\tgp._defer = d.link\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprev.link = d.link\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewd := d.link\n\t\t\t\t\t\tfreedefer(d)\n\t\t\t\t\t\td = newd\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprev = d\n\t\t\t\t\t\td = d.link\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgp._panic = p.link\n\t\t\t// Aborted panics are marked but remain on the g.panic list.\n\t\t\t// Remove them from the list.\n\t\t\tfor gp._panic != nil && gp._panic.aborted {\n\t\t\t\tgp._panic = gp._panic.link\n\t\t\t}\n\t\t\tif gp._panic == nil { // must be done with signal\n\t\t\t\tgp.sig = 0\n\t\t\t}\n\t\t\t// Pass information about recovering frame to recovery.\n\t\t\tgp.sigcode0 = uintptr(sp)\n\t\t\tgp.sigcode1 = pc\n\t\t\tmcall(recovery)\n\t\t\tthrow(\"recovery failed\") // mcall should not return\n\t\t}\n\t}\n\n\t// ran out of deferred calls - old-school panic now\n\t// Because it is unsafe to call arbitrary user code after freezing\n\t// the world, we call preprintpanics to invoke all necessary Error\n\t// and String methods to prepare the panic strings before startpanic.\n\tpreprintpanics(gp._panic)\n\n\tfatalpanic(gp._panic) // should not return\n\t*(*int)(nil) = 0      // not reached\n}\n```\n\n### recover\n\n#### 官方定义\n>panic中的一个bool型\nrecovered bool           // whether this panic is over // recover标识\n\n#### 实现\n\n```go\n// The implementation of the predeclared function recover.\n// Cannot split the stack because it needs to reliably\n// find the stack segment of its caller.\n//\n// TODO(rsc): Once we commit to CopyStackAlways,\n// this doesn't need to be nosplit.\n//go:nosplit\nfunc gorecover(argp uintptr) interface{} {\n\t// Must be in a function running as part of a deferred call during the panic.\n\t// Must be called from the topmost function of the call\n\t// (the function used in the defer statement).\n\t// p.argp is the argument pointer of that topmost deferred function call.\n\t// Compare against argp reported by caller.\n\t// If they match, the caller is the one who can recover.\n\tgp := getg()\n\tp := gp._panic\n\tif p != nil && !p.goexit && !p.recovered && argp == uintptr(p.argp) {\n\t\tp.recovered = true // revover标识为true\n\t\treturn p.arg\n\t}\n\treturn nil\n}\n\n```\n### 拓展:「下面程序会输出什么值」\n\n#### eg-1:\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===>\",err)\n\t\t}\n\t}()\n\tf()\n\n\tselect {\n\t}\n}\n\nfunc f() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===\",err)\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer sum(1, 2)\n\t\tpanic(1)\n\t}()\n\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n\n##### output:\n\n```go\npanic: 1\n\ngoroutine 18 [running]:\nmain.f.func2()\n        /Users/k/learn/go-memory/src/main/ssp.go:26 +0x6d\ncreated by main.f\n        /Users/k/learn/go-memory/src/main/ssp.go:24 +0x57\n```\n\n#### eg-2:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===>\",err)\n\t\t}\n\t}()\n\tf()\n\n\tselect {\n\t}\n}\n\nfunc f() {\n\n\tgo func() {\n\t\tdefer sum(1, 2)\n\t\tdefer func() {\n\t\t\tif err:=recover();err!= nil {\n\t\t\t\tfmt.Println(\"===\",err)\n\t\t\t}\n\t\t}()\n\t\tpanic(1)\n\t}()\n\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n##### output:\n\n```go\n=== 1\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [select (no cases)]:\nmain.main()\n        /Users/k/learn/go-memory/src/main/ssp.go:13 +0x4a\n```\n\n\n#### eg-3:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"===>\",err)\n\t\t}\n\t}()\n\tf()\n\n\tselect {\n\t}\n}\n\nfunc f() {\n\tdefer func() {\n\t\tif err:=recover();err!= nil {\n\t\t\tfmt.Println(\"panic--f ===\",err)\n\t\t}\n\t}()\n\tgo func() {\n\t\tdefer sum(1, 2)\n\t\tdefer func() {\n\t\t\tif err:=recover();err!= nil {\n\t\t\t\tfmt.Println(\"===\",err)\n\t\t\t}\n\t\t}()\n\t\tpanic(1)\n\t}()\n\n}\n\nfunc sum(a, b int) int {\n\treturn a + b\n}\n\n```\n\n##### output:\n\n```go\n\n=== 1\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [select (no cases)]:\nmain.main()\n        /Users/k/learn/go-memory/src/main/ssp.go:13 +0x4a\n\n```","slug":"36-defer-panic","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d54002lzfqx965v8q4b","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/d586b949.html#more\">「35」runtime:recover not correctly recover from panic</a>说到了v1.16修复的一个panic问题,这次顺带看看底层关于defer的处理.</p>\n<span id=\"more\"></span>\n<h3 id=\"version\"><a class=\"header-anchor\" href=\"#version\">¶</a>version</h3>\n<blockquote>\n<p>go version go1.14.14 darwin/amd64</p>\n</blockquote>\n<h3 id=\"defer处理\"><a class=\"header-anchor\" href=\"#defer处理\">¶</a>defer处理</h3>\n<h4 id=\"程序\"><a class=\"header-anchor\" href=\"#程序\">¶</a>程序</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"汇编表示-「关于汇编的参考Plan-9汇编相关」\"><a class=\"header-anchor\" href=\"#汇编表示-「关于汇编的参考Plan-9汇编相关」\">¶</a>汇编表示:「关于汇编的参考<a href=\"https://blog.imrcrab.com/archives/2ce846ed.html\">Plan 9汇编相关</a>」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        TEXT    <span class=\"string\">&quot;&quot;</span>.f(SB), ABIInternal, $<span class=\"number\">128</span><span class=\"number\">-0</span></span><br><span class=\"line\"><span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        MOVQ    (TLS), CX</span><br><span class=\"line\"><span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        CMPQ    SP, <span class=\"number\">16</span>(CX)</span><br><span class=\"line\"><span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        JLS     <span class=\"number\">119</span></span><br><span class=\"line\"><span class=\"number\">0x000f</span> <span class=\"number\">00015</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">0x000f</span> <span class=\"number\">00015</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        ADDQ    $<span class=\"number\">-128</span>, SP</span><br><span class=\"line\"><span class=\"number\">0x0013</span> <span class=\"number\">00019</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        MOVQ    BP, <span class=\"number\">120</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0018</span> <span class=\"number\">00024</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        LEAQ    <span class=\"number\">120</span>(SP), BP</span><br><span class=\"line\"><span class=\"number\">0x001d</span> <span class=\"number\">00029</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        FUNCDATA        $<span class=\"number\">0</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\"><span class=\"number\">0x001d</span> <span class=\"number\">00029</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\"><span class=\"number\">0x001d</span> <span class=\"number\">00029</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVL    $<span class=\"number\">24</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0025</span> <span class=\"number\">00037</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        LEAQ    <span class=\"string\">&quot;&quot;</span>.sum·f(SB), AX</span><br><span class=\"line\"><span class=\"number\">0x002c</span> <span class=\"number\">00044</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">48</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0031</span> <span class=\"number\">00049</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">96</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x003a</span> <span class=\"number\">00058</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    $<span class=\"number\">2</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">104</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0043</span> <span class=\"number\">00067</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">24</span>(SP), AX</span><br><span class=\"line\"><span class=\"number\">0x0048</span> <span class=\"number\">00072</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    AX, (SP)</span><br><span class=\"line\"><span class=\"number\">0x004c</span> <span class=\"number\">00076</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0x004c</span> <span class=\"number\">00076</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        CALL    runtime.deferprocStack(SB) <span class=\"comment\">// 划重点,函数调用部分</span></span><br><span class=\"line\"><span class=\"number\">0x0051</span> <span class=\"number\">00081</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        TESTL   AX, AX</span><br><span class=\"line\"><span class=\"number\">0x0053</span> <span class=\"number\">00083</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        JNE     <span class=\"number\">103</span></span><br><span class=\"line\"><span class=\"number\">0x0055</span> <span class=\"number\">00085</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        JMP     <span class=\"number\">87</span></span><br><span class=\"line\"><span class=\"number\">0x0057</span> <span class=\"number\">00087</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        XCHGL   AX, AX</span><br><span class=\"line\"><span class=\"number\">0x0058</span> <span class=\"number\">00088</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        CALL    runtime.deferreturn(SB)  <span class=\"comment\">// 划重点,函数调用部分</span></span><br><span class=\"line\"><span class=\"number\">0x005d</span> <span class=\"number\">00093</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        MOVQ    <span class=\"number\">120</span>(SP), BP</span><br><span class=\"line\"><span class=\"number\">0x0062</span> <span class=\"number\">00098</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        SUBQ    $<span class=\"number\">-128</span>, SP</span><br><span class=\"line\"><span class=\"number\">0x0066</span> <span class=\"number\">00102</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        RET</span><br><span class=\"line\"><span class=\"number\">0x0067</span> <span class=\"number\">00103</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        XCHGL   AX, AX</span><br><span class=\"line\"><span class=\"number\">0x0068</span> <span class=\"number\">00104</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        CALL    runtime.deferreturn(SB)  <span class=\"comment\">// 划重点,函数调用部分</span></span><br><span class=\"line\"><span class=\"number\">0x006d</span> <span class=\"number\">00109</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    <span class=\"number\">120</span>(SP), BP</span><br><span class=\"line\"><span class=\"number\">0x0072</span> <span class=\"number\">00114</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        SUBQ    $<span class=\"number\">-128</span>, SP</span><br><span class=\"line\"><span class=\"number\">0x0076</span> <span class=\"number\">00118</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        RET</span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        NOP</span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        CALL    runtime.morestack_noctxt(SB)</span><br><span class=\"line\"><span class=\"number\">0x007c</span> <span class=\"number\">00124</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">0x007c</span> <span class=\"number\">00124</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        JMP     <span class=\"number\">0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"defer官方定义\"><a class=\"header-anchor\" href=\"#defer官方定义\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865\">defer官方定义</a>:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A _defer holds an entry on the list of deferred calls.</span></span><br><span class=\"line\"><span class=\"comment\">// If you add a field here, add code to clear it in freedefer and deferProcStack</span></span><br><span class=\"line\"><span class=\"comment\">// This struct must match the code in cmd/compile/internal/gc/reflect.go:deferstruct</span></span><br><span class=\"line\"><span class=\"comment\">// and cmd/compile/internal/gc/ssa.go:(*state).call.</span></span><br><span class=\"line\"><span class=\"comment\">// Some defers will be allocated on the stack and some on the heap. // 堆栈的不确定性</span></span><br><span class=\"line\"><span class=\"comment\">// All defers are logically part of the stack, so write barriers to</span></span><br><span class=\"line\"><span class=\"comment\">// initialize them are not required. All defers must be manually scanned,</span></span><br><span class=\"line\"><span class=\"comment\">// and for heap defers, marked.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _defer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsiz     <span class=\"type\">int32</span> <span class=\"comment\">// includes both arguments and results</span></span><br><span class=\"line\">\tstarted <span class=\"type\">bool</span></span><br><span class=\"line\">\theap    <span class=\"type\">bool</span></span><br><span class=\"line\">\t<span class=\"comment\">// openDefer indicates that this _defer is for a frame with open-coded</span></span><br><span class=\"line\">\t<span class=\"comment\">// defers. We have only one defer record for the entire frame (which may</span></span><br><span class=\"line\">\t<span class=\"comment\">// currently have 0, 1, or more defers active).</span></span><br><span class=\"line\">\topenDefer <span class=\"type\">bool</span></span><br><span class=\"line\">\tsp        <span class=\"type\">uintptr</span>  <span class=\"comment\">// sp at time of defer</span></span><br><span class=\"line\">\tpc        <span class=\"type\">uintptr</span>  <span class=\"comment\">// pc at time of defer</span></span><br><span class=\"line\">\tfn        *funcval <span class=\"comment\">// can be nil for open-coded defers 指向函数</span></span><br><span class=\"line\">\t_panic    *_panic  <span class=\"comment\">// panic that is running defer</span></span><br><span class=\"line\">\tlink      *_defer  <span class=\"comment\">// 同一个goroutine所有的defer连城的链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// If openDefer is true, the fields below record values about the stack</span></span><br><span class=\"line\">\t<span class=\"comment\">// frame and associated function that has the open-coded defer(s). sp</span></span><br><span class=\"line\">\t<span class=\"comment\">// above will be the sp for the frame, and pc will be address of the</span></span><br><span class=\"line\">\t<span class=\"comment\">// deferreturn call in the function.</span></span><br><span class=\"line\">\tfd   unsafe.Pointer <span class=\"comment\">// funcdata for the function associated with the frame</span></span><br><span class=\"line\">\tvarp <span class=\"type\">uintptr</span>        <span class=\"comment\">// value of varp for the stack frame</span></span><br><span class=\"line\">\t<span class=\"comment\">// framepc is the current pc associated with the stack frame. Together,</span></span><br><span class=\"line\">\t<span class=\"comment\">// with sp above (which is the sp associated with the stack frame),</span></span><br><span class=\"line\">\t<span class=\"comment\">// framepc/sp can be used as pc/sp pair to continue a stack trace via</span></span><br><span class=\"line\">\t<span class=\"comment\">// gentraceback().</span></span><br><span class=\"line\">\tframepc <span class=\"type\">uintptr</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"deferproc\"><a class=\"header-anchor\" href=\"#deferproc\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L218\">deferproc</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new deferred function fn with siz bytes of arguments.</span></span><br><span class=\"line\"><span class=\"comment\">// The compiler turns a defer statement into a call to this.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferproc</span><span class=\"params\">(siz <span class=\"type\">int32</span>, fn *funcval)</span></span> &#123; <span class=\"comment\">// arguments of fn follow fn</span></span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.curg != gp &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// go code on the system stack can&#x27;t defer</span></span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;defer on system stack&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// the arguments of fn are in a perilous state. The stack map</span></span><br><span class=\"line\">\t<span class=\"comment\">// for deferproc does not describe them. So we can&#x27;t let garbage</span></span><br><span class=\"line\">\t<span class=\"comment\">// collection or stack copying trigger until we&#x27;ve copied them out</span></span><br><span class=\"line\">\t<span class=\"comment\">// to somewhere safe. The memmove below does that.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Until the copy completes, we can only call nosplit routines.</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取调用者的sp「栈顶」</span></span><br><span class=\"line\">\tsp := getcallersp()</span><br><span class=\"line\">\targp := <span class=\"type\">uintptr</span>(unsafe.Pointer(&amp;fn)) + unsafe.Sizeof(fn)</span><br><span class=\"line\">\tcallerpc := getcallerpc() <span class=\"comment\">// 获取caller的pc</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从poll中获取或allocate一个</span></span><br><span class=\"line\">\td := newdefer(siz)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d._panic != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;deferproc: d.panic != nil after newdefer&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 变量的初始化信息</span></span><br><span class=\"line\">\td.link = gp._defer</span><br><span class=\"line\">\tgp._defer = d</span><br><span class=\"line\">\td.fn = fn</span><br><span class=\"line\">\td.pc = callerpc</span><br><span class=\"line\">\td.sp = sp</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> siz &#123; <span class=\"comment\">// 关于siz的值的处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Do nothing.</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> sys.PtrSize:</span><br><span class=\"line\">\t\t*(*<span class=\"type\">uintptr</span>)(deferArgs(d)) = *(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(argp))</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tmemmove(deferArgs(d), unsafe.Pointer(argp), <span class=\"type\">uintptr</span>(siz))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// deferproc returns 0 normally.</span></span><br><span class=\"line\">\t<span class=\"comment\">// a deferred func that stops a panic</span></span><br><span class=\"line\">\t<span class=\"comment\">// makes the deferproc return 1.</span></span><br><span class=\"line\">\t<span class=\"comment\">// the code the compiler generates always</span></span><br><span class=\"line\">\t<span class=\"comment\">// checks the return value and jumps to the</span></span><br><span class=\"line\">\t<span class=\"comment\">// end of the function if deferproc returns != 0.</span></span><br><span class=\"line\">    <span class=\"comment\">// 正常返回0,异常返回1</span></span><br><span class=\"line\">\treturn0()</span><br><span class=\"line\">\t<span class=\"comment\">// No code can go here - the C return register has</span></span><br><span class=\"line\">\t<span class=\"comment\">// been set and must not be clobbered.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"newdefer\"><a class=\"header-anchor\" href=\"#newdefer\">¶</a>newdefer</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Allocate a Defer, usually using per-P pool. // pool池子</span></span><br><span class=\"line\"><span class=\"comment\">// Each defer must be released with freedefer.  The defer is not</span></span><br><span class=\"line\"><span class=\"comment\">// added to any defer chain yet.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This must not grow the stack because there may be a frame without</span></span><br><span class=\"line\"><span class=\"comment\">// stack map information when this is called.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newdefer</span><span class=\"params\">(siz <span class=\"type\">int32</span>)</span></span> *_defer &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d *_defer</span><br><span class=\"line\">\tsc := deferclass(<span class=\"type\">uintptr</span>(siz)) <span class=\"comment\">// 计算sc</span></span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sc &lt; <span class=\"type\">uintptr</span>(<span class=\"built_in\">len</span>(p&#123;&#125;.deferpool)) &#123;</span><br><span class=\"line\">\t\tpp := gp.m.p.ptr()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(pp.deferpool[sc]) == <span class=\"number\">0</span> &amp;&amp; sched.deferpool[sc] != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Take the slow path on the system stack so</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// we don&#x27;t grow newdefer&#x27;s stack.</span></span><br><span class=\"line\">            <span class=\"comment\">// 当缓存没有值了，就从全局pool中搞出来一部分</span></span><br><span class=\"line\">\t\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tlock(&amp;sched.deferlock)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(pp.deferpool[sc]) &lt; <span class=\"built_in\">cap</span>(pp.deferpool[sc])/<span class=\"number\">2</span> &amp;&amp; sched.deferpool[sc] != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\td := sched.deferpool[sc]</span><br><span class=\"line\">\t\t\t\t\tsched.deferpool[sc] = d.link</span><br><span class=\"line\">\t\t\t\t\td.link = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\t\tpp.deferpool[sc] = <span class=\"built_in\">append</span>(pp.deferpool[sc], d)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tunlock(&amp;sched.deferlock)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> n := <span class=\"built_in\">len</span>(pp.deferpool[sc]); n &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\td = pp.deferpool[sc][n<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t\tpp.deferpool[sc][n<span class=\"number\">-1</span>] = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\tpp.deferpool[sc] = pp.deferpool[sc][:n<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Allocate new defer+args.</span></span><br><span class=\"line\">        <span class=\"comment\">// 全局的pool不足/args过长</span></span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\ttotal := roundupsize(totaldefersize(<span class=\"type\">uintptr</span>(siz)))</span><br><span class=\"line\">\t\t\td = (*_defer)(mallocgc(total, deferType, <span class=\"literal\">true</span>))</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> debugCachedWork &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Duplicate the tail below so if there&#x27;s a</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// crash in checkPut we can tell if d was just</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// allocated or came from the pool.</span></span><br><span class=\"line\">\t\t\td.siz = siz</span><br><span class=\"line\">\t\t\td.link = gp._defer <span class=\"comment\">// 与之前绑定的g形成链表</span></span><br><span class=\"line\">\t\t\tgp._defer = d</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> d</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.siz = siz</span><br><span class=\"line\">\td.heap = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"deferprocStack\"><a class=\"header-anchor\" href=\"#deferprocStack\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L271\">deferprocStack</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// deferprocStack queues a new deferred function with a defer record on the stack.</span></span><br><span class=\"line\"><span class=\"comment\">// The defer record must have its siz and fn fields initialized. siz和fn必须初始化</span></span><br><span class=\"line\"><span class=\"comment\">// All other fields can contain junk.</span></span><br><span class=\"line\"><span class=\"comment\">// The defer record must be immediately followed in memory by</span></span><br><span class=\"line\"><span class=\"comment\">// the arguments of the defer.</span></span><br><span class=\"line\"><span class=\"comment\">// Nosplit because the arguments on the stack won&#x27;t be scanned</span></span><br><span class=\"line\"><span class=\"comment\">// until the defer record is spliced into the gp._defer list.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferprocStack</span><span class=\"params\">(d *_defer)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg() <span class=\"comment\">// 获取当前的g,也说明一件事,这个defer和g是相关联的哦</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.curg != gp &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// go code on the system stack can&#x27;t defer</span></span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;defer on system stack&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// siz and fn are already set.</span></span><br><span class=\"line\">\t<span class=\"comment\">// The other fields are junk on entry to deferprocStack and</span></span><br><span class=\"line\">\t<span class=\"comment\">// are initialized here. </span></span><br><span class=\"line\">    <span class=\"comment\">// 这里写的很清楚了,siz和fn必须 提前初始化,其它的变量在这初始化.</span></span><br><span class=\"line\">\td.started = <span class=\"literal\">false</span></span><br><span class=\"line\">\td.heap = <span class=\"literal\">false</span></span><br><span class=\"line\">\td.openDefer = <span class=\"literal\">false</span></span><br><span class=\"line\">\td.sp = getcallersp()</span><br><span class=\"line\">\td.pc = getcallerpc()</span><br><span class=\"line\">\td.framepc = <span class=\"number\">0</span></span><br><span class=\"line\">\td.varp = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// The lines below implement:</span></span><br><span class=\"line\">\t<span class=\"comment\">//   d.panic = nil</span></span><br><span class=\"line\">\t<span class=\"comment\">//   d.fd = nil</span></span><br><span class=\"line\">\t<span class=\"comment\">//   d.link = gp._defer</span></span><br><span class=\"line\">\t<span class=\"comment\">//   gp._defer = d</span></span><br><span class=\"line\">\t<span class=\"comment\">// But without write barriers. The first three are writes to</span></span><br><span class=\"line\">\t<span class=\"comment\">// the stack so they don&#x27;t need a write barrier, and furthermore</span></span><br><span class=\"line\">\t<span class=\"comment\">// are to uninitialized memory, so they must not use a write barrier.</span></span><br><span class=\"line\">\t<span class=\"comment\">// The fourth write does not require a write barrier because we</span></span><br><span class=\"line\">\t<span class=\"comment\">// explicitly mark all the defer structures, so we don&#x27;t need to</span></span><br><span class=\"line\">\t<span class=\"comment\">// keep track of pointers to them with a write barrier.</span></span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;d._panic)) = <span class=\"number\">0</span></span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;d.fd)) = <span class=\"number\">0</span></span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;d.link)) = <span class=\"type\">uintptr</span>(unsafe.Pointer(gp._defer))</span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;gp._defer)) = <span class=\"type\">uintptr</span>(unsafe.Pointer(d))</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn0()</span><br><span class=\"line\">\t<span class=\"comment\">// No code can go here - the C return register has</span></span><br><span class=\"line\">\t<span class=\"comment\">// been set and must not be clobbered.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"deferreturn\"><a class=\"header-anchor\" href=\"#deferreturn\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L528\">deferreturn</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Run a deferred function if there is one.</span></span><br><span class=\"line\"><span class=\"comment\">// The compiler inserts a call to this at the end of any</span></span><br><span class=\"line\"><span class=\"comment\">// function which calls defer.</span></span><br><span class=\"line\"><span class=\"comment\">// If there is a deferred function, this will call runtime·jmpdefer,</span></span><br><span class=\"line\"><span class=\"comment\">// which will jump to the deferred function such that it appears</span></span><br><span class=\"line\"><span class=\"comment\">// to have been called by the caller of deferreturn at the point</span></span><br><span class=\"line\"><span class=\"comment\">// just before deferreturn was called. The effect is that deferreturn</span></span><br><span class=\"line\"><span class=\"comment\">// is called again and again until there are no more deferred functions.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Declared as nosplit, because the function should not be preempted once we start</span></span><br><span class=\"line\"><span class=\"comment\">// modifying the caller&#x27;s frame in order to reuse the frame to call the deferred</span></span><br><span class=\"line\"><span class=\"comment\">// function.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The single argument isn&#x27;t actually used - it just has its address</span></span><br><span class=\"line\"><span class=\"comment\">// taken so it can be matched against pending defers.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferreturn</span><span class=\"params\">(arg0 <span class=\"type\">uintptr</span>)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\td := gp._defer</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d == <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// 递归调用的终止条件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsp := getcallersp() </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d.sp != sp &#123; <span class=\"comment\">// 当前的调用栈和defer中是否相同</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d.openDefer &#123;</span><br><span class=\"line\">\t\tdone := runOpenDeferFrame(gp, d)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !done &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;unfinished open-coded defers in deferreturn&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tgp._defer = d.link</span><br><span class=\"line\">\t\tfreedefer(d)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Moving arguments around.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Everything called after this point must be recursively</span></span><br><span class=\"line\">\t<span class=\"comment\">// nosplit because the garbage collector won&#x27;t know the form</span></span><br><span class=\"line\">\t<span class=\"comment\">// of the arguments until the jmpdefer can flip the PC over to</span></span><br><span class=\"line\">\t<span class=\"comment\">// fn.</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> d.siz &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Do nothing.</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> sys.PtrSize:</span><br><span class=\"line\">\t\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;arg0)) = *(*<span class=\"type\">uintptr</span>)(deferArgs(d))</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tmemmove(unsafe.Pointer(&amp;arg0), deferArgs(d), <span class=\"type\">uintptr</span>(d.siz))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfn := d.fn</span><br><span class=\"line\">\td.fn = <span class=\"literal\">nil</span></span><br><span class=\"line\">\tgp._defer = d.link</span><br><span class=\"line\">\tfreedefer(d) <span class=\"comment\">// 释放d,重新放回pool中</span></span><br><span class=\"line\">\t<span class=\"comment\">// If the defer function pointer is nil, force the seg fault to happen</span></span><br><span class=\"line\">\t<span class=\"comment\">// here rather than in jmpdefer. gentraceback() throws an error if it is</span></span><br><span class=\"line\">\t<span class=\"comment\">// called with a callback on an LR architecture and jmpdefer is on the</span></span><br><span class=\"line\">\t<span class=\"comment\">// stack, because the stack trace can be incorrect in that case - see</span></span><br><span class=\"line\">\t<span class=\"comment\">// issue #8153).</span></span><br><span class=\"line\">\t_ = fn.fn</span><br><span class=\"line\">\tjmpdefer(fn, <span class=\"type\">uintptr</span>(unsafe.Pointer(&amp;arg0)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"panic\"><a class=\"header-anchor\" href=\"#panic\">¶</a>panic</h3>\n<h4 id=\"官方定义–\"><a class=\"header-anchor\" href=\"#官方定义–\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903\">官方定义–&gt;</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A _panic holds information about an active panic.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This is marked go:notinheap because _panic values must only ever</span></span><br><span class=\"line\"><span class=\"comment\">// live on the stack.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The argp and link fields are stack pointers, but don&#x27;t need special</span></span><br><span class=\"line\"><span class=\"comment\">// handling during stack growth: because they are pointer-typed and</span></span><br><span class=\"line\"><span class=\"comment\">// _panic values only live on the stack, regular stack pointer</span></span><br><span class=\"line\"><span class=\"comment\">// adjustment takes care of them.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:notinheap</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _panic <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\targp      unsafe.Pointer <span class=\"comment\">// pointer to arguments of deferred call run during panic; cannot move - known to liblink</span></span><br><span class=\"line\">\targ       <span class=\"keyword\">interface</span>&#123;&#125;    <span class=\"comment\">// argument to panic</span></span><br><span class=\"line\">\tlink      *_panic        <span class=\"comment\">// link to earlier panic</span></span><br><span class=\"line\">\tpc        <span class=\"type\">uintptr</span>        <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\tsp        unsafe.Pointer <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\trecovered <span class=\"type\">bool</span>           <span class=\"comment\">// whether this panic is over // recover标识</span></span><br><span class=\"line\">\taborted   <span class=\"type\">bool</span>           <span class=\"comment\">// the panic was aborted // 终止标记</span></span><br><span class=\"line\">\tgoexit    <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"gopanic\"><a class=\"header-anchor\" href=\"#gopanic\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L889\">gopanic</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reflectcallSave calls reflectcall after saving the caller&#x27;s pc and sp in the</span></span><br><span class=\"line\"><span class=\"comment\">// panic record. This allows the runtime to return to the Goexit defer processing</span></span><br><span class=\"line\"><span class=\"comment\">// loop, in the unusual case where the Goexit may be bypassed by a successful</span></span><br><span class=\"line\"><span class=\"comment\">// recover.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reflectcallSave</span><span class=\"params\">(p *_panic, fn, arg unsafe.Pointer, argsize <span class=\"type\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tp.argp = unsafe.Pointer(getargp(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t\tp.pc = getcallerpc()</span><br><span class=\"line\">\t\tp.sp = unsafe.Pointer(getcallersp())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treflectcall(<span class=\"literal\">nil</span>, fn, arg, argsize, argsize)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tp.pc = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tp.sp = unsafe.Pointer(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The implementation of the predeclared function panic.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gopanic</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.curg != gp &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic on system stack&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.mallocing != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic during malloc&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.preemptoff != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;preempt off reason: &quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(gp.m.preemptoff)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic during preemptoff&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.locks != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic holding locks&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p _panic</span><br><span class=\"line\">\tp.arg = e</span><br><span class=\"line\">\tp.link = gp._panic</span><br><span class=\"line\">\tgp._panic = (*_panic)(noescape(unsafe.Pointer(&amp;p)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tatomic.Xadd(&amp;runningPanicDefers, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// By calculating getcallerpc/getcallersp here, we avoid scanning the</span></span><br><span class=\"line\">\t<span class=\"comment\">// gopanic frame (stack scanning is slow...)</span></span><br><span class=\"line\">\taddOneOpenDeferFrame(gp, getcallerpc(), unsafe.Pointer(getcallersp()))</span><br><span class=\"line\">\t<span class=\"comment\">//\t遍历链表</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\td := gp._defer</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// If defer was started by earlier panic or Goexit (and, since we&#x27;re back here, that triggered a new panic),</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// take defer off list. An earlier panic will not continue running, but we will make sure below that an</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// earlier Goexit does continue running.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d.started &#123; <span class=\"comment\">// 已经启动</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> d._panic != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\td._panic.aborted = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\td._panic = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !d.openDefer &#123; <span class=\"comment\">// 没有打开则跳过</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// For open-coded defers, we need to process the</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// defer again, in case there are any other defers</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// to call in the frame (not including the defer</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// call that caused the panic).</span></span><br><span class=\"line\">\t\t\t\td.fn = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\tgp._defer = d.link</span><br><span class=\"line\">\t\t\t\tfreedefer(d)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Mark defer as started, but keep on list, so that traceback</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// can find and update the defer&#x27;s argument frame if stack growth</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// or a garbage collection happens before reflectcall starts executing d.fn.</span></span><br><span class=\"line\">\t\td.started = <span class=\"literal\">true</span> <span class=\"comment\">//初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Record the panic that is running the defer.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// If there is a new panic during the deferred call, that panic</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// will find d in the list and will mark d._panic (this panic) aborted.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 记录这个panic，如果在运行期间有了新的panic，标记这个Panic abort=true(强制终止)</span></span><br><span class=\"line\">\t\td._panic = (*_panic)(noescape(unsafe.Pointer(&amp;p)))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdone := <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d.openDefer &#123;</span><br><span class=\"line\">\t\t\tdone = runOpenDeferFrame(gp, d)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> done &amp;&amp; !d._panic.recovered &#123;</span><br><span class=\"line\">\t\t\t\taddOneOpenDeferFrame(gp, <span class=\"number\">0</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tp.argp = unsafe.Pointer(getargp(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 调用defer</span></span><br><span class=\"line\">\t\t\treflectcall(<span class=\"literal\">nil</span>, unsafe.Pointer(d.fn), deferArgs(d), <span class=\"type\">uint32</span>(d.siz), <span class=\"type\">uint32</span>(d.siz))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp.argp = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// reflectcall did not panic. Remove d.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> gp._defer != d &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;bad defer entry in panic&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\td._panic = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// trigger shrinkage to test stack copy. See stack_test.go:TestStackPanic</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//GC()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpc := d.pc</span><br><span class=\"line\">\t\tsp := unsafe.Pointer(d.sp) <span class=\"comment\">// must be pointer so it gets adjusted during stack copy</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> done &#123;</span><br><span class=\"line\">\t\t\td.fn = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\tgp._defer = d.link <span class=\"comment\">// 遍历下一个</span></span><br><span class=\"line\">\t\t\tfreedefer(d)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.recovered &#123; <span class=\"comment\">// 已经有recover被调用</span></span><br><span class=\"line\">\t\t\tgp._panic = p.link</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gp._panic != <span class=\"literal\">nil</span> &amp;&amp; gp._panic.goexit &amp;&amp; gp._panic.aborted &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// A normal recover would bypass/abort the Goexit.  Instead,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// we return to the processing loop of the Goexit.</span></span><br><span class=\"line\">\t\t\t\tgp.sigcode0 = <span class=\"type\">uintptr</span>(gp._panic.sp)</span><br><span class=\"line\">\t\t\t\tgp.sigcode1 = <span class=\"type\">uintptr</span>(gp._panic.pc)</span><br><span class=\"line\">\t\t\t\tmcall(recovery)</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;bypassed recovery failed&quot;</span>) <span class=\"comment\">// mcall should not return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tatomic.Xadd(&amp;runningPanicDefers, <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> done &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Remove any remaining non-started, open-coded</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// defer entries after a recover, since the</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// corresponding defers will be executed normally</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// (inline). Any such entry will become stale once</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// we run the corresponding defers inline and exit</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// the associated stack frame.</span></span><br><span class=\"line\">\t\t\t\td := gp._defer</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> prev *_defer</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> d != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> d.openDefer &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> d.started &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// This defer is started but we</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// are in the middle of a</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// defer-panic-recover inside of</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// it, so don&#x27;t remove it or any</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// further defer entries</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> prev == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tgp._defer = d.link</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tprev.link = d.link</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tnewd := d.link</span><br><span class=\"line\">\t\t\t\t\t\tfreedefer(d)</span><br><span class=\"line\">\t\t\t\t\t\td = newd</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tprev = d</span><br><span class=\"line\">\t\t\t\t\t\td = d.link</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tgp._panic = p.link</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Aborted panics are marked but remain on the g.panic list.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Remove them from the list.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> gp._panic != <span class=\"literal\">nil</span> &amp;&amp; gp._panic.aborted &#123;</span><br><span class=\"line\">\t\t\t\tgp._panic = gp._panic.link</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gp._panic == <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// must be done with signal</span></span><br><span class=\"line\">\t\t\t\tgp.sig = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Pass information about recovering frame to recovery.</span></span><br><span class=\"line\">\t\t\tgp.sigcode0 = <span class=\"type\">uintptr</span>(sp)</span><br><span class=\"line\">\t\t\tgp.sigcode1 = pc</span><br><span class=\"line\">\t\t\tmcall(recovery)</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;recovery failed&quot;</span>) <span class=\"comment\">// mcall should not return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ran out of deferred calls - old-school panic now</span></span><br><span class=\"line\">\t<span class=\"comment\">// Because it is unsafe to call arbitrary user code after freezing</span></span><br><span class=\"line\">\t<span class=\"comment\">// the world, we call preprintpanics to invoke all necessary Error</span></span><br><span class=\"line\">\t<span class=\"comment\">// and String methods to prepare the panic strings before startpanic.</span></span><br><span class=\"line\">\tpreprintpanics(gp._panic)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfatalpanic(gp._panic) <span class=\"comment\">// should not return</span></span><br><span class=\"line\">\t*(*<span class=\"type\">int</span>)(<span class=\"literal\">nil</span>) = <span class=\"number\">0</span>      <span class=\"comment\">// not reached</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"recover\"><a class=\"header-anchor\" href=\"#recover\">¶</a>recover</h3>\n<h4 id=\"官方定义\"><a class=\"header-anchor\" href=\"#官方定义\">¶</a>官方定义</h4>\n<blockquote>\n<p>panic中的一个bool型<br>\nrecovered bool           // whether this panic is over // recover标识</p>\n</blockquote>\n<h4 id=\"实现\"><a class=\"header-anchor\" href=\"#实现\">¶</a>实现</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The implementation of the predeclared function recover.</span></span><br><span class=\"line\"><span class=\"comment\">// Cannot split the stack because it needs to reliably</span></span><br><span class=\"line\"><span class=\"comment\">// find the stack segment of its caller.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// TODO(rsc): Once we commit to CopyStackAlways,</span></span><br><span class=\"line\"><span class=\"comment\">// this doesn&#x27;t need to be nosplit.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gorecover</span><span class=\"params\">(argp <span class=\"type\">uintptr</span>)</span></span> <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Must be in a function running as part of a deferred call during the panic.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Must be called from the topmost function of the call</span></span><br><span class=\"line\">\t<span class=\"comment\">// (the function used in the defer statement).</span></span><br><span class=\"line\">\t<span class=\"comment\">// p.argp is the argument pointer of that topmost deferred function call.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Compare against argp reported by caller.</span></span><br><span class=\"line\">\t<span class=\"comment\">// If they match, the caller is the one who can recover.</span></span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\tp := gp._panic</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> p != <span class=\"literal\">nil</span> &amp;&amp; !p.goexit &amp;&amp; !p.recovered &amp;&amp; argp == <span class=\"type\">uintptr</span>(p.argp) &#123;</span><br><span class=\"line\">\t\tp.recovered = <span class=\"literal\">true</span> <span class=\"comment\">// revover标识为true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p.arg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展-「下面程序会输出什么值」\"><a class=\"header-anchor\" href=\"#拓展-「下面程序会输出什么值」\">¶</a>拓展:「下面程序会输出什么值」</h3>\n<h4 id=\"eg-1\"><a class=\"header-anchor\" href=\"#eg-1\">¶</a>eg-1:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&gt;&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"output\"><a class=\"header-anchor\" href=\"#output\">¶</a>output:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">panic</span>: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">18</span> [running]:</span><br><span class=\"line\">main.f.func2()</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">26</span> +<span class=\"number\">0x6d</span></span><br><span class=\"line\">created by main.f</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">24</span> +<span class=\"number\">0x57</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"eg-2\"><a class=\"header-anchor\" href=\"#eg-2\">¶</a>eg-2:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&gt;&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;===&quot;</span>,err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"output-v2\"><a class=\"header-anchor\" href=\"#output-v2\">¶</a>output:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== <span class=\"number\">1</span></span><br><span class=\"line\">fatal <span class=\"type\">error</span>: all goroutines are asleep - deadlock!</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">1</span> [<span class=\"keyword\">select</span> (no cases)]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">13</span> +<span class=\"number\">0x4a</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"eg-3\"><a class=\"header-anchor\" href=\"#eg-3\">¶</a>eg-3:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&gt;&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;panic--f ===&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;===&quot;</span>,err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"output-v3\"><a class=\"header-anchor\" href=\"#output-v3\">¶</a>output:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">=== <span class=\"number\">1</span></span><br><span class=\"line\">fatal <span class=\"type\">error</span>: all goroutines are asleep - deadlock!</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">1</span> [<span class=\"keyword\">select</span> (no cases)]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">13</span> +<span class=\"number\">0x4a</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/d586b949.html#more\">「35」runtime:recover not correctly recover from panic</a>说到了v1.16修复的一个panic问题,这次顺带看看底层关于defer的处理.</p>","more":"<h3 id=\"version\"><a class=\"header-anchor\" href=\"#version\">¶</a>version</h3>\n<blockquote>\n<p>go version go1.14.14 darwin/amd64</p>\n</blockquote>\n<h3 id=\"defer处理\"><a class=\"header-anchor\" href=\"#defer处理\">¶</a>defer处理</h3>\n<h4 id=\"程序\"><a class=\"header-anchor\" href=\"#程序\">¶</a>程序</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"汇编表示-「关于汇编的参考Plan-9汇编相关」\"><a class=\"header-anchor\" href=\"#汇编表示-「关于汇编的参考Plan-9汇编相关」\">¶</a>汇编表示:「关于汇编的参考<a href=\"https://blog.imrcrab.com/archives/2ce846ed.html\">Plan 9汇编相关</a>」</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        TEXT    <span class=\"string\">&quot;&quot;</span>.f(SB), ABIInternal, $<span class=\"number\">128</span><span class=\"number\">-0</span></span><br><span class=\"line\"><span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        MOVQ    (TLS), CX</span><br><span class=\"line\"><span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        CMPQ    SP, <span class=\"number\">16</span>(CX)</span><br><span class=\"line\"><span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        JLS     <span class=\"number\">119</span></span><br><span class=\"line\"><span class=\"number\">0x000f</span> <span class=\"number\">00015</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">0x000f</span> <span class=\"number\">00015</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        ADDQ    $<span class=\"number\">-128</span>, SP</span><br><span class=\"line\"><span class=\"number\">0x0013</span> <span class=\"number\">00019</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        MOVQ    BP, <span class=\"number\">120</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0018</span> <span class=\"number\">00024</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        LEAQ    <span class=\"number\">120</span>(SP), BP</span><br><span class=\"line\"><span class=\"number\">0x001d</span> <span class=\"number\">00029</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        FUNCDATA        $<span class=\"number\">0</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\"><span class=\"number\">0x001d</span> <span class=\"number\">00029</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\"><span class=\"number\">0x001d</span> <span class=\"number\">00029</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVL    $<span class=\"number\">24</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0025</span> <span class=\"number\">00037</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        LEAQ    <span class=\"string\">&quot;&quot;</span>.sum·f(SB), AX</span><br><span class=\"line\"><span class=\"number\">0x002c</span> <span class=\"number\">00044</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">48</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0031</span> <span class=\"number\">00049</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">96</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x003a</span> <span class=\"number\">00058</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    $<span class=\"number\">2</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">104</span>(SP)</span><br><span class=\"line\"><span class=\"number\">0x0043</span> <span class=\"number\">00067</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">24</span>(SP), AX</span><br><span class=\"line\"><span class=\"number\">0x0048</span> <span class=\"number\">00072</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    AX, (SP)</span><br><span class=\"line\"><span class=\"number\">0x004c</span> <span class=\"number\">00076</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">0x004c</span> <span class=\"number\">00076</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        CALL    runtime.deferprocStack(SB) <span class=\"comment\">// 划重点,函数调用部分</span></span><br><span class=\"line\"><span class=\"number\">0x0051</span> <span class=\"number\">00081</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        TESTL   AX, AX</span><br><span class=\"line\"><span class=\"number\">0x0053</span> <span class=\"number\">00083</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        JNE     <span class=\"number\">103</span></span><br><span class=\"line\"><span class=\"number\">0x0055</span> <span class=\"number\">00085</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        JMP     <span class=\"number\">87</span></span><br><span class=\"line\"><span class=\"number\">0x0057</span> <span class=\"number\">00087</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        XCHGL   AX, AX</span><br><span class=\"line\"><span class=\"number\">0x0058</span> <span class=\"number\">00088</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        CALL    runtime.deferreturn(SB)  <span class=\"comment\">// 划重点,函数调用部分</span></span><br><span class=\"line\"><span class=\"number\">0x005d</span> <span class=\"number\">00093</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        MOVQ    <span class=\"number\">120</span>(SP), BP</span><br><span class=\"line\"><span class=\"number\">0x0062</span> <span class=\"number\">00098</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        SUBQ    $<span class=\"number\">-128</span>, SP</span><br><span class=\"line\"><span class=\"number\">0x0066</span> <span class=\"number\">00102</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)        RET</span><br><span class=\"line\"><span class=\"number\">0x0067</span> <span class=\"number\">00103</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        XCHGL   AX, AX</span><br><span class=\"line\"><span class=\"number\">0x0068</span> <span class=\"number\">00104</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        CALL    runtime.deferreturn(SB)  <span class=\"comment\">// 划重点,函数调用部分</span></span><br><span class=\"line\"><span class=\"number\">0x006d</span> <span class=\"number\">00109</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        MOVQ    <span class=\"number\">120</span>(SP), BP</span><br><span class=\"line\"><span class=\"number\">0x0072</span> <span class=\"number\">00114</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        SUBQ    $<span class=\"number\">-128</span>, SP</span><br><span class=\"line\"><span class=\"number\">0x0076</span> <span class=\"number\">00118</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        RET</span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)        NOP</span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\"><span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        CALL    runtime.morestack_noctxt(SB)</span><br><span class=\"line\"><span class=\"number\">0x007c</span> <span class=\"number\">00124</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\"><span class=\"number\">0x007c</span> <span class=\"number\">00124</span> (src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)        JMP     <span class=\"number\">0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"defer官方定义\"><a class=\"header-anchor\" href=\"#defer官方定义\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865\">defer官方定义</a>:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A _defer holds an entry on the list of deferred calls.</span></span><br><span class=\"line\"><span class=\"comment\">// If you add a field here, add code to clear it in freedefer and deferProcStack</span></span><br><span class=\"line\"><span class=\"comment\">// This struct must match the code in cmd/compile/internal/gc/reflect.go:deferstruct</span></span><br><span class=\"line\"><span class=\"comment\">// and cmd/compile/internal/gc/ssa.go:(*state).call.</span></span><br><span class=\"line\"><span class=\"comment\">// Some defers will be allocated on the stack and some on the heap. // 堆栈的不确定性</span></span><br><span class=\"line\"><span class=\"comment\">// All defers are logically part of the stack, so write barriers to</span></span><br><span class=\"line\"><span class=\"comment\">// initialize them are not required. All defers must be manually scanned,</span></span><br><span class=\"line\"><span class=\"comment\">// and for heap defers, marked.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _defer <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tsiz     <span class=\"type\">int32</span> <span class=\"comment\">// includes both arguments and results</span></span><br><span class=\"line\">\tstarted <span class=\"type\">bool</span></span><br><span class=\"line\">\theap    <span class=\"type\">bool</span></span><br><span class=\"line\">\t<span class=\"comment\">// openDefer indicates that this _defer is for a frame with open-coded</span></span><br><span class=\"line\">\t<span class=\"comment\">// defers. We have only one defer record for the entire frame (which may</span></span><br><span class=\"line\">\t<span class=\"comment\">// currently have 0, 1, or more defers active).</span></span><br><span class=\"line\">\topenDefer <span class=\"type\">bool</span></span><br><span class=\"line\">\tsp        <span class=\"type\">uintptr</span>  <span class=\"comment\">// sp at time of defer</span></span><br><span class=\"line\">\tpc        <span class=\"type\">uintptr</span>  <span class=\"comment\">// pc at time of defer</span></span><br><span class=\"line\">\tfn        *funcval <span class=\"comment\">// can be nil for open-coded defers 指向函数</span></span><br><span class=\"line\">\t_panic    *_panic  <span class=\"comment\">// panic that is running defer</span></span><br><span class=\"line\">\tlink      *_defer  <span class=\"comment\">// 同一个goroutine所有的defer连城的链表</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// If openDefer is true, the fields below record values about the stack</span></span><br><span class=\"line\">\t<span class=\"comment\">// frame and associated function that has the open-coded defer(s). sp</span></span><br><span class=\"line\">\t<span class=\"comment\">// above will be the sp for the frame, and pc will be address of the</span></span><br><span class=\"line\">\t<span class=\"comment\">// deferreturn call in the function.</span></span><br><span class=\"line\">\tfd   unsafe.Pointer <span class=\"comment\">// funcdata for the function associated with the frame</span></span><br><span class=\"line\">\tvarp <span class=\"type\">uintptr</span>        <span class=\"comment\">// value of varp for the stack frame</span></span><br><span class=\"line\">\t<span class=\"comment\">// framepc is the current pc associated with the stack frame. Together,</span></span><br><span class=\"line\">\t<span class=\"comment\">// with sp above (which is the sp associated with the stack frame),</span></span><br><span class=\"line\">\t<span class=\"comment\">// framepc/sp can be used as pc/sp pair to continue a stack trace via</span></span><br><span class=\"line\">\t<span class=\"comment\">// gentraceback().</span></span><br><span class=\"line\">\tframepc <span class=\"type\">uintptr</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"deferproc\"><a class=\"header-anchor\" href=\"#deferproc\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L218\">deferproc</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a new deferred function fn with siz bytes of arguments.</span></span><br><span class=\"line\"><span class=\"comment\">// The compiler turns a defer statement into a call to this.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferproc</span><span class=\"params\">(siz <span class=\"type\">int32</span>, fn *funcval)</span></span> &#123; <span class=\"comment\">// arguments of fn follow fn</span></span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.curg != gp &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// go code on the system stack can&#x27;t defer</span></span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;defer on system stack&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// the arguments of fn are in a perilous state. The stack map</span></span><br><span class=\"line\">\t<span class=\"comment\">// for deferproc does not describe them. So we can&#x27;t let garbage</span></span><br><span class=\"line\">\t<span class=\"comment\">// collection or stack copying trigger until we&#x27;ve copied them out</span></span><br><span class=\"line\">\t<span class=\"comment\">// to somewhere safe. The memmove below does that.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Until the copy completes, we can only call nosplit routines.</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取调用者的sp「栈顶」</span></span><br><span class=\"line\">\tsp := getcallersp()</span><br><span class=\"line\">\targp := <span class=\"type\">uintptr</span>(unsafe.Pointer(&amp;fn)) + unsafe.Sizeof(fn)</span><br><span class=\"line\">\tcallerpc := getcallerpc() <span class=\"comment\">// 获取caller的pc</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从poll中获取或allocate一个</span></span><br><span class=\"line\">\td := newdefer(siz)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d._panic != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;deferproc: d.panic != nil after newdefer&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 变量的初始化信息</span></span><br><span class=\"line\">\td.link = gp._defer</span><br><span class=\"line\">\tgp._defer = d</span><br><span class=\"line\">\td.fn = fn</span><br><span class=\"line\">\td.pc = callerpc</span><br><span class=\"line\">\td.sp = sp</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> siz &#123; <span class=\"comment\">// 关于siz的值的处理</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Do nothing.</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> sys.PtrSize:</span><br><span class=\"line\">\t\t*(*<span class=\"type\">uintptr</span>)(deferArgs(d)) = *(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(argp))</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tmemmove(deferArgs(d), unsafe.Pointer(argp), <span class=\"type\">uintptr</span>(siz))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// deferproc returns 0 normally.</span></span><br><span class=\"line\">\t<span class=\"comment\">// a deferred func that stops a panic</span></span><br><span class=\"line\">\t<span class=\"comment\">// makes the deferproc return 1.</span></span><br><span class=\"line\">\t<span class=\"comment\">// the code the compiler generates always</span></span><br><span class=\"line\">\t<span class=\"comment\">// checks the return value and jumps to the</span></span><br><span class=\"line\">\t<span class=\"comment\">// end of the function if deferproc returns != 0.</span></span><br><span class=\"line\">    <span class=\"comment\">// 正常返回0,异常返回1</span></span><br><span class=\"line\">\treturn0()</span><br><span class=\"line\">\t<span class=\"comment\">// No code can go here - the C return register has</span></span><br><span class=\"line\">\t<span class=\"comment\">// been set and must not be clobbered.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"newdefer\"><a class=\"header-anchor\" href=\"#newdefer\">¶</a>newdefer</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Allocate a Defer, usually using per-P pool. // pool池子</span></span><br><span class=\"line\"><span class=\"comment\">// Each defer must be released with freedefer.  The defer is not</span></span><br><span class=\"line\"><span class=\"comment\">// added to any defer chain yet.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This must not grow the stack because there may be a frame without</span></span><br><span class=\"line\"><span class=\"comment\">// stack map information when this is called.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">newdefer</span><span class=\"params\">(siz <span class=\"type\">int32</span>)</span></span> *_defer &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> d *_defer</span><br><span class=\"line\">\tsc := deferclass(<span class=\"type\">uintptr</span>(siz)) <span class=\"comment\">// 计算sc</span></span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> sc &lt; <span class=\"type\">uintptr</span>(<span class=\"built_in\">len</span>(p&#123;&#125;.deferpool)) &#123;</span><br><span class=\"line\">\t\tpp := gp.m.p.ptr()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(pp.deferpool[sc]) == <span class=\"number\">0</span> &amp;&amp; sched.deferpool[sc] != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Take the slow path on the system stack so</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// we don&#x27;t grow newdefer&#x27;s stack.</span></span><br><span class=\"line\">            <span class=\"comment\">// 当缓存没有值了，就从全局pool中搞出来一部分</span></span><br><span class=\"line\">\t\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t\tlock(&amp;sched.deferlock)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(pp.deferpool[sc]) &lt; <span class=\"built_in\">cap</span>(pp.deferpool[sc])/<span class=\"number\">2</span> &amp;&amp; sched.deferpool[sc] != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\td := sched.deferpool[sc]</span><br><span class=\"line\">\t\t\t\t\tsched.deferpool[sc] = d.link</span><br><span class=\"line\">\t\t\t\t\td.link = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\t\tpp.deferpool[sc] = <span class=\"built_in\">append</span>(pp.deferpool[sc], d)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tunlock(&amp;sched.deferlock)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> n := <span class=\"built_in\">len</span>(pp.deferpool[sc]); n &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\td = pp.deferpool[sc][n<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t\tpp.deferpool[sc][n<span class=\"number\">-1</span>] = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\tpp.deferpool[sc] = pp.deferpool[sc][:n<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Allocate new defer+args.</span></span><br><span class=\"line\">        <span class=\"comment\">// 全局的pool不足/args过长</span></span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\ttotal := roundupsize(totaldefersize(<span class=\"type\">uintptr</span>(siz)))</span><br><span class=\"line\">\t\t\td = (*_defer)(mallocgc(total, deferType, <span class=\"literal\">true</span>))</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> debugCachedWork &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Duplicate the tail below so if there&#x27;s a</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// crash in checkPut we can tell if d was just</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// allocated or came from the pool.</span></span><br><span class=\"line\">\t\t\td.siz = siz</span><br><span class=\"line\">\t\t\td.link = gp._defer <span class=\"comment\">// 与之前绑定的g形成链表</span></span><br><span class=\"line\">\t\t\tgp._defer = d</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> d</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\td.siz = siz</span><br><span class=\"line\">\td.heap = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"deferprocStack\"><a class=\"header-anchor\" href=\"#deferprocStack\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L271\">deferprocStack</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// deferprocStack queues a new deferred function with a defer record on the stack.</span></span><br><span class=\"line\"><span class=\"comment\">// The defer record must have its siz and fn fields initialized. siz和fn必须初始化</span></span><br><span class=\"line\"><span class=\"comment\">// All other fields can contain junk.</span></span><br><span class=\"line\"><span class=\"comment\">// The defer record must be immediately followed in memory by</span></span><br><span class=\"line\"><span class=\"comment\">// the arguments of the defer.</span></span><br><span class=\"line\"><span class=\"comment\">// Nosplit because the arguments on the stack won&#x27;t be scanned</span></span><br><span class=\"line\"><span class=\"comment\">// until the defer record is spliced into the gp._defer list.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferprocStack</span><span class=\"params\">(d *_defer)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg() <span class=\"comment\">// 获取当前的g,也说明一件事,这个defer和g是相关联的哦</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.curg != gp &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// go code on the system stack can&#x27;t defer</span></span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;defer on system stack&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// siz and fn are already set.</span></span><br><span class=\"line\">\t<span class=\"comment\">// The other fields are junk on entry to deferprocStack and</span></span><br><span class=\"line\">\t<span class=\"comment\">// are initialized here. </span></span><br><span class=\"line\">    <span class=\"comment\">// 这里写的很清楚了,siz和fn必须 提前初始化,其它的变量在这初始化.</span></span><br><span class=\"line\">\td.started = <span class=\"literal\">false</span></span><br><span class=\"line\">\td.heap = <span class=\"literal\">false</span></span><br><span class=\"line\">\td.openDefer = <span class=\"literal\">false</span></span><br><span class=\"line\">\td.sp = getcallersp()</span><br><span class=\"line\">\td.pc = getcallerpc()</span><br><span class=\"line\">\td.framepc = <span class=\"number\">0</span></span><br><span class=\"line\">\td.varp = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// The lines below implement:</span></span><br><span class=\"line\">\t<span class=\"comment\">//   d.panic = nil</span></span><br><span class=\"line\">\t<span class=\"comment\">//   d.fd = nil</span></span><br><span class=\"line\">\t<span class=\"comment\">//   d.link = gp._defer</span></span><br><span class=\"line\">\t<span class=\"comment\">//   gp._defer = d</span></span><br><span class=\"line\">\t<span class=\"comment\">// But without write barriers. The first three are writes to</span></span><br><span class=\"line\">\t<span class=\"comment\">// the stack so they don&#x27;t need a write barrier, and furthermore</span></span><br><span class=\"line\">\t<span class=\"comment\">// are to uninitialized memory, so they must not use a write barrier.</span></span><br><span class=\"line\">\t<span class=\"comment\">// The fourth write does not require a write barrier because we</span></span><br><span class=\"line\">\t<span class=\"comment\">// explicitly mark all the defer structures, so we don&#x27;t need to</span></span><br><span class=\"line\">\t<span class=\"comment\">// keep track of pointers to them with a write barrier.</span></span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;d._panic)) = <span class=\"number\">0</span></span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;d.fd)) = <span class=\"number\">0</span></span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;d.link)) = <span class=\"type\">uintptr</span>(unsafe.Pointer(gp._defer))</span><br><span class=\"line\">\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;gp._defer)) = <span class=\"type\">uintptr</span>(unsafe.Pointer(d))</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn0()</span><br><span class=\"line\">\t<span class=\"comment\">// No code can go here - the C return register has</span></span><br><span class=\"line\">\t<span class=\"comment\">// been set and must not be clobbered.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"deferreturn\"><a class=\"header-anchor\" href=\"#deferreturn\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L528\">deferreturn</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Run a deferred function if there is one.</span></span><br><span class=\"line\"><span class=\"comment\">// The compiler inserts a call to this at the end of any</span></span><br><span class=\"line\"><span class=\"comment\">// function which calls defer.</span></span><br><span class=\"line\"><span class=\"comment\">// If there is a deferred function, this will call runtime·jmpdefer,</span></span><br><span class=\"line\"><span class=\"comment\">// which will jump to the deferred function such that it appears</span></span><br><span class=\"line\"><span class=\"comment\">// to have been called by the caller of deferreturn at the point</span></span><br><span class=\"line\"><span class=\"comment\">// just before deferreturn was called. The effect is that deferreturn</span></span><br><span class=\"line\"><span class=\"comment\">// is called again and again until there are no more deferred functions.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Declared as nosplit, because the function should not be preempted once we start</span></span><br><span class=\"line\"><span class=\"comment\">// modifying the caller&#x27;s frame in order to reuse the frame to call the deferred</span></span><br><span class=\"line\"><span class=\"comment\">// function.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The single argument isn&#x27;t actually used - it just has its address</span></span><br><span class=\"line\"><span class=\"comment\">// taken so it can be matched against pending defers.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">deferreturn</span><span class=\"params\">(arg0 <span class=\"type\">uintptr</span>)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\td := gp._defer</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d == <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// 递归调用的终止条件</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsp := getcallersp() </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d.sp != sp &#123; <span class=\"comment\">// 当前的调用栈和defer中是否相同</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d.openDefer &#123;</span><br><span class=\"line\">\t\tdone := runOpenDeferFrame(gp, d)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> !done &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;unfinished open-coded defers in deferreturn&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tgp._defer = d.link</span><br><span class=\"line\">\t\tfreedefer(d)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Moving arguments around.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Everything called after this point must be recursively</span></span><br><span class=\"line\">\t<span class=\"comment\">// nosplit because the garbage collector won&#x27;t know the form</span></span><br><span class=\"line\">\t<span class=\"comment\">// of the arguments until the jmpdefer can flip the PC over to</span></span><br><span class=\"line\">\t<span class=\"comment\">// fn.</span></span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> d.siz &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Do nothing.</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> sys.PtrSize:</span><br><span class=\"line\">\t\t*(*<span class=\"type\">uintptr</span>)(unsafe.Pointer(&amp;arg0)) = *(*<span class=\"type\">uintptr</span>)(deferArgs(d))</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tmemmove(unsafe.Pointer(&amp;arg0), deferArgs(d), <span class=\"type\">uintptr</span>(d.siz))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfn := d.fn</span><br><span class=\"line\">\td.fn = <span class=\"literal\">nil</span></span><br><span class=\"line\">\tgp._defer = d.link</span><br><span class=\"line\">\tfreedefer(d) <span class=\"comment\">// 释放d,重新放回pool中</span></span><br><span class=\"line\">\t<span class=\"comment\">// If the defer function pointer is nil, force the seg fault to happen</span></span><br><span class=\"line\">\t<span class=\"comment\">// here rather than in jmpdefer. gentraceback() throws an error if it is</span></span><br><span class=\"line\">\t<span class=\"comment\">// called with a callback on an LR architecture and jmpdefer is on the</span></span><br><span class=\"line\">\t<span class=\"comment\">// stack, because the stack trace can be incorrect in that case - see</span></span><br><span class=\"line\">\t<span class=\"comment\">// issue #8153).</span></span><br><span class=\"line\">\t_ = fn.fn</span><br><span class=\"line\">\tjmpdefer(fn, <span class=\"type\">uintptr</span>(unsafe.Pointer(&amp;arg0)))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"panic\"><a class=\"header-anchor\" href=\"#panic\">¶</a>panic</h3>\n<h4 id=\"官方定义–\"><a class=\"header-anchor\" href=\"#官方定义–\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903\">官方定义–&gt;</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A _panic holds information about an active panic.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// This is marked go:notinheap because _panic values must only ever</span></span><br><span class=\"line\"><span class=\"comment\">// live on the stack.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The argp and link fields are stack pointers, but don&#x27;t need special</span></span><br><span class=\"line\"><span class=\"comment\">// handling during stack growth: because they are pointer-typed and</span></span><br><span class=\"line\"><span class=\"comment\">// _panic values only live on the stack, regular stack pointer</span></span><br><span class=\"line\"><span class=\"comment\">// adjustment takes care of them.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//go:notinheap</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _panic <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\targp      unsafe.Pointer <span class=\"comment\">// pointer to arguments of deferred call run during panic; cannot move - known to liblink</span></span><br><span class=\"line\">\targ       <span class=\"keyword\">interface</span>&#123;&#125;    <span class=\"comment\">// argument to panic</span></span><br><span class=\"line\">\tlink      *_panic        <span class=\"comment\">// link to earlier panic</span></span><br><span class=\"line\">\tpc        <span class=\"type\">uintptr</span>        <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\tsp        unsafe.Pointer <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\trecovered <span class=\"type\">bool</span>           <span class=\"comment\">// whether this panic is over // recover标识</span></span><br><span class=\"line\">\taborted   <span class=\"type\">bool</span>           <span class=\"comment\">// the panic was aborted // 终止标记</span></span><br><span class=\"line\">\tgoexit    <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"gopanic\"><a class=\"header-anchor\" href=\"#gopanic\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/panic.go#L889\">gopanic</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// reflectcallSave calls reflectcall after saving the caller&#x27;s pc and sp in the</span></span><br><span class=\"line\"><span class=\"comment\">// panic record. This allows the runtime to return to the Goexit defer processing</span></span><br><span class=\"line\"><span class=\"comment\">// loop, in the unusual case where the Goexit may be bypassed by a successful</span></span><br><span class=\"line\"><span class=\"comment\">// recover.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reflectcallSave</span><span class=\"params\">(p *_panic, fn, arg unsafe.Pointer, argsize <span class=\"type\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tp.argp = unsafe.Pointer(getargp(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t\tp.pc = getcallerpc()</span><br><span class=\"line\">\t\tp.sp = unsafe.Pointer(getcallersp())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treflectcall(<span class=\"literal\">nil</span>, fn, arg, argsize, argsize)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> p != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tp.pc = <span class=\"number\">0</span></span><br><span class=\"line\">\t\tp.sp = unsafe.Pointer(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The implementation of the predeclared function panic.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gopanic</span><span class=\"params\">(e <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.curg != gp &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic on system stack&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.mallocing != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic during malloc&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.preemptoff != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;preempt off reason: &quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(gp.m.preemptoff)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic during preemptoff&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> gp.m.locks != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;panic: &quot;</span>)</span><br><span class=\"line\">\t\tprintany(e)</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;panic holding locks&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p _panic</span><br><span class=\"line\">\tp.arg = e</span><br><span class=\"line\">\tp.link = gp._panic</span><br><span class=\"line\">\tgp._panic = (*_panic)(noescape(unsafe.Pointer(&amp;p)))</span><br><span class=\"line\"></span><br><span class=\"line\">\tatomic.Xadd(&amp;runningPanicDefers, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// By calculating getcallerpc/getcallersp here, we avoid scanning the</span></span><br><span class=\"line\">\t<span class=\"comment\">// gopanic frame (stack scanning is slow...)</span></span><br><span class=\"line\">\taddOneOpenDeferFrame(gp, getcallerpc(), unsafe.Pointer(getcallersp()))</span><br><span class=\"line\">\t<span class=\"comment\">//\t遍历链表</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\td := gp._defer</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// If defer was started by earlier panic or Goexit (and, since we&#x27;re back here, that triggered a new panic),</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// take defer off list. An earlier panic will not continue running, but we will make sure below that an</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// earlier Goexit does continue running.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d.started &#123; <span class=\"comment\">// 已经启动</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> d._panic != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\td._panic.aborted = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\td._panic = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !d.openDefer &#123; <span class=\"comment\">// 没有打开则跳过</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// For open-coded defers, we need to process the</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// defer again, in case there are any other defers</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// to call in the frame (not including the defer</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// call that caused the panic).</span></span><br><span class=\"line\">\t\t\t\td.fn = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\tgp._defer = d.link</span><br><span class=\"line\">\t\t\t\tfreedefer(d)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Mark defer as started, but keep on list, so that traceback</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// can find and update the defer&#x27;s argument frame if stack growth</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// or a garbage collection happens before reflectcall starts executing d.fn.</span></span><br><span class=\"line\">\t\td.started = <span class=\"literal\">true</span> <span class=\"comment\">//初始化</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Record the panic that is running the defer.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// If there is a new panic during the deferred call, that panic</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// will find d in the list and will mark d._panic (this panic) aborted.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 记录这个panic，如果在运行期间有了新的panic，标记这个Panic abort=true(强制终止)</span></span><br><span class=\"line\">\t\td._panic = (*_panic)(noescape(unsafe.Pointer(&amp;p)))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdone := <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> d.openDefer &#123;</span><br><span class=\"line\">\t\t\tdone = runOpenDeferFrame(gp, d)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> done &amp;&amp; !d._panic.recovered &#123;</span><br><span class=\"line\">\t\t\t\taddOneOpenDeferFrame(gp, <span class=\"number\">0</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tp.argp = unsafe.Pointer(getargp(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 调用defer</span></span><br><span class=\"line\">\t\t\treflectcall(<span class=\"literal\">nil</span>, unsafe.Pointer(d.fn), deferArgs(d), <span class=\"type\">uint32</span>(d.siz), <span class=\"type\">uint32</span>(d.siz))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tp.argp = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// reflectcall did not panic. Remove d.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> gp._defer != d &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;bad defer entry in panic&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\td._panic = <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// trigger shrinkage to test stack copy. See stack_test.go:TestStackPanic</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//GC()</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpc := d.pc</span><br><span class=\"line\">\t\tsp := unsafe.Pointer(d.sp) <span class=\"comment\">// must be pointer so it gets adjusted during stack copy</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> done &#123;</span><br><span class=\"line\">\t\t\td.fn = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\tgp._defer = d.link <span class=\"comment\">// 遍历下一个</span></span><br><span class=\"line\">\t\t\tfreedefer(d)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.recovered &#123; <span class=\"comment\">// 已经有recover被调用</span></span><br><span class=\"line\">\t\t\tgp._panic = p.link</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gp._panic != <span class=\"literal\">nil</span> &amp;&amp; gp._panic.goexit &amp;&amp; gp._panic.aborted &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// A normal recover would bypass/abort the Goexit.  Instead,</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// we return to the processing loop of the Goexit.</span></span><br><span class=\"line\">\t\t\t\tgp.sigcode0 = <span class=\"type\">uintptr</span>(gp._panic.sp)</span><br><span class=\"line\">\t\t\t\tgp.sigcode1 = <span class=\"type\">uintptr</span>(gp._panic.pc)</span><br><span class=\"line\">\t\t\t\tmcall(recovery)</span><br><span class=\"line\">\t\t\t\tthrow(<span class=\"string\">&quot;bypassed recovery failed&quot;</span>) <span class=\"comment\">// mcall should not return</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tatomic.Xadd(&amp;runningPanicDefers, <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> done &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Remove any remaining non-started, open-coded</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// defer entries after a recover, since the</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// corresponding defers will be executed normally</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// (inline). Any such entry will become stale once</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// we run the corresponding defers inline and exit</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// the associated stack frame.</span></span><br><span class=\"line\">\t\t\t\td := gp._defer</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> prev *_defer</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> d != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> d.openDefer &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> d.started &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// This defer is started but we</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// are in the middle of a</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// defer-panic-recover inside of</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// it, so don&#x27;t remove it or any</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"comment\">// further defer entries</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> prev == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tgp._defer = d.link</span><br><span class=\"line\">\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tprev.link = d.link</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tnewd := d.link</span><br><span class=\"line\">\t\t\t\t\t\tfreedefer(d)</span><br><span class=\"line\">\t\t\t\t\t\td = newd</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tprev = d</span><br><span class=\"line\">\t\t\t\t\t\td = d.link</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tgp._panic = p.link</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Aborted panics are marked but remain on the g.panic list.</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Remove them from the list.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> gp._panic != <span class=\"literal\">nil</span> &amp;&amp; gp._panic.aborted &#123;</span><br><span class=\"line\">\t\t\t\tgp._panic = gp._panic.link</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> gp._panic == <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// must be done with signal</span></span><br><span class=\"line\">\t\t\t\tgp.sig = <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Pass information about recovering frame to recovery.</span></span><br><span class=\"line\">\t\t\tgp.sigcode0 = <span class=\"type\">uintptr</span>(sp)</span><br><span class=\"line\">\t\t\tgp.sigcode1 = pc</span><br><span class=\"line\">\t\t\tmcall(recovery)</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;recovery failed&quot;</span>) <span class=\"comment\">// mcall should not return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// ran out of deferred calls - old-school panic now</span></span><br><span class=\"line\">\t<span class=\"comment\">// Because it is unsafe to call arbitrary user code after freezing</span></span><br><span class=\"line\">\t<span class=\"comment\">// the world, we call preprintpanics to invoke all necessary Error</span></span><br><span class=\"line\">\t<span class=\"comment\">// and String methods to prepare the panic strings before startpanic.</span></span><br><span class=\"line\">\tpreprintpanics(gp._panic)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfatalpanic(gp._panic) <span class=\"comment\">// should not return</span></span><br><span class=\"line\">\t*(*<span class=\"type\">int</span>)(<span class=\"literal\">nil</span>) = <span class=\"number\">0</span>      <span class=\"comment\">// not reached</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"recover\"><a class=\"header-anchor\" href=\"#recover\">¶</a>recover</h3>\n<h4 id=\"官方定义\"><a class=\"header-anchor\" href=\"#官方定义\">¶</a>官方定义</h4>\n<blockquote>\n<p>panic中的一个bool型<br>\nrecovered bool           // whether this panic is over // recover标识</p>\n</blockquote>\n<h4 id=\"实现\"><a class=\"header-anchor\" href=\"#实现\">¶</a>实现</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The implementation of the predeclared function recover.</span></span><br><span class=\"line\"><span class=\"comment\">// Cannot split the stack because it needs to reliably</span></span><br><span class=\"line\"><span class=\"comment\">// find the stack segment of its caller.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// TODO(rsc): Once we commit to CopyStackAlways,</span></span><br><span class=\"line\"><span class=\"comment\">// this doesn&#x27;t need to be nosplit.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">gorecover</span><span class=\"params\">(argp <span class=\"type\">uintptr</span>)</span></span> <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Must be in a function running as part of a deferred call during the panic.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Must be called from the topmost function of the call</span></span><br><span class=\"line\">\t<span class=\"comment\">// (the function used in the defer statement).</span></span><br><span class=\"line\">\t<span class=\"comment\">// p.argp is the argument pointer of that topmost deferred function call.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Compare against argp reported by caller.</span></span><br><span class=\"line\">\t<span class=\"comment\">// If they match, the caller is the one who can recover.</span></span><br><span class=\"line\">\tgp := getg()</span><br><span class=\"line\">\tp := gp._panic</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> p != <span class=\"literal\">nil</span> &amp;&amp; !p.goexit &amp;&amp; !p.recovered &amp;&amp; argp == <span class=\"type\">uintptr</span>(p.argp) &#123;</span><br><span class=\"line\">\t\tp.recovered = <span class=\"literal\">true</span> <span class=\"comment\">// revover标识为true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> p.arg</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"拓展-「下面程序会输出什么值」\"><a class=\"header-anchor\" href=\"#拓展-「下面程序会输出什么值」\">¶</a>拓展:「下面程序会输出什么值」</h3>\n<h4 id=\"eg-1\"><a class=\"header-anchor\" href=\"#eg-1\">¶</a>eg-1:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&gt;&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"output\"><a class=\"header-anchor\" href=\"#output\">¶</a>output:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">panic</span>: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">18</span> [running]:</span><br><span class=\"line\">main.f.func2()</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">26</span> +<span class=\"number\">0x6d</span></span><br><span class=\"line\">created by main.f</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">24</span> +<span class=\"number\">0x57</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"eg-2\"><a class=\"header-anchor\" href=\"#eg-2\">¶</a>eg-2:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&gt;&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;===&quot;</span>,err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"output-v2\"><a class=\"header-anchor\" href=\"#output-v2\">¶</a>output:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=== <span class=\"number\">1</span></span><br><span class=\"line\">fatal <span class=\"type\">error</span>: all goroutines are asleep - deadlock!</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">1</span> [<span class=\"keyword\">select</span> (no cases)]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">13</span> +<span class=\"number\">0x4a</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"eg-3\"><a class=\"header-anchor\" href=\"#eg-3\">¶</a>eg-3:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;===&gt;&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tf()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;panic--f ===&quot;</span>,err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err:=<span class=\"built_in\">recover</span>();err!= <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tfmt.Println(<span class=\"string\">&quot;===&quot;</span>,err)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;()</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(a, b <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"output-v3\"><a class=\"header-anchor\" href=\"#output-v3\">¶</a>output:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">=== <span class=\"number\">1</span></span><br><span class=\"line\">fatal <span class=\"type\">error</span>: all goroutines are asleep - deadlock!</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine <span class=\"number\">1</span> [<span class=\"keyword\">select</span> (no cases)]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">        /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/ssp.<span class=\"keyword\">go</span>:<span class=\"number\">13</span> +<span class=\"number\">0x4a</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Feb 18 2021 11:10:17 GMT+0800 (中国标准时间)","title":"「36」defer panic源码分析","path":"archives/b630d910.html","eyeCatchImage":null,"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/d586b949.html#more\">「35」runtime:recover not correctly recover from panic</a>说到了v1.16修复的一个panic问题,这次顺带看看底层关于defer的处理.</p>","date":{"_isAMomentObject":true,"_i":"2021-02-18T03:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-18T03:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","源码","Runtime"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":18964},{"title":"「37」Quick Sort快速排序","date":"2021-02-19T04:10:17.000Z","updated":"2021-02-19T04:10:17.000Z","keywords":"Go,Quick Sort,Sort","mathjax":true,"abbrlink":"aa75061e","_content":"<!-- toc -->\n\n### 前序\n最近在想一个问题：Go里面的sort包到底是怎么实现的，，，，\n想着想着就想到了快速排序，就试着手撕了一个，\n\n有个关键问题，所有的都是针对int或者其它特定的类型，\n\n*那如何让排序算法通用性呢，*\n\n<!--more-->\n\n### 快速排序\n\n不废话，先搞一个排序的代码来，再分析「遵循先用后分析的原则」\n\n>默认从大-->小，注释的那行放开就是 从小-->大\n\n```go\nfunc QuickSort(a []int, left, right int) []int {\n\tif left < right {\n\t\tmid := partition(a, left, right)\n\t\tQuickSort(a, left, mid-1)\n\t\tQuickSort(a, mid+1, right)\n\t}\n\treturn a\n\n}\n\nfunc partition(a []int, left int, right int) int {\n\tpivot := a[left] //基点\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; { \n\t\tfor ; left < right && a[right] <= pivot; {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && a[left] >= pivot; {\n\t\t\tleft++\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\n```\n\n#### 调用分析\n\n```go\nfunc main() {\n\ts := []int{1, 2, 3, 4, 5, 6, 7}\n\tnum :=QuickSort(s, 0, len(s)-1)\n\tfmt.Println(num)\n}\n```\n\n##### Outputs:\n\n>[7 6 5 4 3 2 1]\n\n#### 不足点：\n\n* 只能用在int型或者指定的类型，「不爽😕」\n* 基点在最左边「后面分析为何不好」\n\n##### 改进点：\n\n>既然是需要改进，那就朝着上面的不足点来搞。\n* 通用类型的设计，「用go的断言：interface来做」\n* 基点的选取尽量均衡「可选项」\n\n#### Just do it\n\n\n##### 自定义排序规则做法：\n\n```go\n\nfunc QuickSortAll(a []interface{}, left, right int, By func(a, b interface{}) bool) []interface{} {\n\tif left < right {\n\t\tmid := partitionAll(a, left, right, By)\n\t\tQuickSortAll(a, left, mid-1, By)\n\t\tQuickSortAll(a, mid+1, right, By)\n\t}\n\treturn a\n\n}\n\nfunc partitionAll(a []interface{}, left int, right int, By func(a, b interface{}) bool) int {\n\tpivot := a[left]\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; {\n\t\tfor ; left < right && By(a[right], pivot); {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && By(pivot, a[left]); {\n\t\t\tleft++\n\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\ntype User struct {\n\tName  string\n\tAge   int\n\tCount int\n}\n\nconst counter = 100000000\n\nfunc main() {\n\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\tisp = append(isp, User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})\n\n\t}\n\tt := time.Now().Unix()\n\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n        return a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(time.Now().Unix() - t)\n}\n```\n\n###### Outputs：\n\n>91\n\n##### 跑个benchmark看看\n\n> 上面的变量counter=10000000\n```go\ngoos: darwin\ngoarch: amd64\ncpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\nBenchmarkQuickSortAll\nBenchmarkQuickSortAll-12    \t       1\t6287198265 ns/op\nPASS\n```\n#### 内存占用分析\n\n>改造下执行函数,加上打印内存情况:\n\n```go\n\nfunc main() {\n\tMem(fmt.Sprintf(\"for start\"))\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\tisp = append(isp, User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tSage:  i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})\n\n\t}\n\n\tfmt.Println(unsafe.Sizeof(isp))\n\tfmt.Println(unsafe.Sizeof([counter]interface{}{}))\n\tt := time.Now().Unix()\n\tMem(fmt.Sprintf(\"for all slice\"))\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n\t\treturn a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(time.Now().Unix() - t)\n\tMem(fmt.Sprintf(\"for all end\"))\n\n\ti := 0\n\tfor {\n\t\tif i > 10 {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\truntime.GC()\n\t\tMem(fmt.Sprintf(\"for gc end\"))\n\t\ttime.Sleep(1 * time.Second)\n\t\ti++\n\t}\n}\n\nfunc Mem(msg string) {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tfmt.Println(msg, \"系统内存\", m.Sys, \" 常驻内存：\", m.HeapInuse, \"堆上分配的，gc后会归还： \", m.HeapAlloc)\n}\n\n```\n\n##### Outputs:\n\n>不同的系统可能会有些许偏差,关键点不在于数值大小,\n>关键点在于: 向系统申请的大内存,没有归还给系统,如果说要频繁的申请大内存等操作,\n>最好还是搞一个pool池子,不然容易内存暴增暴跌.\n\n* 此处 *counter=10000000*\n```go\nfor start 系统内存： 71388176    常驻内存： 450560     堆上分配的，gc后会归还：  130808\nisp占用的字节大小：「isp结构占用」 24\ncounter的切片占用的字节大小： 160000000\nfor all slice 系统内存： 784408744    常驻内存： 722001920     堆上分配的，gc后会归还：  719855360\n耗时：  10  S\nfor all end 系统内存： 784408744    常驻内存： 722010112     堆上分配的，gc后会归还：  719855616\nfor gc end 系统内存： 785326248    常驻内存： 425984     堆上分配的，gc后会归还：  131608\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131416\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131656\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131672\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131456\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131792\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131680\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131696\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131472\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131696\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131696\n```\n\n#### 后续优化点:\n\n* 如果数量过大,可以搞个内存池\n* 如果数量庞大,建议分治,多次排序「这个数据量一般在G/T级别」\n\n\n##### 数量大的实验,函数内部复用:\n\n```go\n\nfunc main() {\n\tMem(fmt.Sprintf(\"for start\"))\n\tisp := make([]interface{}, 0, counter)\n\tfor i := 0; i < counter; i++ {\n\t\tssUser := User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tSage:  i,\n\t\t\tCount: rand.Intn(counter),\n\t\t}\n\t\tisp = append(isp,ssUser)\n\t}\n\n\tfmt.Println(\"isp占用的字节大小：「isp结构占用」\", unsafe.Sizeof(isp))\n\tfmt.Println(\"counter的切片占用的字节大小：\", unsafe.Sizeof([counter]interface{}{}))\n\tt := time.Now().Unix()\n\tMem(fmt.Sprintf(\"for all slice\"))\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n\t\treturn a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(\"耗时： \", time.Now().Unix()-t, \" S\")\n\tMem(fmt.Sprintf(\"for all end\"))\n\n\ti := 0\n\tfor {\n\t\tif i > 3 {\n\t\t\tbreak\n\t\t}\n\n\t\truntime.GC()\n\t\tMem(fmt.Sprintf(\"for gc end\"))\n\t\ttime.Sleep(1 * time.Second)\n\t\ti++\n\t}\n\n\t//释放内存,断开引用\n\tfor i := range isp {\n\t\tisp[i] = nil\n\t}\n\tisp = isp[:0]\n\n\truntime.GC()\n\tMem(fmt.Sprintf(\"gc before new start %d\", i))\n\tfor i := 0; i < counter; i++ {\n\t\tstmp := User{}\n\t\tstmp.Name = strconv.Itoa(i)\n\t\tstmp.Age = i\n\t\tstmp.Sage = i\n\t\tstmp.Count = rand.Intn(counter)\n\t\tisp = append(isp, stmp)\n\n\t\tif i%1000000 == 0 {\n\t\t\tMem(fmt.Sprintf(\"slice %d\", i))\n\t\t}\n\t}\n\t//fmt.Println(isp)\n\t// ******关键点在于这个地方的内存会不会是前面同样打印处的倍数???\n\tfmt.Println(\"isp占用的字节大小：「isp结构占用」\", unsafe.Sizeof(isp))\n\t//fmt.Println(\"counter的切片占用的字节大小：\", unsafe.Sizeof([counter]interface{}{}))\n\tts := time.Now().Unix()\n\tMem(fmt.Sprintf(\"for all slice\"))\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n\t\treturn a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(\"耗时： \", time.Now().Unix()-ts, \" S\")\n\tMem(fmt.Sprintf(\"for all end\"))\n\n\tia := 0\n\tfor {\n\t\tif ia > 10 {\n\t\t\tbreak\n\t\t}\n\n\t\truntime.GC()\n\t\tMem(fmt.Sprintf(\"for gc end\"))\n\t\ttime.Sleep(1 * time.Second)\n\t\tia++\n\t}\n}\n\nfunc Mem(msg string) {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tfmt.Println(msg, \"系统内存：\", m.Sys, \"   常驻内存：\", m.HeapInuse, \"    堆上分配的，gc后会归还： \", m.HeapAlloc)\n}\n\n```\n\n###### Outputs:\n\n>还是同样的,内存的大小不重要,重要的是看分布:\n\n```go\nGOROOT=/usr/local/go #gosetup\nGOPATH=/Users/k/go #gosetup\n/usr/local/go/bin/go build -o /private/var/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go /Users/k/learn/go-memory/src/main/quicksort.go #gosetup\n/private/var/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go\nfor start 系统内存： 71388176    常驻内存： 344064     堆上分配的，gc后会归还：  130600\nisp占用的字节大小：「isp结构占用」 24\ncounter的切片占用的字节大小： 1600000000\nfor all slice 系统内存： 7651851800    常驻内存： 7218954240     堆上分配的，gc后会归还：  7199851600\n耗时：  168  S\nfor all end 系统内存： 7664827928    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199852696\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853016\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853040\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853048\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853048\ngc before new start 4 系统内存： 7665745432    常驻内存： 1600421888     堆上分配的，gc后会归还：  1600134128\nslice 0 系统内存： 7665745432    常驻内存： 1600430080     堆上分配的，gc后会归还：  1600134560\nslice 1000000 系统内存： 7665745432    常驻内存： 1656332288     堆上分配的，gc后会归还：  1655853536\nslice 2000000 系统内存： 7665745432    常驻内存： 1712513024     堆上分配的，gc后会归还：  1711853840\nslice 3000000 系统内存： 7665745432    常驻内存： 1768710144     堆上分配的，gc后会归还：  1767854128\nslice 4000000 系统内存： 7665745432    常驻内存： 1824890880     堆上分配的，gc后会归还：  1823854192\nslice 5000000 系统内存： 7665745432    常驻内存： 1881079808     堆上分配的，gc后会归还：  1879854256\nslice 6000000 系统内存： 7665745432    常驻内存： 1937276928     堆上分配的，gc后会归还：  1935854336\nslice 7000000 系统内存： 7665745432    常驻内存： 1993457664     堆上分配的，gc后会归还：  1991854400\nslice 8000000 系统内存： 7665745432    常驻内存： 2049662976     堆上分配的，gc后会归还：  2047854704\nslice 9000000 系统内存： 7665745432    常驻内存： 2105835520     堆上分配的，gc后会归还：  2103854992\nslice 10000000 系统内存： 7665745432    常驻内存： 2162024448     堆上分配的，gc后会归还：  2159855056\nslice 11000000 系统内存： 7665745432    常驻内存： 2218205184     堆上分配的，gc后会归还：  2215855120\nslice 12000000 系统内存： 7665745432    常驻内存： 2274410496     堆上分配的，gc后会归还：  2271855200\nslice 13000000 系统内存： 7665745432    常驻内存： 2330591232     堆上分配的，gc后会归还：  2327855264\nslice 14000000 系统内存： 7665745432    常驻内存： 2386771968     堆上分配的，gc后会归还：  2383855328\nslice 15000000 系统内存： 7665745432    常驻内存： 2442969088     堆上分配的，gc后会归还：  2439855392\nslice 16000000 系统内存： 7665745432    常驻内存： 2499149824     堆上分配的，gc后会归还：  2495855456\nslice 17000000 系统内存： 7665745432    常驻内存： 2555346944     堆上分配的，gc后会归还：  2551855520\nslice 18000000 系统内存： 7665745432    常驻内存： 2611544064     堆上分配的，gc后会归还：  2607855824\nslice 19000000 系统内存： 7665745432    常驻内存： 2667716608     堆上分配的，gc后会归还：  2663856112\nslice 20000000 系统内存： 7665745432    常驻内存： 2723921920     堆上分配的，gc后会归还：  2719856192\nslice 21000000 系统内存： 7665745432    常驻内存： 2780102656     堆上分配的，gc后会归还：  2775856256\nslice 22000000 系统内存： 7665745432    常驻内存： 2836283392     堆上分配的，gc后会归还：  2831856320\nslice 23000000 系统内存： 7665745432    常驻内存： 2892472320     堆上分配的，gc后会归还：  2887856384\nslice 24000000 系统内存： 7666073112    常驻内存： 2948661248     堆上分配的，gc后会归还：  2943856448\nslice 25000000 系统内存： 7666466328    常驻内存： 3004841984     堆上分配的，gc后会归还：  2999856512\nslice 26000000 系统内存： 7666859544    常驻内存： 3061039104     堆上分配的，gc后会归还：  3055856576\nslice 27000000 系统内存： 7667252760    常驻内存： 3117228032     堆上分配的，gc后会归还：  3111856640\nslice 28000000 系统内存： 7667318296    常驻内存： 3173433344     堆上分配的，gc后会归还：  3167859936\nslice 29000000 系统内存： 7667318296    常驻内存： 3229614080     堆上分配的，gc后会归还：  3223857088\nslice 30000000 系统内存： 7667318296    常驻内存： 3285794816     堆上分配的，gc后会归还：  3279857376\nslice 31000000 系统内存： 7667318296    常驻内存： 3341983744     堆上分配的，gc后会归还：  3335857440\nslice 32000000 系统内存： 7667318296    常驻内存： 3398172672     堆上分配的，gc后会归还：  3391857504\nslice 33000000 系统内存： 7667318296    常驻内存： 3454361600     堆上分配的，gc后会归还：  3447857568\nslice 34000000 系统内存： 7667318296    常驻内存： 3510550528     堆上分配的，gc后会归还：  3503857632\nslice 35000000 系统内存： 7667318296    常驻内存： 3566739456     堆上分配的，gc后会归还：  3559857696\nslice 36000000 系统内存： 7667318296    常驻内存： 3622936576     堆上分配的，gc后会归还：  3615858000\nslice 37000000 系统内存： 7667318296    常驻内存： 3679117312     堆上分配的，gc后会归还：  3671858288\nslice 38000000 系统内存： 7667318296    常驻内存： 3735306240     堆上分配的，gc后会归还：  3727858352\nslice 39000000 系统内存： 7667318296    常驻内存： 3791495168     堆上分配的，gc后会归还：  3783858656\nslice 40000000 系统内存： 7667318296    常驻内存： 3847684096     堆上分配的，gc后会归还：  3839858960\nslice 41000000 系统内存： 7667318296    常驻内存： 3903864832     堆上分配的，gc后会归还：  3895859024\nslice 42000000 系统内存： 7667318296    常驻内存： 3960061952     堆上分配的，gc后会归还：  3951859328\nslice 43000000 系统内存： 7667318296    常驻内存： 4016250880     堆上分配的，gc后会归还：  4007859616\nslice 44000000 系统内存： 7667318296    常驻内存： 4072431616     堆上分配的，gc后会归还：  4063859680\nslice 45000000 系统内存： 7667318296    常驻内存： 4128620544     堆上分配的，gc后会归还：  4119859744\nslice 46000000 系统内存： 7667318296    常驻内存： 4184809472     堆上分配的，gc后会归还：  4175859808\nslice 47000000 系统内存： 7667318296    常驻内存： 4240998400     堆上分配的，gc后会归还：  4231859872\nslice 48000000 系统内存： 7667318296    常驻内存： 4297179136     堆上分配的，gc后会归还：  4287859936\nslice 49000000 系统内存： 7667318296    常驻内存： 4353376256     堆上分配的，gc后会归还：  4343860000\nslice 50000000 系统内存： 7667318296    常驻内存： 4409565184     堆上分配的，gc后会归还：  4399860064\nslice 51000000 系统内存： 7667318296    常驻内存： 4465770496     堆上分配的，gc后会归还：  4455860368\nslice 52000000 系统内存： 7667318296    常驻内存： 4521943040     堆上分配的，gc后会归还：  4511860656\nslice 53000000 系统内存： 7667318296    常驻内存： 4578140160     堆上分配的，gc后会归还：  4567860720\nslice 54000000 系统内存： 7667318296    常驻内存： 4634320896     堆上分配的，gc后会归还：  4623860784\nslice 55000000 系统内存： 7667318296    常驻内存： 4690509824     堆上分配的，gc后会归还：  4679860848\nslice 56000000 系统内存： 7667318296    常驻内存： 4746690560     堆上分配的，gc后会归还：  4735860912\nslice 57000000 系统内存： 7667318296    常驻内存： 4802887680     堆上分配的，gc后会归还：  4791860976\nslice 58000000 系统内存： 7667318296    常驻内存： 4859068416     堆上分配的，gc后会归还：  4847861040\nslice 59000000 系统内存： 7667318296    常驻内存： 4915257344     堆上分配的，gc后会归还：  4903861104\nslice 60000000 系统内存： 7667318296    常驻内存： 4971446272     堆上分配的，gc后会归还：  4959861168\nslice 61000000 系统内存： 7667318296    常驻内存： 5027635200     堆上分配的，gc后会归还：  5015861232\nslice 62000000 系统内存： 7667318296    常驻内存： 5083815936     堆上分配的，gc后会归还：  5071861296\nslice 63000000 系统内存： 7667449368    常驻内存： 5140013056     堆上分配的，gc后会归还：  5127861360\nslice 64000000 系统内存： 7667842584    常驻内存： 5196201984     堆上分配的，gc后会归还：  5183861424\nslice 65000000 系统内存： 7668235800    常驻内存： 5252382720     堆上分配的，gc后会归还：  5239861488\nslice 66000000 系统内存： 7668629016    常驻内存： 5308579840     堆上分配的，gc后会归还：  5295861552\nslice 67000000 系统内存： 7669087768    常驻内存： 5364760576     堆上分配的，gc后会归还：  5351861616\nslice 68000000 系统内存： 7669480984    常驻内存： 5420957696     堆上分配的，gc后会归还：  5407861680\nslice 69000000 系统内存： 7669874200    常驻内存： 5477138432     堆上分配的，gc后会归还：  5463861744\nslice 70000000 系统内存： 7670267416    常驻内存： 5533327360     堆上分配的，gc后会归还：  5519861808\nslice 71000000 系统内存： 7670660632    常驻内存： 5589516288     堆上分配的，gc后会归还：  5575861872\nslice 72000000 系统内存： 7671119384    常驻内存： 5645705216     堆上分配的，gc后会归还：  5631861936\nslice 73000000 系统内存： 7671512600    常驻内存： 5701894144     堆上分配的，gc后会归还：  5687862000\nslice 74000000 系统内存： 7671905816    常驻内存： 5758083072     堆上分配的，gc后会归还：  5743862064\nslice 75000000 系统内存： 7672299032    常驻内存： 5814280192     堆上分配的，gc后会归还：  5799862144\nslice 76000000 系统内存： 7672692248    常驻内存： 5870460928     堆上分配的，gc后会归还：  5855862224\nslice 77000000 系统内存： 7673151000    常驻内存： 5926649856     堆上分配的，gc后会归还：  5911862288\nslice 78000000 系统内存： 7673544216    常驻内存： 5982846976     堆上分配的，gc后会归还：  5967862352\nslice 79000000 系统内存： 7673937432    常驻内存： 6039019520     堆上分配的，gc后会归还：  6023862416\nslice 80000000 系统内存： 7674330648    常驻内存： 6095216640     堆上分配的，gc后会归还：  6079862480\nslice 81000000 系统内存： 7674789400    常驻内存： 6151397376     堆上分配的，gc后会归还：  6135862544\nslice 82000000 系统内存： 7675182616    常驻内存： 6207594496     堆上分配的，gc后会归还：  6191862624\nslice 83000000 系统内存： 7675379224    常驻内存： 6263808000     堆上分配的，gc后会归还：  6247863760\nslice 84000000 系统内存： 7675379224    常驻内存： 6319964160     堆上分配的，gc后会归还：  6303863824\nslice 85000000 系统内存： 7675379224    常驻内存： 6376177664     堆上分配的，gc后会归还：  6359864144\nslice 86000000 系统内存： 7675379224    常驻内存： 6432358400     堆上分配的，gc后会归还：  6415864432\nslice 87000000 系统内存： 7675379224    常驻内存： 6488530944     堆上分配的，gc后会归还：  6471858816\nslice 88000000 系统内存： 7675379224    常驻内存： 6544711680     堆上分配的，gc后会归还：  6527859104\nslice 89000000 系统内存： 7675379224    常驻内存： 6600892416     堆上分配的，gc后会归还：  6583859168\nslice 90000000 系统内存： 7675575832    常驻内存： 6657081344     堆上分配的，gc后会归还：  6639859232\nslice 91000000 系统内存： 7676034584    常驻内存： 6713278464     堆上分配的，gc后会归还：  6695859296\nslice 92000000 系统内存： 7676427800    常驻内存： 6769459200     堆上分配的，gc后会归还：  6751859360\nslice 93000000 系统内存： 7676821016    常驻内存： 6825648128     堆上分配的，gc后会归还：  6807859424\nslice 94000000 系统内存： 7677214232    常驻内存： 6881837056     堆上分配的，gc后会归还：  6863859488\nslice 95000000 系统内存： 7677672984    常驻内存： 6938025984     堆上分配的，gc后会归还：  6919859552\nslice 96000000 系统内存： 7678066200    常驻内存： 6994206720     堆上分配的，gc后会归还：  6975859616\nslice 97000000 系统内存： 7678459416    常驻内存： 7050403840     堆上分配的，gc后会归还：  7031859680\nslice 98000000 系统内存： 7678852632    常驻内存： 7106592768     堆上分配的，gc后会归还：  7087859744\nslice 99000000 系统内存： 7679245848    常驻内存： 7162773504     堆上分配的，gc后会归还：  7143859808\nisp占用的字节大小：「isp结构占用」 24\nfor all slice 系统内存： 7679704600    常驻内存： 7218970624     堆上分配的，gc后会归还：  7199859808\n耗时：  187  S\nfor all end 系统内存： 7679704600    常驻内存： 7218970624     堆上分配的，gc后会归还：  7199857304\nfor gc end 系统内存： 7679704600    常驻内存： 434176     堆上分配的，gc后会归还：  131752\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131752\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131984\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131768\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131768\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\n```\n\n### End","source":"_posts/37-Quick-sort-快速排序.md","raw":"---\ntitle: 「37」Quick Sort快速排序\ndate: '2021/2/19 12:10:17'\nupdated: '2021/2/19 12:10:17'\nkeywords: 'Go,Quick Sort,Sort'\ntags:\n  - Go\n  - Sort\n  - Day\nmathjax: true\nabbrlink: aa75061e\n---\n<!-- toc -->\n\n### 前序\n最近在想一个问题：Go里面的sort包到底是怎么实现的，，，，\n想着想着就想到了快速排序，就试着手撕了一个，\n\n有个关键问题，所有的都是针对int或者其它特定的类型，\n\n*那如何让排序算法通用性呢，*\n\n<!--more-->\n\n### 快速排序\n\n不废话，先搞一个排序的代码来，再分析「遵循先用后分析的原则」\n\n>默认从大-->小，注释的那行放开就是 从小-->大\n\n```go\nfunc QuickSort(a []int, left, right int) []int {\n\tif left < right {\n\t\tmid := partition(a, left, right)\n\t\tQuickSort(a, left, mid-1)\n\t\tQuickSort(a, mid+1, right)\n\t}\n\treturn a\n\n}\n\nfunc partition(a []int, left int, right int) int {\n\tpivot := a[left] //基点\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; { \n\t\tfor ; left < right && a[right] <= pivot; {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && a[left] >= pivot; {\n\t\t\tleft++\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\n```\n\n#### 调用分析\n\n```go\nfunc main() {\n\ts := []int{1, 2, 3, 4, 5, 6, 7}\n\tnum :=QuickSort(s, 0, len(s)-1)\n\tfmt.Println(num)\n}\n```\n\n##### Outputs:\n\n>[7 6 5 4 3 2 1]\n\n#### 不足点：\n\n* 只能用在int型或者指定的类型，「不爽😕」\n* 基点在最左边「后面分析为何不好」\n\n##### 改进点：\n\n>既然是需要改进，那就朝着上面的不足点来搞。\n* 通用类型的设计，「用go的断言：interface来做」\n* 基点的选取尽量均衡「可选项」\n\n#### Just do it\n\n\n##### 自定义排序规则做法：\n\n```go\n\nfunc QuickSortAll(a []interface{}, left, right int, By func(a, b interface{}) bool) []interface{} {\n\tif left < right {\n\t\tmid := partitionAll(a, left, right, By)\n\t\tQuickSortAll(a, left, mid-1, By)\n\t\tQuickSortAll(a, mid+1, right, By)\n\t}\n\treturn a\n\n}\n\nfunc partitionAll(a []interface{}, left int, right int, By func(a, b interface{}) bool) int {\n\tpivot := a[left]\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; {\n\t\tfor ; left < right && By(a[right], pivot); {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && By(pivot, a[left]); {\n\t\t\tleft++\n\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\ntype User struct {\n\tName  string\n\tAge   int\n\tCount int\n}\n\nconst counter = 100000000\n\nfunc main() {\n\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\tisp = append(isp, User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})\n\n\t}\n\tt := time.Now().Unix()\n\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n        return a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(time.Now().Unix() - t)\n}\n```\n\n###### Outputs：\n\n>91\n\n##### 跑个benchmark看看\n\n> 上面的变量counter=10000000\n```go\ngoos: darwin\ngoarch: amd64\ncpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\nBenchmarkQuickSortAll\nBenchmarkQuickSortAll-12    \t       1\t6287198265 ns/op\nPASS\n```\n#### 内存占用分析\n\n>改造下执行函数,加上打印内存情况:\n\n```go\n\nfunc main() {\n\tMem(fmt.Sprintf(\"for start\"))\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\tisp = append(isp, User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tSage:  i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})\n\n\t}\n\n\tfmt.Println(unsafe.Sizeof(isp))\n\tfmt.Println(unsafe.Sizeof([counter]interface{}{}))\n\tt := time.Now().Unix()\n\tMem(fmt.Sprintf(\"for all slice\"))\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n\t\treturn a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(time.Now().Unix() - t)\n\tMem(fmt.Sprintf(\"for all end\"))\n\n\ti := 0\n\tfor {\n\t\tif i > 10 {\n\t\t\tbreak\n\t\t}\n\t\t\n\t\truntime.GC()\n\t\tMem(fmt.Sprintf(\"for gc end\"))\n\t\ttime.Sleep(1 * time.Second)\n\t\ti++\n\t}\n}\n\nfunc Mem(msg string) {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tfmt.Println(msg, \"系统内存\", m.Sys, \" 常驻内存：\", m.HeapInuse, \"堆上分配的，gc后会归还： \", m.HeapAlloc)\n}\n\n```\n\n##### Outputs:\n\n>不同的系统可能会有些许偏差,关键点不在于数值大小,\n>关键点在于: 向系统申请的大内存,没有归还给系统,如果说要频繁的申请大内存等操作,\n>最好还是搞一个pool池子,不然容易内存暴增暴跌.\n\n* 此处 *counter=10000000*\n```go\nfor start 系统内存： 71388176    常驻内存： 450560     堆上分配的，gc后会归还：  130808\nisp占用的字节大小：「isp结构占用」 24\ncounter的切片占用的字节大小： 160000000\nfor all slice 系统内存： 784408744    常驻内存： 722001920     堆上分配的，gc后会归还：  719855360\n耗时：  10  S\nfor all end 系统内存： 784408744    常驻内存： 722010112     堆上分配的，gc后会归还：  719855616\nfor gc end 系统内存： 785326248    常驻内存： 425984     堆上分配的，gc后会归还：  131608\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131416\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131656\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131672\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131456\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131792\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131680\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131696\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131472\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131696\nfor gc end 系统内存： 785326248    常驻内存： 417792     堆上分配的，gc后会归还：  131696\n```\n\n#### 后续优化点:\n\n* 如果数量过大,可以搞个内存池\n* 如果数量庞大,建议分治,多次排序「这个数据量一般在G/T级别」\n\n\n##### 数量大的实验,函数内部复用:\n\n```go\n\nfunc main() {\n\tMem(fmt.Sprintf(\"for start\"))\n\tisp := make([]interface{}, 0, counter)\n\tfor i := 0; i < counter; i++ {\n\t\tssUser := User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tSage:  i,\n\t\t\tCount: rand.Intn(counter),\n\t\t}\n\t\tisp = append(isp,ssUser)\n\t}\n\n\tfmt.Println(\"isp占用的字节大小：「isp结构占用」\", unsafe.Sizeof(isp))\n\tfmt.Println(\"counter的切片占用的字节大小：\", unsafe.Sizeof([counter]interface{}{}))\n\tt := time.Now().Unix()\n\tMem(fmt.Sprintf(\"for all slice\"))\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n\t\treturn a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(\"耗时： \", time.Now().Unix()-t, \" S\")\n\tMem(fmt.Sprintf(\"for all end\"))\n\n\ti := 0\n\tfor {\n\t\tif i > 3 {\n\t\t\tbreak\n\t\t}\n\n\t\truntime.GC()\n\t\tMem(fmt.Sprintf(\"for gc end\"))\n\t\ttime.Sleep(1 * time.Second)\n\t\ti++\n\t}\n\n\t//释放内存,断开引用\n\tfor i := range isp {\n\t\tisp[i] = nil\n\t}\n\tisp = isp[:0]\n\n\truntime.GC()\n\tMem(fmt.Sprintf(\"gc before new start %d\", i))\n\tfor i := 0; i < counter; i++ {\n\t\tstmp := User{}\n\t\tstmp.Name = strconv.Itoa(i)\n\t\tstmp.Age = i\n\t\tstmp.Sage = i\n\t\tstmp.Count = rand.Intn(counter)\n\t\tisp = append(isp, stmp)\n\n\t\tif i%1000000 == 0 {\n\t\t\tMem(fmt.Sprintf(\"slice %d\", i))\n\t\t}\n\t}\n\t//fmt.Println(isp)\n\t// ******关键点在于这个地方的内存会不会是前面同样打印处的倍数???\n\tfmt.Println(\"isp占用的字节大小：「isp结构占用」\", unsafe.Sizeof(isp))\n\t//fmt.Println(\"counter的切片占用的字节大小：\", unsafe.Sizeof([counter]interface{}{}))\n\tts := time.Now().Unix()\n\tMem(fmt.Sprintf(\"for all slice\"))\n\t_ = QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// return a.(User).Count >= b.(User).Count //按照count排序 从小到大\n\t\treturn a.(User).Count <= b.(User).Count //按照count排序  从大到小\n\t})\n\t//fmt.Println(num)\n\tfmt.Println(\"耗时： \", time.Now().Unix()-ts, \" S\")\n\tMem(fmt.Sprintf(\"for all end\"))\n\n\tia := 0\n\tfor {\n\t\tif ia > 10 {\n\t\t\tbreak\n\t\t}\n\n\t\truntime.GC()\n\t\tMem(fmt.Sprintf(\"for gc end\"))\n\t\ttime.Sleep(1 * time.Second)\n\t\tia++\n\t}\n}\n\nfunc Mem(msg string) {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tfmt.Println(msg, \"系统内存：\", m.Sys, \"   常驻内存：\", m.HeapInuse, \"    堆上分配的，gc后会归还： \", m.HeapAlloc)\n}\n\n```\n\n###### Outputs:\n\n>还是同样的,内存的大小不重要,重要的是看分布:\n\n```go\nGOROOT=/usr/local/go #gosetup\nGOPATH=/Users/k/go #gosetup\n/usr/local/go/bin/go build -o /private/var/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go /Users/k/learn/go-memory/src/main/quicksort.go #gosetup\n/private/var/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go\nfor start 系统内存： 71388176    常驻内存： 344064     堆上分配的，gc后会归还：  130600\nisp占用的字节大小：「isp结构占用」 24\ncounter的切片占用的字节大小： 1600000000\nfor all slice 系统内存： 7651851800    常驻内存： 7218954240     堆上分配的，gc后会归还：  7199851600\n耗时：  168  S\nfor all end 系统内存： 7664827928    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199852696\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853016\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853040\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853048\nfor gc end 系统内存： 7665745432    常驻内存： 7218962432     堆上分配的，gc后会归还：  7199853048\ngc before new start 4 系统内存： 7665745432    常驻内存： 1600421888     堆上分配的，gc后会归还：  1600134128\nslice 0 系统内存： 7665745432    常驻内存： 1600430080     堆上分配的，gc后会归还：  1600134560\nslice 1000000 系统内存： 7665745432    常驻内存： 1656332288     堆上分配的，gc后会归还：  1655853536\nslice 2000000 系统内存： 7665745432    常驻内存： 1712513024     堆上分配的，gc后会归还：  1711853840\nslice 3000000 系统内存： 7665745432    常驻内存： 1768710144     堆上分配的，gc后会归还：  1767854128\nslice 4000000 系统内存： 7665745432    常驻内存： 1824890880     堆上分配的，gc后会归还：  1823854192\nslice 5000000 系统内存： 7665745432    常驻内存： 1881079808     堆上分配的，gc后会归还：  1879854256\nslice 6000000 系统内存： 7665745432    常驻内存： 1937276928     堆上分配的，gc后会归还：  1935854336\nslice 7000000 系统内存： 7665745432    常驻内存： 1993457664     堆上分配的，gc后会归还：  1991854400\nslice 8000000 系统内存： 7665745432    常驻内存： 2049662976     堆上分配的，gc后会归还：  2047854704\nslice 9000000 系统内存： 7665745432    常驻内存： 2105835520     堆上分配的，gc后会归还：  2103854992\nslice 10000000 系统内存： 7665745432    常驻内存： 2162024448     堆上分配的，gc后会归还：  2159855056\nslice 11000000 系统内存： 7665745432    常驻内存： 2218205184     堆上分配的，gc后会归还：  2215855120\nslice 12000000 系统内存： 7665745432    常驻内存： 2274410496     堆上分配的，gc后会归还：  2271855200\nslice 13000000 系统内存： 7665745432    常驻内存： 2330591232     堆上分配的，gc后会归还：  2327855264\nslice 14000000 系统内存： 7665745432    常驻内存： 2386771968     堆上分配的，gc后会归还：  2383855328\nslice 15000000 系统内存： 7665745432    常驻内存： 2442969088     堆上分配的，gc后会归还：  2439855392\nslice 16000000 系统内存： 7665745432    常驻内存： 2499149824     堆上分配的，gc后会归还：  2495855456\nslice 17000000 系统内存： 7665745432    常驻内存： 2555346944     堆上分配的，gc后会归还：  2551855520\nslice 18000000 系统内存： 7665745432    常驻内存： 2611544064     堆上分配的，gc后会归还：  2607855824\nslice 19000000 系统内存： 7665745432    常驻内存： 2667716608     堆上分配的，gc后会归还：  2663856112\nslice 20000000 系统内存： 7665745432    常驻内存： 2723921920     堆上分配的，gc后会归还：  2719856192\nslice 21000000 系统内存： 7665745432    常驻内存： 2780102656     堆上分配的，gc后会归还：  2775856256\nslice 22000000 系统内存： 7665745432    常驻内存： 2836283392     堆上分配的，gc后会归还：  2831856320\nslice 23000000 系统内存： 7665745432    常驻内存： 2892472320     堆上分配的，gc后会归还：  2887856384\nslice 24000000 系统内存： 7666073112    常驻内存： 2948661248     堆上分配的，gc后会归还：  2943856448\nslice 25000000 系统内存： 7666466328    常驻内存： 3004841984     堆上分配的，gc后会归还：  2999856512\nslice 26000000 系统内存： 7666859544    常驻内存： 3061039104     堆上分配的，gc后会归还：  3055856576\nslice 27000000 系统内存： 7667252760    常驻内存： 3117228032     堆上分配的，gc后会归还：  3111856640\nslice 28000000 系统内存： 7667318296    常驻内存： 3173433344     堆上分配的，gc后会归还：  3167859936\nslice 29000000 系统内存： 7667318296    常驻内存： 3229614080     堆上分配的，gc后会归还：  3223857088\nslice 30000000 系统内存： 7667318296    常驻内存： 3285794816     堆上分配的，gc后会归还：  3279857376\nslice 31000000 系统内存： 7667318296    常驻内存： 3341983744     堆上分配的，gc后会归还：  3335857440\nslice 32000000 系统内存： 7667318296    常驻内存： 3398172672     堆上分配的，gc后会归还：  3391857504\nslice 33000000 系统内存： 7667318296    常驻内存： 3454361600     堆上分配的，gc后会归还：  3447857568\nslice 34000000 系统内存： 7667318296    常驻内存： 3510550528     堆上分配的，gc后会归还：  3503857632\nslice 35000000 系统内存： 7667318296    常驻内存： 3566739456     堆上分配的，gc后会归还：  3559857696\nslice 36000000 系统内存： 7667318296    常驻内存： 3622936576     堆上分配的，gc后会归还：  3615858000\nslice 37000000 系统内存： 7667318296    常驻内存： 3679117312     堆上分配的，gc后会归还：  3671858288\nslice 38000000 系统内存： 7667318296    常驻内存： 3735306240     堆上分配的，gc后会归还：  3727858352\nslice 39000000 系统内存： 7667318296    常驻内存： 3791495168     堆上分配的，gc后会归还：  3783858656\nslice 40000000 系统内存： 7667318296    常驻内存： 3847684096     堆上分配的，gc后会归还：  3839858960\nslice 41000000 系统内存： 7667318296    常驻内存： 3903864832     堆上分配的，gc后会归还：  3895859024\nslice 42000000 系统内存： 7667318296    常驻内存： 3960061952     堆上分配的，gc后会归还：  3951859328\nslice 43000000 系统内存： 7667318296    常驻内存： 4016250880     堆上分配的，gc后会归还：  4007859616\nslice 44000000 系统内存： 7667318296    常驻内存： 4072431616     堆上分配的，gc后会归还：  4063859680\nslice 45000000 系统内存： 7667318296    常驻内存： 4128620544     堆上分配的，gc后会归还：  4119859744\nslice 46000000 系统内存： 7667318296    常驻内存： 4184809472     堆上分配的，gc后会归还：  4175859808\nslice 47000000 系统内存： 7667318296    常驻内存： 4240998400     堆上分配的，gc后会归还：  4231859872\nslice 48000000 系统内存： 7667318296    常驻内存： 4297179136     堆上分配的，gc后会归还：  4287859936\nslice 49000000 系统内存： 7667318296    常驻内存： 4353376256     堆上分配的，gc后会归还：  4343860000\nslice 50000000 系统内存： 7667318296    常驻内存： 4409565184     堆上分配的，gc后会归还：  4399860064\nslice 51000000 系统内存： 7667318296    常驻内存： 4465770496     堆上分配的，gc后会归还：  4455860368\nslice 52000000 系统内存： 7667318296    常驻内存： 4521943040     堆上分配的，gc后会归还：  4511860656\nslice 53000000 系统内存： 7667318296    常驻内存： 4578140160     堆上分配的，gc后会归还：  4567860720\nslice 54000000 系统内存： 7667318296    常驻内存： 4634320896     堆上分配的，gc后会归还：  4623860784\nslice 55000000 系统内存： 7667318296    常驻内存： 4690509824     堆上分配的，gc后会归还：  4679860848\nslice 56000000 系统内存： 7667318296    常驻内存： 4746690560     堆上分配的，gc后会归还：  4735860912\nslice 57000000 系统内存： 7667318296    常驻内存： 4802887680     堆上分配的，gc后会归还：  4791860976\nslice 58000000 系统内存： 7667318296    常驻内存： 4859068416     堆上分配的，gc后会归还：  4847861040\nslice 59000000 系统内存： 7667318296    常驻内存： 4915257344     堆上分配的，gc后会归还：  4903861104\nslice 60000000 系统内存： 7667318296    常驻内存： 4971446272     堆上分配的，gc后会归还：  4959861168\nslice 61000000 系统内存： 7667318296    常驻内存： 5027635200     堆上分配的，gc后会归还：  5015861232\nslice 62000000 系统内存： 7667318296    常驻内存： 5083815936     堆上分配的，gc后会归还：  5071861296\nslice 63000000 系统内存： 7667449368    常驻内存： 5140013056     堆上分配的，gc后会归还：  5127861360\nslice 64000000 系统内存： 7667842584    常驻内存： 5196201984     堆上分配的，gc后会归还：  5183861424\nslice 65000000 系统内存： 7668235800    常驻内存： 5252382720     堆上分配的，gc后会归还：  5239861488\nslice 66000000 系统内存： 7668629016    常驻内存： 5308579840     堆上分配的，gc后会归还：  5295861552\nslice 67000000 系统内存： 7669087768    常驻内存： 5364760576     堆上分配的，gc后会归还：  5351861616\nslice 68000000 系统内存： 7669480984    常驻内存： 5420957696     堆上分配的，gc后会归还：  5407861680\nslice 69000000 系统内存： 7669874200    常驻内存： 5477138432     堆上分配的，gc后会归还：  5463861744\nslice 70000000 系统内存： 7670267416    常驻内存： 5533327360     堆上分配的，gc后会归还：  5519861808\nslice 71000000 系统内存： 7670660632    常驻内存： 5589516288     堆上分配的，gc后会归还：  5575861872\nslice 72000000 系统内存： 7671119384    常驻内存： 5645705216     堆上分配的，gc后会归还：  5631861936\nslice 73000000 系统内存： 7671512600    常驻内存： 5701894144     堆上分配的，gc后会归还：  5687862000\nslice 74000000 系统内存： 7671905816    常驻内存： 5758083072     堆上分配的，gc后会归还：  5743862064\nslice 75000000 系统内存： 7672299032    常驻内存： 5814280192     堆上分配的，gc后会归还：  5799862144\nslice 76000000 系统内存： 7672692248    常驻内存： 5870460928     堆上分配的，gc后会归还：  5855862224\nslice 77000000 系统内存： 7673151000    常驻内存： 5926649856     堆上分配的，gc后会归还：  5911862288\nslice 78000000 系统内存： 7673544216    常驻内存： 5982846976     堆上分配的，gc后会归还：  5967862352\nslice 79000000 系统内存： 7673937432    常驻内存： 6039019520     堆上分配的，gc后会归还：  6023862416\nslice 80000000 系统内存： 7674330648    常驻内存： 6095216640     堆上分配的，gc后会归还：  6079862480\nslice 81000000 系统内存： 7674789400    常驻内存： 6151397376     堆上分配的，gc后会归还：  6135862544\nslice 82000000 系统内存： 7675182616    常驻内存： 6207594496     堆上分配的，gc后会归还：  6191862624\nslice 83000000 系统内存： 7675379224    常驻内存： 6263808000     堆上分配的，gc后会归还：  6247863760\nslice 84000000 系统内存： 7675379224    常驻内存： 6319964160     堆上分配的，gc后会归还：  6303863824\nslice 85000000 系统内存： 7675379224    常驻内存： 6376177664     堆上分配的，gc后会归还：  6359864144\nslice 86000000 系统内存： 7675379224    常驻内存： 6432358400     堆上分配的，gc后会归还：  6415864432\nslice 87000000 系统内存： 7675379224    常驻内存： 6488530944     堆上分配的，gc后会归还：  6471858816\nslice 88000000 系统内存： 7675379224    常驻内存： 6544711680     堆上分配的，gc后会归还：  6527859104\nslice 89000000 系统内存： 7675379224    常驻内存： 6600892416     堆上分配的，gc后会归还：  6583859168\nslice 90000000 系统内存： 7675575832    常驻内存： 6657081344     堆上分配的，gc后会归还：  6639859232\nslice 91000000 系统内存： 7676034584    常驻内存： 6713278464     堆上分配的，gc后会归还：  6695859296\nslice 92000000 系统内存： 7676427800    常驻内存： 6769459200     堆上分配的，gc后会归还：  6751859360\nslice 93000000 系统内存： 7676821016    常驻内存： 6825648128     堆上分配的，gc后会归还：  6807859424\nslice 94000000 系统内存： 7677214232    常驻内存： 6881837056     堆上分配的，gc后会归还：  6863859488\nslice 95000000 系统内存： 7677672984    常驻内存： 6938025984     堆上分配的，gc后会归还：  6919859552\nslice 96000000 系统内存： 7678066200    常驻内存： 6994206720     堆上分配的，gc后会归还：  6975859616\nslice 97000000 系统内存： 7678459416    常驻内存： 7050403840     堆上分配的，gc后会归还：  7031859680\nslice 98000000 系统内存： 7678852632    常驻内存： 7106592768     堆上分配的，gc后会归还：  7087859744\nslice 99000000 系统内存： 7679245848    常驻内存： 7162773504     堆上分配的，gc后会归还：  7143859808\nisp占用的字节大小：「isp结构占用」 24\nfor all slice 系统内存： 7679704600    常驻内存： 7218970624     堆上分配的，gc后会归还：  7199859808\n耗时：  187  S\nfor all end 系统内存： 7679704600    常驻内存： 7218970624     堆上分配的，gc后会归还：  7199857304\nfor gc end 系统内存： 7679704600    常驻内存： 434176     堆上分配的，gc后会归还：  131752\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131752\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131984\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131768\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131768\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\nfor gc end 系统内存： 7679704600    常驻内存： 425984     堆上分配的，gc后会归还：  131992\n```\n\n### End","slug":"37-Quick-sort-快速排序","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d54002nzfqxczny3ggk","content":"<!-- toc -->\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>最近在想一个问题：Go里面的sort包到底是怎么实现的，，，，<br>\n想着想着就想到了快速排序，就试着手撕了一个，</p>\n<p>有个关键问题，所有的都是针对int或者其它特定的类型，</p>\n<p><em>那如何让排序算法通用性呢，</em></p>\n<span id=\"more\"></span>\n<h3 id=\"快速排序\"><a class=\"header-anchor\" href=\"#快速排序\">¶</a>快速排序</h3>\n<p>不废话，先搞一个排序的代码来，再分析「遵循先用后分析的原则」</p>\n<blockquote>\n<p>默认从大–&gt;小，注释的那行放开就是 从小–&gt;大</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSort</span><span class=\"params\">(a []<span class=\"type\">int</span>, left, right <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partition(a, left, right)</span><br><span class=\"line\">\t\tQuickSort(a, left, mid<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\tQuickSort(a, mid+<span class=\"number\">1</span>, right)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partition</span><span class=\"params\">(a []<span class=\"type\">int</span>, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left] <span class=\"comment\">//基点</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123; </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; a[right] &lt;= pivot; &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; a[left] &gt;= pivot; &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"调用分析\"><a class=\"header-anchor\" href=\"#调用分析\">¶</a>调用分析</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">\tnum :=QuickSort(s, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(s)<span class=\"number\">-1</span>)</span><br><span class=\"line\">\tfmt.Println(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Outputs\"><a class=\"header-anchor\" href=\"#Outputs\">¶</a>Outputs:</h5>\n<blockquote>\n<p>[7 6 5 4 3 2 1]</p>\n</blockquote>\n<h4 id=\"不足点：\"><a class=\"header-anchor\" href=\"#不足点：\">¶</a>不足点：</h4>\n<ul>\n<li>只能用在int型或者指定的类型，「不爽😕」</li>\n<li>基点在最左边「后面分析为何不好」</li>\n</ul>\n<h5 id=\"改进点：\"><a class=\"header-anchor\" href=\"#改进点：\">¶</a>改进点：</h5>\n<blockquote>\n<p>既然是需要改进，那就朝着上面的不足点来搞。</p>\n</blockquote>\n<ul>\n<li>通用类型的设计，「用go的断言：interface来做」</li>\n<li>基点的选取尽量均衡「可选项」</li>\n</ul>\n<h4 id=\"Just-do-it\"><a class=\"header-anchor\" href=\"#Just-do-it\">¶</a>Just do it</h4>\n<h5 id=\"自定义排序规则做法：\"><a class=\"header-anchor\" href=\"#自定义排序规则做法：\">¶</a>自定义排序规则做法：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSortAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partitionAll(a, left, right, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, left, mid<span class=\"number\">-1</span>, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, mid+<span class=\"number\">1</span>, right, By)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partitionAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(a[right], pivot); &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(pivot, a[left]); &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tCount <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"number\">100000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\"></span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(time.Now().Unix() - t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"Outputs：\"><a class=\"header-anchor\" href=\"#Outputs：\">¶</a>Outputs：</h6>\n<blockquote>\n<p>91</p>\n</blockquote>\n<h5 id=\"跑个benchmark看看\"><a class=\"header-anchor\" href=\"#跑个benchmark看看\">¶</a>跑个benchmark看看</h5>\n<blockquote>\n<p>上面的变量counter=10000000</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i7<span class=\"number\">-9750</span>H CPU @ <span class=\"number\">2.60</span>GHz</span><br><span class=\"line\">BenchmarkQuickSortAll</span><br><span class=\"line\">BenchmarkQuickSortAll<span class=\"number\">-12</span>    \t       <span class=\"number\">1</span>\t<span class=\"number\">6287198265</span> ns/op</span><br><span class=\"line\">PASS</span><br></pre></td></tr></table></figure>\n<h4 id=\"内存占用分析\"><a class=\"header-anchor\" href=\"#内存占用分析\">¶</a>内存占用分析</h4>\n<blockquote>\n<p>改造下执行函数,加上打印内存情况:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for start&quot;</span>))</span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tSage:  i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(unsafe.Sizeof(isp))</span><br><span class=\"line\">\tfmt.Println(unsafe.Sizeof([counter]<span class=\"keyword\">interface</span>&#123;&#125;&#123;&#125;))</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all slice&quot;</span>))</span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(time.Now().Unix() - t)</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all end&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\truntime.GC()</span><br><span class=\"line\">\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;for gc end&quot;</span>))</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mem</span><span class=\"params\">(msg <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tfmt.Println(msg, <span class=\"string\">&quot;系统内存&quot;</span>, m.Sys, <span class=\"string\">&quot; 常驻内存：&quot;</span>, m.HeapInuse, <span class=\"string\">&quot;堆上分配的，gc后会归还： &quot;</span>, m.HeapAlloc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"Outputs-v2\"><a class=\"header-anchor\" href=\"#Outputs-v2\">¶</a>Outputs:</h5>\n<blockquote>\n<p>不同的系统可能会有些许偏差,关键点不在于数值大小,<br>\n关键点在于: 向系统申请的大内存,没有归还给系统,如果说要频繁的申请大内存等操作,<br>\n最好还是搞一个pool池子,不然容易内存暴增暴跌.</p>\n</blockquote>\n<ul>\n<li>此处 <em>counter=10000000</em></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> start 系统内存： <span class=\"number\">71388176</span>    常驻内存： <span class=\"number\">450560</span>     堆上分配的，gc后会归还：  <span class=\"number\">130808</span></span><br><span class=\"line\">isp占用的字节大小：「isp结构占用」 <span class=\"number\">24</span></span><br><span class=\"line\">counter的切片占用的字节大小： <span class=\"number\">160000000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> all slice 系统内存： <span class=\"number\">784408744</span>    常驻内存： <span class=\"number\">722001920</span>     堆上分配的，gc后会归还：  <span class=\"number\">719855360</span></span><br><span class=\"line\">耗时：  <span class=\"number\">10</span>  S</span><br><span class=\"line\"><span class=\"keyword\">for</span> all end 系统内存： <span class=\"number\">784408744</span>    常驻内存： <span class=\"number\">722010112</span>     堆上分配的，gc后会归还：  <span class=\"number\">719855616</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131608</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131416</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131656</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131672</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131456</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131792</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131680</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131696</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131472</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131696</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131696</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"后续优化点\"><a class=\"header-anchor\" href=\"#后续优化点\">¶</a>后续优化点:</h4>\n<ul>\n<li>如果数量过大,可以搞个内存池</li>\n<li>如果数量庞大,建议分治,多次排序「这个数据量一般在G/T级别」</li>\n</ul>\n<h5 id=\"数量大的实验-函数内部复用\"><a class=\"header-anchor\" href=\"#数量大的实验-函数内部复用\">¶</a>数量大的实验,函数内部复用:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for start&quot;</span>))</span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tssUser := User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tSage:  i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp,ssUser)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;isp占用的字节大小：「isp结构占用」&quot;</span>, unsafe.Sizeof(isp))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;counter的切片占用的字节大小：&quot;</span>, unsafe.Sizeof([counter]<span class=\"keyword\">interface</span>&#123;&#125;&#123;&#125;))</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all slice&quot;</span>))</span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时： &quot;</span>, time.Now().Unix()-t, <span class=\"string\">&quot; S&quot;</span>)</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all end&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\truntime.GC()</span><br><span class=\"line\">\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;for gc end&quot;</span>))</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//释放内存,断开引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> isp &#123;</span><br><span class=\"line\">\t\tisp[i] = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tisp = isp[:<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;gc before new start %d&quot;</span>, i))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tstmp := User&#123;&#125;</span><br><span class=\"line\">\t\tstmp.Name = strconv.Itoa(i)</span><br><span class=\"line\">\t\tstmp.Age = i</span><br><span class=\"line\">\t\tstmp.Sage = i</span><br><span class=\"line\">\t\tstmp.Count = rand.Intn(counter)</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, stmp)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i%<span class=\"number\">1000000</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;slice %d&quot;</span>, i))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(isp)</span></span><br><span class=\"line\">\t<span class=\"comment\">// ******关键点在于这个地方的内存会不会是前面同样打印处的倍数???</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;isp占用的字节大小：「isp结构占用」&quot;</span>, unsafe.Sizeof(isp))</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(&quot;counter的切片占用的字节大小：&quot;, unsafe.Sizeof([counter]interface&#123;&#125;&#123;&#125;))</span></span><br><span class=\"line\">\tts := time.Now().Unix()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all slice&quot;</span>))</span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时： &quot;</span>, time.Now().Unix()-ts, <span class=\"string\">&quot; S&quot;</span>)</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all end&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tia := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ia &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\truntime.GC()</span><br><span class=\"line\">\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;for gc end&quot;</span>))</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\tia++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mem</span><span class=\"params\">(msg <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tfmt.Println(msg, <span class=\"string\">&quot;系统内存：&quot;</span>, m.Sys, <span class=\"string\">&quot;   常驻内存：&quot;</span>, m.HeapInuse, <span class=\"string\">&quot;    堆上分配的，gc后会归还： &quot;</span>, m.HeapAlloc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"Outputs-v3\"><a class=\"header-anchor\" href=\"#Outputs-v3\">¶</a>Outputs:</h6>\n<blockquote>\n<p>还是同样的,内存的大小不重要,重要的是看分布:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOROOT=/usr/local/<span class=\"keyword\">go</span> #gosetup</span><br><span class=\"line\">GOPATH=/Users/k/<span class=\"keyword\">go</span> #gosetup</span><br><span class=\"line\">/usr/local/<span class=\"keyword\">go</span>/bin/<span class=\"keyword\">go</span> build -o /private/<span class=\"keyword\">var</span>/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/quicksort.<span class=\"keyword\">go</span> #gosetup</span><br><span class=\"line\">/private/<span class=\"keyword\">var</span>/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go</span><br><span class=\"line\"><span class=\"keyword\">for</span> start 系统内存： <span class=\"number\">71388176</span>    常驻内存： <span class=\"number\">344064</span>     堆上分配的，gc后会归还：  <span class=\"number\">130600</span></span><br><span class=\"line\">isp占用的字节大小：「isp结构占用」 <span class=\"number\">24</span></span><br><span class=\"line\">counter的切片占用的字节大小： <span class=\"number\">1600000000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> all slice 系统内存： <span class=\"number\">7651851800</span>    常驻内存： <span class=\"number\">7218954240</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199851600</span></span><br><span class=\"line\">耗时：  <span class=\"number\">168</span>  S</span><br><span class=\"line\"><span class=\"keyword\">for</span> all end 系统内存： <span class=\"number\">7664827928</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199852696</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853016</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853040</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853048</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853048</span></span><br><span class=\"line\">gc before <span class=\"built_in\">new</span> start <span class=\"number\">4</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1600421888</span>     堆上分配的，gc后会归还：  <span class=\"number\">1600134128</span></span><br><span class=\"line\">slice <span class=\"number\">0</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1600430080</span>     堆上分配的，gc后会归还：  <span class=\"number\">1600134560</span></span><br><span class=\"line\">slice <span class=\"number\">1000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1656332288</span>     堆上分配的，gc后会归还：  <span class=\"number\">1655853536</span></span><br><span class=\"line\">slice <span class=\"number\">2000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1712513024</span>     堆上分配的，gc后会归还：  <span class=\"number\">1711853840</span></span><br><span class=\"line\">slice <span class=\"number\">3000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1768710144</span>     堆上分配的，gc后会归还：  <span class=\"number\">1767854128</span></span><br><span class=\"line\">slice <span class=\"number\">4000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1824890880</span>     堆上分配的，gc后会归还：  <span class=\"number\">1823854192</span></span><br><span class=\"line\">slice <span class=\"number\">5000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1881079808</span>     堆上分配的，gc后会归还：  <span class=\"number\">1879854256</span></span><br><span class=\"line\">slice <span class=\"number\">6000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1937276928</span>     堆上分配的，gc后会归还：  <span class=\"number\">1935854336</span></span><br><span class=\"line\">slice <span class=\"number\">7000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1993457664</span>     堆上分配的，gc后会归还：  <span class=\"number\">1991854400</span></span><br><span class=\"line\">slice <span class=\"number\">8000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2049662976</span>     堆上分配的，gc后会归还：  <span class=\"number\">2047854704</span></span><br><span class=\"line\">slice <span class=\"number\">9000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2105835520</span>     堆上分配的，gc后会归还：  <span class=\"number\">2103854992</span></span><br><span class=\"line\">slice <span class=\"number\">10000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2162024448</span>     堆上分配的，gc后会归还：  <span class=\"number\">2159855056</span></span><br><span class=\"line\">slice <span class=\"number\">11000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2218205184</span>     堆上分配的，gc后会归还：  <span class=\"number\">2215855120</span></span><br><span class=\"line\">slice <span class=\"number\">12000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2274410496</span>     堆上分配的，gc后会归还：  <span class=\"number\">2271855200</span></span><br><span class=\"line\">slice <span class=\"number\">13000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2330591232</span>     堆上分配的，gc后会归还：  <span class=\"number\">2327855264</span></span><br><span class=\"line\">slice <span class=\"number\">14000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2386771968</span>     堆上分配的，gc后会归还：  <span class=\"number\">2383855328</span></span><br><span class=\"line\">slice <span class=\"number\">15000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2442969088</span>     堆上分配的，gc后会归还：  <span class=\"number\">2439855392</span></span><br><span class=\"line\">slice <span class=\"number\">16000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2499149824</span>     堆上分配的，gc后会归还：  <span class=\"number\">2495855456</span></span><br><span class=\"line\">slice <span class=\"number\">17000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2555346944</span>     堆上分配的，gc后会归还：  <span class=\"number\">2551855520</span></span><br><span class=\"line\">slice <span class=\"number\">18000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2611544064</span>     堆上分配的，gc后会归还：  <span class=\"number\">2607855824</span></span><br><span class=\"line\">slice <span class=\"number\">19000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2667716608</span>     堆上分配的，gc后会归还：  <span class=\"number\">2663856112</span></span><br><span class=\"line\">slice <span class=\"number\">20000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2723921920</span>     堆上分配的，gc后会归还：  <span class=\"number\">2719856192</span></span><br><span class=\"line\">slice <span class=\"number\">21000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2780102656</span>     堆上分配的，gc后会归还：  <span class=\"number\">2775856256</span></span><br><span class=\"line\">slice <span class=\"number\">22000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2836283392</span>     堆上分配的，gc后会归还：  <span class=\"number\">2831856320</span></span><br><span class=\"line\">slice <span class=\"number\">23000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2892472320</span>     堆上分配的，gc后会归还：  <span class=\"number\">2887856384</span></span><br><span class=\"line\">slice <span class=\"number\">24000000</span> 系统内存： <span class=\"number\">7666073112</span>    常驻内存： <span class=\"number\">2948661248</span>     堆上分配的，gc后会归还：  <span class=\"number\">2943856448</span></span><br><span class=\"line\">slice <span class=\"number\">25000000</span> 系统内存： <span class=\"number\">7666466328</span>    常驻内存： <span class=\"number\">3004841984</span>     堆上分配的，gc后会归还：  <span class=\"number\">2999856512</span></span><br><span class=\"line\">slice <span class=\"number\">26000000</span> 系统内存： <span class=\"number\">7666859544</span>    常驻内存： <span class=\"number\">3061039104</span>     堆上分配的，gc后会归还：  <span class=\"number\">3055856576</span></span><br><span class=\"line\">slice <span class=\"number\">27000000</span> 系统内存： <span class=\"number\">7667252760</span>    常驻内存： <span class=\"number\">3117228032</span>     堆上分配的，gc后会归还：  <span class=\"number\">3111856640</span></span><br><span class=\"line\">slice <span class=\"number\">28000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3173433344</span>     堆上分配的，gc后会归还：  <span class=\"number\">3167859936</span></span><br><span class=\"line\">slice <span class=\"number\">29000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3229614080</span>     堆上分配的，gc后会归还：  <span class=\"number\">3223857088</span></span><br><span class=\"line\">slice <span class=\"number\">30000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3285794816</span>     堆上分配的，gc后会归还：  <span class=\"number\">3279857376</span></span><br><span class=\"line\">slice <span class=\"number\">31000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3341983744</span>     堆上分配的，gc后会归还：  <span class=\"number\">3335857440</span></span><br><span class=\"line\">slice <span class=\"number\">32000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3398172672</span>     堆上分配的，gc后会归还：  <span class=\"number\">3391857504</span></span><br><span class=\"line\">slice <span class=\"number\">33000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3454361600</span>     堆上分配的，gc后会归还：  <span class=\"number\">3447857568</span></span><br><span class=\"line\">slice <span class=\"number\">34000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3510550528</span>     堆上分配的，gc后会归还：  <span class=\"number\">3503857632</span></span><br><span class=\"line\">slice <span class=\"number\">35000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3566739456</span>     堆上分配的，gc后会归还：  <span class=\"number\">3559857696</span></span><br><span class=\"line\">slice <span class=\"number\">36000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3622936576</span>     堆上分配的，gc后会归还：  <span class=\"number\">3615858000</span></span><br><span class=\"line\">slice <span class=\"number\">37000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3679117312</span>     堆上分配的，gc后会归还：  <span class=\"number\">3671858288</span></span><br><span class=\"line\">slice <span class=\"number\">38000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3735306240</span>     堆上分配的，gc后会归还：  <span class=\"number\">3727858352</span></span><br><span class=\"line\">slice <span class=\"number\">39000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3791495168</span>     堆上分配的，gc后会归还：  <span class=\"number\">3783858656</span></span><br><span class=\"line\">slice <span class=\"number\">40000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3847684096</span>     堆上分配的，gc后会归还：  <span class=\"number\">3839858960</span></span><br><span class=\"line\">slice <span class=\"number\">41000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3903864832</span>     堆上分配的，gc后会归还：  <span class=\"number\">3895859024</span></span><br><span class=\"line\">slice <span class=\"number\">42000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3960061952</span>     堆上分配的，gc后会归还：  <span class=\"number\">3951859328</span></span><br><span class=\"line\">slice <span class=\"number\">43000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4016250880</span>     堆上分配的，gc后会归还：  <span class=\"number\">4007859616</span></span><br><span class=\"line\">slice <span class=\"number\">44000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4072431616</span>     堆上分配的，gc后会归还：  <span class=\"number\">4063859680</span></span><br><span class=\"line\">slice <span class=\"number\">45000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4128620544</span>     堆上分配的，gc后会归还：  <span class=\"number\">4119859744</span></span><br><span class=\"line\">slice <span class=\"number\">46000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4184809472</span>     堆上分配的，gc后会归还：  <span class=\"number\">4175859808</span></span><br><span class=\"line\">slice <span class=\"number\">47000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4240998400</span>     堆上分配的，gc后会归还：  <span class=\"number\">4231859872</span></span><br><span class=\"line\">slice <span class=\"number\">48000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4297179136</span>     堆上分配的，gc后会归还：  <span class=\"number\">4287859936</span></span><br><span class=\"line\">slice <span class=\"number\">49000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4353376256</span>     堆上分配的，gc后会归还：  <span class=\"number\">4343860000</span></span><br><span class=\"line\">slice <span class=\"number\">50000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4409565184</span>     堆上分配的，gc后会归还：  <span class=\"number\">4399860064</span></span><br><span class=\"line\">slice <span class=\"number\">51000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4465770496</span>     堆上分配的，gc后会归还：  <span class=\"number\">4455860368</span></span><br><span class=\"line\">slice <span class=\"number\">52000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4521943040</span>     堆上分配的，gc后会归还：  <span class=\"number\">4511860656</span></span><br><span class=\"line\">slice <span class=\"number\">53000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4578140160</span>     堆上分配的，gc后会归还：  <span class=\"number\">4567860720</span></span><br><span class=\"line\">slice <span class=\"number\">54000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4634320896</span>     堆上分配的，gc后会归还：  <span class=\"number\">4623860784</span></span><br><span class=\"line\">slice <span class=\"number\">55000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4690509824</span>     堆上分配的，gc后会归还：  <span class=\"number\">4679860848</span></span><br><span class=\"line\">slice <span class=\"number\">56000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4746690560</span>     堆上分配的，gc后会归还：  <span class=\"number\">4735860912</span></span><br><span class=\"line\">slice <span class=\"number\">57000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4802887680</span>     堆上分配的，gc后会归还：  <span class=\"number\">4791860976</span></span><br><span class=\"line\">slice <span class=\"number\">58000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4859068416</span>     堆上分配的，gc后会归还：  <span class=\"number\">4847861040</span></span><br><span class=\"line\">slice <span class=\"number\">59000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4915257344</span>     堆上分配的，gc后会归还：  <span class=\"number\">4903861104</span></span><br><span class=\"line\">slice <span class=\"number\">60000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4971446272</span>     堆上分配的，gc后会归还：  <span class=\"number\">4959861168</span></span><br><span class=\"line\">slice <span class=\"number\">61000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">5027635200</span>     堆上分配的，gc后会归还：  <span class=\"number\">5015861232</span></span><br><span class=\"line\">slice <span class=\"number\">62000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">5083815936</span>     堆上分配的，gc后会归还：  <span class=\"number\">5071861296</span></span><br><span class=\"line\">slice <span class=\"number\">63000000</span> 系统内存： <span class=\"number\">7667449368</span>    常驻内存： <span class=\"number\">5140013056</span>     堆上分配的，gc后会归还：  <span class=\"number\">5127861360</span></span><br><span class=\"line\">slice <span class=\"number\">64000000</span> 系统内存： <span class=\"number\">7667842584</span>    常驻内存： <span class=\"number\">5196201984</span>     堆上分配的，gc后会归还：  <span class=\"number\">5183861424</span></span><br><span class=\"line\">slice <span class=\"number\">65000000</span> 系统内存： <span class=\"number\">7668235800</span>    常驻内存： <span class=\"number\">5252382720</span>     堆上分配的，gc后会归还：  <span class=\"number\">5239861488</span></span><br><span class=\"line\">slice <span class=\"number\">66000000</span> 系统内存： <span class=\"number\">7668629016</span>    常驻内存： <span class=\"number\">5308579840</span>     堆上分配的，gc后会归还：  <span class=\"number\">5295861552</span></span><br><span class=\"line\">slice <span class=\"number\">67000000</span> 系统内存： <span class=\"number\">7669087768</span>    常驻内存： <span class=\"number\">5364760576</span>     堆上分配的，gc后会归还：  <span class=\"number\">5351861616</span></span><br><span class=\"line\">slice <span class=\"number\">68000000</span> 系统内存： <span class=\"number\">7669480984</span>    常驻内存： <span class=\"number\">5420957696</span>     堆上分配的，gc后会归还：  <span class=\"number\">5407861680</span></span><br><span class=\"line\">slice <span class=\"number\">69000000</span> 系统内存： <span class=\"number\">7669874200</span>    常驻内存： <span class=\"number\">5477138432</span>     堆上分配的，gc后会归还：  <span class=\"number\">5463861744</span></span><br><span class=\"line\">slice <span class=\"number\">70000000</span> 系统内存： <span class=\"number\">7670267416</span>    常驻内存： <span class=\"number\">5533327360</span>     堆上分配的，gc后会归还：  <span class=\"number\">5519861808</span></span><br><span class=\"line\">slice <span class=\"number\">71000000</span> 系统内存： <span class=\"number\">7670660632</span>    常驻内存： <span class=\"number\">5589516288</span>     堆上分配的，gc后会归还：  <span class=\"number\">5575861872</span></span><br><span class=\"line\">slice <span class=\"number\">72000000</span> 系统内存： <span class=\"number\">7671119384</span>    常驻内存： <span class=\"number\">5645705216</span>     堆上分配的，gc后会归还：  <span class=\"number\">5631861936</span></span><br><span class=\"line\">slice <span class=\"number\">73000000</span> 系统内存： <span class=\"number\">7671512600</span>    常驻内存： <span class=\"number\">5701894144</span>     堆上分配的，gc后会归还：  <span class=\"number\">5687862000</span></span><br><span class=\"line\">slice <span class=\"number\">74000000</span> 系统内存： <span class=\"number\">7671905816</span>    常驻内存： <span class=\"number\">5758083072</span>     堆上分配的，gc后会归还：  <span class=\"number\">5743862064</span></span><br><span class=\"line\">slice <span class=\"number\">75000000</span> 系统内存： <span class=\"number\">7672299032</span>    常驻内存： <span class=\"number\">5814280192</span>     堆上分配的，gc后会归还：  <span class=\"number\">5799862144</span></span><br><span class=\"line\">slice <span class=\"number\">76000000</span> 系统内存： <span class=\"number\">7672692248</span>    常驻内存： <span class=\"number\">5870460928</span>     堆上分配的，gc后会归还：  <span class=\"number\">5855862224</span></span><br><span class=\"line\">slice <span class=\"number\">77000000</span> 系统内存： <span class=\"number\">7673151000</span>    常驻内存： <span class=\"number\">5926649856</span>     堆上分配的，gc后会归还：  <span class=\"number\">5911862288</span></span><br><span class=\"line\">slice <span class=\"number\">78000000</span> 系统内存： <span class=\"number\">7673544216</span>    常驻内存： <span class=\"number\">5982846976</span>     堆上分配的，gc后会归还：  <span class=\"number\">5967862352</span></span><br><span class=\"line\">slice <span class=\"number\">79000000</span> 系统内存： <span class=\"number\">7673937432</span>    常驻内存： <span class=\"number\">6039019520</span>     堆上分配的，gc后会归还：  <span class=\"number\">6023862416</span></span><br><span class=\"line\">slice <span class=\"number\">80000000</span> 系统内存： <span class=\"number\">7674330648</span>    常驻内存： <span class=\"number\">6095216640</span>     堆上分配的，gc后会归还：  <span class=\"number\">6079862480</span></span><br><span class=\"line\">slice <span class=\"number\">81000000</span> 系统内存： <span class=\"number\">7674789400</span>    常驻内存： <span class=\"number\">6151397376</span>     堆上分配的，gc后会归还：  <span class=\"number\">6135862544</span></span><br><span class=\"line\">slice <span class=\"number\">82000000</span> 系统内存： <span class=\"number\">7675182616</span>    常驻内存： <span class=\"number\">6207594496</span>     堆上分配的，gc后会归还：  <span class=\"number\">6191862624</span></span><br><span class=\"line\">slice <span class=\"number\">83000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6263808000</span>     堆上分配的，gc后会归还：  <span class=\"number\">6247863760</span></span><br><span class=\"line\">slice <span class=\"number\">84000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6319964160</span>     堆上分配的，gc后会归还：  <span class=\"number\">6303863824</span></span><br><span class=\"line\">slice <span class=\"number\">85000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6376177664</span>     堆上分配的，gc后会归还：  <span class=\"number\">6359864144</span></span><br><span class=\"line\">slice <span class=\"number\">86000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6432358400</span>     堆上分配的，gc后会归还：  <span class=\"number\">6415864432</span></span><br><span class=\"line\">slice <span class=\"number\">87000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6488530944</span>     堆上分配的，gc后会归还：  <span class=\"number\">6471858816</span></span><br><span class=\"line\">slice <span class=\"number\">88000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6544711680</span>     堆上分配的，gc后会归还：  <span class=\"number\">6527859104</span></span><br><span class=\"line\">slice <span class=\"number\">89000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6600892416</span>     堆上分配的，gc后会归还：  <span class=\"number\">6583859168</span></span><br><span class=\"line\">slice <span class=\"number\">90000000</span> 系统内存： <span class=\"number\">7675575832</span>    常驻内存： <span class=\"number\">6657081344</span>     堆上分配的，gc后会归还：  <span class=\"number\">6639859232</span></span><br><span class=\"line\">slice <span class=\"number\">91000000</span> 系统内存： <span class=\"number\">7676034584</span>    常驻内存： <span class=\"number\">6713278464</span>     堆上分配的，gc后会归还：  <span class=\"number\">6695859296</span></span><br><span class=\"line\">slice <span class=\"number\">92000000</span> 系统内存： <span class=\"number\">7676427800</span>    常驻内存： <span class=\"number\">6769459200</span>     堆上分配的，gc后会归还：  <span class=\"number\">6751859360</span></span><br><span class=\"line\">slice <span class=\"number\">93000000</span> 系统内存： <span class=\"number\">7676821016</span>    常驻内存： <span class=\"number\">6825648128</span>     堆上分配的，gc后会归还：  <span class=\"number\">6807859424</span></span><br><span class=\"line\">slice <span class=\"number\">94000000</span> 系统内存： <span class=\"number\">7677214232</span>    常驻内存： <span class=\"number\">6881837056</span>     堆上分配的，gc后会归还：  <span class=\"number\">6863859488</span></span><br><span class=\"line\">slice <span class=\"number\">95000000</span> 系统内存： <span class=\"number\">7677672984</span>    常驻内存： <span class=\"number\">6938025984</span>     堆上分配的，gc后会归还：  <span class=\"number\">6919859552</span></span><br><span class=\"line\">slice <span class=\"number\">96000000</span> 系统内存： <span class=\"number\">7678066200</span>    常驻内存： <span class=\"number\">6994206720</span>     堆上分配的，gc后会归还：  <span class=\"number\">6975859616</span></span><br><span class=\"line\">slice <span class=\"number\">97000000</span> 系统内存： <span class=\"number\">7678459416</span>    常驻内存： <span class=\"number\">7050403840</span>     堆上分配的，gc后会归还：  <span class=\"number\">7031859680</span></span><br><span class=\"line\">slice <span class=\"number\">98000000</span> 系统内存： <span class=\"number\">7678852632</span>    常驻内存： <span class=\"number\">7106592768</span>     堆上分配的，gc后会归还：  <span class=\"number\">7087859744</span></span><br><span class=\"line\">slice <span class=\"number\">99000000</span> 系统内存： <span class=\"number\">7679245848</span>    常驻内存： <span class=\"number\">7162773504</span>     堆上分配的，gc后会归还：  <span class=\"number\">7143859808</span></span><br><span class=\"line\">isp占用的字节大小：「isp结构占用」 <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> all slice 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">7218970624</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199859808</span></span><br><span class=\"line\">耗时：  <span class=\"number\">187</span>  S</span><br><span class=\"line\"><span class=\"keyword\">for</span> all end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">7218970624</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199857304</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">434176</span>     堆上分配的，gc后会归还：  <span class=\"number\">131752</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131752</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131984</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131768</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131768</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<!-- toc -->\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>最近在想一个问题：Go里面的sort包到底是怎么实现的，，，，<br>\n想着想着就想到了快速排序，就试着手撕了一个，</p>\n<p>有个关键问题，所有的都是针对int或者其它特定的类型，</p>\n<p><em>那如何让排序算法通用性呢，</em></p>","more":"<h3 id=\"快速排序\"><a class=\"header-anchor\" href=\"#快速排序\">¶</a>快速排序</h3>\n<p>不废话，先搞一个排序的代码来，再分析「遵循先用后分析的原则」</p>\n<blockquote>\n<p>默认从大–&gt;小，注释的那行放开就是 从小–&gt;大</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSort</span><span class=\"params\">(a []<span class=\"type\">int</span>, left, right <span class=\"type\">int</span>)</span></span> []<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partition(a, left, right)</span><br><span class=\"line\">\t\tQuickSort(a, left, mid<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\tQuickSort(a, mid+<span class=\"number\">1</span>, right)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partition</span><span class=\"params\">(a []<span class=\"type\">int</span>, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left] <span class=\"comment\">//基点</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123; </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; a[right] &lt;= pivot; &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; a[left] &gt;= pivot; &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"调用分析\"><a class=\"header-anchor\" href=\"#调用分析\">¶</a>调用分析</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>&#125;</span><br><span class=\"line\">\tnum :=QuickSort(s, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(s)<span class=\"number\">-1</span>)</span><br><span class=\"line\">\tfmt.Println(num)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Outputs\"><a class=\"header-anchor\" href=\"#Outputs\">¶</a>Outputs:</h5>\n<blockquote>\n<p>[7 6 5 4 3 2 1]</p>\n</blockquote>\n<h4 id=\"不足点：\"><a class=\"header-anchor\" href=\"#不足点：\">¶</a>不足点：</h4>\n<ul>\n<li>只能用在int型或者指定的类型，「不爽😕」</li>\n<li>基点在最左边「后面分析为何不好」</li>\n</ul>\n<h5 id=\"改进点：\"><a class=\"header-anchor\" href=\"#改进点：\">¶</a>改进点：</h5>\n<blockquote>\n<p>既然是需要改进，那就朝着上面的不足点来搞。</p>\n</blockquote>\n<ul>\n<li>通用类型的设计，「用go的断言：interface来做」</li>\n<li>基点的选取尽量均衡「可选项」</li>\n</ul>\n<h4 id=\"Just-do-it\"><a class=\"header-anchor\" href=\"#Just-do-it\">¶</a>Just do it</h4>\n<h5 id=\"自定义排序规则做法：\"><a class=\"header-anchor\" href=\"#自定义排序规则做法：\">¶</a>自定义排序规则做法：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSortAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partitionAll(a, left, right, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, left, mid<span class=\"number\">-1</span>, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, mid+<span class=\"number\">1</span>, right, By)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partitionAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(a[right], pivot); &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(pivot, a[left]); &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tCount <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"number\">100000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\"></span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(time.Now().Unix() - t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"Outputs：\"><a class=\"header-anchor\" href=\"#Outputs：\">¶</a>Outputs：</h6>\n<blockquote>\n<p>91</p>\n</blockquote>\n<h5 id=\"跑个benchmark看看\"><a class=\"header-anchor\" href=\"#跑个benchmark看看\">¶</a>跑个benchmark看看</h5>\n<blockquote>\n<p>上面的变量counter=10000000</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goos: darwin</span><br><span class=\"line\">goarch: amd64</span><br><span class=\"line\">cpu: Intel(R) Core(TM) i7<span class=\"number\">-9750</span>H CPU @ <span class=\"number\">2.60</span>GHz</span><br><span class=\"line\">BenchmarkQuickSortAll</span><br><span class=\"line\">BenchmarkQuickSortAll<span class=\"number\">-12</span>    \t       <span class=\"number\">1</span>\t<span class=\"number\">6287198265</span> ns/op</span><br><span class=\"line\">PASS</span><br></pre></td></tr></table></figure>\n<h4 id=\"内存占用分析\"><a class=\"header-anchor\" href=\"#内存占用分析\">¶</a>内存占用分析</h4>\n<blockquote>\n<p>改造下执行函数,加上打印内存情况:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for start&quot;</span>))</span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tSage:  i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(unsafe.Sizeof(isp))</span><br><span class=\"line\">\tfmt.Println(unsafe.Sizeof([counter]<span class=\"keyword\">interface</span>&#123;&#125;&#123;&#125;))</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all slice&quot;</span>))</span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(time.Now().Unix() - t)</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all end&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\truntime.GC()</span><br><span class=\"line\">\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;for gc end&quot;</span>))</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mem</span><span class=\"params\">(msg <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tfmt.Println(msg, <span class=\"string\">&quot;系统内存&quot;</span>, m.Sys, <span class=\"string\">&quot; 常驻内存：&quot;</span>, m.HeapInuse, <span class=\"string\">&quot;堆上分配的，gc后会归还： &quot;</span>, m.HeapAlloc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"Outputs-v2\"><a class=\"header-anchor\" href=\"#Outputs-v2\">¶</a>Outputs:</h5>\n<blockquote>\n<p>不同的系统可能会有些许偏差,关键点不在于数值大小,<br>\n关键点在于: 向系统申请的大内存,没有归还给系统,如果说要频繁的申请大内存等操作,<br>\n最好还是搞一个pool池子,不然容易内存暴增暴跌.</p>\n</blockquote>\n<ul>\n<li>此处 <em>counter=10000000</em></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> start 系统内存： <span class=\"number\">71388176</span>    常驻内存： <span class=\"number\">450560</span>     堆上分配的，gc后会归还：  <span class=\"number\">130808</span></span><br><span class=\"line\">isp占用的字节大小：「isp结构占用」 <span class=\"number\">24</span></span><br><span class=\"line\">counter的切片占用的字节大小： <span class=\"number\">160000000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> all slice 系统内存： <span class=\"number\">784408744</span>    常驻内存： <span class=\"number\">722001920</span>     堆上分配的，gc后会归还：  <span class=\"number\">719855360</span></span><br><span class=\"line\">耗时：  <span class=\"number\">10</span>  S</span><br><span class=\"line\"><span class=\"keyword\">for</span> all end 系统内存： <span class=\"number\">784408744</span>    常驻内存： <span class=\"number\">722010112</span>     堆上分配的，gc后会归还：  <span class=\"number\">719855616</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131608</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131416</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131656</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131672</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131456</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131792</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131680</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131696</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131472</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131696</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">785326248</span>    常驻内存： <span class=\"number\">417792</span>     堆上分配的，gc后会归还：  <span class=\"number\">131696</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"后续优化点\"><a class=\"header-anchor\" href=\"#后续优化点\">¶</a>后续优化点:</h4>\n<ul>\n<li>如果数量过大,可以搞个内存池</li>\n<li>如果数量庞大,建议分治,多次排序「这个数据量一般在G/T级别」</li>\n</ul>\n<h5 id=\"数量大的实验-函数内部复用\"><a class=\"header-anchor\" href=\"#数量大的实验-函数内部复用\">¶</a>数量大的实验,函数内部复用:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for start&quot;</span>))</span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tssUser := User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tSage:  i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp,ssUser)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;isp占用的字节大小：「isp结构占用」&quot;</span>, unsafe.Sizeof(isp))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;counter的切片占用的字节大小：&quot;</span>, unsafe.Sizeof([counter]<span class=\"keyword\">interface</span>&#123;&#125;&#123;&#125;))</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all slice&quot;</span>))</span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时： &quot;</span>, time.Now().Unix()-t, <span class=\"string\">&quot; S&quot;</span>)</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all end&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\ti := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i &gt; <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\truntime.GC()</span><br><span class=\"line\">\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;for gc end&quot;</span>))</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\ti++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//释放内存,断开引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> isp &#123;</span><br><span class=\"line\">\t\tisp[i] = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tisp = isp[:<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;gc before new start %d&quot;</span>, i))</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tstmp := User&#123;&#125;</span><br><span class=\"line\">\t\tstmp.Name = strconv.Itoa(i)</span><br><span class=\"line\">\t\tstmp.Age = i</span><br><span class=\"line\">\t\tstmp.Sage = i</span><br><span class=\"line\">\t\tstmp.Count = rand.Intn(counter)</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, stmp)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i%<span class=\"number\">1000000</span> == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;slice %d&quot;</span>, i))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(isp)</span></span><br><span class=\"line\">\t<span class=\"comment\">// ******关键点在于这个地方的内存会不会是前面同样打印处的倍数???</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;isp占用的字节大小：「isp结构占用」&quot;</span>, unsafe.Sizeof(isp))</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(&quot;counter的切片占用的字节大小：&quot;, unsafe.Sizeof([counter]interface&#123;&#125;&#123;&#125;))</span></span><br><span class=\"line\">\tts := time.Now().Unix()</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all slice&quot;</span>))</span><br><span class=\"line\">\t_ = QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// return a.(User).Count &gt;= b.(User).Count //按照count排序 从小到大</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a.(User).Count &lt;= b.(User).Count <span class=\"comment\">//按照count排序  从大到小</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"comment\">//fmt.Println(num)</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时： &quot;</span>, time.Now().Unix()-ts, <span class=\"string\">&quot; S&quot;</span>)</span><br><span class=\"line\">\tMem(fmt.Sprintf(<span class=\"string\">&quot;for all end&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\tia := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ia &gt; <span class=\"number\">10</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\truntime.GC()</span><br><span class=\"line\">\t\tMem(fmt.Sprintf(<span class=\"string\">&quot;for gc end&quot;</span>))</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">1</span> * time.Second)</span><br><span class=\"line\">\t\tia++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mem</span><span class=\"params\">(msg <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tfmt.Println(msg, <span class=\"string\">&quot;系统内存：&quot;</span>, m.Sys, <span class=\"string\">&quot;   常驻内存：&quot;</span>, m.HeapInuse, <span class=\"string\">&quot;    堆上分配的，gc后会归还： &quot;</span>, m.HeapAlloc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h6 id=\"Outputs-v3\"><a class=\"header-anchor\" href=\"#Outputs-v3\">¶</a>Outputs:</h6>\n<blockquote>\n<p>还是同样的,内存的大小不重要,重要的是看分布:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GOROOT=/usr/local/<span class=\"keyword\">go</span> #gosetup</span><br><span class=\"line\">GOPATH=/Users/k/<span class=\"keyword\">go</span> #gosetup</span><br><span class=\"line\">/usr/local/<span class=\"keyword\">go</span>/bin/<span class=\"keyword\">go</span> build -o /private/<span class=\"keyword\">var</span>/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go /Users/k/learn/<span class=\"keyword\">go</span>-memory/src/main/quicksort.<span class=\"keyword\">go</span> #gosetup</span><br><span class=\"line\">/private/<span class=\"keyword\">var</span>/folders/b0/hs49sy5x5qs1sw7cjxfm8gkm0000gn/T/___go_build_quicksort_go</span><br><span class=\"line\"><span class=\"keyword\">for</span> start 系统内存： <span class=\"number\">71388176</span>    常驻内存： <span class=\"number\">344064</span>     堆上分配的，gc后会归还：  <span class=\"number\">130600</span></span><br><span class=\"line\">isp占用的字节大小：「isp结构占用」 <span class=\"number\">24</span></span><br><span class=\"line\">counter的切片占用的字节大小： <span class=\"number\">1600000000</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> all slice 系统内存： <span class=\"number\">7651851800</span>    常驻内存： <span class=\"number\">7218954240</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199851600</span></span><br><span class=\"line\">耗时：  <span class=\"number\">168</span>  S</span><br><span class=\"line\"><span class=\"keyword\">for</span> all end 系统内存： <span class=\"number\">7664827928</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199852696</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853016</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853040</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853048</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">7218962432</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199853048</span></span><br><span class=\"line\">gc before <span class=\"built_in\">new</span> start <span class=\"number\">4</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1600421888</span>     堆上分配的，gc后会归还：  <span class=\"number\">1600134128</span></span><br><span class=\"line\">slice <span class=\"number\">0</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1600430080</span>     堆上分配的，gc后会归还：  <span class=\"number\">1600134560</span></span><br><span class=\"line\">slice <span class=\"number\">1000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1656332288</span>     堆上分配的，gc后会归还：  <span class=\"number\">1655853536</span></span><br><span class=\"line\">slice <span class=\"number\">2000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1712513024</span>     堆上分配的，gc后会归还：  <span class=\"number\">1711853840</span></span><br><span class=\"line\">slice <span class=\"number\">3000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1768710144</span>     堆上分配的，gc后会归还：  <span class=\"number\">1767854128</span></span><br><span class=\"line\">slice <span class=\"number\">4000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1824890880</span>     堆上分配的，gc后会归还：  <span class=\"number\">1823854192</span></span><br><span class=\"line\">slice <span class=\"number\">5000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1881079808</span>     堆上分配的，gc后会归还：  <span class=\"number\">1879854256</span></span><br><span class=\"line\">slice <span class=\"number\">6000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1937276928</span>     堆上分配的，gc后会归还：  <span class=\"number\">1935854336</span></span><br><span class=\"line\">slice <span class=\"number\">7000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">1993457664</span>     堆上分配的，gc后会归还：  <span class=\"number\">1991854400</span></span><br><span class=\"line\">slice <span class=\"number\">8000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2049662976</span>     堆上分配的，gc后会归还：  <span class=\"number\">2047854704</span></span><br><span class=\"line\">slice <span class=\"number\">9000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2105835520</span>     堆上分配的，gc后会归还：  <span class=\"number\">2103854992</span></span><br><span class=\"line\">slice <span class=\"number\">10000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2162024448</span>     堆上分配的，gc后会归还：  <span class=\"number\">2159855056</span></span><br><span class=\"line\">slice <span class=\"number\">11000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2218205184</span>     堆上分配的，gc后会归还：  <span class=\"number\">2215855120</span></span><br><span class=\"line\">slice <span class=\"number\">12000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2274410496</span>     堆上分配的，gc后会归还：  <span class=\"number\">2271855200</span></span><br><span class=\"line\">slice <span class=\"number\">13000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2330591232</span>     堆上分配的，gc后会归还：  <span class=\"number\">2327855264</span></span><br><span class=\"line\">slice <span class=\"number\">14000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2386771968</span>     堆上分配的，gc后会归还：  <span class=\"number\">2383855328</span></span><br><span class=\"line\">slice <span class=\"number\">15000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2442969088</span>     堆上分配的，gc后会归还：  <span class=\"number\">2439855392</span></span><br><span class=\"line\">slice <span class=\"number\">16000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2499149824</span>     堆上分配的，gc后会归还：  <span class=\"number\">2495855456</span></span><br><span class=\"line\">slice <span class=\"number\">17000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2555346944</span>     堆上分配的，gc后会归还：  <span class=\"number\">2551855520</span></span><br><span class=\"line\">slice <span class=\"number\">18000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2611544064</span>     堆上分配的，gc后会归还：  <span class=\"number\">2607855824</span></span><br><span class=\"line\">slice <span class=\"number\">19000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2667716608</span>     堆上分配的，gc后会归还：  <span class=\"number\">2663856112</span></span><br><span class=\"line\">slice <span class=\"number\">20000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2723921920</span>     堆上分配的，gc后会归还：  <span class=\"number\">2719856192</span></span><br><span class=\"line\">slice <span class=\"number\">21000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2780102656</span>     堆上分配的，gc后会归还：  <span class=\"number\">2775856256</span></span><br><span class=\"line\">slice <span class=\"number\">22000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2836283392</span>     堆上分配的，gc后会归还：  <span class=\"number\">2831856320</span></span><br><span class=\"line\">slice <span class=\"number\">23000000</span> 系统内存： <span class=\"number\">7665745432</span>    常驻内存： <span class=\"number\">2892472320</span>     堆上分配的，gc后会归还：  <span class=\"number\">2887856384</span></span><br><span class=\"line\">slice <span class=\"number\">24000000</span> 系统内存： <span class=\"number\">7666073112</span>    常驻内存： <span class=\"number\">2948661248</span>     堆上分配的，gc后会归还：  <span class=\"number\">2943856448</span></span><br><span class=\"line\">slice <span class=\"number\">25000000</span> 系统内存： <span class=\"number\">7666466328</span>    常驻内存： <span class=\"number\">3004841984</span>     堆上分配的，gc后会归还：  <span class=\"number\">2999856512</span></span><br><span class=\"line\">slice <span class=\"number\">26000000</span> 系统内存： <span class=\"number\">7666859544</span>    常驻内存： <span class=\"number\">3061039104</span>     堆上分配的，gc后会归还：  <span class=\"number\">3055856576</span></span><br><span class=\"line\">slice <span class=\"number\">27000000</span> 系统内存： <span class=\"number\">7667252760</span>    常驻内存： <span class=\"number\">3117228032</span>     堆上分配的，gc后会归还：  <span class=\"number\">3111856640</span></span><br><span class=\"line\">slice <span class=\"number\">28000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3173433344</span>     堆上分配的，gc后会归还：  <span class=\"number\">3167859936</span></span><br><span class=\"line\">slice <span class=\"number\">29000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3229614080</span>     堆上分配的，gc后会归还：  <span class=\"number\">3223857088</span></span><br><span class=\"line\">slice <span class=\"number\">30000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3285794816</span>     堆上分配的，gc后会归还：  <span class=\"number\">3279857376</span></span><br><span class=\"line\">slice <span class=\"number\">31000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3341983744</span>     堆上分配的，gc后会归还：  <span class=\"number\">3335857440</span></span><br><span class=\"line\">slice <span class=\"number\">32000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3398172672</span>     堆上分配的，gc后会归还：  <span class=\"number\">3391857504</span></span><br><span class=\"line\">slice <span class=\"number\">33000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3454361600</span>     堆上分配的，gc后会归还：  <span class=\"number\">3447857568</span></span><br><span class=\"line\">slice <span class=\"number\">34000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3510550528</span>     堆上分配的，gc后会归还：  <span class=\"number\">3503857632</span></span><br><span class=\"line\">slice <span class=\"number\">35000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3566739456</span>     堆上分配的，gc后会归还：  <span class=\"number\">3559857696</span></span><br><span class=\"line\">slice <span class=\"number\">36000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3622936576</span>     堆上分配的，gc后会归还：  <span class=\"number\">3615858000</span></span><br><span class=\"line\">slice <span class=\"number\">37000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3679117312</span>     堆上分配的，gc后会归还：  <span class=\"number\">3671858288</span></span><br><span class=\"line\">slice <span class=\"number\">38000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3735306240</span>     堆上分配的，gc后会归还：  <span class=\"number\">3727858352</span></span><br><span class=\"line\">slice <span class=\"number\">39000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3791495168</span>     堆上分配的，gc后会归还：  <span class=\"number\">3783858656</span></span><br><span class=\"line\">slice <span class=\"number\">40000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3847684096</span>     堆上分配的，gc后会归还：  <span class=\"number\">3839858960</span></span><br><span class=\"line\">slice <span class=\"number\">41000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3903864832</span>     堆上分配的，gc后会归还：  <span class=\"number\">3895859024</span></span><br><span class=\"line\">slice <span class=\"number\">42000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">3960061952</span>     堆上分配的，gc后会归还：  <span class=\"number\">3951859328</span></span><br><span class=\"line\">slice <span class=\"number\">43000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4016250880</span>     堆上分配的，gc后会归还：  <span class=\"number\">4007859616</span></span><br><span class=\"line\">slice <span class=\"number\">44000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4072431616</span>     堆上分配的，gc后会归还：  <span class=\"number\">4063859680</span></span><br><span class=\"line\">slice <span class=\"number\">45000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4128620544</span>     堆上分配的，gc后会归还：  <span class=\"number\">4119859744</span></span><br><span class=\"line\">slice <span class=\"number\">46000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4184809472</span>     堆上分配的，gc后会归还：  <span class=\"number\">4175859808</span></span><br><span class=\"line\">slice <span class=\"number\">47000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4240998400</span>     堆上分配的，gc后会归还：  <span class=\"number\">4231859872</span></span><br><span class=\"line\">slice <span class=\"number\">48000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4297179136</span>     堆上分配的，gc后会归还：  <span class=\"number\">4287859936</span></span><br><span class=\"line\">slice <span class=\"number\">49000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4353376256</span>     堆上分配的，gc后会归还：  <span class=\"number\">4343860000</span></span><br><span class=\"line\">slice <span class=\"number\">50000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4409565184</span>     堆上分配的，gc后会归还：  <span class=\"number\">4399860064</span></span><br><span class=\"line\">slice <span class=\"number\">51000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4465770496</span>     堆上分配的，gc后会归还：  <span class=\"number\">4455860368</span></span><br><span class=\"line\">slice <span class=\"number\">52000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4521943040</span>     堆上分配的，gc后会归还：  <span class=\"number\">4511860656</span></span><br><span class=\"line\">slice <span class=\"number\">53000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4578140160</span>     堆上分配的，gc后会归还：  <span class=\"number\">4567860720</span></span><br><span class=\"line\">slice <span class=\"number\">54000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4634320896</span>     堆上分配的，gc后会归还：  <span class=\"number\">4623860784</span></span><br><span class=\"line\">slice <span class=\"number\">55000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4690509824</span>     堆上分配的，gc后会归还：  <span class=\"number\">4679860848</span></span><br><span class=\"line\">slice <span class=\"number\">56000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4746690560</span>     堆上分配的，gc后会归还：  <span class=\"number\">4735860912</span></span><br><span class=\"line\">slice <span class=\"number\">57000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4802887680</span>     堆上分配的，gc后会归还：  <span class=\"number\">4791860976</span></span><br><span class=\"line\">slice <span class=\"number\">58000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4859068416</span>     堆上分配的，gc后会归还：  <span class=\"number\">4847861040</span></span><br><span class=\"line\">slice <span class=\"number\">59000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4915257344</span>     堆上分配的，gc后会归还：  <span class=\"number\">4903861104</span></span><br><span class=\"line\">slice <span class=\"number\">60000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">4971446272</span>     堆上分配的，gc后会归还：  <span class=\"number\">4959861168</span></span><br><span class=\"line\">slice <span class=\"number\">61000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">5027635200</span>     堆上分配的，gc后会归还：  <span class=\"number\">5015861232</span></span><br><span class=\"line\">slice <span class=\"number\">62000000</span> 系统内存： <span class=\"number\">7667318296</span>    常驻内存： <span class=\"number\">5083815936</span>     堆上分配的，gc后会归还：  <span class=\"number\">5071861296</span></span><br><span class=\"line\">slice <span class=\"number\">63000000</span> 系统内存： <span class=\"number\">7667449368</span>    常驻内存： <span class=\"number\">5140013056</span>     堆上分配的，gc后会归还：  <span class=\"number\">5127861360</span></span><br><span class=\"line\">slice <span class=\"number\">64000000</span> 系统内存： <span class=\"number\">7667842584</span>    常驻内存： <span class=\"number\">5196201984</span>     堆上分配的，gc后会归还：  <span class=\"number\">5183861424</span></span><br><span class=\"line\">slice <span class=\"number\">65000000</span> 系统内存： <span class=\"number\">7668235800</span>    常驻内存： <span class=\"number\">5252382720</span>     堆上分配的，gc后会归还：  <span class=\"number\">5239861488</span></span><br><span class=\"line\">slice <span class=\"number\">66000000</span> 系统内存： <span class=\"number\">7668629016</span>    常驻内存： <span class=\"number\">5308579840</span>     堆上分配的，gc后会归还：  <span class=\"number\">5295861552</span></span><br><span class=\"line\">slice <span class=\"number\">67000000</span> 系统内存： <span class=\"number\">7669087768</span>    常驻内存： <span class=\"number\">5364760576</span>     堆上分配的，gc后会归还：  <span class=\"number\">5351861616</span></span><br><span class=\"line\">slice <span class=\"number\">68000000</span> 系统内存： <span class=\"number\">7669480984</span>    常驻内存： <span class=\"number\">5420957696</span>     堆上分配的，gc后会归还：  <span class=\"number\">5407861680</span></span><br><span class=\"line\">slice <span class=\"number\">69000000</span> 系统内存： <span class=\"number\">7669874200</span>    常驻内存： <span class=\"number\">5477138432</span>     堆上分配的，gc后会归还：  <span class=\"number\">5463861744</span></span><br><span class=\"line\">slice <span class=\"number\">70000000</span> 系统内存： <span class=\"number\">7670267416</span>    常驻内存： <span class=\"number\">5533327360</span>     堆上分配的，gc后会归还：  <span class=\"number\">5519861808</span></span><br><span class=\"line\">slice <span class=\"number\">71000000</span> 系统内存： <span class=\"number\">7670660632</span>    常驻内存： <span class=\"number\">5589516288</span>     堆上分配的，gc后会归还：  <span class=\"number\">5575861872</span></span><br><span class=\"line\">slice <span class=\"number\">72000000</span> 系统内存： <span class=\"number\">7671119384</span>    常驻内存： <span class=\"number\">5645705216</span>     堆上分配的，gc后会归还：  <span class=\"number\">5631861936</span></span><br><span class=\"line\">slice <span class=\"number\">73000000</span> 系统内存： <span class=\"number\">7671512600</span>    常驻内存： <span class=\"number\">5701894144</span>     堆上分配的，gc后会归还：  <span class=\"number\">5687862000</span></span><br><span class=\"line\">slice <span class=\"number\">74000000</span> 系统内存： <span class=\"number\">7671905816</span>    常驻内存： <span class=\"number\">5758083072</span>     堆上分配的，gc后会归还：  <span class=\"number\">5743862064</span></span><br><span class=\"line\">slice <span class=\"number\">75000000</span> 系统内存： <span class=\"number\">7672299032</span>    常驻内存： <span class=\"number\">5814280192</span>     堆上分配的，gc后会归还：  <span class=\"number\">5799862144</span></span><br><span class=\"line\">slice <span class=\"number\">76000000</span> 系统内存： <span class=\"number\">7672692248</span>    常驻内存： <span class=\"number\">5870460928</span>     堆上分配的，gc后会归还：  <span class=\"number\">5855862224</span></span><br><span class=\"line\">slice <span class=\"number\">77000000</span> 系统内存： <span class=\"number\">7673151000</span>    常驻内存： <span class=\"number\">5926649856</span>     堆上分配的，gc后会归还：  <span class=\"number\">5911862288</span></span><br><span class=\"line\">slice <span class=\"number\">78000000</span> 系统内存： <span class=\"number\">7673544216</span>    常驻内存： <span class=\"number\">5982846976</span>     堆上分配的，gc后会归还：  <span class=\"number\">5967862352</span></span><br><span class=\"line\">slice <span class=\"number\">79000000</span> 系统内存： <span class=\"number\">7673937432</span>    常驻内存： <span class=\"number\">6039019520</span>     堆上分配的，gc后会归还：  <span class=\"number\">6023862416</span></span><br><span class=\"line\">slice <span class=\"number\">80000000</span> 系统内存： <span class=\"number\">7674330648</span>    常驻内存： <span class=\"number\">6095216640</span>     堆上分配的，gc后会归还：  <span class=\"number\">6079862480</span></span><br><span class=\"line\">slice <span class=\"number\">81000000</span> 系统内存： <span class=\"number\">7674789400</span>    常驻内存： <span class=\"number\">6151397376</span>     堆上分配的，gc后会归还：  <span class=\"number\">6135862544</span></span><br><span class=\"line\">slice <span class=\"number\">82000000</span> 系统内存： <span class=\"number\">7675182616</span>    常驻内存： <span class=\"number\">6207594496</span>     堆上分配的，gc后会归还：  <span class=\"number\">6191862624</span></span><br><span class=\"line\">slice <span class=\"number\">83000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6263808000</span>     堆上分配的，gc后会归还：  <span class=\"number\">6247863760</span></span><br><span class=\"line\">slice <span class=\"number\">84000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6319964160</span>     堆上分配的，gc后会归还：  <span class=\"number\">6303863824</span></span><br><span class=\"line\">slice <span class=\"number\">85000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6376177664</span>     堆上分配的，gc后会归还：  <span class=\"number\">6359864144</span></span><br><span class=\"line\">slice <span class=\"number\">86000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6432358400</span>     堆上分配的，gc后会归还：  <span class=\"number\">6415864432</span></span><br><span class=\"line\">slice <span class=\"number\">87000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6488530944</span>     堆上分配的，gc后会归还：  <span class=\"number\">6471858816</span></span><br><span class=\"line\">slice <span class=\"number\">88000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6544711680</span>     堆上分配的，gc后会归还：  <span class=\"number\">6527859104</span></span><br><span class=\"line\">slice <span class=\"number\">89000000</span> 系统内存： <span class=\"number\">7675379224</span>    常驻内存： <span class=\"number\">6600892416</span>     堆上分配的，gc后会归还：  <span class=\"number\">6583859168</span></span><br><span class=\"line\">slice <span class=\"number\">90000000</span> 系统内存： <span class=\"number\">7675575832</span>    常驻内存： <span class=\"number\">6657081344</span>     堆上分配的，gc后会归还：  <span class=\"number\">6639859232</span></span><br><span class=\"line\">slice <span class=\"number\">91000000</span> 系统内存： <span class=\"number\">7676034584</span>    常驻内存： <span class=\"number\">6713278464</span>     堆上分配的，gc后会归还：  <span class=\"number\">6695859296</span></span><br><span class=\"line\">slice <span class=\"number\">92000000</span> 系统内存： <span class=\"number\">7676427800</span>    常驻内存： <span class=\"number\">6769459200</span>     堆上分配的，gc后会归还：  <span class=\"number\">6751859360</span></span><br><span class=\"line\">slice <span class=\"number\">93000000</span> 系统内存： <span class=\"number\">7676821016</span>    常驻内存： <span class=\"number\">6825648128</span>     堆上分配的，gc后会归还：  <span class=\"number\">6807859424</span></span><br><span class=\"line\">slice <span class=\"number\">94000000</span> 系统内存： <span class=\"number\">7677214232</span>    常驻内存： <span class=\"number\">6881837056</span>     堆上分配的，gc后会归还：  <span class=\"number\">6863859488</span></span><br><span class=\"line\">slice <span class=\"number\">95000000</span> 系统内存： <span class=\"number\">7677672984</span>    常驻内存： <span class=\"number\">6938025984</span>     堆上分配的，gc后会归还：  <span class=\"number\">6919859552</span></span><br><span class=\"line\">slice <span class=\"number\">96000000</span> 系统内存： <span class=\"number\">7678066200</span>    常驻内存： <span class=\"number\">6994206720</span>     堆上分配的，gc后会归还：  <span class=\"number\">6975859616</span></span><br><span class=\"line\">slice <span class=\"number\">97000000</span> 系统内存： <span class=\"number\">7678459416</span>    常驻内存： <span class=\"number\">7050403840</span>     堆上分配的，gc后会归还：  <span class=\"number\">7031859680</span></span><br><span class=\"line\">slice <span class=\"number\">98000000</span> 系统内存： <span class=\"number\">7678852632</span>    常驻内存： <span class=\"number\">7106592768</span>     堆上分配的，gc后会归还：  <span class=\"number\">7087859744</span></span><br><span class=\"line\">slice <span class=\"number\">99000000</span> 系统内存： <span class=\"number\">7679245848</span>    常驻内存： <span class=\"number\">7162773504</span>     堆上分配的，gc后会归还：  <span class=\"number\">7143859808</span></span><br><span class=\"line\">isp占用的字节大小：「isp结构占用」 <span class=\"number\">24</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> all slice 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">7218970624</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199859808</span></span><br><span class=\"line\">耗时：  <span class=\"number\">187</span>  S</span><br><span class=\"line\"><span class=\"keyword\">for</span> all end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">7218970624</span>     堆上分配的，gc后会归还：  <span class=\"number\">7199857304</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">434176</span>     堆上分配的，gc后会归还：  <span class=\"number\">131752</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131752</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131984</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131768</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131768</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> gc end 系统内存： <span class=\"number\">7679704600</span>    常驻内存： <span class=\"number\">425984</span>     堆上分配的，gc后会归还：  <span class=\"number\">131992</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Feb 19 2021 12:10:17 GMT+0800 (中国标准时间)","title":"「37」Quick Sort快速排序","path":"archives/aa75061e.html","eyeCatchImage":null,"excerpt":"<!-- toc -->\n<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>最近在想一个问题：Go里面的sort包到底是怎么实现的，，，，<br>\n想着想着就想到了快速排序，就试着手撕了一个，</p>\n<p>有个关键问题，所有的都是针对int或者其它特定的类型，</p>\n<p><em>那如何让排序算法通用性呢，</em></p>","date":{"_isAMomentObject":true,"_i":"2021-02-19T04:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-19T04:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":15416},{"title":"「38」上亿数据的快速排序","date":"2021-02-21T12:10:17.000Z","updated":"2021-02-21T12:10:17.000Z","keywords":"Go,Quick Sort,Sort","mathjax":true,"abbrlink":"26af015","_content":"\n### 前序\n\n前面说到了快速排序的自定义通用方案:\n\n[「37」Quick Sort快速排序](https://blog.imrcrab.com/archives/aa75061e.html#more)\n\n>但是又有一个新想法: 1亿条数据,100M内存,怎么搞?\n\n<!--more-->\n\n### 分析\n\n#### 问题\n\n* 内存不足以放1亿条数据\n* 即使够用,一次把1亿条数据放入内存,如果说高并发下,每次都是1亿,消耗过大!\n\n#### 解决思路:\n\n大化小,小归大「归并算法的思想」,利用磁盘文件形式进行存储,比较,再存储..\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/sort_1.png)\n\n\n#### 代码部分「其它语言类似」:\n\n\n```go\n\ntype User struct {\n\tName  string\n\tAge   int\n\tCount int\n}\n\nconst Counter = 100000000\n\nvar SplitNum = Counter / 10000000\n\nfunc QuickSortAll(a []interface{}, left, right int, By func(a, b interface{}) bool) []interface{} {\n\tif left < right {\n\t\tmid := partitionAll(a, left, right, By)\n\t\tQuickSortAll(a, left, mid-1, By)\n\t\tQuickSortAll(a, mid+1, right, By)\n\t}\n\treturn a\n\n}\n\nfunc partitionAll(a []interface{}, left int, right int, By func(a, b interface{}) bool) int {\n\tpivot := a[left]\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; {\n\t\tfor ; left < right && By(a[right], pivot); {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && By(pivot, a[left]); {\n\t\t\tleft++\n\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\nfunc StartSort(dirName string) string {\n\tvar lock sync.Mutex\n\tresultPaths := make([]string, 0)\n\tgroup, _ := errgroup.WithContext(context.TODO())\n\tfor ia := 0; ia < Counter; ia += SplitNum * 2 {\n\t\ti := ia\n\t\t//group.Go(func() error {\n\t\tMem(\"compareTwoFileObject\")\n\t\tfilePath, _ := compareTwoFileObject(dirName+\"/\"+strconv.Itoa(i)+\"_split_quicksort.txt\",\n\t\t\tdirName+\"/\"+strconv.Itoa(i+SplitNum)+\"_split_quicksort.txt\", dirName, SortBy)\n\t\tlock.Lock()\n\n\t\tresultPaths = append(resultPaths, filePath)\n\t\tlock.Unlock()\n\t\t//return nil\n\t\t//})\n\t}\n\tgroup.Wait()\n\n\treturn recursionDeal(resultPaths, dirName, lock)\n}\nfunc recursionDeal(paths []string, dirName string, lock sync.Mutex) string {\n\ttmpPaths := make([]string, 0)\n\tif len(paths) == 1 {\n\t\treturn paths[0]\n\t}\n\n\tgroup, _ := errgroup.WithContext(context.TODO())\n\tfor ia := 0; ia < len(paths); ia += 2 {\n\t\ti := ia\n\t\tif len(paths)%2 != 0 && i == len(paths)-1 {\n\t\t\tlock.Lock()\n\t\t\ttmpPaths = append(tmpPaths, paths[i])\n\t\t\tlock.Unlock()\n\t\t\tbreak\n\t\t}\n\n\t\t//group.Go(func() error {\n\t\tfilePath, _ := compareTwoFileObjectForRecursion(dirName+\"/\"+paths[i], dirName+\"/\"+paths[i+1], dirName, SortBy)\n\t\tlock.Lock()\n\t\ttmpPaths = append(tmpPaths, filePath)\n\t\tlock.Unlock()\n\t\tMem(\"recursionDeal：\" + filePath)\n\t\t//return nil\n\t\t//})\n\t}\n\t_ = group.Wait()\n\treturn recursionDeal(tmpPaths, dirName, lock)\n}\n\nfunc compareTwoFileObject(filePathBefore, filePathAfter, dirName string, By func(a, b interface{}) bool) (resultFilePath string, errRet error) {\n\tdefer func() {\n\t\tos.Remove(filePathBefore)\n\t\tos.Remove(filePathAfter)\n\t}()\n\tfileBefore, _ := readObjectFromFile(filePathBefore)\n\tfileAfter, _ := readObjectFromFile(filePathAfter)\n\tresultFilePath = sha1s(strconv.Itoa(int(time.Now().UnixNano()))) + \"_split_quicksort.txt\"\n\tf, _ := os.OpenFile(dirName+\"/\"+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\n\tflag := 0\n\tflagResultAfter := 0\n\tfor i := 0; i < len(fileBefore); i++ {\n\t\ttmp := fileBefore[i]\n\n\t\tfor ai := flag; ai < len(fileAfter); ai++ {\n\t\t\tif flag+1 == len(fileAfter) {\n\t\t\t\t// fileAfter遍历完了\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif len(fileAfter) == ai+1 {\n\t\t\t\t// 最后赋值\n\t\t\t\tflag = ai\n\t\t\t}\n\n\t\t\tif By(tmp, fileAfter[ai]) {\n\t\t\t\ttmpJson, _ := json.Marshal(fileAfter[ai])\n\t\t\t\tf.WriteString(string(tmpJson) + \"\\n\")\n\t\t\t\tflagResultAfter = ai\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tflag = ai\n\t\t\tbreak\n\t\t}\n\n\t\ttmpJson, _ := json.Marshal(tmp)\n\t\tf.WriteString(string(tmpJson) + \"\\n\")\n\t}\n\n\tif fileAfter == nil {\n\t\tf.Close()\n\t\treturn\n\t}\n\n\tif flagResultAfter < len(fileAfter) {\n\t\tflagResultAfter++\n\t}\n\n\tfileAfter = fileAfter[flagResultAfter:]\n\tfor _, v := range fileAfter {\n\t\ttmpJson, _ := json.Marshal(v)\n\t\tf.WriteString(string(tmpJson) + \"\\n\")\n\t}\n\n\tf.Close()\n\treturn\n}\n\n// 读取文件中的数据,用于排序\nfunc readObjectFromFile(filePath string) (users []interface{}, errRet error) {\n\tfileBefore, err := os.Open(filePath)\n\tdefer fileBefore.Close()\n\tif err != nil {\n\t\terrRet = err\n\t\treturn\n\t}\n\n\tbrBefore := bufio.NewReader(fileBefore)\n\tfor {\n\t\ta, _, c := brBefore.ReadLine()\n\t\tif c == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif len(a) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tusers = append(users, resolveObject(a))\n\t}\n\n\tif len(users) == 0 {\n\t\treturn\n\t}\n\n\tQuickSortAll(users, 0, len(users)-1, SortBy)\n\treturn\n}\n\nfunc Mem(msg string) {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tfmt.Println(msg, \"系统内存：\", m.Sys, \"   常驻内存：\", m.HeapInuse, \"    堆上分配的，gc后会归还： \", m.HeapAlloc)\n}\n\n\n// 对于两个排序好的文件,进行比较并存储\nfunc compareTwoFileObjectForRecursion(filePathBefore, filePathAfter, dirName string, By func(a, b interface{}) bool) (resultFilePath string, errRet error) {\n\n\tresultFilePath = sha1s(strconv.Itoa(int(time.Now().UnixNano()))) + \"_split_quicksort.txt\"\n\tf, _ := os.OpenFile(dirName+\"/\"+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\n\tdefer func() {\n\t\tos.Remove(filePathBefore)\n\t\tos.Remove(filePathAfter)\n\t}()\n\tfileBefore, err := os.Open(filePathBefore)\n\tdefer fileBefore.Close()\n\tif err != nil {\n\t\terrRet = err\n\t\treturn\n\t}\n\tbrBefore := bufio.NewReader(fileBefore)\n\n\tfileAfter, err := os.Open(filePathAfter)\n\tdefer fileAfter.Close()\n\tif err != nil {\n\t\terrRet = err\n\t\treturn\n\t}\n\tbrAfter := bufio.NewReader(fileAfter)\n\n\tfa := true\n\tfb := true\n\tvar va, vb []byte\n\n\tfor {\n\t\tvar ca, cb error\n\t\tif fa {\n\t\t\ta, _, cae := brBefore.ReadLine()\n\t\t\tva = a\n\t\t\tca = cae\n\t\t}\n\n\t\tif fb {\n\t\t\tb, _, cbe := brAfter.ReadLine()\n\t\t\tvb = b\n\t\t\tcb = cbe\n\t\t}\n\n\t\tif ca == io.EOF || cb == io.EOF {\n\t\t\tbreak\n\t\t}\n\n\t\tif len(va) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tif len(vb) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tbUser := User{}\n\t\t_ = json.Unmarshal(vb, &bUser)\n\n\t\tif By(resolveObject(va), resolveObject(vb)) {\n\n\t\t\tf.WriteString(string(vb) + \"\\n\")\n\t\t\tfb = true\n\t\t\tfa = false\n\t\t\tcontinue\n\t\t} else {\n\n\t\t\tf.WriteString(string(va) + \"\\n\")\n\t\t\tfa = true\n\t\t\tfb = false\n\t\t\tcontinue\n\t\t}\n\t}\n\n\tfor {\n\t\ta, _, ca := brBefore.ReadLine()\n\t\tif ca == io.EOF {\n\t\t\tbreak\n\t\t}\n\n\t\tf.WriteString(string(a) + \"\\n\")\n\t\tcontinue\n\t}\n\n\tfor {\n\t\tb, _, ca := brBefore.ReadLine()\n\t\tif ca == io.EOF {\n\t\t\tbreak\n\t\t}\n\n\t\tf.WriteString(string(b) + \"\\n\")\n\t\tcontinue\n\t}\n\n\tMem(filePathBefore + \"=====>\" + filePathAfter)\n\n\tf.Close()\n\treturn\n}\n\n// 自定义序列化对象\nfunc resolveObject(a []byte) User {\n\tuser := User{}\n\t_ = json.Unmarshal(a, &user)\n\treturn user\n}\n\n// 自定义排序\nfunc SortBy(a, b interface{}) bool {\n\treturn a.(User).Age <= b.(User).Age //按照count排序\n}\n\nfunc sha1s(s string) string {\n\tr := sha1.Sum([]byte(s))\n\treturn hex.EncodeToString(r[:])\n}\n\n```\n\n##### 注意事项:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_110111.png)\n\n\n\n>主函数,这次的数据都是自己造的,实景就按照某某某来源来操作把.\n\n```go\nfunc main() {\n\tdirName := \"tmp_quick_sort\" + time.Now().Format(\"2006_01_02_15_04_05\")\n\terr2 := os.Mkdir(dirName, os.ModeAppend|os.ModePerm)\n\tif err2 != nil {\n\t\treturn\n\t}\n\tf, err := os.OpenFile(dirName+\"/0_split_quicksort.txt\", os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\tif err != nil {\n\t\tfmt.Println(f)\n\t}\n\tt := time.Now().Unix()\n\tMem(\"before write file\")\n\tfor i := 0; i < quicksort.Counter; i++ {\n\t\tauser := quicksort.User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(quicksort.Counter),\n\t\t}\n\t\tmarshal, _ := json.Marshal(auser)\n\n\t\tf.Write(marshal)\n\t\tf.Write([]byte(\"\\n\"))\n\t\tif i%quicksort.SplitNum == 0 {\n\t\t\tf.Close()\n\t\t\tMem(strconv.Itoa(i) + \"after write file\")\n\t\t\tf, err = os.OpenFile(dirName+\"/\"+strconv.Itoa(i)+\"_split_quicksort.txt\", os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\t\t}\n\t}\n\tf.Close()\n\truntime.GC()\n\tMem(\"after write file\")\n\n\tfmt.Println(\"filename: \", quicksort.StartSort(dirName))\n\n\tfmt.Println(time.Now().Unix() - t)\n\tMem(\"last msg\")\n\n\tfmt.Println(unsafe.Sizeof([100000]quicksort.User{}))\n}\n\n```\n\n#### 结果到底是否如设计的那样可行呢?\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_102841.png)\n\n\n##### 内存打印的实际情况\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_103339.png)\n\n\n### 后续改进\n\n#### 痛点:\n* 单个服务器,速度太慢\n* 单线程,有点慢「磁盘读写速度不快的,建议就使用单线程」\n* 没有断点「电」继续的机制.\n\n#### 改进方法:\n\n* 多服务器计算\n* 改进排序,单服务器可以分左右两部分\n* 增加任务记录机制,用于断点继续任务.\n\n### End","source":"_posts/38-上亿数据的快速排序.md","raw":"---\ntitle: 「38」上亿数据的快速排序\ndate: '2021/2/21 20:10:17'\nupdated: '2021/2/21 20:10:17'\nkeywords: 'Go,Quick Sort,Sort'\ntags:\n  - Go\n  - Sort\n  - Day\nmathjax: true\nabbrlink: 26af015\n---\n\n### 前序\n\n前面说到了快速排序的自定义通用方案:\n\n[「37」Quick Sort快速排序](https://blog.imrcrab.com/archives/aa75061e.html#more)\n\n>但是又有一个新想法: 1亿条数据,100M内存,怎么搞?\n\n<!--more-->\n\n### 分析\n\n#### 问题\n\n* 内存不足以放1亿条数据\n* 即使够用,一次把1亿条数据放入内存,如果说高并发下,每次都是1亿,消耗过大!\n\n#### 解决思路:\n\n大化小,小归大「归并算法的思想」,利用磁盘文件形式进行存储,比较,再存储..\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/sort_1.png)\n\n\n#### 代码部分「其它语言类似」:\n\n\n```go\n\ntype User struct {\n\tName  string\n\tAge   int\n\tCount int\n}\n\nconst Counter = 100000000\n\nvar SplitNum = Counter / 10000000\n\nfunc QuickSortAll(a []interface{}, left, right int, By func(a, b interface{}) bool) []interface{} {\n\tif left < right {\n\t\tmid := partitionAll(a, left, right, By)\n\t\tQuickSortAll(a, left, mid-1, By)\n\t\tQuickSortAll(a, mid+1, right, By)\n\t}\n\treturn a\n\n}\n\nfunc partitionAll(a []interface{}, left int, right int, By func(a, b interface{}) bool) int {\n\tpivot := a[left]\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; {\n\t\tfor ; left < right && By(a[right], pivot); {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && By(pivot, a[left]); {\n\t\t\tleft++\n\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\nfunc StartSort(dirName string) string {\n\tvar lock sync.Mutex\n\tresultPaths := make([]string, 0)\n\tgroup, _ := errgroup.WithContext(context.TODO())\n\tfor ia := 0; ia < Counter; ia += SplitNum * 2 {\n\t\ti := ia\n\t\t//group.Go(func() error {\n\t\tMem(\"compareTwoFileObject\")\n\t\tfilePath, _ := compareTwoFileObject(dirName+\"/\"+strconv.Itoa(i)+\"_split_quicksort.txt\",\n\t\t\tdirName+\"/\"+strconv.Itoa(i+SplitNum)+\"_split_quicksort.txt\", dirName, SortBy)\n\t\tlock.Lock()\n\n\t\tresultPaths = append(resultPaths, filePath)\n\t\tlock.Unlock()\n\t\t//return nil\n\t\t//})\n\t}\n\tgroup.Wait()\n\n\treturn recursionDeal(resultPaths, dirName, lock)\n}\nfunc recursionDeal(paths []string, dirName string, lock sync.Mutex) string {\n\ttmpPaths := make([]string, 0)\n\tif len(paths) == 1 {\n\t\treturn paths[0]\n\t}\n\n\tgroup, _ := errgroup.WithContext(context.TODO())\n\tfor ia := 0; ia < len(paths); ia += 2 {\n\t\ti := ia\n\t\tif len(paths)%2 != 0 && i == len(paths)-1 {\n\t\t\tlock.Lock()\n\t\t\ttmpPaths = append(tmpPaths, paths[i])\n\t\t\tlock.Unlock()\n\t\t\tbreak\n\t\t}\n\n\t\t//group.Go(func() error {\n\t\tfilePath, _ := compareTwoFileObjectForRecursion(dirName+\"/\"+paths[i], dirName+\"/\"+paths[i+1], dirName, SortBy)\n\t\tlock.Lock()\n\t\ttmpPaths = append(tmpPaths, filePath)\n\t\tlock.Unlock()\n\t\tMem(\"recursionDeal：\" + filePath)\n\t\t//return nil\n\t\t//})\n\t}\n\t_ = group.Wait()\n\treturn recursionDeal(tmpPaths, dirName, lock)\n}\n\nfunc compareTwoFileObject(filePathBefore, filePathAfter, dirName string, By func(a, b interface{}) bool) (resultFilePath string, errRet error) {\n\tdefer func() {\n\t\tos.Remove(filePathBefore)\n\t\tos.Remove(filePathAfter)\n\t}()\n\tfileBefore, _ := readObjectFromFile(filePathBefore)\n\tfileAfter, _ := readObjectFromFile(filePathAfter)\n\tresultFilePath = sha1s(strconv.Itoa(int(time.Now().UnixNano()))) + \"_split_quicksort.txt\"\n\tf, _ := os.OpenFile(dirName+\"/\"+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\n\tflag := 0\n\tflagResultAfter := 0\n\tfor i := 0; i < len(fileBefore); i++ {\n\t\ttmp := fileBefore[i]\n\n\t\tfor ai := flag; ai < len(fileAfter); ai++ {\n\t\t\tif flag+1 == len(fileAfter) {\n\t\t\t\t// fileAfter遍历完了\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tif len(fileAfter) == ai+1 {\n\t\t\t\t// 最后赋值\n\t\t\t\tflag = ai\n\t\t\t}\n\n\t\t\tif By(tmp, fileAfter[ai]) {\n\t\t\t\ttmpJson, _ := json.Marshal(fileAfter[ai])\n\t\t\t\tf.WriteString(string(tmpJson) + \"\\n\")\n\t\t\t\tflagResultAfter = ai\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tflag = ai\n\t\t\tbreak\n\t\t}\n\n\t\ttmpJson, _ := json.Marshal(tmp)\n\t\tf.WriteString(string(tmpJson) + \"\\n\")\n\t}\n\n\tif fileAfter == nil {\n\t\tf.Close()\n\t\treturn\n\t}\n\n\tif flagResultAfter < len(fileAfter) {\n\t\tflagResultAfter++\n\t}\n\n\tfileAfter = fileAfter[flagResultAfter:]\n\tfor _, v := range fileAfter {\n\t\ttmpJson, _ := json.Marshal(v)\n\t\tf.WriteString(string(tmpJson) + \"\\n\")\n\t}\n\n\tf.Close()\n\treturn\n}\n\n// 读取文件中的数据,用于排序\nfunc readObjectFromFile(filePath string) (users []interface{}, errRet error) {\n\tfileBefore, err := os.Open(filePath)\n\tdefer fileBefore.Close()\n\tif err != nil {\n\t\terrRet = err\n\t\treturn\n\t}\n\n\tbrBefore := bufio.NewReader(fileBefore)\n\tfor {\n\t\ta, _, c := brBefore.ReadLine()\n\t\tif c == io.EOF {\n\t\t\tbreak\n\t\t}\n\t\tif len(a) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tusers = append(users, resolveObject(a))\n\t}\n\n\tif len(users) == 0 {\n\t\treturn\n\t}\n\n\tQuickSortAll(users, 0, len(users)-1, SortBy)\n\treturn\n}\n\nfunc Mem(msg string) {\n\tvar m runtime.MemStats\n\truntime.ReadMemStats(&m)\n\tfmt.Println(msg, \"系统内存：\", m.Sys, \"   常驻内存：\", m.HeapInuse, \"    堆上分配的，gc后会归还： \", m.HeapAlloc)\n}\n\n\n// 对于两个排序好的文件,进行比较并存储\nfunc compareTwoFileObjectForRecursion(filePathBefore, filePathAfter, dirName string, By func(a, b interface{}) bool) (resultFilePath string, errRet error) {\n\n\tresultFilePath = sha1s(strconv.Itoa(int(time.Now().UnixNano()))) + \"_split_quicksort.txt\"\n\tf, _ := os.OpenFile(dirName+\"/\"+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\n\tdefer func() {\n\t\tos.Remove(filePathBefore)\n\t\tos.Remove(filePathAfter)\n\t}()\n\tfileBefore, err := os.Open(filePathBefore)\n\tdefer fileBefore.Close()\n\tif err != nil {\n\t\terrRet = err\n\t\treturn\n\t}\n\tbrBefore := bufio.NewReader(fileBefore)\n\n\tfileAfter, err := os.Open(filePathAfter)\n\tdefer fileAfter.Close()\n\tif err != nil {\n\t\terrRet = err\n\t\treturn\n\t}\n\tbrAfter := bufio.NewReader(fileAfter)\n\n\tfa := true\n\tfb := true\n\tvar va, vb []byte\n\n\tfor {\n\t\tvar ca, cb error\n\t\tif fa {\n\t\t\ta, _, cae := brBefore.ReadLine()\n\t\t\tva = a\n\t\t\tca = cae\n\t\t}\n\n\t\tif fb {\n\t\t\tb, _, cbe := brAfter.ReadLine()\n\t\t\tvb = b\n\t\t\tcb = cbe\n\t\t}\n\n\t\tif ca == io.EOF || cb == io.EOF {\n\t\t\tbreak\n\t\t}\n\n\t\tif len(va) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tif len(vb) == 0 {\n\t\t\tcontinue\n\t\t}\n\n\t\tbUser := User{}\n\t\t_ = json.Unmarshal(vb, &bUser)\n\n\t\tif By(resolveObject(va), resolveObject(vb)) {\n\n\t\t\tf.WriteString(string(vb) + \"\\n\")\n\t\t\tfb = true\n\t\t\tfa = false\n\t\t\tcontinue\n\t\t} else {\n\n\t\t\tf.WriteString(string(va) + \"\\n\")\n\t\t\tfa = true\n\t\t\tfb = false\n\t\t\tcontinue\n\t\t}\n\t}\n\n\tfor {\n\t\ta, _, ca := brBefore.ReadLine()\n\t\tif ca == io.EOF {\n\t\t\tbreak\n\t\t}\n\n\t\tf.WriteString(string(a) + \"\\n\")\n\t\tcontinue\n\t}\n\n\tfor {\n\t\tb, _, ca := brBefore.ReadLine()\n\t\tif ca == io.EOF {\n\t\t\tbreak\n\t\t}\n\n\t\tf.WriteString(string(b) + \"\\n\")\n\t\tcontinue\n\t}\n\n\tMem(filePathBefore + \"=====>\" + filePathAfter)\n\n\tf.Close()\n\treturn\n}\n\n// 自定义序列化对象\nfunc resolveObject(a []byte) User {\n\tuser := User{}\n\t_ = json.Unmarshal(a, &user)\n\treturn user\n}\n\n// 自定义排序\nfunc SortBy(a, b interface{}) bool {\n\treturn a.(User).Age <= b.(User).Age //按照count排序\n}\n\nfunc sha1s(s string) string {\n\tr := sha1.Sum([]byte(s))\n\treturn hex.EncodeToString(r[:])\n}\n\n```\n\n##### 注意事项:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_110111.png)\n\n\n\n>主函数,这次的数据都是自己造的,实景就按照某某某来源来操作把.\n\n```go\nfunc main() {\n\tdirName := \"tmp_quick_sort\" + time.Now().Format(\"2006_01_02_15_04_05\")\n\terr2 := os.Mkdir(dirName, os.ModeAppend|os.ModePerm)\n\tif err2 != nil {\n\t\treturn\n\t}\n\tf, err := os.OpenFile(dirName+\"/0_split_quicksort.txt\", os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\tif err != nil {\n\t\tfmt.Println(f)\n\t}\n\tt := time.Now().Unix()\n\tMem(\"before write file\")\n\tfor i := 0; i < quicksort.Counter; i++ {\n\t\tauser := quicksort.User{\n\t\t\tName:  strconv.Itoa(i),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(quicksort.Counter),\n\t\t}\n\t\tmarshal, _ := json.Marshal(auser)\n\n\t\tf.Write(marshal)\n\t\tf.Write([]byte(\"\\n\"))\n\t\tif i%quicksort.SplitNum == 0 {\n\t\t\tf.Close()\n\t\t\tMem(strconv.Itoa(i) + \"after write file\")\n\t\t\tf, err = os.OpenFile(dirName+\"/\"+strconv.Itoa(i)+\"_split_quicksort.txt\", os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)\n\t\t}\n\t}\n\tf.Close()\n\truntime.GC()\n\tMem(\"after write file\")\n\n\tfmt.Println(\"filename: \", quicksort.StartSort(dirName))\n\n\tfmt.Println(time.Now().Unix() - t)\n\tMem(\"last msg\")\n\n\tfmt.Println(unsafe.Sizeof([100000]quicksort.User{}))\n}\n\n```\n\n#### 结果到底是否如设计的那样可行呢?\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_102841.png)\n\n\n##### 内存打印的实际情况\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_103339.png)\n\n\n### 后续改进\n\n#### 痛点:\n* 单个服务器,速度太慢\n* 单线程,有点慢「磁盘读写速度不快的,建议就使用单线程」\n* 没有断点「电」继续的机制.\n\n#### 改进方法:\n\n* 多服务器计算\n* 改进排序,单服务器可以分左右两部分\n* 增加任务记录机制,用于断点继续任务.\n\n### End","slug":"38-上亿数据的快速排序","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d55002qzfqx1vj42y42","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>前面说到了快速排序的自定义通用方案:</p>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html#more\">「37」Quick Sort快速排序</a></p>\n<blockquote>\n<p>但是又有一个新想法: 1亿条数据,100M内存,怎么搞?</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"分析\"><a class=\"header-anchor\" href=\"#分析\">¶</a>分析</h3>\n<h4 id=\"问题\"><a class=\"header-anchor\" href=\"#问题\">¶</a>问题</h4>\n<ul>\n<li>内存不足以放1亿条数据</li>\n<li>即使够用,一次把1亿条数据放入内存,如果说高并发下,每次都是1亿,消耗过大!</li>\n</ul>\n<h4 id=\"解决思路\"><a class=\"header-anchor\" href=\"#解决思路\">¶</a>解决思路:</h4>\n<p>大化小,小归大「归并算法的思想」,利用磁盘文件形式进行存储,比较,再存储…</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/sort_1.png\" alt=\"\"></p>\n<h4 id=\"代码部分「其它语言类似」\"><a class=\"header-anchor\" href=\"#代码部分「其它语言类似」\">¶</a>代码部分「其它语言类似」:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tCount <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Counter = <span class=\"number\">100000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> SplitNum = Counter / <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSortAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partitionAll(a, left, right, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, left, mid<span class=\"number\">-1</span>, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, mid+<span class=\"number\">1</span>, right, By)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partitionAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(a[right], pivot); &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(pivot, a[left]); &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StartSort</span><span class=\"params\">(dirName <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> lock sync.Mutex</span><br><span class=\"line\">\tresultPaths := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tgroup, _ := errgroup.WithContext(context.TODO())</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; Counter; ia += SplitNum * <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\ti := ia</span><br><span class=\"line\">\t\t<span class=\"comment\">//group.Go(func() error &#123;</span></span><br><span class=\"line\">\t\tMem(<span class=\"string\">&quot;compareTwoFileObject&quot;</span>)</span><br><span class=\"line\">\t\tfilePath, _ := compareTwoFileObject(dirName+<span class=\"string\">&quot;/&quot;</span>+strconv.Itoa(i)+<span class=\"string\">&quot;_split_quicksort.txt&quot;</span>,</span><br><span class=\"line\">\t\t\tdirName+<span class=\"string\">&quot;/&quot;</span>+strconv.Itoa(i+SplitNum)+<span class=\"string\">&quot;_split_quicksort.txt&quot;</span>, dirName, SortBy)</span><br><span class=\"line\">\t\tlock.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tresultPaths = <span class=\"built_in\">append</span>(resultPaths, filePath)</span><br><span class=\"line\">\t\tlock.Unlock()</span><br><span class=\"line\">\t\t<span class=\"comment\">//return nil</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgroup.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> recursionDeal(resultPaths, dirName, lock)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">recursionDeal</span><span class=\"params\">(paths []<span class=\"type\">string</span>, dirName <span class=\"type\">string</span>, lock sync.Mutex)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\ttmpPaths := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(paths) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> paths[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgroup, _ := errgroup.WithContext(context.TODO())</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; <span class=\"built_in\">len</span>(paths); ia += <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\ti := ia</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(paths)%<span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; i == <span class=\"built_in\">len</span>(paths)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\tlock.Lock()</span><br><span class=\"line\">\t\t\ttmpPaths = <span class=\"built_in\">append</span>(tmpPaths, paths[i])</span><br><span class=\"line\">\t\t\tlock.Unlock()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//group.Go(func() error &#123;</span></span><br><span class=\"line\">\t\tfilePath, _ := compareTwoFileObjectForRecursion(dirName+<span class=\"string\">&quot;/&quot;</span>+paths[i], dirName+<span class=\"string\">&quot;/&quot;</span>+paths[i+<span class=\"number\">1</span>], dirName, SortBy)</span><br><span class=\"line\">\t\tlock.Lock()</span><br><span class=\"line\">\t\ttmpPaths = <span class=\"built_in\">append</span>(tmpPaths, filePath)</span><br><span class=\"line\">\t\tlock.Unlock()</span><br><span class=\"line\">\t\tMem(<span class=\"string\">&quot;recursionDeal：&quot;</span> + filePath)</span><br><span class=\"line\">\t\t<span class=\"comment\">//return nil</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_ = group.Wait()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> recursionDeal(tmpPaths, dirName, lock)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compareTwoFileObject</span><span class=\"params\">(filePathBefore, filePathAfter, dirName <span class=\"type\">string</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) (resultFilePath <span class=\"type\">string</span>, errRet <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tos.Remove(filePathBefore)</span><br><span class=\"line\">\t\tos.Remove(filePathAfter)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfileBefore, _ := readObjectFromFile(filePathBefore)</span><br><span class=\"line\">\tfileAfter, _ := readObjectFromFile(filePathAfter)</span><br><span class=\"line\">\tresultFilePath = sha1s(strconv.Itoa(<span class=\"type\">int</span>(time.Now().UnixNano()))) + <span class=\"string\">&quot;_split_quicksort.txt&quot;</span></span><br><span class=\"line\">\tf, _ := os.OpenFile(dirName+<span class=\"string\">&quot;/&quot;</span>+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag := <span class=\"number\">0</span></span><br><span class=\"line\">\tflagResultAfter := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(fileBefore); i++ &#123;</span><br><span class=\"line\">\t\ttmp := fileBefore[i]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ai := flag; ai &lt; <span class=\"built_in\">len</span>(fileAfter); ai++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> flag+<span class=\"number\">1</span> == <span class=\"built_in\">len</span>(fileAfter) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// fileAfter遍历完了</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(fileAfter) == ai+<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 最后赋值</span></span><br><span class=\"line\">\t\t\t\tflag = ai</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> By(tmp, fileAfter[ai]) &#123;</span><br><span class=\"line\">\t\t\t\ttmpJson, _ := json.Marshal(fileAfter[ai])</span><br><span class=\"line\">\t\t\t\tf.WriteString(<span class=\"type\">string</span>(tmpJson) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\t\tflagResultAfter = ai</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tflag = ai</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttmpJson, _ := json.Marshal(tmp)</span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(tmpJson) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fileAfter == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tf.Close()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flagResultAfter &lt; <span class=\"built_in\">len</span>(fileAfter) &#123;</span><br><span class=\"line\">\t\tflagResultAfter++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileAfter = fileAfter[flagResultAfter:]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> fileAfter &#123;</span><br><span class=\"line\">\t\ttmpJson, _ := json.Marshal(v)</span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(tmpJson) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取文件中的数据,用于排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readObjectFromFile</span><span class=\"params\">(filePath <span class=\"type\">string</span>)</span></span> (users []<span class=\"keyword\">interface</span>&#123;&#125;, errRet <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\tfileBefore, err := os.Open(filePath)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fileBefore.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\terrRet = err</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbrBefore := bufio.NewReader(fileBefore)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ta, _, c := brBefore.ReadLine()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> c == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tusers = <span class=\"built_in\">append</span>(users, resolveObject(a))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(users) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQuickSortAll(users, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(users)<span class=\"number\">-1</span>, SortBy)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mem</span><span class=\"params\">(msg <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tfmt.Println(msg, <span class=\"string\">&quot;系统内存：&quot;</span>, m.Sys, <span class=\"string\">&quot;   常驻内存：&quot;</span>, m.HeapInuse, <span class=\"string\">&quot;    堆上分配的，gc后会归还： &quot;</span>, m.HeapAlloc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于两个排序好的文件,进行比较并存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compareTwoFileObjectForRecursion</span><span class=\"params\">(filePathBefore, filePathAfter, dirName <span class=\"type\">string</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) (resultFilePath <span class=\"type\">string</span>, errRet <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresultFilePath = sha1s(strconv.Itoa(<span class=\"type\">int</span>(time.Now().UnixNano()))) + <span class=\"string\">&quot;_split_quicksort.txt&quot;</span></span><br><span class=\"line\">\tf, _ := os.OpenFile(dirName+<span class=\"string\">&quot;/&quot;</span>+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tos.Remove(filePathBefore)</span><br><span class=\"line\">\t\tos.Remove(filePathAfter)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfileBefore, err := os.Open(filePathBefore)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fileBefore.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\terrRet = err</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbrBefore := bufio.NewReader(fileBefore)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileAfter, err := os.Open(filePathAfter)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fileAfter.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\terrRet = err</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbrAfter := bufio.NewReader(fileAfter)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfa := <span class=\"literal\">true</span></span><br><span class=\"line\">\tfb := <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> va, vb []<span class=\"type\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ca, cb <span class=\"type\">error</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> fa &#123;</span><br><span class=\"line\">\t\t\ta, _, cae := brBefore.ReadLine()</span><br><span class=\"line\">\t\t\tva = a</span><br><span class=\"line\">\t\t\tca = cae</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> fb &#123;</span><br><span class=\"line\">\t\t\tb, _, cbe := brAfter.ReadLine()</span><br><span class=\"line\">\t\t\tvb = b</span><br><span class=\"line\">\t\t\tcb = cbe</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ca == io.EOF || cb == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(va) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(vb) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbUser := User&#123;&#125;</span><br><span class=\"line\">\t\t_ = json.Unmarshal(vb, &amp;bUser)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> By(resolveObject(va), resolveObject(vb)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tf.WriteString(<span class=\"type\">string</span>(vb) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tfb = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tfa = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tf.WriteString(<span class=\"type\">string</span>(va) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tfa = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tfb = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ta, _, ca := brBefore.ReadLine()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ca == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(a) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tb, _, ca := brBefore.ReadLine()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ca == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(b) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMem(filePathBefore + <span class=\"string\">&quot;=====&gt;&quot;</span> + filePathAfter)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义序列化对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">resolveObject</span><span class=\"params\">(a []<span class=\"type\">byte</span>)</span></span> User &#123;</span><br><span class=\"line\">\tuser := User&#123;&#125;</span><br><span class=\"line\">\t_ = json.Unmarshal(a, &amp;user)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> user</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SortBy</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.(User).Age &lt;= b.(User).Age <span class=\"comment\">//按照count排序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sha1s</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tr := sha1.Sum([]<span class=\"type\">byte</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hex.EncodeToString(r[:])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"注意事项\"><a class=\"header-anchor\" href=\"#注意事项\">¶</a>注意事项:</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_110111.png\" alt=\"\"></p>\n<blockquote>\n<p>主函数,这次的数据都是自己造的,实景就按照某某某来源来操作把.</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdirName := <span class=\"string\">&quot;tmp_quick_sort&quot;</span> + time.Now().Format(<span class=\"string\">&quot;2006_01_02_15_04_05&quot;</span>)</span><br><span class=\"line\">\terr2 := os.Mkdir(dirName, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf, err := os.OpenFile(dirName+<span class=\"string\">&quot;/0_split_quicksort.txt&quot;</span>, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\tMem(<span class=\"string\">&quot;before write file&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; quicksort.Counter; i++ &#123;</span><br><span class=\"line\">\t\tauser := quicksort.User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(quicksort.Counter),</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmarshal, _ := json.Marshal(auser)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tf.Write(marshal)</span><br><span class=\"line\">\t\tf.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i%quicksort.SplitNum == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tf.Close()</span><br><span class=\"line\">\t\t\tMem(strconv.Itoa(i) + <span class=\"string\">&quot;after write file&quot;</span>)</span><br><span class=\"line\">\t\t\tf, err = os.OpenFile(dirName+<span class=\"string\">&quot;/&quot;</span>+strconv.Itoa(i)+<span class=\"string\">&quot;_split_quicksort.txt&quot;</span>, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tMem(<span class=\"string\">&quot;after write file&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;filename: &quot;</span>, quicksort.StartSort(dirName))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(time.Now().Unix() - t)</span><br><span class=\"line\">\tMem(<span class=\"string\">&quot;last msg&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(unsafe.Sizeof([<span class=\"number\">100000</span>]quicksort.User&#123;&#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"结果到底是否如设计的那样可行呢\"><a class=\"header-anchor\" href=\"#结果到底是否如设计的那样可行呢\">¶</a>结果到底是否如设计的那样可行呢?</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_102841.png\" alt=\"\"></p>\n<h5 id=\"内存打印的实际情况\"><a class=\"header-anchor\" href=\"#内存打印的实际情况\">¶</a>内存打印的实际情况</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_103339.png\" alt=\"\"></p>\n<h3 id=\"后续改进\"><a class=\"header-anchor\" href=\"#后续改进\">¶</a>后续改进</h3>\n<h4 id=\"痛点\"><a class=\"header-anchor\" href=\"#痛点\">¶</a>痛点:</h4>\n<ul>\n<li>单个服务器,速度太慢</li>\n<li>单线程,有点慢「磁盘读写速度不快的,建议就使用单线程」</li>\n<li>没有断点「电」继续的机制.</li>\n</ul>\n<h4 id=\"改进方法\"><a class=\"header-anchor\" href=\"#改进方法\">¶</a>改进方法:</h4>\n<ul>\n<li>多服务器计算</li>\n<li>改进排序,单服务器可以分左右两部分</li>\n<li>增加任务记录机制,用于断点继续任务.</li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>前面说到了快速排序的自定义通用方案:</p>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html#more\">「37」Quick Sort快速排序</a></p>\n<blockquote>\n<p>但是又有一个新想法: 1亿条数据,100M内存,怎么搞?</p>\n</blockquote>","more":"<h3 id=\"分析\"><a class=\"header-anchor\" href=\"#分析\">¶</a>分析</h3>\n<h4 id=\"问题\"><a class=\"header-anchor\" href=\"#问题\">¶</a>问题</h4>\n<ul>\n<li>内存不足以放1亿条数据</li>\n<li>即使够用,一次把1亿条数据放入内存,如果说高并发下,每次都是1亿,消耗过大!</li>\n</ul>\n<h4 id=\"解决思路\"><a class=\"header-anchor\" href=\"#解决思路\">¶</a>解决思路:</h4>\n<p>大化小,小归大「归并算法的思想」,利用磁盘文件形式进行存储,比较,再存储…</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/sort_1.png\" alt=\"\"></p>\n<h4 id=\"代码部分「其它语言类似」\"><a class=\"header-anchor\" href=\"#代码部分「其它语言类似」\">¶</a>代码部分「其它语言类似」:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tCount <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Counter = <span class=\"number\">100000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> SplitNum = Counter / <span class=\"number\">10000000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSortAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partitionAll(a, left, right, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, left, mid<span class=\"number\">-1</span>, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, mid+<span class=\"number\">1</span>, right, By)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partitionAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(a[right], pivot); &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(pivot, a[left]); &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StartSort</span><span class=\"params\">(dirName <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> lock sync.Mutex</span><br><span class=\"line\">\tresultPaths := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tgroup, _ := errgroup.WithContext(context.TODO())</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; Counter; ia += SplitNum * <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\ti := ia</span><br><span class=\"line\">\t\t<span class=\"comment\">//group.Go(func() error &#123;</span></span><br><span class=\"line\">\t\tMem(<span class=\"string\">&quot;compareTwoFileObject&quot;</span>)</span><br><span class=\"line\">\t\tfilePath, _ := compareTwoFileObject(dirName+<span class=\"string\">&quot;/&quot;</span>+strconv.Itoa(i)+<span class=\"string\">&quot;_split_quicksort.txt&quot;</span>,</span><br><span class=\"line\">\t\t\tdirName+<span class=\"string\">&quot;/&quot;</span>+strconv.Itoa(i+SplitNum)+<span class=\"string\">&quot;_split_quicksort.txt&quot;</span>, dirName, SortBy)</span><br><span class=\"line\">\t\tlock.Lock()</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tresultPaths = <span class=\"built_in\">append</span>(resultPaths, filePath)</span><br><span class=\"line\">\t\tlock.Unlock()</span><br><span class=\"line\">\t\t<span class=\"comment\">//return nil</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgroup.Wait()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> recursionDeal(resultPaths, dirName, lock)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">recursionDeal</span><span class=\"params\">(paths []<span class=\"type\">string</span>, dirName <span class=\"type\">string</span>, lock sync.Mutex)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\ttmpPaths := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(paths) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> paths[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgroup, _ := errgroup.WithContext(context.TODO())</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; <span class=\"built_in\">len</span>(paths); ia += <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\ti := ia</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(paths)%<span class=\"number\">2</span> != <span class=\"number\">0</span> &amp;&amp; i == <span class=\"built_in\">len</span>(paths)<span class=\"number\">-1</span> &#123;</span><br><span class=\"line\">\t\t\tlock.Lock()</span><br><span class=\"line\">\t\t\ttmpPaths = <span class=\"built_in\">append</span>(tmpPaths, paths[i])</span><br><span class=\"line\">\t\t\tlock.Unlock()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//group.Go(func() error &#123;</span></span><br><span class=\"line\">\t\tfilePath, _ := compareTwoFileObjectForRecursion(dirName+<span class=\"string\">&quot;/&quot;</span>+paths[i], dirName+<span class=\"string\">&quot;/&quot;</span>+paths[i+<span class=\"number\">1</span>], dirName, SortBy)</span><br><span class=\"line\">\t\tlock.Lock()</span><br><span class=\"line\">\t\ttmpPaths = <span class=\"built_in\">append</span>(tmpPaths, filePath)</span><br><span class=\"line\">\t\tlock.Unlock()</span><br><span class=\"line\">\t\tMem(<span class=\"string\">&quot;recursionDeal：&quot;</span> + filePath)</span><br><span class=\"line\">\t\t<span class=\"comment\">//return nil</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//&#125;)</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_ = group.Wait()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> recursionDeal(tmpPaths, dirName, lock)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compareTwoFileObject</span><span class=\"params\">(filePathBefore, filePathAfter, dirName <span class=\"type\">string</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) (resultFilePath <span class=\"type\">string</span>, errRet <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tos.Remove(filePathBefore)</span><br><span class=\"line\">\t\tos.Remove(filePathAfter)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfileBefore, _ := readObjectFromFile(filePathBefore)</span><br><span class=\"line\">\tfileAfter, _ := readObjectFromFile(filePathAfter)</span><br><span class=\"line\">\tresultFilePath = sha1s(strconv.Itoa(<span class=\"type\">int</span>(time.Now().UnixNano()))) + <span class=\"string\">&quot;_split_quicksort.txt&quot;</span></span><br><span class=\"line\">\tf, _ := os.OpenFile(dirName+<span class=\"string\">&quot;/&quot;</span>+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\"></span><br><span class=\"line\">\tflag := <span class=\"number\">0</span></span><br><span class=\"line\">\tflagResultAfter := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(fileBefore); i++ &#123;</span><br><span class=\"line\">\t\ttmp := fileBefore[i]</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ai := flag; ai &lt; <span class=\"built_in\">len</span>(fileAfter); ai++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> flag+<span class=\"number\">1</span> == <span class=\"built_in\">len</span>(fileAfter) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// fileAfter遍历完了</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(fileAfter) == ai+<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 最后赋值</span></span><br><span class=\"line\">\t\t\t\tflag = ai</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> By(tmp, fileAfter[ai]) &#123;</span><br><span class=\"line\">\t\t\t\ttmpJson, _ := json.Marshal(fileAfter[ai])</span><br><span class=\"line\">\t\t\t\tf.WriteString(<span class=\"type\">string</span>(tmpJson) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\t\tflagResultAfter = ai</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tflag = ai</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttmpJson, _ := json.Marshal(tmp)</span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(tmpJson) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> fileAfter == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tf.Close()</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flagResultAfter &lt; <span class=\"built_in\">len</span>(fileAfter) &#123;</span><br><span class=\"line\">\t\tflagResultAfter++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileAfter = fileAfter[flagResultAfter:]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> fileAfter &#123;</span><br><span class=\"line\">\t\ttmpJson, _ := json.Marshal(v)</span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(tmpJson) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取文件中的数据,用于排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readObjectFromFile</span><span class=\"params\">(filePath <span class=\"type\">string</span>)</span></span> (users []<span class=\"keyword\">interface</span>&#123;&#125;, errRet <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\tfileBefore, err := os.Open(filePath)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fileBefore.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\terrRet = err</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tbrBefore := bufio.NewReader(fileBefore)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ta, _, c := brBefore.ReadLine()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> c == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(a) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tusers = <span class=\"built_in\">append</span>(users, resolveObject(a))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(users) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tQuickSortAll(users, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(users)<span class=\"number\">-1</span>, SortBy)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Mem</span><span class=\"params\">(msg <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> m runtime.MemStats</span><br><span class=\"line\">\truntime.ReadMemStats(&amp;m)</span><br><span class=\"line\">\tfmt.Println(msg, <span class=\"string\">&quot;系统内存：&quot;</span>, m.Sys, <span class=\"string\">&quot;   常驻内存：&quot;</span>, m.HeapInuse, <span class=\"string\">&quot;    堆上分配的，gc后会归还： &quot;</span>, m.HeapAlloc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于两个排序好的文件,进行比较并存储</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compareTwoFileObjectForRecursion</span><span class=\"params\">(filePathBefore, filePathAfter, dirName <span class=\"type\">string</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) (resultFilePath <span class=\"type\">string</span>, errRet <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tresultFilePath = sha1s(strconv.Itoa(<span class=\"type\">int</span>(time.Now().UnixNano()))) + <span class=\"string\">&quot;_split_quicksort.txt&quot;</span></span><br><span class=\"line\">\tf, _ := os.OpenFile(dirName+<span class=\"string\">&quot;/&quot;</span>+resultFilePath, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tos.Remove(filePathBefore)</span><br><span class=\"line\">\t\tos.Remove(filePathAfter)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfileBefore, err := os.Open(filePathBefore)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fileBefore.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\terrRet = err</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbrBefore := bufio.NewReader(fileBefore)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfileAfter, err := os.Open(filePathAfter)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fileAfter.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\terrRet = err</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbrAfter := bufio.NewReader(fileAfter)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfa := <span class=\"literal\">true</span></span><br><span class=\"line\">\tfb := <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> va, vb []<span class=\"type\">byte</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> ca, cb <span class=\"type\">error</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> fa &#123;</span><br><span class=\"line\">\t\t\ta, _, cae := brBefore.ReadLine()</span><br><span class=\"line\">\t\t\tva = a</span><br><span class=\"line\">\t\t\tca = cae</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> fb &#123;</span><br><span class=\"line\">\t\t\tb, _, cbe := brAfter.ReadLine()</span><br><span class=\"line\">\t\t\tvb = b</span><br><span class=\"line\">\t\t\tcb = cbe</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ca == io.EOF || cb == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(va) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(vb) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbUser := User&#123;&#125;</span><br><span class=\"line\">\t\t_ = json.Unmarshal(vb, &amp;bUser)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> By(resolveObject(va), resolveObject(vb)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tf.WriteString(<span class=\"type\">string</span>(vb) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tfb = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tfa = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tf.WriteString(<span class=\"type\">string</span>(va) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tfa = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\tfb = <span class=\"literal\">false</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ta, _, ca := brBefore.ReadLine()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ca == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(a) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tb, _, ca := brBefore.ReadLine()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ca == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tf.WriteString(<span class=\"type\">string</span>(b) + <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tMem(filePathBefore + <span class=\"string\">&quot;=====&gt;&quot;</span> + filePathAfter)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义序列化对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">resolveObject</span><span class=\"params\">(a []<span class=\"type\">byte</span>)</span></span> User &#123;</span><br><span class=\"line\">\tuser := User&#123;&#125;</span><br><span class=\"line\">\t_ = json.Unmarshal(a, &amp;user)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> user</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SortBy</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a.(User).Age &lt;= b.(User).Age <span class=\"comment\">//按照count排序</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sha1s</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tr := sha1.Sum([]<span class=\"type\">byte</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> hex.EncodeToString(r[:])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"注意事项\"><a class=\"header-anchor\" href=\"#注意事项\">¶</a>注意事项:</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_110111.png\" alt=\"\"></p>\n<blockquote>\n<p>主函数,这次的数据都是自己造的,实景就按照某某某来源来操作把.</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tdirName := <span class=\"string\">&quot;tmp_quick_sort&quot;</span> + time.Now().Format(<span class=\"string\">&quot;2006_01_02_15_04_05&quot;</span>)</span><br><span class=\"line\">\terr2 := os.Mkdir(dirName, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err2 != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf, err := os.OpenFile(dirName+<span class=\"string\">&quot;/0_split_quicksort.txt&quot;</span>, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\tMem(<span class=\"string\">&quot;before write file&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; quicksort.Counter; i++ &#123;</span><br><span class=\"line\">\t\tauser := quicksort.User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(quicksort.Counter),</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmarshal, _ := json.Marshal(auser)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tf.Write(marshal)</span><br><span class=\"line\">\t\tf.Write([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i%quicksort.SplitNum == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tf.Close()</span><br><span class=\"line\">\t\t\tMem(strconv.Itoa(i) + <span class=\"string\">&quot;after write file&quot;</span>)</span><br><span class=\"line\">\t\t\tf, err = os.OpenFile(dirName+<span class=\"string\">&quot;/&quot;</span>+strconv.Itoa(i)+<span class=\"string\">&quot;_split_quicksort.txt&quot;</span>, os.O_CREATE|os.O_RDWR|os.O_APPEND, os.ModeAppend|os.ModePerm)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf.Close()</span><br><span class=\"line\">\truntime.GC()</span><br><span class=\"line\">\tMem(<span class=\"string\">&quot;after write file&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;filename: &quot;</span>, quicksort.StartSort(dirName))</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(time.Now().Unix() - t)</span><br><span class=\"line\">\tMem(<span class=\"string\">&quot;last msg&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(unsafe.Sizeof([<span class=\"number\">100000</span>]quicksort.User&#123;&#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"结果到底是否如设计的那样可行呢\"><a class=\"header-anchor\" href=\"#结果到底是否如设计的那样可行呢\">¶</a>结果到底是否如设计的那样可行呢?</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_102841.png\" alt=\"\"></p>\n<h5 id=\"内存打印的实际情况\"><a class=\"header-anchor\" href=\"#内存打印的实际情况\">¶</a>内存打印的实际情况</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210221_103339.png\" alt=\"\"></p>\n<h3 id=\"后续改进\"><a class=\"header-anchor\" href=\"#后续改进\">¶</a>后续改进</h3>\n<h4 id=\"痛点\"><a class=\"header-anchor\" href=\"#痛点\">¶</a>痛点:</h4>\n<ul>\n<li>单个服务器,速度太慢</li>\n<li>单线程,有点慢「磁盘读写速度不快的,建议就使用单线程」</li>\n<li>没有断点「电」继续的机制.</li>\n</ul>\n<h4 id=\"改进方法\"><a class=\"header-anchor\" href=\"#改进方法\">¶</a>改进方法:</h4>\n<ul>\n<li>多服务器计算</li>\n<li>改进排序,单服务器可以分左右两部分</li>\n<li>增加任务记录机制,用于断点继续任务.</li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/sort_1.png","popularPost_tmp_gaData":{"updated":"Sun Feb 21 2021 20:10:17 GMT+0800 (中国标准时间)","title":"「38」上亿数据的快速排序","path":"archives/26af015.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/sort_1.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>前面说到了快速排序的自定义通用方案:</p>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html#more\">「37」Quick Sort快速排序</a></p>\n<blockquote>\n<p>但是又有一个新想法: 1亿条数据,100M内存,怎么搞?</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2021-02-21T12:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-21T12:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":8153},{"title":"「39」Go select源码实现分析","date":"2021-02-22T04:10:17.000Z","updated":"2021-02-23T13:10:17.000Z","keywords":"Go,select,selectgo源码","mathjax":true,"abbrlink":"e1051649","_content":"\n### 前序\n\n关于Go中select的特性，很多坑，也容易栽。\n\n好奇底层 到计算机层面到底是如何处理的？！\n\n如果有Go的相关经验，就晓得select经常性配合chan一起来使用，\n有个问题：线程安全吗？ 多个case到底是如何选择的？ 随机么？why?\n\n<!--more-->\n### version\n>go version 1.14\n\n### 简单使用\n\n>例1:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc SelectGo(cc, end chan int) {\n\tx, y := -1, 0\n\tfor {\n\t\tselect {\n\t\tcase cc <- x:\n\t\t\tx, y = y, x+y\n\t\tcase <-end:\n\t\t\tfmt.Println(\"end\")\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n>上面的结构会等待 cc <- x或者 <-end两个任意一个返回，无论哪个表达式返回都会立刻执行case的代码块。\n\n>当select中的两个case都满足条件，那就随机触发其中一个。\n\n\n#### 汇编实现：\n\n```go\n\n$ go tool compile -N -l -S sselect.go \n\"\".SelectGo STEXT size=490 args=0x10 locals=0xf0 funcid=0x0 \n        // SelectGo 函数\n        0x0000 00000 (sselect.go:5)     TEXT    \"\".SelectGo(SB), ABIInternal, $240-16\n        0x0000 00000 (sselect.go:5)     MOVQ    (TLS), CX\n        0x0009 00009 (sselect.go:5)     LEAQ    -112(SP), AX\n        0x000e 00014 (sselect.go:5)     CMPQ    AX, 16(CX)\n        0x0012 00018 (sselect.go:5)     PCDATA  $0, $-2\n        0x0012 00018 (sselect.go:5)     JLS     480\n        0x0018 00024 (sselect.go:5)     PCDATA  $0, $-1\n        0x0018 00024 (sselect.go:5)     SUBQ    $240, SP\n        0x001f 00031 (sselect.go:5)     MOVQ    BP, 232(SP)\n        0x0027 00039 (sselect.go:5)     LEAQ    232(SP), BP\n        0x002f 00047 (sselect.go:5)     FUNCDATA        $0, gclocals·dc9b0298814590ca3ffc3a889546fc8b(SB)\n        0x002f 00047 (sselect.go:5)     FUNCDATA        $1, gclocals·90105ebf2cf472b05305b6351ad183b7(SB)\n        0x002f 00047 (sselect.go:5)     FUNCDATA        $2, \"\".SelectGo.stkobj(SB)\n        0x002f 00047 (sselect.go:6)     MOVQ    $0, \"\".x+80(SP)\n        0x0038 00056 (sselect.go:6)     MOVQ    $1, \"\".y+72(SP)\n        0x0041 00065 (sselect.go:7)     JMP     67\n        0x0043 00067 (sselect.go:9)     JMP     69\n        0x0045 00069 (sselect.go:9)     MOVQ    \"\".c+248(SP), AX\n        0x004d 00077 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_4+128(SP)\n        0x0055 00085 (sselect.go:9)     MOVQ    \"\".x+80(SP), AX\n        0x005a 00090 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_5+96(SP)\n        0x005f 00095 (sselect.go:11)    MOVQ    \"\".quit+256(SP), AX\n        0x0067 00103 (sselect.go:11)    MOVQ    AX, \"\"..autotmp_6+120(SP)\n        0x006c 00108 (sselect.go:8)     XORPS   X0, X0\n        0x006f 00111 (sselect.go:8)     MOVUPS  X0, \"\"..autotmp_8+200(SP)\n        0x0077 00119 (sselect.go:8)     MOVUPS  X0, \"\"..autotmp_8+216(SP)\n        0x007f 00127 (sselect.go:9)     MOVQ    \"\"..autotmp_4+128(SP), AX\n        0x0087 00135 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_8+200(SP)\n        0x008f 00143 (sselect.go:9)     LEAQ    \"\"..autotmp_5+96(SP), AX\n        0x0094 00148 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_8+208(SP)\n        0x009c 00156 (sselect.go:11)    MOVQ    \"\"..autotmp_6+120(SP), AX\n        0x00a1 00161 (sselect.go:11)    MOVQ    AX, \"\"..autotmp_8+216(SP)\n        0x00a9 00169 (sselect.go:8)     LEAQ    \"\"..autotmp_8+200(SP), AX\n        0x00b1 00177 (sselect.go:8)     MOVQ    AX, \"\"..autotmp_12+152(SP)\n        0x00b9 00185 (sselect.go:8)     LEAQ    \"\"..autotmp_9+88(SP), AX\n        0x00be 00190 (sselect.go:8)     MOVQ    AX, \"\"..autotmp_13+144(SP)\n        0x00c6 00198 (sselect.go:8)     MOVQ    \"\"..autotmp_12+152(SP), CX\n        0x00ce 00206 (sselect.go:8)     MOVQ    CX, (SP)\n        0x00d2 00210 (sselect.go:8)     MOVQ    AX, 8(SP)\n        0x00d7 00215 (sselect.go:8)     MOVQ    $0, 16(SP)\n        0x00e0 00224 (sselect.go:8)     MOVQ    $1, 24(SP)\n        0x00e9 00233 (sselect.go:8)     MOVQ    $1, 32(SP)\n        0x00f2 00242 (sselect.go:8)     MOVB    $1, 40(SP)\n        0x00f7 00247 (sselect.go:8)     PCDATA  $1, $0\n        0x00f7 00247 (sselect.go:8)     CALL    runtime.selectgo(SB)\n        0x00fc 00252 (sselect.go:8)     MOVQ    48(SP), AX\n        0x0101 00257 (sselect.go:8)     MOVBLZX 56(SP), CX\n        0x0106 00262 (sselect.go:8)     MOVQ    AX, \"\"..autotmp_10+112(SP)\n        0x010b 00267 (sselect.go:8)     MOVB    CL, \"\"..autotmp_11+71(SP)\n        0x010f 00271 (sselect.go:9)     CMPQ    \"\"..autotmp_10+112(SP), $0\n        0x0115 00277 (sselect.go:9)     JEQ     281\n        0x0117 00279 (sselect.go:9)     JMP     327\n        0x0119 00281 (sselect.go:10)    MOVQ    \"\".x+80(SP), AX\n        0x011e 00286 (sselect.go:10)    ADDQ    \"\".y+72(SP), AX\n        0x0123 00291 (sselect.go:10)    MOVQ    AX, \"\"..autotmp_14+104(SP)\n        0x0128 00296 (sselect.go:10)    MOVQ    \"\".y+72(SP), AX\n        0x012d 00301 (sselect.go:10)    MOVQ    AX, \"\".x+80(SP)\n        0x0132 00306 (sselect.go:10)    MOVQ    \"\"..autotmp_14+104(SP), AX\n        0x0137 00311 (sselect.go:10)    MOVQ    AX, \"\".y+72(SP)\n        0x013c 00316 (sselect.go:9)     JMP     318\n        0x013e 00318 (sselect.go:9)     PCDATA  $1, $-1\n        0x013e 00318 (sselect.go:9)     NOP\n        0x0140 00320 (sselect.go:9)     JMP     322\n        0x0142 00322 (sselect.go:9)     JMP     67\n        0x0147 00327 (sselect.go:11)    CMPQ    \"\"..autotmp_10+112(SP), $1\n        0x014d 00333 (sselect.go:11)    JEQ     340\n        0x014f 00335 (sselect.go:11)    JMP     478\n        0x0154 00340 (sselect.go:12)    XORPS   X0, X0\n        0x0157 00343 (sselect.go:12)    MOVUPS  X0, \"\"..autotmp_7+160(SP)\n        0x015f 00351 (sselect.go:12)    LEAQ    \"\"..autotmp_7+160(SP), AX\n        0x0167 00359 (sselect.go:12)    MOVQ    AX, \"\"..autotmp_16+136(SP)\n        0x016f 00367 (sselect.go:12)    TESTB   AL, (AX)\n        0x0171 00369 (sselect.go:12)    LEAQ    type.string(SB), CX\n        0x0178 00376 (sselect.go:12)    MOVQ    CX, \"\"..autotmp_7+160(SP)\n        0x0180 00384 (sselect.go:12)    LEAQ    \"\"..stmp_0(SB), CX\n        0x0187 00391 (sselect.go:12)    MOVQ    CX, \"\"..autotmp_7+168(SP)\n        0x018f 00399 (sselect.go:12)    TESTB   AL, (AX)\n        0x0191 00401 (sselect.go:12)    JMP     403\n        0x0193 00403 (sselect.go:12)    MOVQ    AX, \"\"..autotmp_15+176(SP)\n        0x019b 00411 (sselect.go:12)    MOVQ    $1, \"\"..autotmp_15+184(SP)\n        0x01a7 00423 (sselect.go:12)    MOVQ    $1, \"\"..autotmp_15+192(SP)\n        0x01b3 00435 (sselect.go:12)    MOVQ    AX, (SP)\n        0x01b7 00439 (sselect.go:12)    MOVQ    $1, 8(SP)\n        0x01c0 00448 (sselect.go:12)    MOVQ    $1, 16(SP)\n        0x01c9 00457 (sselect.go:12)    PCDATA  $1, $1\n        0x01c9 00457 (sselect.go:12)    CALL    fmt.Println(SB)\n        0x01ce 00462 (sselect.go:13)    MOVQ    232(SP), BP\n        0x01d6 00470 (sselect.go:13)    ADDQ    $240, SP\n        0x01dd 00477 (sselect.go:13)    RET\n        0x01de 00478 (sselect.go:11)    PCDATA  $1, $-1\n        0x01de 00478 (sselect.go:11)    XCHGL   AX, AX\n        0x01df 00479 (sselect.go:11)    NOP\n        0x01df 00479 (sselect.go:5)     PCDATA  $1, $-1\n        0x01df 00479 (sselect.go:5)     PCDATA  $0, $-2\n        0x01df 00479 (sselect.go:5)     NOP\n        0x01e0 00480 (sselect.go:5)     CALL    runtime.morestack_noctxt(SB)\n        0x01e5 00485 (sselect.go:5)     PCDATA  $0, $-1\n        0x01e5 00485 (sselect.go:5)     JMP     0\n        ......\n        ....\n        ...\n        ..\n        .\n```\n\n\n### 场景\n\n\n#### 非阻塞式：\n\n```go\nfunc main() {\n\tch := make(chan int)\n\tselect {\n\tcase i := <-ch:\n\t\tprintln(i)\n\n\tdefault:\n\t\tprintln(\"default\")\n\t}\n}\n\n$ go run main.go\ndefault\n```\n\n>select同时监听多个case是否可执行，如果多个case不可执行，有default就执行。\n\n#### 随机执行\n\n>关于下面的程序到底是打印什么？\n\n```go\nfunc main() {\n\tch := make(chan int)\n\n\tgo func() {\n\t\tfor range time.Tick(1 * time.Second) {\n\t\t\tch <- 0\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ch:\n\t\t\tprintln(\"case1\")\n\t\tcase <-ch:\n\t\t\tprintln(\"case2\")\n\t\t}\n\n\t}\n}\n```\n\n##### outputs:\n\n* 随机性\n```go\ncase1\ncase2\ncase1\n...\n```\n\n### 正题：为何是随机？\n\n#### [select case的结构](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29)\n\n```go\ntype scase struct {\n\tc           *hchan         // chan\n\telem        unsafe.Pointer // data element\n\tkind        uint16\n\tpc          uintptr // race pc (for race detector / msan)\n\treleasetime int64\n}\n```\n\n#### 实现原理\n\n* go对于中间代码会有部分的优化： [walkselectcases](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108)\n\n\n```go\nfunc walkselectcases(cases *Nodes) []*Node {\n\tncas := cases.Len()\n\tsellineno := lineno\n\n\t// optimization: zero-case select 没有case的情况\n\tif ncas == 0 {\n\t\treturn []*Node{mkcall(\"block\", nil, nil)}\n\t}\n\n\t// optimization: one-case select: single op.\n\tif ncas == 1 {\n        ..........\n        ........\n        ......\n        ...\n        ..\n        .\n    \n}\n```\n##### 随机化原因？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210223_052947.png)\n\n* 关于fastrandn后面单独分析吧，还挺有意思的。\n\n##### 没有case,单单一个select情况:\n\n>前几行就写的很清楚了。\n\n```go\nfunc block() {\n\tgopark(nil, nil, waitReasonSelectNoCases, traceEvGoStop, 1) // forever\n}\n```\n\n###### 多看一步：\n* waitReasonSelectNoCases干嘛的？\n\n这里逻列了g wait的所有情况，有什么用，不是这次研究的重点！\n有兴趣可以下来查查，看看哪里都用到了。\n[链接🔗](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L948)\n\n```go\nconst (\n\twaitReasonZero                  waitReason = iota // \"\"\n\twaitReasonGCAssistMarking                         // \"GC assist marking\"\n\twaitReasonIOWait                                  // \"IO wait\"\n\twaitReasonChanReceiveNilChan                      // \"chan receive (nil chan)\"\n\twaitReasonChanSendNilChan                         // \"chan send (nil chan)\"\n\twaitReasonDumpingHeap                             // \"dumping heap\"\n\twaitReasonGarbageCollection                       // \"garbage collection\"\n\twaitReasonGarbageCollectionScan                   // \"garbage collection scan\"\n\twaitReasonPanicWait                               // \"panicwait\"\n\twaitReasonSelect                                  // \"select\"\n\twaitReasonSelectNoCases                           // \"select (no cases)\"\n\twaitReasonGCAssistWait                            // \"GC assist wait\"\n\twaitReasonGCSweepWait                             // \"GC sweep wait\"\n\twaitReasonGCScavengeWait                          // \"GC scavenge wait\"\n\twaitReasonChanReceive                             // \"chan receive\"\n\twaitReasonChanSend                                // \"chan send\"\n\twaitReasonFinalizerWait                           // \"finalizer wait\"\n\twaitReasonForceGGIdle                             // \"force gc (idle)\"\n\twaitReasonSemacquire                              // \"semacquire\"\n\twaitReasonSleep                                   // \"sleep\"\n\twaitReasonSyncCondWait                            // \"sync.Cond.Wait\"\n\twaitReasonTimerGoroutineIdle                      // \"timer goroutine (idle)\"\n\twaitReasonTraceReaderBlocked                      // \"trace reader (blocked)\"\n\twaitReasonWaitForGCCycle                          // \"wait for GC cycle\"\n\twaitReasonGCWorkerIdle                            // \"GC worker (idle)\"\n\twaitReasonPreempted                               // \"preempted\"\n)\n```\n\n\n##### 非阻塞的操作\n\n像例子1那样，如果两个case，包含一个default，则为非阻塞的操作。\n[walkselectcases](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108)\n\n```go\nfunc walkselectcases(cases *Nodes) []*Node {\n\tncas := cases.Len()\n\tsellineno := lineno\n\n\t// optimization: zero-case select\n\tif ncas == 0 {\n\t\treturn []*Node{mkcall(\"block\", nil, nil)}\n\t}\n\n\t// optimization: one-case select: single op.\n\tif ncas == 1 {\n        // 包含default的情况\n\t\tcas := cases.First()\n\t\tsetlineno(cas)\n\t\tl := cas.Ninit.Slice()\n\t\tif cas.Left != nil { // not default:\n\t\t\tn := cas.Left\n\t\t\tl = append(l, n.Ninit.Slice()...)\n\t\t\tn.Ninit.Set(nil)\n\t\t\tswitch n.Op {\n\t\t\tdefault:\n\t\t\t\tFatalf(\"select %v\", n.Op)\n\n\t\t\tcase OSEND:\n\t\t\t\t// already ok\n\n\t\t\tcase OSELRECV, OSELRECV2:\n\t\t\t\tif n.Op == OSELRECV || n.List.Len() == 0 {\n\t\t\t\t\tif n.Left == nil {\n\t\t\t\t\t\tn = n.Right\n\t\t\t\t\t} else {\n\t\t\t\t\t\tn.Op = OAS\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tif n.Left == nil {\n\t\t\t\t\tnblank = typecheck(nblank, ctxExpr|ctxAssign)\n\t\t\t\t\tn.Left = nblank\n\t\t\t\t}\n\n\t\t\t\tn.Op = OAS2\n\t\t\t\tn.List.Prepend(n.Left)\n\t\t\t\tn.Rlist.Set1(n.Right)\n\t\t\t\tn.Right = nil\n\t\t\t\tn.Left = nil\n\t\t\t\tn.SetTypecheck(0)\n\t\t\t\tn = typecheck(n, ctxStmt)\n\t\t\t}\n\n\t\t\tl = append(l, n)\n\t\t}\n\n\t\tl = append(l, cas.Nbody.Slice()...)\n\t\tl = append(l, nod(OBREAK, nil, nil))\n\t\treturn l\n\t}\n\n    ....\n\n}\n\n```\n\n#### 流程化问题\n\n\n* 1、将所有的case转换成包含channel等信息的[runtime.scase结构](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29)\n* 2、调用运行时函数selectgo从多个就绪的channel中选择一个可以执行的scase结构体。\n* 3、for循环生成一组if语句，判断case是否被选中。\n\n##### case转换为if的情况：\n\n[reflect_rselect🔗](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L542)\n\n```go\n//go:linkname reflect_rselect reflect.rselect\nfunc reflect_rselect(cases []runtimeSelect) (int, bool) {\n\tif len(cases) == 0 {\n\t\tblock()\n\t}\n\tsel := make([]scase, len(cases)) // 初始化\n\torig := make([]int, len(cases))\n\tnsends, nrecvs := 0, 0\n\tdflt := -1\n\tfor i, rc := range cases {\n\t\tvar j int\n\t\tswitch rc.dir {\n\t\tcase selectDefault:\n\t\t\tdflt = i\n\t\t\tcontinue\n\t\tcase selectSend:\n\t\t\tj = nsends\n\t\t\tnsends++\n\t\tcase selectRecv:\n\t\t\tnrecvs++\n\t\t\tj = len(cases) - nrecvs\n\t\t}\n\n\t\tsel[j] = scase{c: rc.ch, elem: rc.val}\n\t\torig[j] = i\n\t}\n\n\t// Only a default case. 只有default的情况\n\tif nsends+nrecvs == 0 {\n\t\treturn dflt, false\n\t}\n\n\t// Compact sel and orig if necessary.\n\tif nsends+nrecvs < len(cases) {\n\t\tcopy(sel[nsends:], sel[len(cases)-nrecvs:])\n\t\tcopy(orig[nsends:], orig[len(cases)-nrecvs:])\n\t}\n\n\torder := make([]uint16, 2*(nsends+nrecvs))\n\tvar pc0 *uintptr\n\tif raceenabled {\n\t\tpcs := make([]uintptr, nsends+nrecvs)\n\t\tfor i := range pcs {\n\t\t\tselectsetpc(&pcs[i])\n\t\t}\n\t\tpc0 = &pcs[0]\n\t}\n\t//调用selectgo获取结果\n\tchosen, recvOK := selectgo(&sel[0], &order[0], pc0, nsends, nrecvs, dflt == -1)\n\n\t// Translate chosen back to caller's ordering.\n\tif chosen < 0 {\n\t\tchosen = dflt\n\t} else {\n\t\tchosen = orig[chosen]\n\t}\n\treturn chosen, recvOK\n}\n\n```\n\n#### selectgo主循环\n\n>selectgo会根据不通的逻辑判断,跳转到不通的逻辑中,主要分为如下几部分:\n\n* bufrecv 可以从缓存区读取数据\n* bufsend 可以向缓存区写入数据\n* recv 可以从休眠的发送方获取数据\n* send 可以向休眠的接收方发送数据\n* rclose 可以从关闭的channel读取EOF\n* sclose 可以向关闭的channel发送数据\n* retc 结束调用并返回\n\n##### send & recv分析 \n\n```go\n.\n..\n...\n....\n.....\n\nloop:\n\t// pass 1 - look for something already waiting\n\tvar dfli int\n\tvar dfl *scase\n\tvar casi int\n\tvar cas *scase\n\tvar recvOK bool\n\tfor i := 0; i < ncases; i++ {\n\t\tcasi = int(pollorder[i])\n\t\tcas = &scases[casi]\n\t\tc = cas.c\n\n\t\tswitch cas.kind {\n\t\tcase caseNil:\n\t\t\tcontinue\n\n\t\tcase caseRecv:\n\t\t\tsg = c.sendq.dequeue()\n\t\t\tif sg != nil {\n\t\t\t\tgoto recv\n\t\t\t}\n\t\t\tif c.qcount > 0 {\n\t\t\t\t//缓存区total>0\n\t\t\t\tgoto bufrecv\n\t\t\t}\n\t\t\tif c.closed != 0 {\n\t\t\t\t// chan已经关闭\n\t\t\t\tgoto rclose\n\t\t\t}\n\n\t\tcase caseSend:\n\t\t\tif raceenabled {\n\t\t\t\tracereadpc(c.raceaddr(), cas.pc, chansendpc)\n\t\t\t}\n\t\t\tif c.closed != 0 {\n\t\t\t\t// channel关闭了,但是向其发送消息\n\t\t\t\tgoto sclose\n\t\t\t}\n\t\t\tsg = c.recvq.dequeue()\n\t\t\tif sg != nil {\n\t\t\t\t// 向出队的channel发送消息\n\t\t\t\tgoto send\n\t\t\t}\n\t\t\tif c.qcount < c.dataqsiz {\n\n\t\t\t\tgoto bufsend\n\t\t\t}\n\n\t\tcase caseDefault:\n\t\t\tdfli = casi\n\t\t\tdfl = cas\n\t\t}\n\t}\n.....\n....\n...\n..\n.\n```\n\n>这里可能要温习下hchan结构:\n\n```go\n\ntype hchan struct {\n\tqcount   uint           // total data in the queue\n\tdataqsiz uint           // size of the circular queue\n\tbuf      unsafe.Pointer // points to an array of dataqsiz elements\n\telemsize uint16\n\tclosed   uint32\n\telemtype *_type // element type\n\tsendx    uint   // send index\n\trecvx    uint   // receive index\n\trecvq    waitq  // list of recv waiters\n\tsendq    waitq  // list of send waiters\n\n\t// lock protects all fields in hchan, as well as several\n\t// fields in sudogs blocked on this channel.\n\t//\n\t// Do not change another G's status while holding this lock\n\t// (in particular, do not ready a G), as this can deadlock\n\t// with stack shrinking.\n\tlock mutex\n}\n```\n\n##### bufrecv:\n\n```go\nbufrecv:\n\t// can receive from buffer\n\tif raceenabled {\n\t\tif cas.elem != nil {\n\t\t\traceWriteObjectPC(c.elemtype, cas.elem, cas.pc, chanrecvpc)\n\t\t}\n\t\traceacquire(chanbuf(c, c.recvx))\n\t\tracerelease(chanbuf(c, c.recvx))\n\t}\n\tif msanenabled && cas.elem != nil {\n\t\tmsanwrite(cas.elem, c.elemtype.size)\n\t}\n\t// recv 赋值\n\trecvOK = true\n\tqp = chanbuf(c, c.recvx) // chan指针指向\n\tif cas.elem != nil { \n\t\ttypedmemmove(c.elemtype, cas.elem, qp)\n\t}\n\ttypedmemclr(c.elemtype, qp)\n\tc.recvx++\n\tif c.recvx == c.dataqsiz {\n\t\tc.recvx = 0\n\t}\n\tc.qcount--\n\tselunlock(scases, lockorder)\n\tgoto retc\n\n```\n\n##### bufsend:\n\n```go\nbufsend:\n\t// can send to buffer\n\tif raceenabled {\n\t\traceacquire(chanbuf(c, c.sendx))\n\t\tracerelease(chanbuf(c, c.sendx))\n\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)\n\t}\n\tif msanenabled {\n\t\tmsanread(cas.elem, c.elemtype.size)\n\t}\n\ttypedmemmove(c.elemtype, chanbuf(c, c.sendx), cas.elem)\n\tc.sendx++\n\tif c.sendx == c.dataqsiz { // 缓存区满了\n\t\tc.sendx = 0\n\t}\n\tc.qcount++\n\tselunlock(scases, lockorder)\n\tgoto retc\n```\n\n##### recv:\n\n```go\nrecv:\n\t// can receive from sleeping sender (sg)\n\trecv(c, sg, cas.elem, func() { selunlock(scases, lockorder) }, 2)\n\tif debugSelect {\n\t\tprint(\"syncrecv: cas0=\", cas0, \" c=\", c, \"\\n\")\n\t}\n\trecvOK = true\n\tgoto retc\n\n```\n\n##### rclose:\n\n```go\n\t// read at end of closed channel\n\tselunlock(scases, lockorder)\n\trecvOK = false\n\tif cas.elem != nil {\n\t\ttypedmemclr(c.elemtype, cas.elem)\n\t}\n\tif raceenabled {\n\t\traceacquire(c.raceaddr())\n\t}\n\tgoto retc\n```\n\n##### send:\n\n```go\nsend:\n\t// can send to a sleeping receiver (sg)\n\tif raceenabled {\n\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)\n\t}\n\tif msanenabled {\n\t\tmsanread(cas.elem, c.elemtype.size)\n\t}\n\t// send函数\n\tsend(c, sg, cas.elem, func() { selunlock(scases, lockorder) }, 2)\n\tif debugSelect {\n\t\tprint(\"syncsend: cas0=\", cas0, \" c=\", c, \"\\n\")\n\t}\n\tgoto retc\n```\n\n##### sclose:\n\n```go\nsclose:\n\t// send on closed channel\n\tselunlock(scases, lockorder)\n\t// 向一个close的channel发送消息,就发生panic\n\tpanic(plainError(\"send on closed channel\"))\n}\n```\n\n\n##### retc:\n\n```go\nretc:\n\tif cas.releasetime > 0 {\n\t\tblockevent(cas.releasetime-t0, 1)\n\t}\n\treturn casi, recvOK\n```\n\n#### channel的recv和send方式:\n\n```go\n\n1、当 case 不包含 Channel 时；\n    这种 case 会被跳过；\n2、当 case 会从 Channel 中recv数据时；\n    如果当前 Channel 的 sendq 上有等待的 Goroutine，就会跳到 recv 标签并从缓冲区读取数据后将等待 Goroutine 中的数据放入到缓冲区中相同的位置；\n    如果当前 Channel 的缓冲区不为空，就会跳到 bufrecv 标签处从缓冲区获取数据；\n    如果当前 Channel 已经被关闭，就会跳到 rclose 做一些清除的收尾工作；\n3、当 case 会向 Channel send数据时；\n    如果当前 Channel 已经被关，闭就会直接跳到 sclose 标签，触发 panic 尝试中止程序；\n    如果当前 Channel 的 recvq 上有等待的 Goroutine，就会跳到 send 标签向 Channel 发送数据；\n    如果当前 Channel 的缓冲区存在空闲位置，就会将待发送的数据存入缓冲区；\n4、当 select 语句中包含 default 时；\n    表示前面的所有 case 都没有被执行，这里会解锁所有 Channel 并返回，意味着当前 select 结构中的收发都是非阻塞的；\n\n```\n\n### End","source":"_posts/39-select源码实现分析.md","raw":"---\ntitle: 「39」Go select源码实现分析\ndate: '2021/2/22 12:10:17'\nupdated: '2021/2/23 21:10:17'\nkeywords: 'Go,select,selectgo源码'\ntags:\n  - Go\n  - 源码\n  - Day\nmathjax: true\nabbrlink: e1051649\n---\n\n### 前序\n\n关于Go中select的特性，很多坑，也容易栽。\n\n好奇底层 到计算机层面到底是如何处理的？！\n\n如果有Go的相关经验，就晓得select经常性配合chan一起来使用，\n有个问题：线程安全吗？ 多个case到底是如何选择的？ 随机么？why?\n\n<!--more-->\n### version\n>go version 1.14\n\n### 简单使用\n\n>例1:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc SelectGo(cc, end chan int) {\n\tx, y := -1, 0\n\tfor {\n\t\tselect {\n\t\tcase cc <- x:\n\t\t\tx, y = y, x+y\n\t\tcase <-end:\n\t\t\tfmt.Println(\"end\")\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n>上面的结构会等待 cc <- x或者 <-end两个任意一个返回，无论哪个表达式返回都会立刻执行case的代码块。\n\n>当select中的两个case都满足条件，那就随机触发其中一个。\n\n\n#### 汇编实现：\n\n```go\n\n$ go tool compile -N -l -S sselect.go \n\"\".SelectGo STEXT size=490 args=0x10 locals=0xf0 funcid=0x0 \n        // SelectGo 函数\n        0x0000 00000 (sselect.go:5)     TEXT    \"\".SelectGo(SB), ABIInternal, $240-16\n        0x0000 00000 (sselect.go:5)     MOVQ    (TLS), CX\n        0x0009 00009 (sselect.go:5)     LEAQ    -112(SP), AX\n        0x000e 00014 (sselect.go:5)     CMPQ    AX, 16(CX)\n        0x0012 00018 (sselect.go:5)     PCDATA  $0, $-2\n        0x0012 00018 (sselect.go:5)     JLS     480\n        0x0018 00024 (sselect.go:5)     PCDATA  $0, $-1\n        0x0018 00024 (sselect.go:5)     SUBQ    $240, SP\n        0x001f 00031 (sselect.go:5)     MOVQ    BP, 232(SP)\n        0x0027 00039 (sselect.go:5)     LEAQ    232(SP), BP\n        0x002f 00047 (sselect.go:5)     FUNCDATA        $0, gclocals·dc9b0298814590ca3ffc3a889546fc8b(SB)\n        0x002f 00047 (sselect.go:5)     FUNCDATA        $1, gclocals·90105ebf2cf472b05305b6351ad183b7(SB)\n        0x002f 00047 (sselect.go:5)     FUNCDATA        $2, \"\".SelectGo.stkobj(SB)\n        0x002f 00047 (sselect.go:6)     MOVQ    $0, \"\".x+80(SP)\n        0x0038 00056 (sselect.go:6)     MOVQ    $1, \"\".y+72(SP)\n        0x0041 00065 (sselect.go:7)     JMP     67\n        0x0043 00067 (sselect.go:9)     JMP     69\n        0x0045 00069 (sselect.go:9)     MOVQ    \"\".c+248(SP), AX\n        0x004d 00077 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_4+128(SP)\n        0x0055 00085 (sselect.go:9)     MOVQ    \"\".x+80(SP), AX\n        0x005a 00090 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_5+96(SP)\n        0x005f 00095 (sselect.go:11)    MOVQ    \"\".quit+256(SP), AX\n        0x0067 00103 (sselect.go:11)    MOVQ    AX, \"\"..autotmp_6+120(SP)\n        0x006c 00108 (sselect.go:8)     XORPS   X0, X0\n        0x006f 00111 (sselect.go:8)     MOVUPS  X0, \"\"..autotmp_8+200(SP)\n        0x0077 00119 (sselect.go:8)     MOVUPS  X0, \"\"..autotmp_8+216(SP)\n        0x007f 00127 (sselect.go:9)     MOVQ    \"\"..autotmp_4+128(SP), AX\n        0x0087 00135 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_8+200(SP)\n        0x008f 00143 (sselect.go:9)     LEAQ    \"\"..autotmp_5+96(SP), AX\n        0x0094 00148 (sselect.go:9)     MOVQ    AX, \"\"..autotmp_8+208(SP)\n        0x009c 00156 (sselect.go:11)    MOVQ    \"\"..autotmp_6+120(SP), AX\n        0x00a1 00161 (sselect.go:11)    MOVQ    AX, \"\"..autotmp_8+216(SP)\n        0x00a9 00169 (sselect.go:8)     LEAQ    \"\"..autotmp_8+200(SP), AX\n        0x00b1 00177 (sselect.go:8)     MOVQ    AX, \"\"..autotmp_12+152(SP)\n        0x00b9 00185 (sselect.go:8)     LEAQ    \"\"..autotmp_9+88(SP), AX\n        0x00be 00190 (sselect.go:8)     MOVQ    AX, \"\"..autotmp_13+144(SP)\n        0x00c6 00198 (sselect.go:8)     MOVQ    \"\"..autotmp_12+152(SP), CX\n        0x00ce 00206 (sselect.go:8)     MOVQ    CX, (SP)\n        0x00d2 00210 (sselect.go:8)     MOVQ    AX, 8(SP)\n        0x00d7 00215 (sselect.go:8)     MOVQ    $0, 16(SP)\n        0x00e0 00224 (sselect.go:8)     MOVQ    $1, 24(SP)\n        0x00e9 00233 (sselect.go:8)     MOVQ    $1, 32(SP)\n        0x00f2 00242 (sselect.go:8)     MOVB    $1, 40(SP)\n        0x00f7 00247 (sselect.go:8)     PCDATA  $1, $0\n        0x00f7 00247 (sselect.go:8)     CALL    runtime.selectgo(SB)\n        0x00fc 00252 (sselect.go:8)     MOVQ    48(SP), AX\n        0x0101 00257 (sselect.go:8)     MOVBLZX 56(SP), CX\n        0x0106 00262 (sselect.go:8)     MOVQ    AX, \"\"..autotmp_10+112(SP)\n        0x010b 00267 (sselect.go:8)     MOVB    CL, \"\"..autotmp_11+71(SP)\n        0x010f 00271 (sselect.go:9)     CMPQ    \"\"..autotmp_10+112(SP), $0\n        0x0115 00277 (sselect.go:9)     JEQ     281\n        0x0117 00279 (sselect.go:9)     JMP     327\n        0x0119 00281 (sselect.go:10)    MOVQ    \"\".x+80(SP), AX\n        0x011e 00286 (sselect.go:10)    ADDQ    \"\".y+72(SP), AX\n        0x0123 00291 (sselect.go:10)    MOVQ    AX, \"\"..autotmp_14+104(SP)\n        0x0128 00296 (sselect.go:10)    MOVQ    \"\".y+72(SP), AX\n        0x012d 00301 (sselect.go:10)    MOVQ    AX, \"\".x+80(SP)\n        0x0132 00306 (sselect.go:10)    MOVQ    \"\"..autotmp_14+104(SP), AX\n        0x0137 00311 (sselect.go:10)    MOVQ    AX, \"\".y+72(SP)\n        0x013c 00316 (sselect.go:9)     JMP     318\n        0x013e 00318 (sselect.go:9)     PCDATA  $1, $-1\n        0x013e 00318 (sselect.go:9)     NOP\n        0x0140 00320 (sselect.go:9)     JMP     322\n        0x0142 00322 (sselect.go:9)     JMP     67\n        0x0147 00327 (sselect.go:11)    CMPQ    \"\"..autotmp_10+112(SP), $1\n        0x014d 00333 (sselect.go:11)    JEQ     340\n        0x014f 00335 (sselect.go:11)    JMP     478\n        0x0154 00340 (sselect.go:12)    XORPS   X0, X0\n        0x0157 00343 (sselect.go:12)    MOVUPS  X0, \"\"..autotmp_7+160(SP)\n        0x015f 00351 (sselect.go:12)    LEAQ    \"\"..autotmp_7+160(SP), AX\n        0x0167 00359 (sselect.go:12)    MOVQ    AX, \"\"..autotmp_16+136(SP)\n        0x016f 00367 (sselect.go:12)    TESTB   AL, (AX)\n        0x0171 00369 (sselect.go:12)    LEAQ    type.string(SB), CX\n        0x0178 00376 (sselect.go:12)    MOVQ    CX, \"\"..autotmp_7+160(SP)\n        0x0180 00384 (sselect.go:12)    LEAQ    \"\"..stmp_0(SB), CX\n        0x0187 00391 (sselect.go:12)    MOVQ    CX, \"\"..autotmp_7+168(SP)\n        0x018f 00399 (sselect.go:12)    TESTB   AL, (AX)\n        0x0191 00401 (sselect.go:12)    JMP     403\n        0x0193 00403 (sselect.go:12)    MOVQ    AX, \"\"..autotmp_15+176(SP)\n        0x019b 00411 (sselect.go:12)    MOVQ    $1, \"\"..autotmp_15+184(SP)\n        0x01a7 00423 (sselect.go:12)    MOVQ    $1, \"\"..autotmp_15+192(SP)\n        0x01b3 00435 (sselect.go:12)    MOVQ    AX, (SP)\n        0x01b7 00439 (sselect.go:12)    MOVQ    $1, 8(SP)\n        0x01c0 00448 (sselect.go:12)    MOVQ    $1, 16(SP)\n        0x01c9 00457 (sselect.go:12)    PCDATA  $1, $1\n        0x01c9 00457 (sselect.go:12)    CALL    fmt.Println(SB)\n        0x01ce 00462 (sselect.go:13)    MOVQ    232(SP), BP\n        0x01d6 00470 (sselect.go:13)    ADDQ    $240, SP\n        0x01dd 00477 (sselect.go:13)    RET\n        0x01de 00478 (sselect.go:11)    PCDATA  $1, $-1\n        0x01de 00478 (sselect.go:11)    XCHGL   AX, AX\n        0x01df 00479 (sselect.go:11)    NOP\n        0x01df 00479 (sselect.go:5)     PCDATA  $1, $-1\n        0x01df 00479 (sselect.go:5)     PCDATA  $0, $-2\n        0x01df 00479 (sselect.go:5)     NOP\n        0x01e0 00480 (sselect.go:5)     CALL    runtime.morestack_noctxt(SB)\n        0x01e5 00485 (sselect.go:5)     PCDATA  $0, $-1\n        0x01e5 00485 (sselect.go:5)     JMP     0\n        ......\n        ....\n        ...\n        ..\n        .\n```\n\n\n### 场景\n\n\n#### 非阻塞式：\n\n```go\nfunc main() {\n\tch := make(chan int)\n\tselect {\n\tcase i := <-ch:\n\t\tprintln(i)\n\n\tdefault:\n\t\tprintln(\"default\")\n\t}\n}\n\n$ go run main.go\ndefault\n```\n\n>select同时监听多个case是否可执行，如果多个case不可执行，有default就执行。\n\n#### 随机执行\n\n>关于下面的程序到底是打印什么？\n\n```go\nfunc main() {\n\tch := make(chan int)\n\n\tgo func() {\n\t\tfor range time.Tick(1 * time.Second) {\n\t\t\tch <- 0\n\t\t}\n\t}()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ch:\n\t\t\tprintln(\"case1\")\n\t\tcase <-ch:\n\t\t\tprintln(\"case2\")\n\t\t}\n\n\t}\n}\n```\n\n##### outputs:\n\n* 随机性\n```go\ncase1\ncase2\ncase1\n...\n```\n\n### 正题：为何是随机？\n\n#### [select case的结构](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29)\n\n```go\ntype scase struct {\n\tc           *hchan         // chan\n\telem        unsafe.Pointer // data element\n\tkind        uint16\n\tpc          uintptr // race pc (for race detector / msan)\n\treleasetime int64\n}\n```\n\n#### 实现原理\n\n* go对于中间代码会有部分的优化： [walkselectcases](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108)\n\n\n```go\nfunc walkselectcases(cases *Nodes) []*Node {\n\tncas := cases.Len()\n\tsellineno := lineno\n\n\t// optimization: zero-case select 没有case的情况\n\tif ncas == 0 {\n\t\treturn []*Node{mkcall(\"block\", nil, nil)}\n\t}\n\n\t// optimization: one-case select: single op.\n\tif ncas == 1 {\n        ..........\n        ........\n        ......\n        ...\n        ..\n        .\n    \n}\n```\n##### 随机化原因？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210223_052947.png)\n\n* 关于fastrandn后面单独分析吧，还挺有意思的。\n\n##### 没有case,单单一个select情况:\n\n>前几行就写的很清楚了。\n\n```go\nfunc block() {\n\tgopark(nil, nil, waitReasonSelectNoCases, traceEvGoStop, 1) // forever\n}\n```\n\n###### 多看一步：\n* waitReasonSelectNoCases干嘛的？\n\n这里逻列了g wait的所有情况，有什么用，不是这次研究的重点！\n有兴趣可以下来查查，看看哪里都用到了。\n[链接🔗](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L948)\n\n```go\nconst (\n\twaitReasonZero                  waitReason = iota // \"\"\n\twaitReasonGCAssistMarking                         // \"GC assist marking\"\n\twaitReasonIOWait                                  // \"IO wait\"\n\twaitReasonChanReceiveNilChan                      // \"chan receive (nil chan)\"\n\twaitReasonChanSendNilChan                         // \"chan send (nil chan)\"\n\twaitReasonDumpingHeap                             // \"dumping heap\"\n\twaitReasonGarbageCollection                       // \"garbage collection\"\n\twaitReasonGarbageCollectionScan                   // \"garbage collection scan\"\n\twaitReasonPanicWait                               // \"panicwait\"\n\twaitReasonSelect                                  // \"select\"\n\twaitReasonSelectNoCases                           // \"select (no cases)\"\n\twaitReasonGCAssistWait                            // \"GC assist wait\"\n\twaitReasonGCSweepWait                             // \"GC sweep wait\"\n\twaitReasonGCScavengeWait                          // \"GC scavenge wait\"\n\twaitReasonChanReceive                             // \"chan receive\"\n\twaitReasonChanSend                                // \"chan send\"\n\twaitReasonFinalizerWait                           // \"finalizer wait\"\n\twaitReasonForceGGIdle                             // \"force gc (idle)\"\n\twaitReasonSemacquire                              // \"semacquire\"\n\twaitReasonSleep                                   // \"sleep\"\n\twaitReasonSyncCondWait                            // \"sync.Cond.Wait\"\n\twaitReasonTimerGoroutineIdle                      // \"timer goroutine (idle)\"\n\twaitReasonTraceReaderBlocked                      // \"trace reader (blocked)\"\n\twaitReasonWaitForGCCycle                          // \"wait for GC cycle\"\n\twaitReasonGCWorkerIdle                            // \"GC worker (idle)\"\n\twaitReasonPreempted                               // \"preempted\"\n)\n```\n\n\n##### 非阻塞的操作\n\n像例子1那样，如果两个case，包含一个default，则为非阻塞的操作。\n[walkselectcases](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108)\n\n```go\nfunc walkselectcases(cases *Nodes) []*Node {\n\tncas := cases.Len()\n\tsellineno := lineno\n\n\t// optimization: zero-case select\n\tif ncas == 0 {\n\t\treturn []*Node{mkcall(\"block\", nil, nil)}\n\t}\n\n\t// optimization: one-case select: single op.\n\tif ncas == 1 {\n        // 包含default的情况\n\t\tcas := cases.First()\n\t\tsetlineno(cas)\n\t\tl := cas.Ninit.Slice()\n\t\tif cas.Left != nil { // not default:\n\t\t\tn := cas.Left\n\t\t\tl = append(l, n.Ninit.Slice()...)\n\t\t\tn.Ninit.Set(nil)\n\t\t\tswitch n.Op {\n\t\t\tdefault:\n\t\t\t\tFatalf(\"select %v\", n.Op)\n\n\t\t\tcase OSEND:\n\t\t\t\t// already ok\n\n\t\t\tcase OSELRECV, OSELRECV2:\n\t\t\t\tif n.Op == OSELRECV || n.List.Len() == 0 {\n\t\t\t\t\tif n.Left == nil {\n\t\t\t\t\t\tn = n.Right\n\t\t\t\t\t} else {\n\t\t\t\t\t\tn.Op = OAS\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tif n.Left == nil {\n\t\t\t\t\tnblank = typecheck(nblank, ctxExpr|ctxAssign)\n\t\t\t\t\tn.Left = nblank\n\t\t\t\t}\n\n\t\t\t\tn.Op = OAS2\n\t\t\t\tn.List.Prepend(n.Left)\n\t\t\t\tn.Rlist.Set1(n.Right)\n\t\t\t\tn.Right = nil\n\t\t\t\tn.Left = nil\n\t\t\t\tn.SetTypecheck(0)\n\t\t\t\tn = typecheck(n, ctxStmt)\n\t\t\t}\n\n\t\t\tl = append(l, n)\n\t\t}\n\n\t\tl = append(l, cas.Nbody.Slice()...)\n\t\tl = append(l, nod(OBREAK, nil, nil))\n\t\treturn l\n\t}\n\n    ....\n\n}\n\n```\n\n#### 流程化问题\n\n\n* 1、将所有的case转换成包含channel等信息的[runtime.scase结构](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29)\n* 2、调用运行时函数selectgo从多个就绪的channel中选择一个可以执行的scase结构体。\n* 3、for循环生成一组if语句，判断case是否被选中。\n\n##### case转换为if的情况：\n\n[reflect_rselect🔗](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L542)\n\n```go\n//go:linkname reflect_rselect reflect.rselect\nfunc reflect_rselect(cases []runtimeSelect) (int, bool) {\n\tif len(cases) == 0 {\n\t\tblock()\n\t}\n\tsel := make([]scase, len(cases)) // 初始化\n\torig := make([]int, len(cases))\n\tnsends, nrecvs := 0, 0\n\tdflt := -1\n\tfor i, rc := range cases {\n\t\tvar j int\n\t\tswitch rc.dir {\n\t\tcase selectDefault:\n\t\t\tdflt = i\n\t\t\tcontinue\n\t\tcase selectSend:\n\t\t\tj = nsends\n\t\t\tnsends++\n\t\tcase selectRecv:\n\t\t\tnrecvs++\n\t\t\tj = len(cases) - nrecvs\n\t\t}\n\n\t\tsel[j] = scase{c: rc.ch, elem: rc.val}\n\t\torig[j] = i\n\t}\n\n\t// Only a default case. 只有default的情况\n\tif nsends+nrecvs == 0 {\n\t\treturn dflt, false\n\t}\n\n\t// Compact sel and orig if necessary.\n\tif nsends+nrecvs < len(cases) {\n\t\tcopy(sel[nsends:], sel[len(cases)-nrecvs:])\n\t\tcopy(orig[nsends:], orig[len(cases)-nrecvs:])\n\t}\n\n\torder := make([]uint16, 2*(nsends+nrecvs))\n\tvar pc0 *uintptr\n\tif raceenabled {\n\t\tpcs := make([]uintptr, nsends+nrecvs)\n\t\tfor i := range pcs {\n\t\t\tselectsetpc(&pcs[i])\n\t\t}\n\t\tpc0 = &pcs[0]\n\t}\n\t//调用selectgo获取结果\n\tchosen, recvOK := selectgo(&sel[0], &order[0], pc0, nsends, nrecvs, dflt == -1)\n\n\t// Translate chosen back to caller's ordering.\n\tif chosen < 0 {\n\t\tchosen = dflt\n\t} else {\n\t\tchosen = orig[chosen]\n\t}\n\treturn chosen, recvOK\n}\n\n```\n\n#### selectgo主循环\n\n>selectgo会根据不通的逻辑判断,跳转到不通的逻辑中,主要分为如下几部分:\n\n* bufrecv 可以从缓存区读取数据\n* bufsend 可以向缓存区写入数据\n* recv 可以从休眠的发送方获取数据\n* send 可以向休眠的接收方发送数据\n* rclose 可以从关闭的channel读取EOF\n* sclose 可以向关闭的channel发送数据\n* retc 结束调用并返回\n\n##### send & recv分析 \n\n```go\n.\n..\n...\n....\n.....\n\nloop:\n\t// pass 1 - look for something already waiting\n\tvar dfli int\n\tvar dfl *scase\n\tvar casi int\n\tvar cas *scase\n\tvar recvOK bool\n\tfor i := 0; i < ncases; i++ {\n\t\tcasi = int(pollorder[i])\n\t\tcas = &scases[casi]\n\t\tc = cas.c\n\n\t\tswitch cas.kind {\n\t\tcase caseNil:\n\t\t\tcontinue\n\n\t\tcase caseRecv:\n\t\t\tsg = c.sendq.dequeue()\n\t\t\tif sg != nil {\n\t\t\t\tgoto recv\n\t\t\t}\n\t\t\tif c.qcount > 0 {\n\t\t\t\t//缓存区total>0\n\t\t\t\tgoto bufrecv\n\t\t\t}\n\t\t\tif c.closed != 0 {\n\t\t\t\t// chan已经关闭\n\t\t\t\tgoto rclose\n\t\t\t}\n\n\t\tcase caseSend:\n\t\t\tif raceenabled {\n\t\t\t\tracereadpc(c.raceaddr(), cas.pc, chansendpc)\n\t\t\t}\n\t\t\tif c.closed != 0 {\n\t\t\t\t// channel关闭了,但是向其发送消息\n\t\t\t\tgoto sclose\n\t\t\t}\n\t\t\tsg = c.recvq.dequeue()\n\t\t\tif sg != nil {\n\t\t\t\t// 向出队的channel发送消息\n\t\t\t\tgoto send\n\t\t\t}\n\t\t\tif c.qcount < c.dataqsiz {\n\n\t\t\t\tgoto bufsend\n\t\t\t}\n\n\t\tcase caseDefault:\n\t\t\tdfli = casi\n\t\t\tdfl = cas\n\t\t}\n\t}\n.....\n....\n...\n..\n.\n```\n\n>这里可能要温习下hchan结构:\n\n```go\n\ntype hchan struct {\n\tqcount   uint           // total data in the queue\n\tdataqsiz uint           // size of the circular queue\n\tbuf      unsafe.Pointer // points to an array of dataqsiz elements\n\telemsize uint16\n\tclosed   uint32\n\telemtype *_type // element type\n\tsendx    uint   // send index\n\trecvx    uint   // receive index\n\trecvq    waitq  // list of recv waiters\n\tsendq    waitq  // list of send waiters\n\n\t// lock protects all fields in hchan, as well as several\n\t// fields in sudogs blocked on this channel.\n\t//\n\t// Do not change another G's status while holding this lock\n\t// (in particular, do not ready a G), as this can deadlock\n\t// with stack shrinking.\n\tlock mutex\n}\n```\n\n##### bufrecv:\n\n```go\nbufrecv:\n\t// can receive from buffer\n\tif raceenabled {\n\t\tif cas.elem != nil {\n\t\t\traceWriteObjectPC(c.elemtype, cas.elem, cas.pc, chanrecvpc)\n\t\t}\n\t\traceacquire(chanbuf(c, c.recvx))\n\t\tracerelease(chanbuf(c, c.recvx))\n\t}\n\tif msanenabled && cas.elem != nil {\n\t\tmsanwrite(cas.elem, c.elemtype.size)\n\t}\n\t// recv 赋值\n\trecvOK = true\n\tqp = chanbuf(c, c.recvx) // chan指针指向\n\tif cas.elem != nil { \n\t\ttypedmemmove(c.elemtype, cas.elem, qp)\n\t}\n\ttypedmemclr(c.elemtype, qp)\n\tc.recvx++\n\tif c.recvx == c.dataqsiz {\n\t\tc.recvx = 0\n\t}\n\tc.qcount--\n\tselunlock(scases, lockorder)\n\tgoto retc\n\n```\n\n##### bufsend:\n\n```go\nbufsend:\n\t// can send to buffer\n\tif raceenabled {\n\t\traceacquire(chanbuf(c, c.sendx))\n\t\tracerelease(chanbuf(c, c.sendx))\n\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)\n\t}\n\tif msanenabled {\n\t\tmsanread(cas.elem, c.elemtype.size)\n\t}\n\ttypedmemmove(c.elemtype, chanbuf(c, c.sendx), cas.elem)\n\tc.sendx++\n\tif c.sendx == c.dataqsiz { // 缓存区满了\n\t\tc.sendx = 0\n\t}\n\tc.qcount++\n\tselunlock(scases, lockorder)\n\tgoto retc\n```\n\n##### recv:\n\n```go\nrecv:\n\t// can receive from sleeping sender (sg)\n\trecv(c, sg, cas.elem, func() { selunlock(scases, lockorder) }, 2)\n\tif debugSelect {\n\t\tprint(\"syncrecv: cas0=\", cas0, \" c=\", c, \"\\n\")\n\t}\n\trecvOK = true\n\tgoto retc\n\n```\n\n##### rclose:\n\n```go\n\t// read at end of closed channel\n\tselunlock(scases, lockorder)\n\trecvOK = false\n\tif cas.elem != nil {\n\t\ttypedmemclr(c.elemtype, cas.elem)\n\t}\n\tif raceenabled {\n\t\traceacquire(c.raceaddr())\n\t}\n\tgoto retc\n```\n\n##### send:\n\n```go\nsend:\n\t// can send to a sleeping receiver (sg)\n\tif raceenabled {\n\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)\n\t}\n\tif msanenabled {\n\t\tmsanread(cas.elem, c.elemtype.size)\n\t}\n\t// send函数\n\tsend(c, sg, cas.elem, func() { selunlock(scases, lockorder) }, 2)\n\tif debugSelect {\n\t\tprint(\"syncsend: cas0=\", cas0, \" c=\", c, \"\\n\")\n\t}\n\tgoto retc\n```\n\n##### sclose:\n\n```go\nsclose:\n\t// send on closed channel\n\tselunlock(scases, lockorder)\n\t// 向一个close的channel发送消息,就发生panic\n\tpanic(plainError(\"send on closed channel\"))\n}\n```\n\n\n##### retc:\n\n```go\nretc:\n\tif cas.releasetime > 0 {\n\t\tblockevent(cas.releasetime-t0, 1)\n\t}\n\treturn casi, recvOK\n```\n\n#### channel的recv和send方式:\n\n```go\n\n1、当 case 不包含 Channel 时；\n    这种 case 会被跳过；\n2、当 case 会从 Channel 中recv数据时；\n    如果当前 Channel 的 sendq 上有等待的 Goroutine，就会跳到 recv 标签并从缓冲区读取数据后将等待 Goroutine 中的数据放入到缓冲区中相同的位置；\n    如果当前 Channel 的缓冲区不为空，就会跳到 bufrecv 标签处从缓冲区获取数据；\n    如果当前 Channel 已经被关闭，就会跳到 rclose 做一些清除的收尾工作；\n3、当 case 会向 Channel send数据时；\n    如果当前 Channel 已经被关，闭就会直接跳到 sclose 标签，触发 panic 尝试中止程序；\n    如果当前 Channel 的 recvq 上有等待的 Goroutine，就会跳到 send 标签向 Channel 发送数据；\n    如果当前 Channel 的缓冲区存在空闲位置，就会将待发送的数据存入缓冲区；\n4、当 select 语句中包含 default 时；\n    表示前面的所有 case 都没有被执行，这里会解锁所有 Channel 并返回，意味着当前 select 结构中的收发都是非阻塞的；\n\n```\n\n### End","slug":"39-select源码实现分析","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d56002szfqxhwbx1btx","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>关于Go中select的特性，很多坑，也容易栽。</p>\n<p>好奇底层 到计算机层面到底是如何处理的？！</p>\n<p>如果有Go的相关经验，就晓得select经常性配合chan一起来使用，<br>\n有个问题：线程安全吗？ 多个case到底是如何选择的？ 随机么？why?</p>\n<span id=\"more\"></span>\n<h3 id=\"version\"><a class=\"header-anchor\" href=\"#version\">¶</a>version</h3>\n<blockquote>\n<p>go version 1.14</p>\n</blockquote>\n<h3 id=\"简单使用\"><a class=\"header-anchor\" href=\"#简单使用\">¶</a>简单使用</h3>\n<blockquote>\n<p>例1:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SelectGo</span><span class=\"params\">(cc, end <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">-1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> cc &lt;- x:</span><br><span class=\"line\">\t\t\tx, y = y, x+y</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-end:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的结构会等待 cc &lt;- x或者 &lt;-end两个任意一个返回，无论哪个表达式返回都会立刻执行case的代码块。</p>\n</blockquote>\n<blockquote>\n<p>当select中的两个case都满足条件，那就随机触发其中一个。</p>\n</blockquote>\n<h4 id=\"汇编实现：\"><a class=\"header-anchor\" href=\"#汇编实现：\">¶</a>汇编实现：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> tool compile -N -l -S sselect.<span class=\"keyword\">go</span> </span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.SelectGo STEXT size=<span class=\"number\">490</span> args=<span class=\"number\">0x10</span> locals=<span class=\"number\">0xf0</span> funcid=<span class=\"number\">0x0</span> </span><br><span class=\"line\">        <span class=\"comment\">// SelectGo 函数</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     TEXT    <span class=\"string\">&quot;&quot;</span>.SelectGo(SB), ABIInternal, $<span class=\"number\">240</span><span class=\"number\">-16</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     MOVQ    (TLS), CX</span><br><span class=\"line\">        <span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     LEAQ    <span class=\"number\">-112</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x000e</span> <span class=\"number\">00014</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     CMPQ    AX, <span class=\"number\">16</span>(CX)</span><br><span class=\"line\">        <span class=\"number\">0x0012</span> <span class=\"number\">00018</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x0012</span> <span class=\"number\">00018</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     JLS     <span class=\"number\">480</span></span><br><span class=\"line\">        <span class=\"number\">0x0018</span> <span class=\"number\">00024</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0018</span> <span class=\"number\">00024</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     SUBQ    $<span class=\"number\">240</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x001f</span> <span class=\"number\">00031</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     MOVQ    BP, <span class=\"number\">232</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0027</span> <span class=\"number\">00039</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     LEAQ    <span class=\"number\">232</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     FUNCDATA        $<span class=\"number\">0</span>, gclocals·dc9b0298814590ca3ffc3a889546fc8b(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">90105</span>ebf2cf472b05305b6351ad183b7(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     FUNCDATA        $<span class=\"number\">2</span>, <span class=\"string\">&quot;&quot;</span>.SelectGo.stkobj(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">6</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0038</span> <span class=\"number\">00056</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">6</span>)     MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0041</span> <span class=\"number\">00065</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)     JMP     <span class=\"number\">67</span></span><br><span class=\"line\">        <span class=\"number\">0x0043</span> <span class=\"number\">00067</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">69</span></span><br><span class=\"line\">        <span class=\"number\">0x0045</span> <span class=\"number\">00069</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>.c+<span class=\"number\">248</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x004d</span> <span class=\"number\">00077</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_4+<span class=\"number\">128</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0055</span> <span class=\"number\">00085</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x005a</span> <span class=\"number\">00090</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_5+<span class=\"number\">96</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x005f</span> <span class=\"number\">00095</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>.quit+<span class=\"number\">256</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0067</span> <span class=\"number\">00103</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_6+<span class=\"number\">120</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x006c</span> <span class=\"number\">00108</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     XORPS   X0, X0</span><br><span class=\"line\">        <span class=\"number\">0x006f</span> <span class=\"number\">00111</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVUPS  X0, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">200</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVUPS  X0, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">216</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x007f</span> <span class=\"number\">00127</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_4+<span class=\"number\">128</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0087</span> <span class=\"number\">00135</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">200</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x008f</span> <span class=\"number\">00143</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_5+<span class=\"number\">96</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">208</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x009c</span> <span class=\"number\">00156</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_6+<span class=\"number\">120</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x00a1</span> <span class=\"number\">00161</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">216</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00a9</span> <span class=\"number\">00169</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">200</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x00b1</span> <span class=\"number\">00177</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_12+<span class=\"number\">152</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00b9</span> <span class=\"number\">00185</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_9+<span class=\"number\">88</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x00be</span> <span class=\"number\">00190</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_13+<span class=\"number\">144</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00c6</span> <span class=\"number\">00198</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_12+<span class=\"number\">152</span>(SP), CX</span><br><span class=\"line\">        <span class=\"number\">0x00ce</span> <span class=\"number\">00206</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    CX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x00d2</span> <span class=\"number\">00210</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00d7</span> <span class=\"number\">00215</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00e0</span> <span class=\"number\">00224</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00e9</span> <span class=\"number\">00233</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">32</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00f2</span> <span class=\"number\">00242</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVB    $<span class=\"number\">1</span>, <span class=\"number\">40</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00f7</span> <span class=\"number\">00247</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x00f7</span> <span class=\"number\">00247</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     CALL    runtime.selectgo(SB)</span><br><span class=\"line\">        <span class=\"number\">0x00fc</span> <span class=\"number\">00252</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    <span class=\"number\">48</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0101</span> <span class=\"number\">00257</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVBLZX <span class=\"number\">56</span>(SP), CX</span><br><span class=\"line\">        <span class=\"number\">0x0106</span> <span class=\"number\">00262</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_10+<span class=\"number\">112</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x010b</span> <span class=\"number\">00267</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVB    CL, <span class=\"string\">&quot;&quot;</span>..autotmp_11+<span class=\"number\">71</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x010f</span> <span class=\"number\">00271</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     CMPQ    <span class=\"string\">&quot;&quot;</span>..autotmp_10+<span class=\"number\">112</span>(SP), $<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0115</span> <span class=\"number\">00277</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JEQ     <span class=\"number\">281</span></span><br><span class=\"line\">        <span class=\"number\">0x0117</span> <span class=\"number\">00279</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">327</span></span><br><span class=\"line\">        <span class=\"number\">0x0119</span> <span class=\"number\">00281</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x011e</span> <span class=\"number\">00286</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    ADDQ    <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0123</span> <span class=\"number\">00291</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_14+<span class=\"number\">104</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0128</span> <span class=\"number\">00296</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x012d</span> <span class=\"number\">00301</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0132</span> <span class=\"number\">00306</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_14+<span class=\"number\">104</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0137</span> <span class=\"number\">00311</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x013c</span> <span class=\"number\">00316</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">318</span></span><br><span class=\"line\">        <span class=\"number\">0x013e</span> <span class=\"number\">00318</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x013e</span> <span class=\"number\">00318</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x0140</span> <span class=\"number\">00320</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">322</span></span><br><span class=\"line\">        <span class=\"number\">0x0142</span> <span class=\"number\">00322</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">67</span></span><br><span class=\"line\">        <span class=\"number\">0x0147</span> <span class=\"number\">00327</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    CMPQ    <span class=\"string\">&quot;&quot;</span>..autotmp_10+<span class=\"number\">112</span>(SP), $<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"number\">0x014d</span> <span class=\"number\">00333</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    JEQ     <span class=\"number\">340</span></span><br><span class=\"line\">        <span class=\"number\">0x014f</span> <span class=\"number\">00335</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    JMP     <span class=\"number\">478</span></span><br><span class=\"line\">        <span class=\"number\">0x0154</span> <span class=\"number\">00340</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    XORPS   X0, X0</span><br><span class=\"line\">        <span class=\"number\">0x0157</span> <span class=\"number\">00343</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVUPS  X0, <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">160</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x015f</span> <span class=\"number\">00351</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">160</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0167</span> <span class=\"number\">00359</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_16+<span class=\"number\">136</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x016f</span> <span class=\"number\">00367</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    TESTB   AL, (AX)</span><br><span class=\"line\">        <span class=\"number\">0x0171</span> <span class=\"number\">00369</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    LEAQ    <span class=\"keyword\">type</span>.<span class=\"type\">string</span>(SB), CX</span><br><span class=\"line\">        <span class=\"number\">0x0178</span> <span class=\"number\">00376</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    CX, <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">160</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0180</span> <span class=\"number\">00384</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    LEAQ    <span class=\"string\">&quot;&quot;</span>..stmp_0(SB), CX</span><br><span class=\"line\">        <span class=\"number\">0x0187</span> <span class=\"number\">00391</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    CX, <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">168</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x018f</span> <span class=\"number\">00399</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    TESTB   AL, (AX)</span><br><span class=\"line\">        <span class=\"number\">0x0191</span> <span class=\"number\">00401</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    JMP     <span class=\"number\">403</span></span><br><span class=\"line\">        <span class=\"number\">0x0193</span> <span class=\"number\">00403</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_15+<span class=\"number\">176</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x019b</span> <span class=\"number\">00411</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_15+<span class=\"number\">184</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01a7</span> <span class=\"number\">00423</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_15+<span class=\"number\">192</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01b3</span> <span class=\"number\">00435</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    AX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x01b7</span> <span class=\"number\">00439</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01c0</span> <span class=\"number\">00448</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01c9</span> <span class=\"number\">00457</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"number\">0x01c9</span> <span class=\"number\">00457</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    CALL    fmt.Println(SB)</span><br><span class=\"line\">        <span class=\"number\">0x01ce</span> <span class=\"number\">00462</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>)    MOVQ    <span class=\"number\">232</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x01d6</span> <span class=\"number\">00470</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>)    ADDQ    $<span class=\"number\">240</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x01dd</span> <span class=\"number\">00477</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>)    RET</span><br><span class=\"line\">        <span class=\"number\">0x01de</span> <span class=\"number\">00478</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x01de</span> <span class=\"number\">00478</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    XCHGL   AX, AX</span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    NOP</span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x01e0</span> <span class=\"number\">00480</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     CALL    runtime.morestack_noctxt(SB)</span><br><span class=\"line\">        <span class=\"number\">0x01e5</span> <span class=\"number\">00485</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x01e5</span> <span class=\"number\">00485</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     JMP     <span class=\"number\">0</span></span><br><span class=\"line\">        ......</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ..</span><br><span class=\"line\">        .</span><br></pre></td></tr></table></figure>\n<h3 id=\"场景\"><a class=\"header-anchor\" href=\"#场景\">¶</a>场景</h3>\n<h4 id=\"非阻塞式：\"><a class=\"header-anchor\" href=\"#非阻塞式：\">¶</a>非阻塞式：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> i := &lt;-ch:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> run main.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"keyword\">default</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>select同时监听多个case是否可执行，如果多个case不可执行，有default就执行。</p>\n</blockquote>\n<h4 id=\"随机执行\"><a class=\"header-anchor\" href=\"#随机执行\">¶</a>随机执行</h4>\n<blockquote>\n<p>关于下面的程序到底是打印什么？</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">range</span> time.Tick(<span class=\"number\">1</span> * time.Second) &#123;</span><br><span class=\"line\">\t\t\tch &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ch:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;case1&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ch:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;case2&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs\"><a class=\"header-anchor\" href=\"#outputs\">¶</a>outputs:</h5>\n<ul>\n<li>随机性</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1</span><br><span class=\"line\">case2</span><br><span class=\"line\">case1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"正题：为何是随机？\"><a class=\"header-anchor\" href=\"#正题：为何是随机？\">¶</a>正题：为何是随机？</h3>\n<h4 id=\"select-case的结构\"><a class=\"header-anchor\" href=\"#select-case的结构\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29\">select case的结构</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> scase <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tc           *hchan         <span class=\"comment\">// chan</span></span><br><span class=\"line\">\telem        unsafe.Pointer <span class=\"comment\">// data element</span></span><br><span class=\"line\">\tkind        <span class=\"type\">uint16</span></span><br><span class=\"line\">\tpc          <span class=\"type\">uintptr</span> <span class=\"comment\">// race pc (for race detector / msan)</span></span><br><span class=\"line\">\treleasetime <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现原理\"><a class=\"header-anchor\" href=\"#实现原理\">¶</a>实现原理</h4>\n<ul>\n<li>go对于中间代码会有部分的优化： <a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108\">walkselectcases</a></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">walkselectcases</span><span class=\"params\">(cases *Nodes)</span></span> []*Node &#123;</span><br><span class=\"line\">\tncas := cases.Len()</span><br><span class=\"line\">\tsellineno := lineno</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: zero-case select 没有case的情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []*Node&#123;mkcall(<span class=\"string\">&quot;block&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>)&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: one-case select: single op.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        ..........</span><br><span class=\"line\">        ........</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ..</span><br><span class=\"line\">        .</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"随机化原因？\"><a class=\"header-anchor\" href=\"#随机化原因？\">¶</a>随机化原因？</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210223_052947.png\" alt=\"\"></p>\n<ul>\n<li>关于fastrandn后面单独分析吧，还挺有意思的。</li>\n</ul>\n<h5 id=\"没有case-单单一个select情况\"><a class=\"header-anchor\" href=\"#没有case-单单一个select情况\">¶</a>没有case,单单一个select情况:</h5>\n<blockquote>\n<p>前几行就写的很清楚了。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">block</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tgopark(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, waitReasonSelectNoCases, traceEvGoStop, <span class=\"number\">1</span>) <span class=\"comment\">// forever</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"多看一步：\"><a class=\"header-anchor\" href=\"#多看一步：\">¶</a>多看一步：</h6>\n<ul>\n<li>waitReasonSelectNoCases干嘛的？</li>\n</ul>\n<p>这里逻列了g wait的所有情况，有什么用，不是这次研究的重点！<br>\n有兴趣可以下来查查，看看哪里都用到了。<br>\n<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L948\">链接🔗</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\twaitReasonZero                  waitReason = <span class=\"literal\">iota</span> <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\">\twaitReasonGCAssistMarking                         <span class=\"comment\">// &quot;GC assist marking&quot;</span></span><br><span class=\"line\">\twaitReasonIOWait                                  <span class=\"comment\">// &quot;IO wait&quot;</span></span><br><span class=\"line\">\twaitReasonChanReceiveNilChan                      <span class=\"comment\">// &quot;chan receive (nil chan)&quot;</span></span><br><span class=\"line\">\twaitReasonChanSendNilChan                         <span class=\"comment\">// &quot;chan send (nil chan)&quot;</span></span><br><span class=\"line\">\twaitReasonDumpingHeap                             <span class=\"comment\">// &quot;dumping heap&quot;</span></span><br><span class=\"line\">\twaitReasonGarbageCollection                       <span class=\"comment\">// &quot;garbage collection&quot;</span></span><br><span class=\"line\">\twaitReasonGarbageCollectionScan                   <span class=\"comment\">// &quot;garbage collection scan&quot;</span></span><br><span class=\"line\">\twaitReasonPanicWait                               <span class=\"comment\">// &quot;panicwait&quot;</span></span><br><span class=\"line\">\twaitReasonSelect                                  <span class=\"comment\">// &quot;select&quot;</span></span><br><span class=\"line\">\twaitReasonSelectNoCases                           <span class=\"comment\">// &quot;select (no cases)&quot;</span></span><br><span class=\"line\">\twaitReasonGCAssistWait                            <span class=\"comment\">// &quot;GC assist wait&quot;</span></span><br><span class=\"line\">\twaitReasonGCSweepWait                             <span class=\"comment\">// &quot;GC sweep wait&quot;</span></span><br><span class=\"line\">\twaitReasonGCScavengeWait                          <span class=\"comment\">// &quot;GC scavenge wait&quot;</span></span><br><span class=\"line\">\twaitReasonChanReceive                             <span class=\"comment\">// &quot;chan receive&quot;</span></span><br><span class=\"line\">\twaitReasonChanSend                                <span class=\"comment\">// &quot;chan send&quot;</span></span><br><span class=\"line\">\twaitReasonFinalizerWait                           <span class=\"comment\">// &quot;finalizer wait&quot;</span></span><br><span class=\"line\">\twaitReasonForceGGIdle                             <span class=\"comment\">// &quot;force gc (idle)&quot;</span></span><br><span class=\"line\">\twaitReasonSemacquire                              <span class=\"comment\">// &quot;semacquire&quot;</span></span><br><span class=\"line\">\twaitReasonSleep                                   <span class=\"comment\">// &quot;sleep&quot;</span></span><br><span class=\"line\">\twaitReasonSyncCondWait                            <span class=\"comment\">// &quot;sync.Cond.Wait&quot;</span></span><br><span class=\"line\">\twaitReasonTimerGoroutineIdle                      <span class=\"comment\">// &quot;timer goroutine (idle)&quot;</span></span><br><span class=\"line\">\twaitReasonTraceReaderBlocked                      <span class=\"comment\">// &quot;trace reader (blocked)&quot;</span></span><br><span class=\"line\">\twaitReasonWaitForGCCycle                          <span class=\"comment\">// &quot;wait for GC cycle&quot;</span></span><br><span class=\"line\">\twaitReasonGCWorkerIdle                            <span class=\"comment\">// &quot;GC worker (idle)&quot;</span></span><br><span class=\"line\">\twaitReasonPreempted                               <span class=\"comment\">// &quot;preempted&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h5 id=\"非阻塞的操作\"><a class=\"header-anchor\" href=\"#非阻塞的操作\">¶</a>非阻塞的操作</h5>\n<p>像例子1那样，如果两个case，包含一个default，则为非阻塞的操作。<br>\n<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108\">walkselectcases</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">walkselectcases</span><span class=\"params\">(cases *Nodes)</span></span> []*Node &#123;</span><br><span class=\"line\">\tncas := cases.Len()</span><br><span class=\"line\">\tsellineno := lineno</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: zero-case select</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []*Node&#123;mkcall(<span class=\"string\">&quot;block&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>)&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: one-case select: single op.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 包含default的情况</span></span><br><span class=\"line\">\t\tcas := cases.First()</span><br><span class=\"line\">\t\tsetlineno(cas)</span><br><span class=\"line\">\t\tl := cas.Ninit.Slice()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cas.Left != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// not default:</span></span><br><span class=\"line\">\t\t\tn := cas.Left</span><br><span class=\"line\">\t\t\tl = <span class=\"built_in\">append</span>(l, n.Ninit.Slice()...)</span><br><span class=\"line\">\t\t\tn.Ninit.Set(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> n.Op &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tFatalf(<span class=\"string\">&quot;select %v&quot;</span>, n.Op)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> OSEND:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// already ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> OSELRECV, OSELRECV2:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> n.Op == OSELRECV || n.List.Len() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> n.Left == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tn = n.Right</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tn.Op = OAS</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> n.Left == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tnblank = typecheck(nblank, ctxExpr|ctxAssign)</span><br><span class=\"line\">\t\t\t\t\tn.Left = nblank</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tn.Op = OAS2</span><br><span class=\"line\">\t\t\t\tn.List.Prepend(n.Left)</span><br><span class=\"line\">\t\t\t\tn.Rlist.Set1(n.Right)</span><br><span class=\"line\">\t\t\t\tn.Right = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\tn.Left = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\tn.SetTypecheck(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tn = typecheck(n, ctxStmt)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tl = <span class=\"built_in\">append</span>(l, n)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tl = <span class=\"built_in\">append</span>(l, cas.Nbody.Slice()...)</span><br><span class=\"line\">\t\tl = <span class=\"built_in\">append</span>(l, nod(OBREAK, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"流程化问题\"><a class=\"header-anchor\" href=\"#流程化问题\">¶</a>流程化问题</h4>\n<ul>\n<li>1、将所有的case转换成包含channel等信息的<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29\">runtime.scase结构</a></li>\n<li>2、调用运行时函数selectgo从多个就绪的channel中选择一个可以执行的scase结构体。</li>\n<li>3、for循环生成一组if语句，判断case是否被选中。</li>\n</ul>\n<h5 id=\"case转换为if的情况：\"><a class=\"header-anchor\" href=\"#case转换为if的情况：\">¶</a>case转换为if的情况：</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L542\">reflect_rselect🔗</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:linkname reflect_rselect reflect.rselect</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reflect_rselect</span><span class=\"params\">(cases []runtimeSelect)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(cases) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tblock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsel := <span class=\"built_in\">make</span>([]scase, <span class=\"built_in\">len</span>(cases)) <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\torig := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(cases))</span><br><span class=\"line\">\tnsends, nrecvs := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\tdflt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, rc := <span class=\"keyword\">range</span> cases &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> j <span class=\"type\">int</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> rc.dir &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> selectDefault:</span><br><span class=\"line\">\t\t\tdflt = i</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> selectSend:</span><br><span class=\"line\">\t\t\tj = nsends</span><br><span class=\"line\">\t\t\tnsends++</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> selectRecv:</span><br><span class=\"line\">\t\t\tnrecvs++</span><br><span class=\"line\">\t\t\tj = <span class=\"built_in\">len</span>(cases) - nrecvs</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsel[j] = scase&#123;c: rc.ch, elem: rc.val&#125;</span><br><span class=\"line\">\t\torig[j] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Only a default case. 只有default的情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nsends+nrecvs == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dflt, <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Compact sel and orig if necessary.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nsends+nrecvs &lt; <span class=\"built_in\">len</span>(cases) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(sel[nsends:], sel[<span class=\"built_in\">len</span>(cases)-nrecvs:])</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(orig[nsends:], orig[<span class=\"built_in\">len</span>(cases)-nrecvs:])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\torder := <span class=\"built_in\">make</span>([]<span class=\"type\">uint16</span>, <span class=\"number\">2</span>*(nsends+nrecvs))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pc0 *<span class=\"type\">uintptr</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\tpcs := <span class=\"built_in\">make</span>([]<span class=\"type\">uintptr</span>, nsends+nrecvs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> pcs &#123;</span><br><span class=\"line\">\t\t\tselectsetpc(&amp;pcs[i])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpc0 = &amp;pcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//调用selectgo获取结果</span></span><br><span class=\"line\">\tchosen, recvOK := selectgo(&amp;sel[<span class=\"number\">0</span>], &amp;order[<span class=\"number\">0</span>], pc0, nsends, nrecvs, dflt == <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Translate chosen back to caller&#x27;s ordering.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> chosen &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tchosen = dflt</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tchosen = orig[chosen]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chosen, recvOK</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"selectgo主循环\"><a class=\"header-anchor\" href=\"#selectgo主循环\">¶</a>selectgo主循环</h4>\n<blockquote>\n<p>selectgo会根据不通的逻辑判断,跳转到不通的逻辑中,主要分为如下几部分:</p>\n</blockquote>\n<ul>\n<li>bufrecv 可以从缓存区读取数据</li>\n<li>bufsend 可以向缓存区写入数据</li>\n<li>recv 可以从休眠的发送方获取数据</li>\n<li>send 可以向休眠的接收方发送数据</li>\n<li>rclose 可以从关闭的channel读取EOF</li>\n<li>sclose 可以向关闭的channel发送数据</li>\n<li>retc 结束调用并返回</li>\n</ul>\n<h5 id=\"send-recv分析\"><a class=\"header-anchor\" href=\"#send-recv分析\">¶</a>send &amp; recv分析</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">..</span><br><span class=\"line\">...</span><br><span class=\"line\">....</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">loop:</span><br><span class=\"line\">\t<span class=\"comment\">// pass 1 - look for something already waiting</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dfli <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dfl *scase</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> casi <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cas *scase</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> recvOK <span class=\"type\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ncases; i++ &#123;</span><br><span class=\"line\">\t\tcasi = <span class=\"type\">int</span>(pollorder[i])</span><br><span class=\"line\">\t\tcas = &amp;scases[casi]</span><br><span class=\"line\">\t\tc = cas.c</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> cas.kind &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseNil:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseRecv:</span><br><span class=\"line\">\t\t\tsg = c.sendq.dequeue()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> sg != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> recv</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.qcount &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//缓存区total&gt;0</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> bufrecv</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.closed != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// chan已经关闭</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> rclose</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseSend:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\t\t\tracereadpc(c.raceaddr(), cas.pc, chansendpc)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.closed != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// channel关闭了,但是向其发送消息</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> sclose</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tsg = c.recvq.dequeue()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> sg != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 向出队的channel发送消息</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> send</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.qcount &lt; c.dataqsiz &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> bufsend</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseDefault:</span><br><span class=\"line\">\t\t\tdfli = casi</span><br><span class=\"line\">\t\t\tdfl = cas</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">.....</span><br><span class=\"line\">....</span><br><span class=\"line\">...</span><br><span class=\"line\">..</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里可能要温习下hchan结构:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> hchan <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tqcount   <span class=\"type\">uint</span>           <span class=\"comment\">// total data in the queue</span></span><br><span class=\"line\">\tdataqsiz <span class=\"type\">uint</span>           <span class=\"comment\">// size of the circular queue</span></span><br><span class=\"line\">\tbuf      unsafe.Pointer <span class=\"comment\">// points to an array of dataqsiz elements</span></span><br><span class=\"line\">\telemsize <span class=\"type\">uint16</span></span><br><span class=\"line\">\tclosed   <span class=\"type\">uint32</span></span><br><span class=\"line\">\telemtype *_type <span class=\"comment\">// element type</span></span><br><span class=\"line\">\tsendx    <span class=\"type\">uint</span>   <span class=\"comment\">// send index</span></span><br><span class=\"line\">\trecvx    <span class=\"type\">uint</span>   <span class=\"comment\">// receive index</span></span><br><span class=\"line\">\trecvq    waitq  <span class=\"comment\">// list of recv waiters</span></span><br><span class=\"line\">\tsendq    waitq  <span class=\"comment\">// list of send waiters</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lock protects all fields in hchan, as well as several</span></span><br><span class=\"line\">\t<span class=\"comment\">// fields in sudogs blocked on this channel.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class=\"line\">\t<span class=\"comment\">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class=\"line\">\t<span class=\"comment\">// with stack shrinking.</span></span><br><span class=\"line\">\tlock mutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"bufrecv\"><a class=\"header-anchor\" href=\"#bufrecv\">¶</a>bufrecv:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufrecv:</span><br><span class=\"line\">\t<span class=\"comment\">// can receive from buffer</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cas.elem != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\traceWriteObjectPC(c.elemtype, cas.elem, cas.pc, chanrecvpc)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\traceacquire(chanbuf(c, c.recvx))</span><br><span class=\"line\">\t\tracerelease(chanbuf(c, c.recvx))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msanenabled &amp;&amp; cas.elem != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tmsanwrite(cas.elem, c.elemtype.size)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// recv 赋值</span></span><br><span class=\"line\">\trecvOK = <span class=\"literal\">true</span></span><br><span class=\"line\">\tqp = chanbuf(c, c.recvx) <span class=\"comment\">// chan指针指向</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cas.elem != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">\t\ttypedmemmove(c.elemtype, cas.elem, qp)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttypedmemclr(c.elemtype, qp)</span><br><span class=\"line\">\tc.recvx++</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.recvx == c.dataqsiz &#123;</span><br><span class=\"line\">\t\tc.recvx = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.qcount--</span><br><span class=\"line\">\tselunlock(scases, lockorder)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"bufsend\"><a class=\"header-anchor\" href=\"#bufsend\">¶</a>bufsend:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufsend:</span><br><span class=\"line\">\t<span class=\"comment\">// can send to buffer</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\traceacquire(chanbuf(c, c.sendx))</span><br><span class=\"line\">\t\tracerelease(chanbuf(c, c.sendx))</span><br><span class=\"line\">\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msanenabled &#123;</span><br><span class=\"line\">\t\tmsanread(cas.elem, c.elemtype.size)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttypedmemmove(c.elemtype, chanbuf(c, c.sendx), cas.elem)</span><br><span class=\"line\">\tc.sendx++</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.sendx == c.dataqsiz &#123; <span class=\"comment\">// 缓存区满了</span></span><br><span class=\"line\">\t\tc.sendx = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.qcount++</span><br><span class=\"line\">\tselunlock(scases, lockorder)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br></pre></td></tr></table></figure>\n<h5 id=\"recv\"><a class=\"header-anchor\" href=\"#recv\">¶</a>recv:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recv:</span><br><span class=\"line\">\t<span class=\"comment\">// can receive from sleeping sender (sg)</span></span><br><span class=\"line\">\trecv(c, sg, cas.elem, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; selunlock(scases, lockorder) &#125;, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> debugSelect &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;syncrecv: cas0=&quot;</span>, cas0, <span class=\"string\">&quot; c=&quot;</span>, c, <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trecvOK = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"rclose\"><a class=\"header-anchor\" href=\"#rclose\">¶</a>rclose:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// read at end of closed channel</span></span><br><span class=\"line\">selunlock(scases, lockorder)</span><br><span class=\"line\">recvOK = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> cas.elem != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\ttypedmemclr(c.elemtype, cas.elem)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\traceacquire(c.raceaddr())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> retc</span><br></pre></td></tr></table></figure>\n<h5 id=\"send\"><a class=\"header-anchor\" href=\"#send\">¶</a>send:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">send:</span><br><span class=\"line\">\t<span class=\"comment\">// can send to a sleeping receiver (sg)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msanenabled &#123;</span><br><span class=\"line\">\t\tmsanread(cas.elem, c.elemtype.size)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// send函数</span></span><br><span class=\"line\">\tsend(c, sg, cas.elem, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; selunlock(scases, lockorder) &#125;, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> debugSelect &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;syncsend: cas0=&quot;</span>, cas0, <span class=\"string\">&quot; c=&quot;</span>, c, <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br></pre></td></tr></table></figure>\n<h5 id=\"sclose\"><a class=\"header-anchor\" href=\"#sclose\">¶</a>sclose:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sclose:</span><br><span class=\"line\">\t<span class=\"comment\">// send on closed channel</span></span><br><span class=\"line\">\tselunlock(scases, lockorder)</span><br><span class=\"line\">\t<span class=\"comment\">// 向一个close的channel发送消息,就发生panic</span></span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(plainError(<span class=\"string\">&quot;send on closed channel&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"retc\"><a class=\"header-anchor\" href=\"#retc\">¶</a>retc:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retc:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cas.releasetime &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tblockevent(cas.releasetime-t0, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> casi, recvOK</span><br></pre></td></tr></table></figure>\n<h4 id=\"channel的recv和send方式\"><a class=\"header-anchor\" href=\"#channel的recv和send方式\">¶</a>channel的recv和send方式:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、当 <span class=\"keyword\">case</span> 不包含 Channel 时；</span><br><span class=\"line\">    这种 <span class=\"keyword\">case</span> 会被跳过；</span><br><span class=\"line\"><span class=\"number\">2</span>、当 <span class=\"keyword\">case</span> 会从 Channel 中recv数据时；</span><br><span class=\"line\">    如果当前 Channel 的 sendq 上有等待的 Goroutine，就会跳到 recv 标签并从缓冲区读取数据后将等待 Goroutine 中的数据放入到缓冲区中相同的位置；</span><br><span class=\"line\">    如果当前 Channel 的缓冲区不为空，就会跳到 bufrecv 标签处从缓冲区获取数据；</span><br><span class=\"line\">    如果当前 Channel 已经被关闭，就会跳到 rclose 做一些清除的收尾工作；</span><br><span class=\"line\"><span class=\"number\">3</span>、当 <span class=\"keyword\">case</span> 会向 Channel send数据时；</span><br><span class=\"line\">    如果当前 Channel 已经被关，闭就会直接跳到 sclose 标签，触发 <span class=\"built_in\">panic</span> 尝试中止程序；</span><br><span class=\"line\">    如果当前 Channel 的 recvq 上有等待的 Goroutine，就会跳到 send 标签向 Channel 发送数据；</span><br><span class=\"line\">    如果当前 Channel 的缓冲区存在空闲位置，就会将待发送的数据存入缓冲区；</span><br><span class=\"line\"><span class=\"number\">4</span>、当 <span class=\"keyword\">select</span> 语句中包含 <span class=\"keyword\">default</span> 时；</span><br><span class=\"line\">    表示前面的所有 <span class=\"keyword\">case</span> 都没有被执行，这里会解锁所有 Channel 并返回，意味着当前 <span class=\"keyword\">select</span> 结构中的收发都是非阻塞的；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>关于Go中select的特性，很多坑，也容易栽。</p>\n<p>好奇底层 到计算机层面到底是如何处理的？！</p>\n<p>如果有Go的相关经验，就晓得select经常性配合chan一起来使用，<br>\n有个问题：线程安全吗？ 多个case到底是如何选择的？ 随机么？why?</p>","more":"<h3 id=\"version\"><a class=\"header-anchor\" href=\"#version\">¶</a>version</h3>\n<blockquote>\n<p>go version 1.14</p>\n</blockquote>\n<h3 id=\"简单使用\"><a class=\"header-anchor\" href=\"#简单使用\">¶</a>简单使用</h3>\n<blockquote>\n<p>例1:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SelectGo</span><span class=\"params\">(cc, end <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">-1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> cc &lt;- x:</span><br><span class=\"line\">\t\t\tx, y = y, x+y</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-end:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;end&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的结构会等待 cc &lt;- x或者 &lt;-end两个任意一个返回，无论哪个表达式返回都会立刻执行case的代码块。</p>\n</blockquote>\n<blockquote>\n<p>当select中的两个case都满足条件，那就随机触发其中一个。</p>\n</blockquote>\n<h4 id=\"汇编实现：\"><a class=\"header-anchor\" href=\"#汇编实现：\">¶</a>汇编实现：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> tool compile -N -l -S sselect.<span class=\"keyword\">go</span> </span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.SelectGo STEXT size=<span class=\"number\">490</span> args=<span class=\"number\">0x10</span> locals=<span class=\"number\">0xf0</span> funcid=<span class=\"number\">0x0</span> </span><br><span class=\"line\">        <span class=\"comment\">// SelectGo 函数</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     TEXT    <span class=\"string\">&quot;&quot;</span>.SelectGo(SB), ABIInternal, $<span class=\"number\">240</span><span class=\"number\">-16</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     MOVQ    (TLS), CX</span><br><span class=\"line\">        <span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     LEAQ    <span class=\"number\">-112</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x000e</span> <span class=\"number\">00014</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     CMPQ    AX, <span class=\"number\">16</span>(CX)</span><br><span class=\"line\">        <span class=\"number\">0x0012</span> <span class=\"number\">00018</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x0012</span> <span class=\"number\">00018</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     JLS     <span class=\"number\">480</span></span><br><span class=\"line\">        <span class=\"number\">0x0018</span> <span class=\"number\">00024</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0018</span> <span class=\"number\">00024</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     SUBQ    $<span class=\"number\">240</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x001f</span> <span class=\"number\">00031</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     MOVQ    BP, <span class=\"number\">232</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0027</span> <span class=\"number\">00039</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     LEAQ    <span class=\"number\">232</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     FUNCDATA        $<span class=\"number\">0</span>, gclocals·dc9b0298814590ca3ffc3a889546fc8b(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">90105</span>ebf2cf472b05305b6351ad183b7(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     FUNCDATA        $<span class=\"number\">2</span>, <span class=\"string\">&quot;&quot;</span>.SelectGo.stkobj(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002f</span> <span class=\"number\">00047</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">6</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0038</span> <span class=\"number\">00056</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">6</span>)     MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0041</span> <span class=\"number\">00065</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">7</span>)     JMP     <span class=\"number\">67</span></span><br><span class=\"line\">        <span class=\"number\">0x0043</span> <span class=\"number\">00067</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">69</span></span><br><span class=\"line\">        <span class=\"number\">0x0045</span> <span class=\"number\">00069</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>.c+<span class=\"number\">248</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x004d</span> <span class=\"number\">00077</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_4+<span class=\"number\">128</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0055</span> <span class=\"number\">00085</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x005a</span> <span class=\"number\">00090</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_5+<span class=\"number\">96</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x005f</span> <span class=\"number\">00095</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>.quit+<span class=\"number\">256</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0067</span> <span class=\"number\">00103</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_6+<span class=\"number\">120</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x006c</span> <span class=\"number\">00108</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     XORPS   X0, X0</span><br><span class=\"line\">        <span class=\"number\">0x006f</span> <span class=\"number\">00111</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVUPS  X0, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">200</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVUPS  X0, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">216</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x007f</span> <span class=\"number\">00127</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_4+<span class=\"number\">128</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0087</span> <span class=\"number\">00135</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">200</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x008f</span> <span class=\"number\">00143</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_5+<span class=\"number\">96</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">208</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x009c</span> <span class=\"number\">00156</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_6+<span class=\"number\">120</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x00a1</span> <span class=\"number\">00161</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">216</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00a9</span> <span class=\"number\">00169</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_8+<span class=\"number\">200</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x00b1</span> <span class=\"number\">00177</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_12+<span class=\"number\">152</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00b9</span> <span class=\"number\">00185</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_9+<span class=\"number\">88</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x00be</span> <span class=\"number\">00190</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_13+<span class=\"number\">144</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00c6</span> <span class=\"number\">00198</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_12+<span class=\"number\">152</span>(SP), CX</span><br><span class=\"line\">        <span class=\"number\">0x00ce</span> <span class=\"number\">00206</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    CX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x00d2</span> <span class=\"number\">00210</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00d7</span> <span class=\"number\">00215</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00e0</span> <span class=\"number\">00224</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00e9</span> <span class=\"number\">00233</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">32</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00f2</span> <span class=\"number\">00242</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVB    $<span class=\"number\">1</span>, <span class=\"number\">40</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x00f7</span> <span class=\"number\">00247</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x00f7</span> <span class=\"number\">00247</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     CALL    runtime.selectgo(SB)</span><br><span class=\"line\">        <span class=\"number\">0x00fc</span> <span class=\"number\">00252</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    <span class=\"number\">48</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0101</span> <span class=\"number\">00257</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVBLZX <span class=\"number\">56</span>(SP), CX</span><br><span class=\"line\">        <span class=\"number\">0x0106</span> <span class=\"number\">00262</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_10+<span class=\"number\">112</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x010b</span> <span class=\"number\">00267</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">8</span>)     MOVB    CL, <span class=\"string\">&quot;&quot;</span>..autotmp_11+<span class=\"number\">71</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x010f</span> <span class=\"number\">00271</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     CMPQ    <span class=\"string\">&quot;&quot;</span>..autotmp_10+<span class=\"number\">112</span>(SP), $<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0115</span> <span class=\"number\">00277</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JEQ     <span class=\"number\">281</span></span><br><span class=\"line\">        <span class=\"number\">0x0117</span> <span class=\"number\">00279</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">327</span></span><br><span class=\"line\">        <span class=\"number\">0x0119</span> <span class=\"number\">00281</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x011e</span> <span class=\"number\">00286</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    ADDQ    <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0123</span> <span class=\"number\">00291</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_14+<span class=\"number\">104</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0128</span> <span class=\"number\">00296</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x012d</span> <span class=\"number\">00301</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">80</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0132</span> <span class=\"number\">00306</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_14+<span class=\"number\">104</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0137</span> <span class=\"number\">00311</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">10</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>.y+<span class=\"number\">72</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x013c</span> <span class=\"number\">00316</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">318</span></span><br><span class=\"line\">        <span class=\"number\">0x013e</span> <span class=\"number\">00318</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x013e</span> <span class=\"number\">00318</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x0140</span> <span class=\"number\">00320</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">322</span></span><br><span class=\"line\">        <span class=\"number\">0x0142</span> <span class=\"number\">00322</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">9</span>)     JMP     <span class=\"number\">67</span></span><br><span class=\"line\">        <span class=\"number\">0x0147</span> <span class=\"number\">00327</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    CMPQ    <span class=\"string\">&quot;&quot;</span>..autotmp_10+<span class=\"number\">112</span>(SP), $<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"number\">0x014d</span> <span class=\"number\">00333</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    JEQ     <span class=\"number\">340</span></span><br><span class=\"line\">        <span class=\"number\">0x014f</span> <span class=\"number\">00335</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    JMP     <span class=\"number\">478</span></span><br><span class=\"line\">        <span class=\"number\">0x0154</span> <span class=\"number\">00340</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    XORPS   X0, X0</span><br><span class=\"line\">        <span class=\"number\">0x0157</span> <span class=\"number\">00343</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVUPS  X0, <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">160</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x015f</span> <span class=\"number\">00351</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    LEAQ    <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">160</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0167</span> <span class=\"number\">00359</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_16+<span class=\"number\">136</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x016f</span> <span class=\"number\">00367</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    TESTB   AL, (AX)</span><br><span class=\"line\">        <span class=\"number\">0x0171</span> <span class=\"number\">00369</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    LEAQ    <span class=\"keyword\">type</span>.<span class=\"type\">string</span>(SB), CX</span><br><span class=\"line\">        <span class=\"number\">0x0178</span> <span class=\"number\">00376</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    CX, <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">160</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0180</span> <span class=\"number\">00384</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    LEAQ    <span class=\"string\">&quot;&quot;</span>..stmp_0(SB), CX</span><br><span class=\"line\">        <span class=\"number\">0x0187</span> <span class=\"number\">00391</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    CX, <span class=\"string\">&quot;&quot;</span>..autotmp_7+<span class=\"number\">168</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x018f</span> <span class=\"number\">00399</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    TESTB   AL, (AX)</span><br><span class=\"line\">        <span class=\"number\">0x0191</span> <span class=\"number\">00401</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    JMP     <span class=\"number\">403</span></span><br><span class=\"line\">        <span class=\"number\">0x0193</span> <span class=\"number\">00403</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_15+<span class=\"number\">176</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x019b</span> <span class=\"number\">00411</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_15+<span class=\"number\">184</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01a7</span> <span class=\"number\">00423</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"string\">&quot;&quot;</span>..autotmp_15+<span class=\"number\">192</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01b3</span> <span class=\"number\">00435</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    AX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x01b7</span> <span class=\"number\">00439</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01c0</span> <span class=\"number\">00448</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    MOVQ    $<span class=\"number\">1</span>, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x01c9</span> <span class=\"number\">00457</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"number\">0x01c9</span> <span class=\"number\">00457</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">12</span>)    CALL    fmt.Println(SB)</span><br><span class=\"line\">        <span class=\"number\">0x01ce</span> <span class=\"number\">00462</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>)    MOVQ    <span class=\"number\">232</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x01d6</span> <span class=\"number\">00470</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>)    ADDQ    $<span class=\"number\">240</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x01dd</span> <span class=\"number\">00477</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">13</span>)    RET</span><br><span class=\"line\">        <span class=\"number\">0x01de</span> <span class=\"number\">00478</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x01de</span> <span class=\"number\">00478</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    XCHGL   AX, AX</span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">11</span>)    NOP</span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x01df</span> <span class=\"number\">00479</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x01e0</span> <span class=\"number\">00480</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     CALL    runtime.morestack_noctxt(SB)</span><br><span class=\"line\">        <span class=\"number\">0x01e5</span> <span class=\"number\">00485</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x01e5</span> <span class=\"number\">00485</span> (sselect.<span class=\"keyword\">go</span>:<span class=\"number\">5</span>)     JMP     <span class=\"number\">0</span></span><br><span class=\"line\">        ......</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ..</span><br><span class=\"line\">        .</span><br></pre></td></tr></table></figure>\n<h3 id=\"场景\"><a class=\"header-anchor\" href=\"#场景\">¶</a>场景</h3>\n<h4 id=\"非阻塞式：\"><a class=\"header-anchor\" href=\"#非阻塞式：\">¶</a>非阻塞式：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> i := &lt;-ch:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(i)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;default&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ <span class=\"keyword\">go</span> run main.<span class=\"keyword\">go</span></span><br><span class=\"line\"><span class=\"keyword\">default</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>select同时监听多个case是否可执行，如果多个case不可执行，有default就执行。</p>\n</blockquote>\n<h4 id=\"随机执行\"><a class=\"header-anchor\" href=\"#随机执行\">¶</a>随机执行</h4>\n<blockquote>\n<p>关于下面的程序到底是打印什么？</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"keyword\">range</span> time.Tick(<span class=\"number\">1</span> * time.Second) &#123;</span><br><span class=\"line\">\t\t\tch &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ch:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;case1&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-ch:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">println</span>(<span class=\"string\">&quot;case2&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs\"><a class=\"header-anchor\" href=\"#outputs\">¶</a>outputs:</h5>\n<ul>\n<li>随机性</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case1</span><br><span class=\"line\">case2</span><br><span class=\"line\">case1</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"正题：为何是随机？\"><a class=\"header-anchor\" href=\"#正题：为何是随机？\">¶</a>正题：为何是随机？</h3>\n<h4 id=\"select-case的结构\"><a class=\"header-anchor\" href=\"#select-case的结构\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29\">select case的结构</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> scase <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tc           *hchan         <span class=\"comment\">// chan</span></span><br><span class=\"line\">\telem        unsafe.Pointer <span class=\"comment\">// data element</span></span><br><span class=\"line\">\tkind        <span class=\"type\">uint16</span></span><br><span class=\"line\">\tpc          <span class=\"type\">uintptr</span> <span class=\"comment\">// race pc (for race detector / msan)</span></span><br><span class=\"line\">\treleasetime <span class=\"type\">int64</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"实现原理\"><a class=\"header-anchor\" href=\"#实现原理\">¶</a>实现原理</h4>\n<ul>\n<li>go对于中间代码会有部分的优化： <a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108\">walkselectcases</a></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">walkselectcases</span><span class=\"params\">(cases *Nodes)</span></span> []*Node &#123;</span><br><span class=\"line\">\tncas := cases.Len()</span><br><span class=\"line\">\tsellineno := lineno</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: zero-case select 没有case的情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []*Node&#123;mkcall(<span class=\"string\">&quot;block&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>)&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: one-case select: single op.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        ..........</span><br><span class=\"line\">        ........</span><br><span class=\"line\">        ......</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        ..</span><br><span class=\"line\">        .</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"随机化原因？\"><a class=\"header-anchor\" href=\"#随机化原因？\">¶</a>随机化原因？</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210223_052947.png\" alt=\"\"></p>\n<ul>\n<li>关于fastrandn后面单独分析吧，还挺有意思的。</li>\n</ul>\n<h5 id=\"没有case-单单一个select情况\"><a class=\"header-anchor\" href=\"#没有case-单单一个select情况\">¶</a>没有case,单单一个select情况:</h5>\n<blockquote>\n<p>前几行就写的很清楚了。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">block</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tgopark(<span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>, waitReasonSelectNoCases, traceEvGoStop, <span class=\"number\">1</span>) <span class=\"comment\">// forever</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"多看一步：\"><a class=\"header-anchor\" href=\"#多看一步：\">¶</a>多看一步：</h6>\n<ul>\n<li>waitReasonSelectNoCases干嘛的？</li>\n</ul>\n<p>这里逻列了g wait的所有情况，有什么用，不是这次研究的重点！<br>\n有兴趣可以下来查查，看看哪里都用到了。<br>\n<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L948\">链接🔗</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\twaitReasonZero                  waitReason = <span class=\"literal\">iota</span> <span class=\"comment\">// &quot;&quot;</span></span><br><span class=\"line\">\twaitReasonGCAssistMarking                         <span class=\"comment\">// &quot;GC assist marking&quot;</span></span><br><span class=\"line\">\twaitReasonIOWait                                  <span class=\"comment\">// &quot;IO wait&quot;</span></span><br><span class=\"line\">\twaitReasonChanReceiveNilChan                      <span class=\"comment\">// &quot;chan receive (nil chan)&quot;</span></span><br><span class=\"line\">\twaitReasonChanSendNilChan                         <span class=\"comment\">// &quot;chan send (nil chan)&quot;</span></span><br><span class=\"line\">\twaitReasonDumpingHeap                             <span class=\"comment\">// &quot;dumping heap&quot;</span></span><br><span class=\"line\">\twaitReasonGarbageCollection                       <span class=\"comment\">// &quot;garbage collection&quot;</span></span><br><span class=\"line\">\twaitReasonGarbageCollectionScan                   <span class=\"comment\">// &quot;garbage collection scan&quot;</span></span><br><span class=\"line\">\twaitReasonPanicWait                               <span class=\"comment\">// &quot;panicwait&quot;</span></span><br><span class=\"line\">\twaitReasonSelect                                  <span class=\"comment\">// &quot;select&quot;</span></span><br><span class=\"line\">\twaitReasonSelectNoCases                           <span class=\"comment\">// &quot;select (no cases)&quot;</span></span><br><span class=\"line\">\twaitReasonGCAssistWait                            <span class=\"comment\">// &quot;GC assist wait&quot;</span></span><br><span class=\"line\">\twaitReasonGCSweepWait                             <span class=\"comment\">// &quot;GC sweep wait&quot;</span></span><br><span class=\"line\">\twaitReasonGCScavengeWait                          <span class=\"comment\">// &quot;GC scavenge wait&quot;</span></span><br><span class=\"line\">\twaitReasonChanReceive                             <span class=\"comment\">// &quot;chan receive&quot;</span></span><br><span class=\"line\">\twaitReasonChanSend                                <span class=\"comment\">// &quot;chan send&quot;</span></span><br><span class=\"line\">\twaitReasonFinalizerWait                           <span class=\"comment\">// &quot;finalizer wait&quot;</span></span><br><span class=\"line\">\twaitReasonForceGGIdle                             <span class=\"comment\">// &quot;force gc (idle)&quot;</span></span><br><span class=\"line\">\twaitReasonSemacquire                              <span class=\"comment\">// &quot;semacquire&quot;</span></span><br><span class=\"line\">\twaitReasonSleep                                   <span class=\"comment\">// &quot;sleep&quot;</span></span><br><span class=\"line\">\twaitReasonSyncCondWait                            <span class=\"comment\">// &quot;sync.Cond.Wait&quot;</span></span><br><span class=\"line\">\twaitReasonTimerGoroutineIdle                      <span class=\"comment\">// &quot;timer goroutine (idle)&quot;</span></span><br><span class=\"line\">\twaitReasonTraceReaderBlocked                      <span class=\"comment\">// &quot;trace reader (blocked)&quot;</span></span><br><span class=\"line\">\twaitReasonWaitForGCCycle                          <span class=\"comment\">// &quot;wait for GC cycle&quot;</span></span><br><span class=\"line\">\twaitReasonGCWorkerIdle                            <span class=\"comment\">// &quot;GC worker (idle)&quot;</span></span><br><span class=\"line\">\twaitReasonPreempted                               <span class=\"comment\">// &quot;preempted&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h5 id=\"非阻塞的操作\"><a class=\"header-anchor\" href=\"#非阻塞的操作\">¶</a>非阻塞的操作</h5>\n<p>像例子1那样，如果两个case，包含一个default，则为非阻塞的操作。<br>\n<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/select.go#L108\">walkselectcases</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">walkselectcases</span><span class=\"params\">(cases *Nodes)</span></span> []*Node &#123;</span><br><span class=\"line\">\tncas := cases.Len()</span><br><span class=\"line\">\tsellineno := lineno</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: zero-case select</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []*Node&#123;mkcall(<span class=\"string\">&quot;block&quot;</span>, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>)&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// optimization: one-case select: single op.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ncas == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 包含default的情况</span></span><br><span class=\"line\">\t\tcas := cases.First()</span><br><span class=\"line\">\t\tsetlineno(cas)</span><br><span class=\"line\">\t\tl := cas.Ninit.Slice()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cas.Left != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// not default:</span></span><br><span class=\"line\">\t\t\tn := cas.Left</span><br><span class=\"line\">\t\t\tl = <span class=\"built_in\">append</span>(l, n.Ninit.Slice()...)</span><br><span class=\"line\">\t\t\tn.Ninit.Set(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> n.Op &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\tFatalf(<span class=\"string\">&quot;select %v&quot;</span>, n.Op)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> OSEND:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// already ok</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> OSELRECV, OSELRECV2:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> n.Op == OSELRECV || n.List.Len() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> n.Left == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tn = n.Right</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tn.Op = OAS</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> n.Left == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tnblank = typecheck(nblank, ctxExpr|ctxAssign)</span><br><span class=\"line\">\t\t\t\t\tn.Left = nblank</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tn.Op = OAS2</span><br><span class=\"line\">\t\t\t\tn.List.Prepend(n.Left)</span><br><span class=\"line\">\t\t\t\tn.Rlist.Set1(n.Right)</span><br><span class=\"line\">\t\t\t\tn.Right = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\tn.Left = <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t\tn.SetTypecheck(<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tn = typecheck(n, ctxStmt)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tl = <span class=\"built_in\">append</span>(l, n)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tl = <span class=\"built_in\">append</span>(l, cas.Nbody.Slice()...)</span><br><span class=\"line\">\t\tl = <span class=\"built_in\">append</span>(l, nod(OBREAK, <span class=\"literal\">nil</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> l</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ....</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"流程化问题\"><a class=\"header-anchor\" href=\"#流程化问题\">¶</a>流程化问题</h4>\n<ul>\n<li>1、将所有的case转换成包含channel等信息的<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L29\">runtime.scase结构</a></li>\n<li>2、调用运行时函数selectgo从多个就绪的channel中选择一个可以执行的scase结构体。</li>\n<li>3、for循环生成一组if语句，判断case是否被选中。</li>\n</ul>\n<h5 id=\"case转换为if的情况：\"><a class=\"header-anchor\" href=\"#case转换为if的情况：\">¶</a>case转换为if的情况：</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/select.go#L542\">reflect_rselect🔗</a></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//go:linkname reflect_rselect reflect.rselect</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reflect_rselect</span><span class=\"params\">(cases []runtimeSelect)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">bool</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(cases) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tblock()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsel := <span class=\"built_in\">make</span>([]scase, <span class=\"built_in\">len</span>(cases)) <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">\torig := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(cases))</span><br><span class=\"line\">\tnsends, nrecvs := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">\tdflt := <span class=\"number\">-1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, rc := <span class=\"keyword\">range</span> cases &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> j <span class=\"type\">int</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> rc.dir &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> selectDefault:</span><br><span class=\"line\">\t\t\tdflt = i</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> selectSend:</span><br><span class=\"line\">\t\t\tj = nsends</span><br><span class=\"line\">\t\t\tnsends++</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> selectRecv:</span><br><span class=\"line\">\t\t\tnrecvs++</span><br><span class=\"line\">\t\t\tj = <span class=\"built_in\">len</span>(cases) - nrecvs</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsel[j] = scase&#123;c: rc.ch, elem: rc.val&#125;</span><br><span class=\"line\">\t\torig[j] = i</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Only a default case. 只有default的情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nsends+nrecvs == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dflt, <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Compact sel and orig if necessary.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> nsends+nrecvs &lt; <span class=\"built_in\">len</span>(cases) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(sel[nsends:], sel[<span class=\"built_in\">len</span>(cases)-nrecvs:])</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(orig[nsends:], orig[<span class=\"built_in\">len</span>(cases)-nrecvs:])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\torder := <span class=\"built_in\">make</span>([]<span class=\"type\">uint16</span>, <span class=\"number\">2</span>*(nsends+nrecvs))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pc0 *<span class=\"type\">uintptr</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\tpcs := <span class=\"built_in\">make</span>([]<span class=\"type\">uintptr</span>, nsends+nrecvs)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> pcs &#123;</span><br><span class=\"line\">\t\t\tselectsetpc(&amp;pcs[i])</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpc0 = &amp;pcs[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//调用selectgo获取结果</span></span><br><span class=\"line\">\tchosen, recvOK := selectgo(&amp;sel[<span class=\"number\">0</span>], &amp;order[<span class=\"number\">0</span>], pc0, nsends, nrecvs, dflt == <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Translate chosen back to caller&#x27;s ordering.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> chosen &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tchosen = dflt</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tchosen = orig[chosen]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> chosen, recvOK</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"selectgo主循环\"><a class=\"header-anchor\" href=\"#selectgo主循环\">¶</a>selectgo主循环</h4>\n<blockquote>\n<p>selectgo会根据不通的逻辑判断,跳转到不通的逻辑中,主要分为如下几部分:</p>\n</blockquote>\n<ul>\n<li>bufrecv 可以从缓存区读取数据</li>\n<li>bufsend 可以向缓存区写入数据</li>\n<li>recv 可以从休眠的发送方获取数据</li>\n<li>send 可以向休眠的接收方发送数据</li>\n<li>rclose 可以从关闭的channel读取EOF</li>\n<li>sclose 可以向关闭的channel发送数据</li>\n<li>retc 结束调用并返回</li>\n</ul>\n<h5 id=\"send-recv分析\"><a class=\"header-anchor\" href=\"#send-recv分析\">¶</a>send &amp; recv分析</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">..</span><br><span class=\"line\">...</span><br><span class=\"line\">....</span><br><span class=\"line\">.....</span><br><span class=\"line\"></span><br><span class=\"line\">loop:</span><br><span class=\"line\">\t<span class=\"comment\">// pass 1 - look for something already waiting</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dfli <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> dfl *scase</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> casi <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> cas *scase</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> recvOK <span class=\"type\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; ncases; i++ &#123;</span><br><span class=\"line\">\t\tcasi = <span class=\"type\">int</span>(pollorder[i])</span><br><span class=\"line\">\t\tcas = &amp;scases[casi]</span><br><span class=\"line\">\t\tc = cas.c</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> cas.kind &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseNil:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseRecv:</span><br><span class=\"line\">\t\t\tsg = c.sendq.dequeue()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> sg != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> recv</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.qcount &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//缓存区total&gt;0</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> bufrecv</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.closed != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// chan已经关闭</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> rclose</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseSend:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\t\t\tracereadpc(c.raceaddr(), cas.pc, chansendpc)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.closed != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// channel关闭了,但是向其发送消息</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> sclose</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tsg = c.recvq.dequeue()</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> sg != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 向出队的channel发送消息</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> send</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> c.qcount &lt; c.dataqsiz &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">goto</span> bufsend</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> caseDefault:</span><br><span class=\"line\">\t\t\tdfli = casi</span><br><span class=\"line\">\t\t\tdfl = cas</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">.....</span><br><span class=\"line\">....</span><br><span class=\"line\">...</span><br><span class=\"line\">..</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里可能要温习下hchan结构:</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> hchan <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tqcount   <span class=\"type\">uint</span>           <span class=\"comment\">// total data in the queue</span></span><br><span class=\"line\">\tdataqsiz <span class=\"type\">uint</span>           <span class=\"comment\">// size of the circular queue</span></span><br><span class=\"line\">\tbuf      unsafe.Pointer <span class=\"comment\">// points to an array of dataqsiz elements</span></span><br><span class=\"line\">\telemsize <span class=\"type\">uint16</span></span><br><span class=\"line\">\tclosed   <span class=\"type\">uint32</span></span><br><span class=\"line\">\telemtype *_type <span class=\"comment\">// element type</span></span><br><span class=\"line\">\tsendx    <span class=\"type\">uint</span>   <span class=\"comment\">// send index</span></span><br><span class=\"line\">\trecvx    <span class=\"type\">uint</span>   <span class=\"comment\">// receive index</span></span><br><span class=\"line\">\trecvq    waitq  <span class=\"comment\">// list of recv waiters</span></span><br><span class=\"line\">\tsendq    waitq  <span class=\"comment\">// list of send waiters</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// lock protects all fields in hchan, as well as several</span></span><br><span class=\"line\">\t<span class=\"comment\">// fields in sudogs blocked on this channel.</span></span><br><span class=\"line\">\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"comment\">// Do not change another G&#x27;s status while holding this lock</span></span><br><span class=\"line\">\t<span class=\"comment\">// (in particular, do not ready a G), as this can deadlock</span></span><br><span class=\"line\">\t<span class=\"comment\">// with stack shrinking.</span></span><br><span class=\"line\">\tlock mutex</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"bufrecv\"><a class=\"header-anchor\" href=\"#bufrecv\">¶</a>bufrecv:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufrecv:</span><br><span class=\"line\">\t<span class=\"comment\">// can receive from buffer</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cas.elem != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\traceWriteObjectPC(c.elemtype, cas.elem, cas.pc, chanrecvpc)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\traceacquire(chanbuf(c, c.recvx))</span><br><span class=\"line\">\t\tracerelease(chanbuf(c, c.recvx))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msanenabled &amp;&amp; cas.elem != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tmsanwrite(cas.elem, c.elemtype.size)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// recv 赋值</span></span><br><span class=\"line\">\trecvOK = <span class=\"literal\">true</span></span><br><span class=\"line\">\tqp = chanbuf(c, c.recvx) <span class=\"comment\">// chan指针指向</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cas.elem != <span class=\"literal\">nil</span> &#123; </span><br><span class=\"line\">\t\ttypedmemmove(c.elemtype, cas.elem, qp)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttypedmemclr(c.elemtype, qp)</span><br><span class=\"line\">\tc.recvx++</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.recvx == c.dataqsiz &#123;</span><br><span class=\"line\">\t\tc.recvx = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.qcount--</span><br><span class=\"line\">\tselunlock(scases, lockorder)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"bufsend\"><a class=\"header-anchor\" href=\"#bufsend\">¶</a>bufsend:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bufsend:</span><br><span class=\"line\">\t<span class=\"comment\">// can send to buffer</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\traceacquire(chanbuf(c, c.sendx))</span><br><span class=\"line\">\t\tracerelease(chanbuf(c, c.sendx))</span><br><span class=\"line\">\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msanenabled &#123;</span><br><span class=\"line\">\t\tmsanread(cas.elem, c.elemtype.size)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttypedmemmove(c.elemtype, chanbuf(c, c.sendx), cas.elem)</span><br><span class=\"line\">\tc.sendx++</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.sendx == c.dataqsiz &#123; <span class=\"comment\">// 缓存区满了</span></span><br><span class=\"line\">\t\tc.sendx = <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.qcount++</span><br><span class=\"line\">\tselunlock(scases, lockorder)</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br></pre></td></tr></table></figure>\n<h5 id=\"recv\"><a class=\"header-anchor\" href=\"#recv\">¶</a>recv:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recv:</span><br><span class=\"line\">\t<span class=\"comment\">// can receive from sleeping sender (sg)</span></span><br><span class=\"line\">\trecv(c, sg, cas.elem, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; selunlock(scases, lockorder) &#125;, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> debugSelect &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;syncrecv: cas0=&quot;</span>, cas0, <span class=\"string\">&quot; c=&quot;</span>, c, <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\trecvOK = <span class=\"literal\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"rclose\"><a class=\"header-anchor\" href=\"#rclose\">¶</a>rclose:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// read at end of closed channel</span></span><br><span class=\"line\">selunlock(scases, lockorder)</span><br><span class=\"line\">recvOK = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> cas.elem != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\ttypedmemclr(c.elemtype, cas.elem)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\traceacquire(c.raceaddr())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">goto</span> retc</span><br></pre></td></tr></table></figure>\n<h5 id=\"send\"><a class=\"header-anchor\" href=\"#send\">¶</a>send:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">send:</span><br><span class=\"line\">\t<span class=\"comment\">// can send to a sleeping receiver (sg)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\traceReadObjectPC(c.elemtype, cas.elem, cas.pc, chansendpc)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> msanenabled &#123;</span><br><span class=\"line\">\t\tmsanread(cas.elem, c.elemtype.size)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// send函数</span></span><br><span class=\"line\">\tsend(c, sg, cas.elem, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; selunlock(scases, lockorder) &#125;, <span class=\"number\">2</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> debugSelect &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;syncsend: cas0=&quot;</span>, cas0, <span class=\"string\">&quot; c=&quot;</span>, c, <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">goto</span> retc</span><br></pre></td></tr></table></figure>\n<h5 id=\"sclose\"><a class=\"header-anchor\" href=\"#sclose\">¶</a>sclose:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sclose:</span><br><span class=\"line\">\t<span class=\"comment\">// send on closed channel</span></span><br><span class=\"line\">\tselunlock(scases, lockorder)</span><br><span class=\"line\">\t<span class=\"comment\">// 向一个close的channel发送消息,就发生panic</span></span><br><span class=\"line\">\t<span class=\"built_in\">panic</span>(plainError(<span class=\"string\">&quot;send on closed channel&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"retc\"><a class=\"header-anchor\" href=\"#retc\">¶</a>retc:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">retc:</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> cas.releasetime &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tblockevent(cas.releasetime-t0, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> casi, recvOK</span><br></pre></td></tr></table></figure>\n<h4 id=\"channel的recv和send方式\"><a class=\"header-anchor\" href=\"#channel的recv和send方式\">¶</a>channel的recv和send方式:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、当 <span class=\"keyword\">case</span> 不包含 Channel 时；</span><br><span class=\"line\">    这种 <span class=\"keyword\">case</span> 会被跳过；</span><br><span class=\"line\"><span class=\"number\">2</span>、当 <span class=\"keyword\">case</span> 会从 Channel 中recv数据时；</span><br><span class=\"line\">    如果当前 Channel 的 sendq 上有等待的 Goroutine，就会跳到 recv 标签并从缓冲区读取数据后将等待 Goroutine 中的数据放入到缓冲区中相同的位置；</span><br><span class=\"line\">    如果当前 Channel 的缓冲区不为空，就会跳到 bufrecv 标签处从缓冲区获取数据；</span><br><span class=\"line\">    如果当前 Channel 已经被关闭，就会跳到 rclose 做一些清除的收尾工作；</span><br><span class=\"line\"><span class=\"number\">3</span>、当 <span class=\"keyword\">case</span> 会向 Channel send数据时；</span><br><span class=\"line\">    如果当前 Channel 已经被关，闭就会直接跳到 sclose 标签，触发 <span class=\"built_in\">panic</span> 尝试中止程序；</span><br><span class=\"line\">    如果当前 Channel 的 recvq 上有等待的 Goroutine，就会跳到 send 标签向 Channel 发送数据；</span><br><span class=\"line\">    如果当前 Channel 的缓冲区存在空闲位置，就会将待发送的数据存入缓冲区；</span><br><span class=\"line\"><span class=\"number\">4</span>、当 <span class=\"keyword\">select</span> 语句中包含 <span class=\"keyword\">default</span> 时；</span><br><span class=\"line\">    表示前面的所有 <span class=\"keyword\">case</span> 都没有被执行，这里会解锁所有 Channel 并返回，意味着当前 <span class=\"keyword\">select</span> 结构中的收发都是非阻塞的；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210223_052947.png","popularPost_tmp_gaData":{"updated":"Tue Feb 23 2021 21:10:17 GMT+0800 (中国标准时间)","title":"「39」Go select源码实现分析","path":"archives/e1051649.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210223_052947.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>关于Go中select的特性，很多坑，也容易栽。</p>\n<p>好奇底层 到计算机层面到底是如何处理的？！</p>\n<p>如果有Go的相关经验，就晓得select经常性配合chan一起来使用，<br>\n有个问题：线程安全吗？ 多个case到底是如何选择的？ 随机么？why?</p>","date":{"_isAMomentObject":true,"_i":"2021-02-22T04:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-02-22T04:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":14713},{"title":"「4」Git常用技巧","date":"2020-09-01T11:22:02.000Z","updated":"2021-11-18T10:05:19.000Z","keywords":"git,git技巧,git常用技巧","abbrlink":"3c1dd822","_content":"### 学习方式\n多练多得，直接学习[官网](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)理解。\n\n以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。\n\n### Git版本：\n```\n1944 ± git version \ngit version 2.28.0\n```\n### 先说说Git的常用命令：(可跳过)\n<!-- more -->\n```\n2081 ◯  git \n用法：git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是各种场合常见的 Git 命令：\n\n开始一个工作区（参见：git help tutorial）\n   clone             克隆仓库到一个新目录\n   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库\n\n在当前变更上工作（参见：git help everyday）\n   add               添加文件内容至索引\n   mv                移动或重命名一个文件、目录或符号链接\n   restore           恢复工作区文件\n   rm                从工作区和索引中删除文件\n   sparse-checkout   初始化及修改稀疏检出\n\n检查历史和状态（参见：git help revisions）\n   bisect            通过二分查找定位引入 bug 的提交\n   diff              显示提交之间、提交和工作区之间等的差异\n   grep              输出和模式匹配的行\n   log               显示提交日志\n   show              显示各种类型的对象\n   status            显示工作区状态\n\n扩展、标记和调校您的历史记录\n   branch            列出、创建或删除分支\n   commit            记录变更到仓库\n   merge             合并两个或更多开发历史\n   rebase            在另一个分支上重新应用提交\n   reset             重置当前 HEAD 到指定状态\n   switch            切换分支\n   tag               创建、列出、删除或校验一个 GPG 签名的标签对象\n\n协同（参见：git help workflows）\n   fetch             从另外一个仓库下载对象和引用\n   pull              获取并整合另外的仓库或一个本地分支\n   push              更新远程引用和相关的对象\n\n命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些概念帮助。\n查看 'git help <命令>' 或 'git help <概念>' 以获取给定子命令或概念的\n帮助。\n有关系统的概述，查看 'git help git'\n```\n\n### Git使用：\n\n#### 生成密钥\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到`id_rsa`和`id_rsa.pub`两个文件。\n\n#### Git配置信息\n\n##### 查看配置信息\n```\n查看系统配置信息\n* git config --system --list\n\n当前用户配置\n* git config --global --list\n\n查看当前仓库配置\n* git config --local --list\n```\n\n##### 设置用户信息\n全局设置：\n```\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n```\n\n当前仓库生效：\n```\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n```\n\n\n\n#### Git Remote\n\n##### 新增remote地址\n\n```\ngit remote add upstream http://github/**remote**/test.git\ngit remote -v 可以查看具体路径\n```\n##### merge/fetch远程代码到XXX分支\n```\n1、git fetch upstream。\n2、切回到master分支。\n3、git merge upstream/master 合并远程upstream分支到本地master。\n4、解决冲突或其他问题。\n```\n\n#### Git 误删除恢复\n\n```\n1、git  fsck --lost -found :查看最近移除的文件.\n2、git show  '误删编号'：查看删除文件内容.\n3、git merge ‘误删编号’： 本地合并误删的文件内容.\n```\n\n#### Git reset撤回操作\n```\n1、git reflog\n2、git reset COMMITID    就可以回到COMMITID那个分支和版本。\n```\n\n#### Git分支\n\n##### 用法 \n>获取用法：Git branch -d --help\n\n```\n用法：git branch [<选项>] [-r | -a] [--merged | --no-merged]\n  或：git branch [<选项>] [-l] [-f] <分支名> [<起始点>]\n  或：git branch [<选项>] [-r] (-d | -D) <分支名>...\n  或：git branch [<选项>] (-m | -M) [<旧分支>] <新分支>\n  或：git branch [<选项>] (-c | -C) [<老分支>] <新分支>\n  或：git branch [<选项>] [-r | -a] [--points-at]\n  或：git branch [<选项>] [-r | -a] [--format]\n\n通用选项\n    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支\n    -q, --quiet           不显示信息\n    -t, --track           设置跟踪模式（参见 git-pull(1)）\n    -u, --set-upstream-to <上游>\n                          改变上游信息\n    --unset-upstream      取消上游信息的设置\n    --color[=<何时>]      使用彩色输出\n    -r, --remotes         作用于远程跟踪分支\n    --contains <提交>     只打印包含该提交的分支\n    --no-contains <提交>  只打印不包含该提交的分支\n    --abbrev[=<n>]        用 <n> 位数字显示 SHA-1 哈希值\n\n具体的 git-branch 动作：\n    -a, --all             列出远程跟踪及本地分支\n    -d, --delete          删除完全合并的分支\n    -D                    删除分支（即使没有合并）\n    -m, --move            移动/重命名一个分支，以及它的引用日志\n    -M                    移动/重命名一个分支，即使目标已存在\n    -c, --copy            拷贝一个分支和它的引用日志\n    -C                    拷贝一个分支，即使目标已存在\n    -l, --list            列出分支名\n    --show-current        显示当前分支名\n    --create-reflog       创建分支的引用日志\n    --edit-description    标记分支的描述\n    -f, --force           强制创建、移动/重命名、删除\n    --merged <提交>       只打印已经合并的分支\n    --no-merged <提交>    只打印尚未合并的分支\n    --column[=<风格>]     以列的方式显示分支\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的分支\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n    --format <格式>       输出格式\n```\n\n##### 获取所有分支\n```\ngit branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n```\n##### add/remove分支\n新建&切换:\n```\ngit checkout -b iss53\n\n是下面两条的简写：\ngit branch iss53\ngit checkout iss53\n```\n删除分支：\n```\ngit branch -d iss53\n```\n\n#### Git stash\n\n##### 常用：\n```\n（1）git stash save \"save message\"  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。\n（2）git stash list  ：查看stash了哪些存储\n（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}\n（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p\n（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} \n（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}\n（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储\n（8）git stash clear ：删除所有缓存的stash\n```\n\n#### Git Tag\n\n##### 常用：\n```\n2097 ± git tag -a --help\n用法：git tag [-a | -s | -u <key-id>] [-f] [-m <消息> | -F <文件>]\n\t\t<标签名> [<头>]\n  或：git tag -d <标签名>...\n  或：git tag -l [-n[<数字>]] [--contains <提交>] [--no-contains <提交>] [--points-at <对象>]\n\t\t[--format=<格式>] [--[no-]merged [<提交>]] [<模式>...]\n  或：git tag -v [--format=<格式>] <标签名>...\n\n    -l, --list            列出标签名称\n    -n[<n>]               每个标签信息打印 <n> 行\n    -d, --delete          删除标签\n    -v, --verify          验证标签\n\n标签创建选项\n    -a, --annotate        附注标签，需要一个说明\n    -m, --message <说明>  标签说明\n    -F, --file <文件>     从文件中读取提交说明\n    -e, --edit            强制编辑标签说明\n    -s, --sign            附注并附加 GPG 签名的标签\n    --cleanup <模式>      设置如何删除提交说明里的空格和#注释\n    -u, --local-user <key-id>\n                          使用另外的私钥签名该标签\n    -f, --force           如果存在，替换现有的标签\n    --create-reflog       创建引用日志\n\n标签列表选项\n    --column[=<风格>]     以列的方式显示标签列表\n    --contains <提交>     只打印包含该提交的标签\n    --no-contains <提交>  只打印不包含该提交的标签\n    --merged <提交>       只打印已经合并的标签\n    --no-merged <提交>    只打印尚未合并的标签\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的标签\n    --format <格式>       输出格式\n    --color[=<何时>]      遵照格式中的颜色输出\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n```\n\n```\ngit tag按照version排序：\ngit tag -n\n\ngit tag按照时间排序\ngit tag -n --sort=taggerdate\n\ngit tag按照顺序拉\ngit tag --sort=-v:refname\n\ngit tag 批量删除\ngit tag | grep \"v\" |xargs git tag -d\n\ngit tag 批量删除远端\ngit show-ref --tag | grep \"v1.0\"| awk '{print $2}'|xargs git push origin --delete\n\n\n```\n\n##### 打Tag\n```\ngit tag -a v0.0.1 -m \"V0.0.1\" \n```\n\n##### 删除Tag\n\n```\ngit tag -d v0.0.1\n```\n\n##### 推送Tag\n\n```\ngit push origin master --tags\n```\n\n#### Git push\n\n##### 用法\n```\n用法：git push [<选项>] [<仓库> [<引用规格>...]]\n\n    -v, --verbose         更加详细\n    -q, --quiet           更加安静\n    --repo <仓库>         仓库\n    --all                 推送所有引用\n    --mirror              镜像所有引用\n    -d, --delete          删除引用\n    --tags                推送标签（不能使用 --all or --mirror）\n    -n, --dry-run         演习\n    --porcelain           机器可读的输出\n    -f, --force           强制更新\n    --force-with-lease[=<引用名>:<期望值>]\n                          要求引用旧的取值为设定值\n    --recurse-submodules (check|on-demand|no)\n                          控制子模组的递归推送\n    --thin                使用精简打包\n    --receive-pack <receive-pack>\n                          接收包程序\n    --exec <receive-pack>\n                          接收包程序\n    -u, --set-upstream    设置 git pull/status 的上游\n    --progress            强制显示进度报告\n    --prune               清除本地删除的引用\n    --no-verify           绕过 pre-push 钩子\n    --follow-tags         推送缺失但有关的标签\n    --signed[=(yes|no|if-asked)]\n                          用 GPG 为推送签名\n    --atomic              需要远端支持原子事务\n    -o, --push-option <server-specific>\n                          传输选项\n    -4, --ipv4            只使用 IPv4 地址\n    -6, --ipv6            只使用 IPv6 地址\n```\n\n#### Git rebase\n\n##### 变基遵守的原则\n\n```\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\nTODO 后续更新此过程\n```\n\n\n##### 经典用法：\n>git rebase --help\n```\nAssume the following history exists and the current branch is \"topic\":\n\n              A---B---C topic\n             /\n        D---E---F---G master\nFrom this point, the result of either of thefollowing \n\ncommands:\n    git rebase master\n    git rebase master topic\n\n\nwould be:\n                      A'--B'--C' topic\n                     /\n        D---E---F---G master\n```\n\n##### rebase场景：\n\n[官网例子](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\n\n\n### Git 快速场景：\n其实还是对上述命令的活学活用。\n\n#### Git Reset场景\n```\n1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\ngit checkout -- filename\n\n所有文件/文件夹：\n\ngit checkout .\n \n2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\n$ rm filename / rm dir -rf\n\n所有文件/文件夹：\n\n$ git clean -xdf\n\n// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！\n\n3. 本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。\n单个文件/文件夹：\n\ngit reset HEAD filename\n\n所有文件/文件夹：\n\ngit reset HEAD .\n \n4. 本地通过git add & git commit 之后，想要撤销此次commit和代码\n\ngit reset commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改还在工作区！\n\ngit reset --hard commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码不会清除！\n\n5. git add & git commit 提交后，只想回滚commit：\n\tgit reset --soft HEAD^\n\t注意这仅仅是回滚了你的commit，代码依旧在的。\n```\n\n\n### Git [ ☞ for-each-ref](https://git-scm.com/docs/git-for-each-ref)\n\n>主要用于查看所有的ref历史等信息。\n\n>不废话，上例子\n\n```git\ngit for-each-ref --sort=committerdate --format='*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)'|tail -n 10\n```\n\n>输出：\n[这里显示最后10次信息]\n\n```git\n❯ git for-each-ref --sort=committerdate --format='*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)'|tail -n 10\n*** refs/tags/v0.1.0.4   *** v0.1.0.4            \n*** refs/tags/v0.1.0.5   *** v0.1.0.5            \n*** refs/tags/v0.1.0.6   *** v0.1.0.6            \n*** refs/tags/v0.1.0.7   *** v0.1.0.7            \n*** refs/tags/v0.1.0.8   *** v0.1.0.8            \n*** refs/tags/v0.1.0.9   *** v0.1.0.9            \n*** refs/remotes/origin/server  Sun Dec 13 11:41:57 2020 +0800 *** Site updated: 2020-12-13 11:41:57             crabSun Dec 13 11:41:57 2020 +0800\n*** refs/heads/master   Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder    refs/remotes/origin/master       crabWed Mar 30 00:53:31 2022 +0800\n*** refs/remotes/origin/HEAD    Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800\n*** refs/remotes/origin/master  Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800\n\n```\n\n\n### 持续更新......","source":"_posts/4-Git常用技巧.md","raw":"---\ntitle: 「4」Git常用技巧\ndate: '2020/09/01 19:22:02'\nupdated: '2021/11/18 18:05:19'\nkeywords: 'git,git技巧,git常用技巧'\ntags:\n  - Git\nabbrlink: 3c1dd822\n---\n### 学习方式\n多练多得，直接学习[官网](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)理解。\n\n以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。\n\n### Git版本：\n```\n1944 ± git version \ngit version 2.28.0\n```\n### 先说说Git的常用命令：(可跳过)\n<!-- more -->\n```\n2081 ◯  git \n用法：git [--version] [--help] [-C <path>] [-c <name>=<value>]\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n           <command> [<args>]\n\n这些是各种场合常见的 Git 命令：\n\n开始一个工作区（参见：git help tutorial）\n   clone             克隆仓库到一个新目录\n   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库\n\n在当前变更上工作（参见：git help everyday）\n   add               添加文件内容至索引\n   mv                移动或重命名一个文件、目录或符号链接\n   restore           恢复工作区文件\n   rm                从工作区和索引中删除文件\n   sparse-checkout   初始化及修改稀疏检出\n\n检查历史和状态（参见：git help revisions）\n   bisect            通过二分查找定位引入 bug 的提交\n   diff              显示提交之间、提交和工作区之间等的差异\n   grep              输出和模式匹配的行\n   log               显示提交日志\n   show              显示各种类型的对象\n   status            显示工作区状态\n\n扩展、标记和调校您的历史记录\n   branch            列出、创建或删除分支\n   commit            记录变更到仓库\n   merge             合并两个或更多开发历史\n   rebase            在另一个分支上重新应用提交\n   reset             重置当前 HEAD 到指定状态\n   switch            切换分支\n   tag               创建、列出、删除或校验一个 GPG 签名的标签对象\n\n协同（参见：git help workflows）\n   fetch             从另外一个仓库下载对象和引用\n   pull              获取并整合另外的仓库或一个本地分支\n   push              更新远程引用和相关的对象\n\n命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些概念帮助。\n查看 'git help <命令>' 或 'git help <概念>' 以获取给定子命令或概念的\n帮助。\n有关系统的概述，查看 'git help git'\n```\n\n### Git使用：\n\n#### 生成密钥\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到`id_rsa`和`id_rsa.pub`两个文件。\n\n#### Git配置信息\n\n##### 查看配置信息\n```\n查看系统配置信息\n* git config --system --list\n\n当前用户配置\n* git config --global --list\n\n查看当前仓库配置\n* git config --local --list\n```\n\n##### 设置用户信息\n全局设置：\n```\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n```\n\n当前仓库生效：\n```\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n```\n\n\n\n#### Git Remote\n\n##### 新增remote地址\n\n```\ngit remote add upstream http://github/**remote**/test.git\ngit remote -v 可以查看具体路径\n```\n##### merge/fetch远程代码到XXX分支\n```\n1、git fetch upstream。\n2、切回到master分支。\n3、git merge upstream/master 合并远程upstream分支到本地master。\n4、解决冲突或其他问题。\n```\n\n#### Git 误删除恢复\n\n```\n1、git  fsck --lost -found :查看最近移除的文件.\n2、git show  '误删编号'：查看删除文件内容.\n3、git merge ‘误删编号’： 本地合并误删的文件内容.\n```\n\n#### Git reset撤回操作\n```\n1、git reflog\n2、git reset COMMITID    就可以回到COMMITID那个分支和版本。\n```\n\n#### Git分支\n\n##### 用法 \n>获取用法：Git branch -d --help\n\n```\n用法：git branch [<选项>] [-r | -a] [--merged | --no-merged]\n  或：git branch [<选项>] [-l] [-f] <分支名> [<起始点>]\n  或：git branch [<选项>] [-r] (-d | -D) <分支名>...\n  或：git branch [<选项>] (-m | -M) [<旧分支>] <新分支>\n  或：git branch [<选项>] (-c | -C) [<老分支>] <新分支>\n  或：git branch [<选项>] [-r | -a] [--points-at]\n  或：git branch [<选项>] [-r | -a] [--format]\n\n通用选项\n    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支\n    -q, --quiet           不显示信息\n    -t, --track           设置跟踪模式（参见 git-pull(1)）\n    -u, --set-upstream-to <上游>\n                          改变上游信息\n    --unset-upstream      取消上游信息的设置\n    --color[=<何时>]      使用彩色输出\n    -r, --remotes         作用于远程跟踪分支\n    --contains <提交>     只打印包含该提交的分支\n    --no-contains <提交>  只打印不包含该提交的分支\n    --abbrev[=<n>]        用 <n> 位数字显示 SHA-1 哈希值\n\n具体的 git-branch 动作：\n    -a, --all             列出远程跟踪及本地分支\n    -d, --delete          删除完全合并的分支\n    -D                    删除分支（即使没有合并）\n    -m, --move            移动/重命名一个分支，以及它的引用日志\n    -M                    移动/重命名一个分支，即使目标已存在\n    -c, --copy            拷贝一个分支和它的引用日志\n    -C                    拷贝一个分支，即使目标已存在\n    -l, --list            列出分支名\n    --show-current        显示当前分支名\n    --create-reflog       创建分支的引用日志\n    --edit-description    标记分支的描述\n    -f, --force           强制创建、移动/重命名、删除\n    --merged <提交>       只打印已经合并的分支\n    --no-merged <提交>    只打印尚未合并的分支\n    --column[=<风格>]     以列的方式显示分支\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的分支\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n    --format <格式>       输出格式\n```\n\n##### 获取所有分支\n```\ngit branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\ngit fetch --all\ngit pull --all\n```\n##### add/remove分支\n新建&切换:\n```\ngit checkout -b iss53\n\n是下面两条的简写：\ngit branch iss53\ngit checkout iss53\n```\n删除分支：\n```\ngit branch -d iss53\n```\n\n#### Git stash\n\n##### 常用：\n```\n（1）git stash save \"save message\"  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。\n（2）git stash list  ：查看stash了哪些存储\n（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}\n（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p\n（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} \n（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}\n（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储\n（8）git stash clear ：删除所有缓存的stash\n```\n\n#### Git Tag\n\n##### 常用：\n```\n2097 ± git tag -a --help\n用法：git tag [-a | -s | -u <key-id>] [-f] [-m <消息> | -F <文件>]\n\t\t<标签名> [<头>]\n  或：git tag -d <标签名>...\n  或：git tag -l [-n[<数字>]] [--contains <提交>] [--no-contains <提交>] [--points-at <对象>]\n\t\t[--format=<格式>] [--[no-]merged [<提交>]] [<模式>...]\n  或：git tag -v [--format=<格式>] <标签名>...\n\n    -l, --list            列出标签名称\n    -n[<n>]               每个标签信息打印 <n> 行\n    -d, --delete          删除标签\n    -v, --verify          验证标签\n\n标签创建选项\n    -a, --annotate        附注标签，需要一个说明\n    -m, --message <说明>  标签说明\n    -F, --file <文件>     从文件中读取提交说明\n    -e, --edit            强制编辑标签说明\n    -s, --sign            附注并附加 GPG 签名的标签\n    --cleanup <模式>      设置如何删除提交说明里的空格和#注释\n    -u, --local-user <key-id>\n                          使用另外的私钥签名该标签\n    -f, --force           如果存在，替换现有的标签\n    --create-reflog       创建引用日志\n\n标签列表选项\n    --column[=<风格>]     以列的方式显示标签列表\n    --contains <提交>     只打印包含该提交的标签\n    --no-contains <提交>  只打印不包含该提交的标签\n    --merged <提交>       只打印已经合并的标签\n    --no-merged <提交>    只打印尚未合并的标签\n    --sort <key>          排序的字段名\n    --points-at <对象>    只打印指向该对象的标签\n    --format <格式>       输出格式\n    --color[=<何时>]      遵照格式中的颜色输出\n    -i, --ignore-case     排序和过滤属于大小写不敏感\n```\n\n```\ngit tag按照version排序：\ngit tag -n\n\ngit tag按照时间排序\ngit tag -n --sort=taggerdate\n\ngit tag按照顺序拉\ngit tag --sort=-v:refname\n\ngit tag 批量删除\ngit tag | grep \"v\" |xargs git tag -d\n\ngit tag 批量删除远端\ngit show-ref --tag | grep \"v1.0\"| awk '{print $2}'|xargs git push origin --delete\n\n\n```\n\n##### 打Tag\n```\ngit tag -a v0.0.1 -m \"V0.0.1\" \n```\n\n##### 删除Tag\n\n```\ngit tag -d v0.0.1\n```\n\n##### 推送Tag\n\n```\ngit push origin master --tags\n```\n\n#### Git push\n\n##### 用法\n```\n用法：git push [<选项>] [<仓库> [<引用规格>...]]\n\n    -v, --verbose         更加详细\n    -q, --quiet           更加安静\n    --repo <仓库>         仓库\n    --all                 推送所有引用\n    --mirror              镜像所有引用\n    -d, --delete          删除引用\n    --tags                推送标签（不能使用 --all or --mirror）\n    -n, --dry-run         演习\n    --porcelain           机器可读的输出\n    -f, --force           强制更新\n    --force-with-lease[=<引用名>:<期望值>]\n                          要求引用旧的取值为设定值\n    --recurse-submodules (check|on-demand|no)\n                          控制子模组的递归推送\n    --thin                使用精简打包\n    --receive-pack <receive-pack>\n                          接收包程序\n    --exec <receive-pack>\n                          接收包程序\n    -u, --set-upstream    设置 git pull/status 的上游\n    --progress            强制显示进度报告\n    --prune               清除本地删除的引用\n    --no-verify           绕过 pre-push 钩子\n    --follow-tags         推送缺失但有关的标签\n    --signed[=(yes|no|if-asked)]\n                          用 GPG 为推送签名\n    --atomic              需要远端支持原子事务\n    -o, --push-option <server-specific>\n                          传输选项\n    -4, --ipv4            只使用 IPv4 地址\n    -6, --ipv6            只使用 IPv6 地址\n```\n\n#### Git rebase\n\n##### 变基遵守的原则\n\n```\n如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\nTODO 后续更新此过程\n```\n\n\n##### 经典用法：\n>git rebase --help\n```\nAssume the following history exists and the current branch is \"topic\":\n\n              A---B---C topic\n             /\n        D---E---F---G master\nFrom this point, the result of either of thefollowing \n\ncommands:\n    git rebase master\n    git rebase master topic\n\n\nwould be:\n                      A'--B'--C' topic\n                     /\n        D---E---F---G master\n```\n\n##### rebase场景：\n\n[官网例子](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)\n\n\n\n### Git 快速场景：\n其实还是对上述命令的活学活用。\n\n#### Git Reset场景\n```\n1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\ngit checkout -- filename\n\n所有文件/文件夹：\n\ngit checkout .\n \n2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。\n单个文件/文件夹：\n\n$ rm filename / rm dir -rf\n\n所有文件/文件夹：\n\n$ git clean -xdf\n\n// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！\n\n3. 本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。\n单个文件/文件夹：\n\ngit reset HEAD filename\n\n所有文件/文件夹：\n\ngit reset HEAD .\n \n4. 本地通过git add & git commit 之后，想要撤销此次commit和代码\n\ngit reset commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改还在工作区！\n\ngit reset --hard commit_id\n\n这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位\n// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码不会清除！\n\n5. git add & git commit 提交后，只想回滚commit：\n\tgit reset --soft HEAD^\n\t注意这仅仅是回滚了你的commit，代码依旧在的。\n```\n\n\n### Git [ ☞ for-each-ref](https://git-scm.com/docs/git-for-each-ref)\n\n>主要用于查看所有的ref历史等信息。\n\n>不废话，上例子\n\n```git\ngit for-each-ref --sort=committerdate --format='*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)'|tail -n 10\n```\n\n>输出：\n[这里显示最后10次信息]\n\n```git\n❯ git for-each-ref --sort=committerdate --format='*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)'|tail -n 10\n*** refs/tags/v0.1.0.4   *** v0.1.0.4            \n*** refs/tags/v0.1.0.5   *** v0.1.0.5            \n*** refs/tags/v0.1.0.6   *** v0.1.0.6            \n*** refs/tags/v0.1.0.7   *** v0.1.0.7            \n*** refs/tags/v0.1.0.8   *** v0.1.0.8            \n*** refs/tags/v0.1.0.9   *** v0.1.0.9            \n*** refs/remotes/origin/server  Sun Dec 13 11:41:57 2020 +0800 *** Site updated: 2020-12-13 11:41:57             crabSun Dec 13 11:41:57 2020 +0800\n*** refs/heads/master   Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder    refs/remotes/origin/master       crabWed Mar 30 00:53:31 2022 +0800\n*** refs/remotes/origin/HEAD    Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800\n*** refs/remotes/origin/master  Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800\n\n```\n\n\n### 持续更新......","slug":"4-Git常用技巧","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d57002vzfqx05egdjzv","content":"<h3 id=\"学习方式\"><a class=\"header-anchor\" href=\"#学习方式\">¶</a>学习方式</h3>\n<p>多练多得，直接学习<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">官网</a>理解。</p>\n<p>以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。</p>\n<h3 id=\"Git版本：\"><a class=\"header-anchor\" href=\"#Git版本：\">¶</a>Git版本：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1944 ± git version </span><br><span class=\"line\">git version 2.28.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"先说说Git的常用命令：-可跳过\"><a class=\"header-anchor\" href=\"#先说说Git的常用命令：-可跳过\">¶</a>先说说Git的常用命令：(可跳过)</h3>\n<span id=\"more\"></span>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2081 ◯  git </span><br><span class=\"line\">用法：git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">这些是各种场合常见的 Git 命令：</span><br><span class=\"line\"></span><br><span class=\"line\">开始一个工作区（参见：git help tutorial）</span><br><span class=\"line\">   clone             克隆仓库到一个新目录</span><br><span class=\"line\">   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br><span class=\"line\"></span><br><span class=\"line\">在当前变更上工作（参见：git help everyday）</span><br><span class=\"line\">   add               添加文件内容至索引</span><br><span class=\"line\">   mv                移动或重命名一个文件、目录或符号链接</span><br><span class=\"line\">   restore           恢复工作区文件</span><br><span class=\"line\">   rm                从工作区和索引中删除文件</span><br><span class=\"line\">   sparse-checkout   初始化及修改稀疏检出</span><br><span class=\"line\"></span><br><span class=\"line\">检查历史和状态（参见：git help revisions）</span><br><span class=\"line\">   bisect            通过二分查找定位引入 bug 的提交</span><br><span class=\"line\">   diff              显示提交之间、提交和工作区之间等的差异</span><br><span class=\"line\">   grep              输出和模式匹配的行</span><br><span class=\"line\">   log               显示提交日志</span><br><span class=\"line\">   show              显示各种类型的对象</span><br><span class=\"line\">   status            显示工作区状态</span><br><span class=\"line\"></span><br><span class=\"line\">扩展、标记和调校您的历史记录</span><br><span class=\"line\">   branch            列出、创建或删除分支</span><br><span class=\"line\">   commit            记录变更到仓库</span><br><span class=\"line\">   merge             合并两个或更多开发历史</span><br><span class=\"line\">   rebase            在另一个分支上重新应用提交</span><br><span class=\"line\">   reset             重置当前 HEAD 到指定状态</span><br><span class=\"line\">   switch            切换分支</span><br><span class=\"line\">   tag               创建、列出、删除或校验一个 GPG 签名的标签对象</span><br><span class=\"line\"></span><br><span class=\"line\">协同（参见：git help workflows）</span><br><span class=\"line\">   fetch             从另外一个仓库下载对象和引用</span><br><span class=\"line\">   pull              获取并整合另外的仓库或一个本地分支</span><br><span class=\"line\">   push              更新远程引用和相关的对象</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &#x27;git help -a&#x27; 和 &#x27;git help -g&#x27; 显示可用的子命令和一些概念帮助。</span><br><span class=\"line\">查看 &#x27;git help &lt;命令&gt;&#x27; 或 &#x27;git help &lt;概念&gt;&#x27; 以获取给定子命令或概念的</span><br><span class=\"line\">帮助。</span><br><span class=\"line\">有关系统的概述，查看 &#x27;git help git&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git使用：\"><a class=\"header-anchor\" href=\"#Git使用：\">¶</a>Git使用：</h3>\n<h4 id=\"生成密钥\"><a class=\"header-anchor\" href=\"#生成密钥\">¶</a>生成密钥</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>最后得到<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p>\n<h4 id=\"Git配置信息\"><a class=\"header-anchor\" href=\"#Git配置信息\">¶</a>Git配置信息</h4>\n<h5 id=\"查看配置信息\"><a class=\"header-anchor\" href=\"#查看配置信息\">¶</a>查看配置信息</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看系统配置信息</span><br><span class=\"line\">* git config --system --list</span><br><span class=\"line\"></span><br><span class=\"line\">当前用户配置</span><br><span class=\"line\">* git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前仓库配置</span><br><span class=\"line\">* git config --local --list</span><br></pre></td></tr></table></figure>\n<h5 id=\"设置用户信息\"><a class=\"header-anchor\" href=\"#设置用户信息\">¶</a>设置用户信息</h5>\n<p>全局设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>当前仓库生效：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Remote\"><a class=\"header-anchor\" href=\"#Git-Remote\">¶</a>Git Remote</h4>\n<h5 id=\"新增remote地址\"><a class=\"header-anchor\" href=\"#新增remote地址\">¶</a>新增remote地址</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream http://github/**remote**/test.git</span><br><span class=\"line\">git remote -v 可以查看具体路径</span><br></pre></td></tr></table></figure>\n<h5 id=\"merge-fetch远程代码到XXX分支\"><a class=\"header-anchor\" href=\"#merge-fetch远程代码到XXX分支\">¶</a>merge/fetch远程代码到XXX分支</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git fetch upstream。</span><br><span class=\"line\">2、切回到master分支。</span><br><span class=\"line\">3、git merge upstream/master 合并远程upstream分支到本地master。</span><br><span class=\"line\">4、解决冲突或其他问题。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-误删除恢复\"><a class=\"header-anchor\" href=\"#Git-误删除恢复\">¶</a>Git 误删除恢复</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git  fsck --lost -found :查看最近移除的文件.</span><br><span class=\"line\">2、git show  &#x27;误删编号&#x27;：查看删除文件内容.</span><br><span class=\"line\">3、git merge ‘误删编号’： 本地合并误删的文件内容.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-reset撤回操作\"><a class=\"header-anchor\" href=\"#Git-reset撤回操作\">¶</a>Git reset撤回操作</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git reflog</span><br><span class=\"line\">2、git reset COMMITID    就可以回到COMMITID那个分支和版本。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git分支\"><a class=\"header-anchor\" href=\"#Git分支\">¶</a>Git分支</h4>\n<h5 id=\"用法\"><a class=\"header-anchor\" href=\"#用法\">¶</a>用法</h5>\n<blockquote>\n<p>获取用法：Git branch -d --help</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git branch [&lt;选项&gt;] [-r | -a] [--merged | --no-merged]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-l] [-f] &lt;分支名&gt; [&lt;起始点&gt;]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r] (-d | -D) &lt;分支名&gt;...</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-m | -M) [&lt;旧分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-c | -C) [&lt;老分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--points-at]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--format]</span><br><span class=\"line\"></span><br><span class=\"line\">通用选项</span><br><span class=\"line\">    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支</span><br><span class=\"line\">    -q, --quiet           不显示信息</span><br><span class=\"line\">    -t, --track           设置跟踪模式（参见 git-pull(1)）</span><br><span class=\"line\">    -u, --set-upstream-to &lt;上游&gt;</span><br><span class=\"line\">                          改变上游信息</span><br><span class=\"line\">    --unset-upstream      取消上游信息的设置</span><br><span class=\"line\">    --color[=&lt;何时&gt;]      使用彩色输出</span><br><span class=\"line\">    -r, --remotes         作用于远程跟踪分支</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的分支</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的分支</span><br><span class=\"line\">    --abbrev[=&lt;n&gt;]        用 &lt;n&gt; 位数字显示 SHA-1 哈希值</span><br><span class=\"line\"></span><br><span class=\"line\">具体的 git-branch 动作：</span><br><span class=\"line\">    -a, --all             列出远程跟踪及本地分支</span><br><span class=\"line\">    -d, --delete          删除完全合并的分支</span><br><span class=\"line\">    -D                    删除分支（即使没有合并）</span><br><span class=\"line\">    -m, --move            移动/重命名一个分支，以及它的引用日志</span><br><span class=\"line\">    -M                    移动/重命名一个分支，即使目标已存在</span><br><span class=\"line\">    -c, --copy            拷贝一个分支和它的引用日志</span><br><span class=\"line\">    -C                    拷贝一个分支，即使目标已存在</span><br><span class=\"line\">    -l, --list            列出分支名</span><br><span class=\"line\">    --show-current        显示当前分支名</span><br><span class=\"line\">    --create-reflog       创建分支的引用日志</span><br><span class=\"line\">    --edit-description    标记分支的描述</span><br><span class=\"line\">    -f, --force           强制创建、移动/重命名、删除</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的分支</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的分支</span><br><span class=\"line\">    --column[=&lt;风格&gt;]     以列的方式显示分支</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的分支</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取所有分支\"><a class=\"header-anchor\" href=\"#获取所有分支\">¶</a>获取所有分支</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git pull --all</span><br></pre></td></tr></table></figure>\n<h5 id=\"add-remove分支\"><a class=\"header-anchor\" href=\"#add-remove分支\">¶</a>add/remove分支</h5>\n<p>新建&amp;切换:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b iss53</span><br><span class=\"line\"></span><br><span class=\"line\">是下面两条的简写：</span><br><span class=\"line\">git branch iss53</span><br><span class=\"line\">git checkout iss53</span><br></pre></td></tr></table></figure>\n<p>删除分支：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d iss53</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-stash\"><a class=\"header-anchor\" href=\"#Git-stash\">¶</a>Git stash</h4>\n<h5 id=\"常用：\"><a class=\"header-anchor\" href=\"#常用：\">¶</a>常用：</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）git stash save &quot;save message&quot;  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</span><br><span class=\"line\">（2）git stash list  ：查看stash了哪些存储</span><br><span class=\"line\">（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@&#123;$num&#125;，比如第二个 git stash show stash@&#123;1&#125;</span><br><span class=\"line\">（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@&#123;$num&#125;  -p ，比如第二个：git stash show  stash@&#123;1&#125;  -p</span><br><span class=\"line\">（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@&#123;0&#125;，如果要使用其他个，git stash apply stash@&#123;$num&#125; ， 比如第二个：git stash apply stash@&#123;1&#125; </span><br><span class=\"line\">（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，比如应用并删除第二个：git stash pop stash@&#123;1&#125;</span><br><span class=\"line\">（7）git stash drop stash@&#123;$num&#125; ：丢弃stash@&#123;$num&#125;存储，从列表中删除这个存储</span><br><span class=\"line\">（8）git stash clear ：删除所有缓存的stash</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Tag\"><a class=\"header-anchor\" href=\"#Git-Tag\">¶</a>Git Tag</h4>\n<h5 id=\"常用：-v2\"><a class=\"header-anchor\" href=\"#常用：-v2\">¶</a>常用：</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2097 ± git tag -a --help</span><br><span class=\"line\">用法：git tag [-a | -s | -u &lt;key-id&gt;] [-f] [-m &lt;消息&gt; | -F &lt;文件&gt;]</span><br><span class=\"line\">\t\t&lt;标签名&gt; [&lt;头&gt;]</span><br><span class=\"line\">  或：git tag -d &lt;标签名&gt;...</span><br><span class=\"line\">  或：git tag -l [-n[&lt;数字&gt;]] [--contains &lt;提交&gt;] [--no-contains &lt;提交&gt;] [--points-at &lt;对象&gt;]</span><br><span class=\"line\">\t\t[--format=&lt;格式&gt;] [--[no-]merged [&lt;提交&gt;]] [&lt;模式&gt;...]</span><br><span class=\"line\">  或：git tag -v [--format=&lt;格式&gt;] &lt;标签名&gt;...</span><br><span class=\"line\"></span><br><span class=\"line\">    -l, --list            列出标签名称</span><br><span class=\"line\">    -n[&lt;n&gt;]               每个标签信息打印 &lt;n&gt; 行</span><br><span class=\"line\">    -d, --delete          删除标签</span><br><span class=\"line\">    -v, --verify          验证标签</span><br><span class=\"line\"></span><br><span class=\"line\">标签创建选项</span><br><span class=\"line\">    -a, --annotate        附注标签，需要一个说明</span><br><span class=\"line\">    -m, --message &lt;说明&gt;  标签说明</span><br><span class=\"line\">    -F, --file &lt;文件&gt;     从文件中读取提交说明</span><br><span class=\"line\">    -e, --edit            强制编辑标签说明</span><br><span class=\"line\">    -s, --sign            附注并附加 GPG 签名的标签</span><br><span class=\"line\">    --cleanup &lt;模式&gt;      设置如何删除提交说明里的空格和#注释</span><br><span class=\"line\">    -u, --local-user &lt;key-id&gt;</span><br><span class=\"line\">                          使用另外的私钥签名该标签</span><br><span class=\"line\">    -f, --force           如果存在，替换现有的标签</span><br><span class=\"line\">    --create-reflog       创建引用日志</span><br><span class=\"line\"></span><br><span class=\"line\">标签列表选项</span><br><span class=\"line\">    --column[=&lt;风格&gt;]     以列的方式显示标签列表</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的标签</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的标签</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的标签</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的标签</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的标签</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br><span class=\"line\">    --color[=&lt;何时&gt;]      遵照格式中的颜色输出</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag按照version排序：</span><br><span class=\"line\">git tag -n</span><br><span class=\"line\"></span><br><span class=\"line\">git tag按照时间排序</span><br><span class=\"line\">git tag -n --sort=taggerdate</span><br><span class=\"line\"></span><br><span class=\"line\">git tag按照顺序拉</span><br><span class=\"line\">git tag --sort=-v:refname</span><br><span class=\"line\"></span><br><span class=\"line\">git tag 批量删除</span><br><span class=\"line\">git tag | grep &quot;v&quot; |xargs git tag -d</span><br><span class=\"line\"></span><br><span class=\"line\">git tag 批量删除远端</span><br><span class=\"line\">git show-ref --tag | grep &quot;v1.0&quot;| awk &#x27;&#123;print $2&#125;&#x27;|xargs git push origin --delete</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"打Tag\"><a class=\"header-anchor\" href=\"#打Tag\">¶</a>打Tag</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.0.1 -m &quot;V0.0.1&quot; </span><br></pre></td></tr></table></figure>\n<h5 id=\"删除Tag\"><a class=\"header-anchor\" href=\"#删除Tag\">¶</a>删除Tag</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v0.0.1</span><br></pre></td></tr></table></figure>\n<h5 id=\"推送Tag\"><a class=\"header-anchor\" href=\"#推送Tag\">¶</a>推送Tag</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master --tags</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-push\"><a class=\"header-anchor\" href=\"#Git-push\">¶</a>Git push</h4>\n<h5 id=\"用法-v2\"><a class=\"header-anchor\" href=\"#用法-v2\">¶</a>用法</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git push [&lt;选项&gt;] [&lt;仓库&gt; [&lt;引用规格&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">    -v, --verbose         更加详细</span><br><span class=\"line\">    -q, --quiet           更加安静</span><br><span class=\"line\">    --repo &lt;仓库&gt;         仓库</span><br><span class=\"line\">    --all                 推送所有引用</span><br><span class=\"line\">    --mirror              镜像所有引用</span><br><span class=\"line\">    -d, --delete          删除引用</span><br><span class=\"line\">    --tags                推送标签（不能使用 --all or --mirror）</span><br><span class=\"line\">    -n, --dry-run         演习</span><br><span class=\"line\">    --porcelain           机器可读的输出</span><br><span class=\"line\">    -f, --force           强制更新</span><br><span class=\"line\">    --force-with-lease[=&lt;引用名&gt;:&lt;期望值&gt;]</span><br><span class=\"line\">                          要求引用旧的取值为设定值</span><br><span class=\"line\">    --recurse-submodules (check|on-demand|no)</span><br><span class=\"line\">                          控制子模组的递归推送</span><br><span class=\"line\">    --thin                使用精简打包</span><br><span class=\"line\">    --receive-pack &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    --exec &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    -u, --set-upstream    设置 git pull/status 的上游</span><br><span class=\"line\">    --progress            强制显示进度报告</span><br><span class=\"line\">    --prune               清除本地删除的引用</span><br><span class=\"line\">    --no-verify           绕过 pre-push 钩子</span><br><span class=\"line\">    --follow-tags         推送缺失但有关的标签</span><br><span class=\"line\">    --signed[=(yes|no|if-asked)]</span><br><span class=\"line\">                          用 GPG 为推送签名</span><br><span class=\"line\">    --atomic              需要远端支持原子事务</span><br><span class=\"line\">    -o, --push-option &lt;server-specific&gt;</span><br><span class=\"line\">                          传输选项</span><br><span class=\"line\">    -4, --ipv4            只使用 IPv4 地址</span><br><span class=\"line\">    -6, --ipv6            只使用 IPv6 地址</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-rebase\"><a class=\"header-anchor\" href=\"#Git-rebase\">¶</a>Git rebase</h4>\n<h5 id=\"变基遵守的原则\"><a class=\"header-anchor\" href=\"#变基遵守的原则\">¶</a>变基遵守的原则</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)</span><br><span class=\"line\"></span><br><span class=\"line\">TODO 后续更新此过程</span><br></pre></td></tr></table></figure>\n<h5 id=\"经典用法：\"><a class=\"header-anchor\" href=\"#经典用法：\">¶</a>经典用法：</h5>\n<blockquote>\n<p>git rebase --help</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assume the following history exists and the current branch is &quot;topic&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">              A---B---C topic</span><br><span class=\"line\">             /</span><br><span class=\"line\">        D---E---F---G master</span><br><span class=\"line\">From this point, the result of either of thefollowing </span><br><span class=\"line\"></span><br><span class=\"line\">commands:</span><br><span class=\"line\">    git rebase master</span><br><span class=\"line\">    git rebase master topic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">would be:</span><br><span class=\"line\">                      A&#x27;--B&#x27;--C&#x27; topic</span><br><span class=\"line\">                     /</span><br><span class=\"line\">        D---E---F---G master</span><br></pre></td></tr></table></figure>\n<h5 id=\"rebase场景：\"><a class=\"header-anchor\" href=\"#rebase场景：\">¶</a>rebase场景：</h5>\n<p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA\">官网例子</a></p>\n<h3 id=\"Git-快速场景：\"><a class=\"header-anchor\" href=\"#Git-快速场景：\">¶</a>Git 快速场景：</h3>\n<p>其实还是对上述命令的活学活用。</p>\n<h4 id=\"Git-Reset场景\"><a class=\"header-anchor\" href=\"#Git-Reset场景\">¶</a>Git Reset场景</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout .</span><br><span class=\"line\"> </span><br><span class=\"line\">2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ rm filename / rm dir -rf</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ git clean -xdf</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！</span><br><span class=\"line\"></span><br><span class=\"line\">3. 本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。</span><br><span class=\"line\">单个文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br><span class=\"line\"> </span><br><span class=\"line\">4. 本地通过git add &amp; git commit 之后，想要撤销此次commit和代码</span><br><span class=\"line\"></span><br><span class=\"line\">git reset commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">// 撤销之后，你所做的已经commit的修改还在工作区！</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码不会清除！</span><br><span class=\"line\"></span><br><span class=\"line\">5. git add &amp; git commit 提交后，只想回滚commit：</span><br><span class=\"line\">\tgit reset --soft HEAD^</span><br><span class=\"line\">\t注意这仅仅是回滚了你的commit，代码依旧在的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git-☞-for-each-ref\"><a class=\"header-anchor\" href=\"#Git-☞-for-each-ref\">¶</a>Git <a href=\"https://git-scm.com/docs/git-for-each-ref\"> ☞ for-each-ref</a></h3>\n<blockquote>\n<p>主要用于查看所有的ref历史等信息。</p>\n</blockquote>\n<blockquote>\n<p>不废话，上例子</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git for-each-ref --sort=committerdate --format=&#x27;*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)&#x27;|tail -n 10</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出：<br>\n[这里显示最后10次信息]</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ git for-each-ref --sort=committerdate --format=&#x27;*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)&#x27;|tail -n 10</span><br><span class=\"line\">*** refs/tags/v0.1.0.4   *** v0.1.0.4            </span><br><span class=\"line\">*** refs/tags/v0.1.0.5   *** v0.1.0.5            </span><br><span class=\"line\">*** refs/tags/v0.1.0.6   *** v0.1.0.6            </span><br><span class=\"line\">*** refs/tags/v0.1.0.7   *** v0.1.0.7            </span><br><span class=\"line\">*** refs/tags/v0.1.0.8   *** v0.1.0.8            </span><br><span class=\"line\">*** refs/tags/v0.1.0.9   *** v0.1.0.9            </span><br><span class=\"line\">*** refs/remotes/origin/server  Sun Dec 13 11:41:57 2020 +0800 *** Site updated: 2020-12-13 11:41:57             crabSun Dec 13 11:41:57 2020 +0800</span><br><span class=\"line\">*** refs/heads/master   Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder    refs/remotes/origin/master       crabWed Mar 30 00:53:31 2022 +0800</span><br><span class=\"line\">*** refs/remotes/origin/HEAD    Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800</span><br><span class=\"line\">*** refs/remotes/origin/master  Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"学习方式\"><a class=\"header-anchor\" href=\"#学习方式\">¶</a>学习方式</h3>\n<p>多练多得，直接学习<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">官网</a>理解。</p>\n<p>以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。</p>\n<h3 id=\"Git版本：\"><a class=\"header-anchor\" href=\"#Git版本：\">¶</a>Git版本：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1944 ± git version </span><br><span class=\"line\">git version 2.28.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"先说说Git的常用命令：-可跳过\"><a class=\"header-anchor\" href=\"#先说说Git的常用命令：-可跳过\">¶</a>先说说Git的常用命令：(可跳过)</h3>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2081 ◯  git </span><br><span class=\"line\">用法：git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class=\"line\">           [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class=\"line\">           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]</span><br><span class=\"line\">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class=\"line\">           &lt;command&gt; [&lt;args&gt;]</span><br><span class=\"line\"></span><br><span class=\"line\">这些是各种场合常见的 Git 命令：</span><br><span class=\"line\"></span><br><span class=\"line\">开始一个工作区（参见：git help tutorial）</span><br><span class=\"line\">   clone             克隆仓库到一个新目录</span><br><span class=\"line\">   init              创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span><br><span class=\"line\"></span><br><span class=\"line\">在当前变更上工作（参见：git help everyday）</span><br><span class=\"line\">   add               添加文件内容至索引</span><br><span class=\"line\">   mv                移动或重命名一个文件、目录或符号链接</span><br><span class=\"line\">   restore           恢复工作区文件</span><br><span class=\"line\">   rm                从工作区和索引中删除文件</span><br><span class=\"line\">   sparse-checkout   初始化及修改稀疏检出</span><br><span class=\"line\"></span><br><span class=\"line\">检查历史和状态（参见：git help revisions）</span><br><span class=\"line\">   bisect            通过二分查找定位引入 bug 的提交</span><br><span class=\"line\">   diff              显示提交之间、提交和工作区之间等的差异</span><br><span class=\"line\">   grep              输出和模式匹配的行</span><br><span class=\"line\">   log               显示提交日志</span><br><span class=\"line\">   show              显示各种类型的对象</span><br><span class=\"line\">   status            显示工作区状态</span><br><span class=\"line\"></span><br><span class=\"line\">扩展、标记和调校您的历史记录</span><br><span class=\"line\">   branch            列出、创建或删除分支</span><br><span class=\"line\">   commit            记录变更到仓库</span><br><span class=\"line\">   merge             合并两个或更多开发历史</span><br><span class=\"line\">   rebase            在另一个分支上重新应用提交</span><br><span class=\"line\">   reset             重置当前 HEAD 到指定状态</span><br><span class=\"line\">   switch            切换分支</span><br><span class=\"line\">   tag               创建、列出、删除或校验一个 GPG 签名的标签对象</span><br><span class=\"line\"></span><br><span class=\"line\">协同（参见：git help workflows）</span><br><span class=\"line\">   fetch             从另外一个仓库下载对象和引用</span><br><span class=\"line\">   pull              获取并整合另外的仓库或一个本地分支</span><br><span class=\"line\">   push              更新远程引用和相关的对象</span><br><span class=\"line\"></span><br><span class=\"line\">命令 &#x27;git help -a&#x27; 和 &#x27;git help -g&#x27; 显示可用的子命令和一些概念帮助。</span><br><span class=\"line\">查看 &#x27;git help &lt;命令&gt;&#x27; 或 &#x27;git help &lt;概念&gt;&#x27; 以获取给定子命令或概念的</span><br><span class=\"line\">帮助。</span><br><span class=\"line\">有关系统的概述，查看 &#x27;git help git&#x27;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git使用：\"><a class=\"header-anchor\" href=\"#Git使用：\">¶</a>Git使用：</h3>\n<h4 id=\"生成密钥\"><a class=\"header-anchor\" href=\"#生成密钥\">¶</a>生成密钥</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>最后得到<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。</p>\n<h4 id=\"Git配置信息\"><a class=\"header-anchor\" href=\"#Git配置信息\">¶</a>Git配置信息</h4>\n<h5 id=\"查看配置信息\"><a class=\"header-anchor\" href=\"#查看配置信息\">¶</a>查看配置信息</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看系统配置信息</span><br><span class=\"line\">* git config --system --list</span><br><span class=\"line\"></span><br><span class=\"line\">当前用户配置</span><br><span class=\"line\">* git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">查看当前仓库配置</span><br><span class=\"line\">* git config --local --list</span><br></pre></td></tr></table></figure>\n<h5 id=\"设置用户信息\"><a class=\"header-anchor\" href=\"#设置用户信息\">¶</a>设置用户信息</h5>\n<p>全局设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n<p>当前仓库生效：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Remote\"><a class=\"header-anchor\" href=\"#Git-Remote\">¶</a>Git Remote</h4>\n<h5 id=\"新增remote地址\"><a class=\"header-anchor\" href=\"#新增remote地址\">¶</a>新增remote地址</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add upstream http://github/**remote**/test.git</span><br><span class=\"line\">git remote -v 可以查看具体路径</span><br></pre></td></tr></table></figure>\n<h5 id=\"merge-fetch远程代码到XXX分支\"><a class=\"header-anchor\" href=\"#merge-fetch远程代码到XXX分支\">¶</a>merge/fetch远程代码到XXX分支</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git fetch upstream。</span><br><span class=\"line\">2、切回到master分支。</span><br><span class=\"line\">3、git merge upstream/master 合并远程upstream分支到本地master。</span><br><span class=\"line\">4、解决冲突或其他问题。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-误删除恢复\"><a class=\"header-anchor\" href=\"#Git-误删除恢复\">¶</a>Git 误删除恢复</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git  fsck --lost -found :查看最近移除的文件.</span><br><span class=\"line\">2、git show  &#x27;误删编号&#x27;：查看删除文件内容.</span><br><span class=\"line\">3、git merge ‘误删编号’： 本地合并误删的文件内容.</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-reset撤回操作\"><a class=\"header-anchor\" href=\"#Git-reset撤回操作\">¶</a>Git reset撤回操作</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git reflog</span><br><span class=\"line\">2、git reset COMMITID    就可以回到COMMITID那个分支和版本。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git分支\"><a class=\"header-anchor\" href=\"#Git分支\">¶</a>Git分支</h4>\n<h5 id=\"用法\"><a class=\"header-anchor\" href=\"#用法\">¶</a>用法</h5>\n<blockquote>\n<p>获取用法：Git branch -d --help</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git branch [&lt;选项&gt;] [-r | -a] [--merged | --no-merged]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-l] [-f] &lt;分支名&gt; [&lt;起始点&gt;]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r] (-d | -D) &lt;分支名&gt;...</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-m | -M) [&lt;旧分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] (-c | -C) [&lt;老分支&gt;] &lt;新分支&gt;</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--points-at]</span><br><span class=\"line\">  或：git branch [&lt;选项&gt;] [-r | -a] [--format]</span><br><span class=\"line\"></span><br><span class=\"line\">通用选项</span><br><span class=\"line\">    -v, --verbose         显示哈希值和主题，若参数出现两次则显示上游分支</span><br><span class=\"line\">    -q, --quiet           不显示信息</span><br><span class=\"line\">    -t, --track           设置跟踪模式（参见 git-pull(1)）</span><br><span class=\"line\">    -u, --set-upstream-to &lt;上游&gt;</span><br><span class=\"line\">                          改变上游信息</span><br><span class=\"line\">    --unset-upstream      取消上游信息的设置</span><br><span class=\"line\">    --color[=&lt;何时&gt;]      使用彩色输出</span><br><span class=\"line\">    -r, --remotes         作用于远程跟踪分支</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的分支</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的分支</span><br><span class=\"line\">    --abbrev[=&lt;n&gt;]        用 &lt;n&gt; 位数字显示 SHA-1 哈希值</span><br><span class=\"line\"></span><br><span class=\"line\">具体的 git-branch 动作：</span><br><span class=\"line\">    -a, --all             列出远程跟踪及本地分支</span><br><span class=\"line\">    -d, --delete          删除完全合并的分支</span><br><span class=\"line\">    -D                    删除分支（即使没有合并）</span><br><span class=\"line\">    -m, --move            移动/重命名一个分支，以及它的引用日志</span><br><span class=\"line\">    -M                    移动/重命名一个分支，即使目标已存在</span><br><span class=\"line\">    -c, --copy            拷贝一个分支和它的引用日志</span><br><span class=\"line\">    -C                    拷贝一个分支，即使目标已存在</span><br><span class=\"line\">    -l, --list            列出分支名</span><br><span class=\"line\">    --show-current        显示当前分支名</span><br><span class=\"line\">    --create-reflog       创建分支的引用日志</span><br><span class=\"line\">    --edit-description    标记分支的描述</span><br><span class=\"line\">    -f, --force           强制创建、移动/重命名、删除</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的分支</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的分支</span><br><span class=\"line\">    --column[=&lt;风格&gt;]     以列的方式显示分支</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的分支</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br></pre></td></tr></table></figure>\n<h5 id=\"获取所有分支\"><a class=\"header-anchor\" href=\"#获取所有分支\">¶</a>获取所有分支</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">git fetch --all</span><br><span class=\"line\">git pull --all</span><br></pre></td></tr></table></figure>\n<h5 id=\"add-remove分支\"><a class=\"header-anchor\" href=\"#add-remove分支\">¶</a>add/remove分支</h5>\n<p>新建&amp;切换:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b iss53</span><br><span class=\"line\"></span><br><span class=\"line\">是下面两条的简写：</span><br><span class=\"line\">git branch iss53</span><br><span class=\"line\">git checkout iss53</span><br></pre></td></tr></table></figure>\n<p>删除分支：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d iss53</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-stash\"><a class=\"header-anchor\" href=\"#Git-stash\">¶</a>Git stash</h4>\n<h5 id=\"常用：\"><a class=\"header-anchor\" href=\"#常用：\">¶</a>常用：</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）git stash save &quot;save message&quot;  : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</span><br><span class=\"line\">（2）git stash list  ：查看stash了哪些存储</span><br><span class=\"line\">（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@&#123;$num&#125;，比如第二个 git stash show stash@&#123;1&#125;</span><br><span class=\"line\">（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@&#123;$num&#125;  -p ，比如第二个：git stash show  stash@&#123;1&#125;  -p</span><br><span class=\"line\">（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@&#123;0&#125;，如果要使用其他个，git stash apply stash@&#123;$num&#125; ， 比如第二个：git stash apply stash@&#123;1&#125; </span><br><span class=\"line\">（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@&#123;0&#125;，如果要应用并删除其他stash，命令：git stash pop stash@&#123;$num&#125; ，比如应用并删除第二个：git stash pop stash@&#123;1&#125;</span><br><span class=\"line\">（7）git stash drop stash@&#123;$num&#125; ：丢弃stash@&#123;$num&#125;存储，从列表中删除这个存储</span><br><span class=\"line\">（8）git stash clear ：删除所有缓存的stash</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-Tag\"><a class=\"header-anchor\" href=\"#Git-Tag\">¶</a>Git Tag</h4>\n<h5 id=\"常用：-v2\"><a class=\"header-anchor\" href=\"#常用：-v2\">¶</a>常用：</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2097 ± git tag -a --help</span><br><span class=\"line\">用法：git tag [-a | -s | -u &lt;key-id&gt;] [-f] [-m &lt;消息&gt; | -F &lt;文件&gt;]</span><br><span class=\"line\">\t\t&lt;标签名&gt; [&lt;头&gt;]</span><br><span class=\"line\">  或：git tag -d &lt;标签名&gt;...</span><br><span class=\"line\">  或：git tag -l [-n[&lt;数字&gt;]] [--contains &lt;提交&gt;] [--no-contains &lt;提交&gt;] [--points-at &lt;对象&gt;]</span><br><span class=\"line\">\t\t[--format=&lt;格式&gt;] [--[no-]merged [&lt;提交&gt;]] [&lt;模式&gt;...]</span><br><span class=\"line\">  或：git tag -v [--format=&lt;格式&gt;] &lt;标签名&gt;...</span><br><span class=\"line\"></span><br><span class=\"line\">    -l, --list            列出标签名称</span><br><span class=\"line\">    -n[&lt;n&gt;]               每个标签信息打印 &lt;n&gt; 行</span><br><span class=\"line\">    -d, --delete          删除标签</span><br><span class=\"line\">    -v, --verify          验证标签</span><br><span class=\"line\"></span><br><span class=\"line\">标签创建选项</span><br><span class=\"line\">    -a, --annotate        附注标签，需要一个说明</span><br><span class=\"line\">    -m, --message &lt;说明&gt;  标签说明</span><br><span class=\"line\">    -F, --file &lt;文件&gt;     从文件中读取提交说明</span><br><span class=\"line\">    -e, --edit            强制编辑标签说明</span><br><span class=\"line\">    -s, --sign            附注并附加 GPG 签名的标签</span><br><span class=\"line\">    --cleanup &lt;模式&gt;      设置如何删除提交说明里的空格和#注释</span><br><span class=\"line\">    -u, --local-user &lt;key-id&gt;</span><br><span class=\"line\">                          使用另外的私钥签名该标签</span><br><span class=\"line\">    -f, --force           如果存在，替换现有的标签</span><br><span class=\"line\">    --create-reflog       创建引用日志</span><br><span class=\"line\"></span><br><span class=\"line\">标签列表选项</span><br><span class=\"line\">    --column[=&lt;风格&gt;]     以列的方式显示标签列表</span><br><span class=\"line\">    --contains &lt;提交&gt;     只打印包含该提交的标签</span><br><span class=\"line\">    --no-contains &lt;提交&gt;  只打印不包含该提交的标签</span><br><span class=\"line\">    --merged &lt;提交&gt;       只打印已经合并的标签</span><br><span class=\"line\">    --no-merged &lt;提交&gt;    只打印尚未合并的标签</span><br><span class=\"line\">    --sort &lt;key&gt;          排序的字段名</span><br><span class=\"line\">    --points-at &lt;对象&gt;    只打印指向该对象的标签</span><br><span class=\"line\">    --format &lt;格式&gt;       输出格式</span><br><span class=\"line\">    --color[=&lt;何时&gt;]      遵照格式中的颜色输出</span><br><span class=\"line\">    -i, --ignore-case     排序和过滤属于大小写不敏感</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag按照version排序：</span><br><span class=\"line\">git tag -n</span><br><span class=\"line\"></span><br><span class=\"line\">git tag按照时间排序</span><br><span class=\"line\">git tag -n --sort=taggerdate</span><br><span class=\"line\"></span><br><span class=\"line\">git tag按照顺序拉</span><br><span class=\"line\">git tag --sort=-v:refname</span><br><span class=\"line\"></span><br><span class=\"line\">git tag 批量删除</span><br><span class=\"line\">git tag | grep &quot;v&quot; |xargs git tag -d</span><br><span class=\"line\"></span><br><span class=\"line\">git tag 批量删除远端</span><br><span class=\"line\">git show-ref --tag | grep &quot;v1.0&quot;| awk &#x27;&#123;print $2&#125;&#x27;|xargs git push origin --delete</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"打Tag\"><a class=\"header-anchor\" href=\"#打Tag\">¶</a>打Tag</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -a v0.0.1 -m &quot;V0.0.1&quot; </span><br></pre></td></tr></table></figure>\n<h5 id=\"删除Tag\"><a class=\"header-anchor\" href=\"#删除Tag\">¶</a>删除Tag</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d v0.0.1</span><br></pre></td></tr></table></figure>\n<h5 id=\"推送Tag\"><a class=\"header-anchor\" href=\"#推送Tag\">¶</a>推送Tag</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master --tags</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-push\"><a class=\"header-anchor\" href=\"#Git-push\">¶</a>Git push</h4>\n<h5 id=\"用法-v2\"><a class=\"header-anchor\" href=\"#用法-v2\">¶</a>用法</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法：git push [&lt;选项&gt;] [&lt;仓库&gt; [&lt;引用规格&gt;...]]</span><br><span class=\"line\"></span><br><span class=\"line\">    -v, --verbose         更加详细</span><br><span class=\"line\">    -q, --quiet           更加安静</span><br><span class=\"line\">    --repo &lt;仓库&gt;         仓库</span><br><span class=\"line\">    --all                 推送所有引用</span><br><span class=\"line\">    --mirror              镜像所有引用</span><br><span class=\"line\">    -d, --delete          删除引用</span><br><span class=\"line\">    --tags                推送标签（不能使用 --all or --mirror）</span><br><span class=\"line\">    -n, --dry-run         演习</span><br><span class=\"line\">    --porcelain           机器可读的输出</span><br><span class=\"line\">    -f, --force           强制更新</span><br><span class=\"line\">    --force-with-lease[=&lt;引用名&gt;:&lt;期望值&gt;]</span><br><span class=\"line\">                          要求引用旧的取值为设定值</span><br><span class=\"line\">    --recurse-submodules (check|on-demand|no)</span><br><span class=\"line\">                          控制子模组的递归推送</span><br><span class=\"line\">    --thin                使用精简打包</span><br><span class=\"line\">    --receive-pack &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    --exec &lt;receive-pack&gt;</span><br><span class=\"line\">                          接收包程序</span><br><span class=\"line\">    -u, --set-upstream    设置 git pull/status 的上游</span><br><span class=\"line\">    --progress            强制显示进度报告</span><br><span class=\"line\">    --prune               清除本地删除的引用</span><br><span class=\"line\">    --no-verify           绕过 pre-push 钩子</span><br><span class=\"line\">    --follow-tags         推送缺失但有关的标签</span><br><span class=\"line\">    --signed[=(yes|no|if-asked)]</span><br><span class=\"line\">                          用 GPG 为推送签名</span><br><span class=\"line\">    --atomic              需要远端支持原子事务</span><br><span class=\"line\">    -o, --push-option &lt;server-specific&gt;</span><br><span class=\"line\">                          传输选项</span><br><span class=\"line\">    -4, --ipv4            只使用 IPv4 地址</span><br><span class=\"line\">    -6, --ipv6            只使用 IPv6 地址</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-rebase\"><a class=\"header-anchor\" href=\"#Git-rebase\">¶</a>Git rebase</h4>\n<h5 id=\"变基遵守的原则\"><a class=\"header-anchor\" href=\"#变基遵守的原则\">¶</a>变基遵守的原则</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。---[官网变基](https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA)</span><br><span class=\"line\"></span><br><span class=\"line\">TODO 后续更新此过程</span><br></pre></td></tr></table></figure>\n<h5 id=\"经典用法：\"><a class=\"header-anchor\" href=\"#经典用法：\">¶</a>经典用法：</h5>\n<blockquote>\n<p>git rebase --help</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Assume the following history exists and the current branch is &quot;topic&quot;:</span><br><span class=\"line\"></span><br><span class=\"line\">              A---B---C topic</span><br><span class=\"line\">             /</span><br><span class=\"line\">        D---E---F---G master</span><br><span class=\"line\">From this point, the result of either of thefollowing </span><br><span class=\"line\"></span><br><span class=\"line\">commands:</span><br><span class=\"line\">    git rebase master</span><br><span class=\"line\">    git rebase master topic</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">would be:</span><br><span class=\"line\">                      A&#x27;--B&#x27;--C&#x27; topic</span><br><span class=\"line\">                     /</span><br><span class=\"line\">        D---E---F---G master</span><br></pre></td></tr></table></figure>\n<h5 id=\"rebase场景：\"><a class=\"header-anchor\" href=\"#rebase场景：\">¶</a>rebase场景：</h5>\n<p><a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA\">官网例子</a></p>\n<h3 id=\"Git-快速场景：\"><a class=\"header-anchor\" href=\"#Git-快速场景：\">¶</a>Git 快速场景：</h3>\n<p>其实还是对上述命令的活学活用。</p>\n<h4 id=\"Git-Reset场景\"><a class=\"header-anchor\" href=\"#Git-Reset场景\">¶</a>Git Reset场景</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout -- filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout .</span><br><span class=\"line\"> </span><br><span class=\"line\">2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。</span><br><span class=\"line\">单个文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ rm filename / rm dir -rf</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">$ git clean -xdf</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！</span><br><span class=\"line\"></span><br><span class=\"line\">3. 本地修改/新增了一堆文件，已经git add到暂存区，想放弃修改。</span><br><span class=\"line\">单个文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD filename</span><br><span class=\"line\"></span><br><span class=\"line\">所有文件/文件夹：</span><br><span class=\"line\"></span><br><span class=\"line\">git reset HEAD .</span><br><span class=\"line\"> </span><br><span class=\"line\">4. 本地通过git add &amp; git commit 之后，想要撤销此次commit和代码</span><br><span class=\"line\"></span><br><span class=\"line\">git reset commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">// 撤销之后，你所做的已经commit的修改还在工作区！</span><br><span class=\"line\"></span><br><span class=\"line\">git reset --hard commit_id</span><br><span class=\"line\"></span><br><span class=\"line\">这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位</span><br><span class=\"line\">// 撤销之后，你所做的已经commit的修改将会清除，仍在工作区/暂存区的代码不会清除！</span><br><span class=\"line\"></span><br><span class=\"line\">5. git add &amp; git commit 提交后，只想回滚commit：</span><br><span class=\"line\">\tgit reset --soft HEAD^</span><br><span class=\"line\">\t注意这仅仅是回滚了你的commit，代码依旧在的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"Git-☞-for-each-ref\"><a class=\"header-anchor\" href=\"#Git-☞-for-each-ref\">¶</a>Git <a href=\"https://git-scm.com/docs/git-for-each-ref\"> ☞ for-each-ref</a></h3>\n<blockquote>\n<p>主要用于查看所有的ref历史等信息。</p>\n</blockquote>\n<blockquote>\n<p>不废话，上例子</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git for-each-ref --sort=committerdate --format=&#x27;*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)&#x27;|tail -n 10</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出：<br>\n[这里显示最后10次信息]</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ git for-each-ref --sort=committerdate --format=&#x27;*** %(refname)%09%(committerdate) *** %(subject)  %09%(upstream) %09 %(authorname)%(authordate)&#x27;|tail -n 10</span><br><span class=\"line\">*** refs/tags/v0.1.0.4   *** v0.1.0.4            </span><br><span class=\"line\">*** refs/tags/v0.1.0.5   *** v0.1.0.5            </span><br><span class=\"line\">*** refs/tags/v0.1.0.6   *** v0.1.0.6            </span><br><span class=\"line\">*** refs/tags/v0.1.0.7   *** v0.1.0.7            </span><br><span class=\"line\">*** refs/tags/v0.1.0.8   *** v0.1.0.8            </span><br><span class=\"line\">*** refs/tags/v0.1.0.9   *** v0.1.0.9            </span><br><span class=\"line\">*** refs/remotes/origin/server  Sun Dec 13 11:41:57 2020 +0800 *** Site updated: 2020-12-13 11:41:57             crabSun Dec 13 11:41:57 2020 +0800</span><br><span class=\"line\">*** refs/heads/master   Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder    refs/remotes/origin/master       crabWed Mar 30 00:53:31 2022 +0800</span><br><span class=\"line\">*** refs/remotes/origin/HEAD    Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800</span><br><span class=\"line\">*** refs/remotes/origin/master  Wed Mar 30 00:53:31 2022 +0800 *** feat: kubebuilder             crabWed Mar 30 00:53:31 2022 +0800</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Nov 18 2021 18:05:19 GMT+0800 (中国标准时间)","title":"「4」Git常用技巧","path":"archives/3c1dd822.html","eyeCatchImage":null,"excerpt":"<h3 id=\"学习方式\"><a class=\"header-anchor\" href=\"#学习方式\">¶</a>学习方式</h3>\n<p>多练多得，直接学习<a href=\"https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">官网</a>理解。</p>\n<p>以下仅仅是部分用到的场景和部分场景记录，不代表全部情况，如有错误，请及时指正。</p>\n<h3 id=\"Git版本：\"><a class=\"header-anchor\" href=\"#Git版本：\">¶</a>Git版本：</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1944 ± git version </span><br><span class=\"line\">git version 2.28.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"先说说Git的常用命令：-可跳过\"><a class=\"header-anchor\" href=\"#先说说Git的常用命令：-可跳过\">¶</a>先说说Git的常用命令：(可跳过)</h3>","date":{"_isAMomentObject":true,"_i":"2020-09-01T11:22:02.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-01T11:22:02.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":8608},{"title":"「40」Quick Sort Plus之通用模版","date":"2021-03-01T13:10:17.000Z","updated":"2021-03-01T13:10:17.000Z","keywords":"Go,sort,quick sort","mathjax":true,"abbrlink":"359bb4b6","_content":"### 前序:\n[「37」Quick Sort快速排序](https://blog.imrcrab.com/archives/aa75061e.html)分析过快速排序,之前有个问题一直是个痛点:\n自定义结构体排序过程中,还是要写不少逻辑判断代码,可以再抽象点么?\n用最少的代码,完全实现结构体按照不通的字段进行排序.\n\n<!--more-->\n\n[「37节」自定义排序做法:](https://blog.imrcrab.com/archives/aa75061e.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E5%81%9A%E6%B3%95%EF%BC%9A)\n\n\n### 方案设想:\n\n* 1、利用reflect反射,传入多个字段的名称,\n* 2、每个字段指定升序或者降序.\n* 3、提供升序或者降序.\n\n#### coding:\n\n```go\n\nfunc QuickSortAll(a []interface{}, left, right int, By func(a, b interface{}) bool) []interface{} {\n\tif left < right {\n\t\tmid := partitionAll(a, left, right, By)\n\t\tQuickSortAll(a, left, mid-1, By)\n\t\tQuickSortAll(a, mid+1, right, By)\n\t}\n\treturn a\n\n}\n\nfunc partitionAll(a []interface{}, left int, right int, By func(a, b interface{}) bool) int {\n\tpivot := a[left]\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; {\n\t\tfor ; left < right && By(a[right], pivot); {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && By(pivot, a[left]); {\n\t\t\tleft++\n\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\ntype User struct {\n\tName  string\n\tAge   int\n\tCount int\n}\n\nconst counter = 10\n\n// 自定义的部分\nconst (\n\tflagResult = false\n\tSortLow    = - 1\n\tSortEquals = 0\n\tSortHigh   = 1\n)\n\n// 自定义排序规则,来源可以自定义\n// K: 排序字段 \"Count\"  v: true--> 小-->大    false--> 大-->小\n// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则。\n// eg: 按照Name升序\nvar SortingRules = map[string]bool{\"Name\": true}\n\n// eg: 按照Name升序,name相同时候,按照age降序.\n// var SortingRules = map[string]bool{\"Name\": true,\"Age\" : false}\n\n\nfunc main() {\n\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\tisp = append(isp, User{\n\t\t\tName:  strconv.Itoa(rand.Intn(counter)),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})\n\t\t//isp = append(isp, strconv.Itoa(rand.Intn(counter))+\"===\")\n\n\t}\n\tfmt.Println(isp)\n\tt := time.Now().Unix()\n\t// 主要的排序过程\n\tnum := QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// 类型不匹配则返回true，无法保证顺序\n\t\tif reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() {\n\t\t\treturn !flagResult\n\t\t}\n\t\treturn sortByRules(a, b, SortingRules)\n\n\t})\n\tfmt.Println(num)\n\tfmt.Println(\"耗时：\",time.Now().Unix() - t)\n}\n\n// sortByRules 自定义排序规则\nfunc sortByRules(a, b interface{}, sortingRules map[string]bool) bool {\n\tofType := reflect.ValueOf(a).Kind()\n\tva := reflect.ValueOf(a)\n\tvb := reflect.ValueOf(b)\n\n\tfor v, k := range sortingRules {\n\n\t\tif ofType != reflect.Struct {\n\t\t\t//非结构体，常用的类型\n\t\t\tresult := typeChooseOfReflect(va, vb, k)\n\t\t\tif result == SortEquals {\n\t\t\t\tcontinue\n\t\t\t} else if result < SortEquals {\n\t\t\t\treturn flagResult\n\t\t\t} else {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\t\t} else if ofType == reflect.Struct {\n\t\t\t// 结构体比较\n\t\t\tof := va.FieldByName(v)\n\t\t\tofb := vb.FieldByName(v)\n\n\t\t\tif of.Kind() == reflect.Struct || ofb.Kind() == reflect.Struct {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\n\t\t\tif !of.IsValid() || !ofb.IsValid() {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\n\t\t\tresult := typeChooseOfReflect(of, ofb, k)\n\t\t\tif result == SortEquals {\n\t\t\t\tcontinue\n\t\t\t} else if result < SortEquals {\n\t\t\t\treturn flagResult\n\t\t\t} else {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\t\t}\n\t}\n\treturn !flagResult\n}\n\n// typeChooseOfReflect 类型选择映射\nfunc typeChooseOfReflect(valueOfA, valueOfB reflect.Value, flag bool) int8 {\n\tif flag {\n\t\tvalueOfA, valueOfB = valueOfB, valueOfA\n\t}\n\tkind := valueOfA.Type().Kind()\n\tswitch kind {\n\tcase reflect.Bool:\n\t\treturn SortHigh\n\n\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n\t\tif valueOfA.Int() < valueOfB.Int() {\n\t\t\treturn SortHigh\n\t\t}\n\t\tif valueOfA.Int() == valueOfB.Int() {\n\t\t\treturn SortEquals\n\t\t}\n\n\tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n\t\tif valueOfA.Uint() < valueOfB.Uint() {\n\t\t\treturn SortHigh\n\t\t}\n\t\tif valueOfA.Uint() == valueOfB.Uint() {\n\t\t\treturn SortEquals\n\t\t}\n\n\tcase reflect.Float32, reflect.Float64:\n\t\tif valueOfA.Float() < valueOfB.Float() {\n\t\t\treturn SortHigh\n\t\t}\n\t\tif valueOfA.Float() == valueOfB.Float() {\n\t\t\treturn SortEquals\n\t\t}\n\n\tcase reflect.String:\n\t\treturn -int8(strings.Compare(valueOfA.String(), valueOfB.String()))\n\t}\n\treturn SortLow\n}\n\n```\n\n\n##### outputs:\n\n```go\n[{1 0 7} {7 1 9} {1 2 8} {5 3 0} {6 4 0} {4 5 1} {2 6 9} {8 7 4} {1 8 5} {7 9 6}]\n[{1 0 7} {1 8 5} {1 2 8} {2 6 9} {4 5 1} {5 3 0} {6 4 0} {7 1 9} {7 9 6} {8 7 4}]\n耗时： 0\n\n```\n#### 修改自定义规则:\n\n##### 多个规则排序\n```go\n// eg: 按照Name升序,name相同时候,按照age降序.\n// var SortingRules = map[string]bool{\"Name\": true,\"Age\" : false}\n\n```\n\n##### outputs:\n\n```go\n[{1 0 7} {7 1 9} {1 2 8} {5 3 0} {6 4 0} {4 5 1} {2 6 9} {8 7 4} {1 8 5} {7 9 6}]\n[{1 8 5} {1 2 8} {1 0 7} {2 6 9} {4 5 1} {5 3 0} {6 4 0} {7 9 6} {7 1 9} {8 7 4}]\n耗时： 0\n```\n##### 常见类型排序:\n修改重要部分:\n```go\n// K: 排序字段 \"Count\"  v: true--> 小-->大    false--> 大-->小\n// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则.(多个kv以第一个为准「仅在基本类型下有效」)\n// eg: string类型排序,则key值为任意,value值决定排序规则,\nvar SortingRules = map[string]bool{\"\": true}\n\nfunc main() {\n\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\t/*isp = append(isp, User{\n\t\t\tName:  strconv.Itoa(rand.Intn(counter)),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})*/\n        //***** string类型排序 *****\n\t\tisp = append(isp, strconv.Itoa(rand.Intn(counter))+\"===\")\n        //***** int类型排序 *****\n\t\t// isp = append(isp, rand.Intn(counter))\n\n\t}\n\tfmt.Println(isp)\n\tt := time.Now().Unix()\n\t// 主要的排序过程\n\tnum := QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// 类型不匹配则返回true，无法保证顺序\n\t\tif reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() {\n\t\t\treturn !flagResult\n\t\t}\n\t\treturn sortByRules(a, b, SortingRules)\n\n\t})\n\tfmt.Println(num)\n\tfmt.Println(\"耗时：\",time.Now().Unix() - t)\n}\n```\n\n##### outputs:\n\n* string类型:\n\n```go\n[1=== 7=== 7=== 9=== 1=== 8=== 5=== 0=== 6=== 0===]\n[0=== 0=== 1=== 1=== 5=== 6=== 7=== 7=== 8=== 9===]\n耗时： 0\n```\n\n* int类型\n\n```go\n[1 7 7 9 1 8 5 0 6 0]\n[0 0 1 1 5 6 7 7 8 9]\n耗时： 0\n```\n\n### 总结:\n\n到这里也就差不多该结束了,基本和常用的就这么多了,其它需要扩充的后续再补充.\n* 优化点:\n    * 字段名称不区分大小写\n\n### End","source":"_posts/40-Quick-sort-plus-通用模版.md","raw":"---\ntitle: 「40」Quick Sort Plus之通用模版\ndate: '2021/03/01 21:10:17'\nupdated: '2021/03/01 21:10:17'\nkeywords: 'Go,sort,quick sort'\ntags:\n  - Go\n  - Sort\n  - Day\nmathjax: true\nabbrlink: 359bb4b6\n---\n### 前序:\n[「37」Quick Sort快速排序](https://blog.imrcrab.com/archives/aa75061e.html)分析过快速排序,之前有个问题一直是个痛点:\n自定义结构体排序过程中,还是要写不少逻辑判断代码,可以再抽象点么?\n用最少的代码,完全实现结构体按照不通的字段进行排序.\n\n<!--more-->\n\n[「37节」自定义排序做法:](https://blog.imrcrab.com/archives/aa75061e.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E5%81%9A%E6%B3%95%EF%BC%9A)\n\n\n### 方案设想:\n\n* 1、利用reflect反射,传入多个字段的名称,\n* 2、每个字段指定升序或者降序.\n* 3、提供升序或者降序.\n\n#### coding:\n\n```go\n\nfunc QuickSortAll(a []interface{}, left, right int, By func(a, b interface{}) bool) []interface{} {\n\tif left < right {\n\t\tmid := partitionAll(a, left, right, By)\n\t\tQuickSortAll(a, left, mid-1, By)\n\t\tQuickSortAll(a, mid+1, right, By)\n\t}\n\treturn a\n\n}\n\nfunc partitionAll(a []interface{}, left int, right int, By func(a, b interface{}) bool) int {\n\tpivot := a[left]\n\tfor ; left < right; {\n\t\t//for ; left < right && a[right] >= pivot; {\n\t\tfor ; left < right && By(a[right], pivot); {\n\t\t\tright--\n\t\t}\n\t\ta[left] = a[right]\n\t\t//for ; left < right && a[left] <= pivot; {\n\t\tfor ; left < right && By(pivot, a[left]); {\n\t\t\tleft++\n\n\t\t}\n\t\ta[right] = a[left]\n\t}\n\ta[left] = pivot\n\treturn left\n}\n\ntype User struct {\n\tName  string\n\tAge   int\n\tCount int\n}\n\nconst counter = 10\n\n// 自定义的部分\nconst (\n\tflagResult = false\n\tSortLow    = - 1\n\tSortEquals = 0\n\tSortHigh   = 1\n)\n\n// 自定义排序规则,来源可以自定义\n// K: 排序字段 \"Count\"  v: true--> 小-->大    false--> 大-->小\n// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则。\n// eg: 按照Name升序\nvar SortingRules = map[string]bool{\"Name\": true}\n\n// eg: 按照Name升序,name相同时候,按照age降序.\n// var SortingRules = map[string]bool{\"Name\": true,\"Age\" : false}\n\n\nfunc main() {\n\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\tisp = append(isp, User{\n\t\t\tName:  strconv.Itoa(rand.Intn(counter)),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})\n\t\t//isp = append(isp, strconv.Itoa(rand.Intn(counter))+\"===\")\n\n\t}\n\tfmt.Println(isp)\n\tt := time.Now().Unix()\n\t// 主要的排序过程\n\tnum := QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// 类型不匹配则返回true，无法保证顺序\n\t\tif reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() {\n\t\t\treturn !flagResult\n\t\t}\n\t\treturn sortByRules(a, b, SortingRules)\n\n\t})\n\tfmt.Println(num)\n\tfmt.Println(\"耗时：\",time.Now().Unix() - t)\n}\n\n// sortByRules 自定义排序规则\nfunc sortByRules(a, b interface{}, sortingRules map[string]bool) bool {\n\tofType := reflect.ValueOf(a).Kind()\n\tva := reflect.ValueOf(a)\n\tvb := reflect.ValueOf(b)\n\n\tfor v, k := range sortingRules {\n\n\t\tif ofType != reflect.Struct {\n\t\t\t//非结构体，常用的类型\n\t\t\tresult := typeChooseOfReflect(va, vb, k)\n\t\t\tif result == SortEquals {\n\t\t\t\tcontinue\n\t\t\t} else if result < SortEquals {\n\t\t\t\treturn flagResult\n\t\t\t} else {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\t\t} else if ofType == reflect.Struct {\n\t\t\t// 结构体比较\n\t\t\tof := va.FieldByName(v)\n\t\t\tofb := vb.FieldByName(v)\n\n\t\t\tif of.Kind() == reflect.Struct || ofb.Kind() == reflect.Struct {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\n\t\t\tif !of.IsValid() || !ofb.IsValid() {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\n\t\t\tresult := typeChooseOfReflect(of, ofb, k)\n\t\t\tif result == SortEquals {\n\t\t\t\tcontinue\n\t\t\t} else if result < SortEquals {\n\t\t\t\treturn flagResult\n\t\t\t} else {\n\t\t\t\treturn !flagResult\n\t\t\t}\n\t\t}\n\t}\n\treturn !flagResult\n}\n\n// typeChooseOfReflect 类型选择映射\nfunc typeChooseOfReflect(valueOfA, valueOfB reflect.Value, flag bool) int8 {\n\tif flag {\n\t\tvalueOfA, valueOfB = valueOfB, valueOfA\n\t}\n\tkind := valueOfA.Type().Kind()\n\tswitch kind {\n\tcase reflect.Bool:\n\t\treturn SortHigh\n\n\tcase reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:\n\t\tif valueOfA.Int() < valueOfB.Int() {\n\t\t\treturn SortHigh\n\t\t}\n\t\tif valueOfA.Int() == valueOfB.Int() {\n\t\t\treturn SortEquals\n\t\t}\n\n\tcase reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:\n\t\tif valueOfA.Uint() < valueOfB.Uint() {\n\t\t\treturn SortHigh\n\t\t}\n\t\tif valueOfA.Uint() == valueOfB.Uint() {\n\t\t\treturn SortEquals\n\t\t}\n\n\tcase reflect.Float32, reflect.Float64:\n\t\tif valueOfA.Float() < valueOfB.Float() {\n\t\t\treturn SortHigh\n\t\t}\n\t\tif valueOfA.Float() == valueOfB.Float() {\n\t\t\treturn SortEquals\n\t\t}\n\n\tcase reflect.String:\n\t\treturn -int8(strings.Compare(valueOfA.String(), valueOfB.String()))\n\t}\n\treturn SortLow\n}\n\n```\n\n\n##### outputs:\n\n```go\n[{1 0 7} {7 1 9} {1 2 8} {5 3 0} {6 4 0} {4 5 1} {2 6 9} {8 7 4} {1 8 5} {7 9 6}]\n[{1 0 7} {1 8 5} {1 2 8} {2 6 9} {4 5 1} {5 3 0} {6 4 0} {7 1 9} {7 9 6} {8 7 4}]\n耗时： 0\n\n```\n#### 修改自定义规则:\n\n##### 多个规则排序\n```go\n// eg: 按照Name升序,name相同时候,按照age降序.\n// var SortingRules = map[string]bool{\"Name\": true,\"Age\" : false}\n\n```\n\n##### outputs:\n\n```go\n[{1 0 7} {7 1 9} {1 2 8} {5 3 0} {6 4 0} {4 5 1} {2 6 9} {8 7 4} {1 8 5} {7 9 6}]\n[{1 8 5} {1 2 8} {1 0 7} {2 6 9} {4 5 1} {5 3 0} {6 4 0} {7 9 6} {7 1 9} {8 7 4}]\n耗时： 0\n```\n##### 常见类型排序:\n修改重要部分:\n```go\n// K: 排序字段 \"Count\"  v: true--> 小-->大    false--> 大-->小\n// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则.(多个kv以第一个为准「仅在基本类型下有效」)\n// eg: string类型排序,则key值为任意,value值决定排序规则,\nvar SortingRules = map[string]bool{\"\": true}\n\nfunc main() {\n\n\tisp := make([]interface{}, 0, counter)\n\n\tfor i := 0; i < counter; i++ {\n\t\t/*isp = append(isp, User{\n\t\t\tName:  strconv.Itoa(rand.Intn(counter)),\n\t\t\tAge:   i,\n\t\t\tCount: rand.Intn(counter),\n\t\t})*/\n        //***** string类型排序 *****\n\t\tisp = append(isp, strconv.Itoa(rand.Intn(counter))+\"===\")\n        //***** int类型排序 *****\n\t\t// isp = append(isp, rand.Intn(counter))\n\n\t}\n\tfmt.Println(isp)\n\tt := time.Now().Unix()\n\t// 主要的排序过程\n\tnum := QuickSortAll(isp, 0, len(isp)-1, func(a, b interface{}) bool {\n\t\t// 类型不匹配则返回true，无法保证顺序\n\t\tif reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() {\n\t\t\treturn !flagResult\n\t\t}\n\t\treturn sortByRules(a, b, SortingRules)\n\n\t})\n\tfmt.Println(num)\n\tfmt.Println(\"耗时：\",time.Now().Unix() - t)\n}\n```\n\n##### outputs:\n\n* string类型:\n\n```go\n[1=== 7=== 7=== 9=== 1=== 8=== 5=== 0=== 6=== 0===]\n[0=== 0=== 1=== 1=== 5=== 6=== 7=== 7=== 8=== 9===]\n耗时： 0\n```\n\n* int类型\n\n```go\n[1 7 7 9 1 8 5 0 6 0]\n[0 0 1 1 5 6 7 7 8 9]\n耗时： 0\n```\n\n### 总结:\n\n到这里也就差不多该结束了,基本和常用的就这么多了,其它需要扩充的后续再补充.\n* 优化点:\n    * 字段名称不区分大小写\n\n### End","slug":"40-Quick-sort-plus-通用模版","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d57002xzfqxekk81usk","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html\">「37」Quick Sort快速排序</a>分析过快速排序,之前有个问题一直是个痛点:<br>\n自定义结构体排序过程中,还是要写不少逻辑判断代码,可以再抽象点么?<br>\n用最少的代码,完全实现结构体按照不通的字段进行排序.</p>\n<span id=\"more\"></span>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E5%81%9A%E6%B3%95%EF%BC%9A\">「37节」自定义排序做法:</a></p>\n<h3 id=\"方案设想\"><a class=\"header-anchor\" href=\"#方案设想\">¶</a>方案设想:</h3>\n<ul>\n<li>1、利用reflect反射,传入多个字段的名称,</li>\n<li>2、每个字段指定升序或者降序.</li>\n<li>3、提供升序或者降序.</li>\n</ul>\n<h4 id=\"coding\"><a class=\"header-anchor\" href=\"#coding\">¶</a>coding:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSortAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partitionAll(a, left, right, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, left, mid<span class=\"number\">-1</span>, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, mid+<span class=\"number\">1</span>, right, By)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partitionAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(a[right], pivot); &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(pivot, a[left]); &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tCount <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义的部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tflagResult = <span class=\"literal\">false</span></span><br><span class=\"line\">\tSortLow    = - <span class=\"number\">1</span></span><br><span class=\"line\">\tSortEquals = <span class=\"number\">0</span></span><br><span class=\"line\">\tSortHigh   = <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则,来源可以自定义</span></span><br><span class=\"line\"><span class=\"comment\">// K: 排序字段 &quot;Count&quot;  v: true--&gt; 小--&gt;大    false--&gt; 大--&gt;小</span></span><br><span class=\"line\"><span class=\"comment\">// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则。</span></span><br><span class=\"line\"><span class=\"comment\">// eg: 按照Name升序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SortingRules = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">bool</span>&#123;<span class=\"string\">&quot;Name&quot;</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eg: 按照Name升序,name相同时候,按照age降序.</span></span><br><span class=\"line\"><span class=\"comment\">// var SortingRules = map[string]bool&#123;&quot;Name&quot;: true,&quot;Age&quot; : false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(rand.Intn(counter)),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">//isp = append(isp, strconv.Itoa(rand.Intn(counter))+&quot;===&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(isp)</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\t<span class=\"comment\">// 主要的排序过程</span></span><br><span class=\"line\">\tnum := QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 类型不匹配则返回true，无法保证顺序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sortByRules(a, b, SortingRules)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tfmt.Println(num)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时：&quot;</span>,time.Now().Unix() - t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sortByRules 自定义排序规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sortByRules</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;, sortingRules <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">bool</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\tofType := reflect.ValueOf(a).Kind()</span><br><span class=\"line\">\tva := reflect.ValueOf(a)</span><br><span class=\"line\">\tvb := reflect.ValueOf(b)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> v, k := <span class=\"keyword\">range</span> sortingRules &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ofType != reflect.Struct &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//非结构体，常用的类型</span></span><br><span class=\"line\">\t\t\tresult := typeChooseOfReflect(va, vb, k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> result == SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> result &lt; SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> flagResult</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ofType == reflect.Struct &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 结构体比较</span></span><br><span class=\"line\">\t\t\tof := va.FieldByName(v)</span><br><span class=\"line\">\t\t\tofb := vb.FieldByName(v)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> of.Kind() == reflect.Struct || ofb.Kind() == reflect.Struct &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !of.IsValid() || !ofb.IsValid() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tresult := typeChooseOfReflect(of, ofb, k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> result == SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> result &lt; SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> flagResult</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// typeChooseOfReflect 类型选择映射</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">typeChooseOfReflect</span><span class=\"params\">(valueOfA, valueOfB reflect.Value, flag <span class=\"type\">bool</span>)</span></span> <span class=\"type\">int8</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flag &#123;</span><br><span class=\"line\">\t\tvalueOfA, valueOfB = valueOfB, valueOfA</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tkind := valueOfA.Type().Kind()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> kind &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Bool:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Int() &lt; valueOfB.Int() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Int() == valueOfB.Int() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortEquals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Uint() &lt; valueOfB.Uint() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Uint() == valueOfB.Uint() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortEquals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Float32, reflect.Float64:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Float() &lt; valueOfB.Float() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Float() == valueOfB.Float() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortEquals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.String:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"type\">int8</span>(strings.Compare(valueOfA.String(), valueOfB.String()))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> SortLow</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs\"><a class=\"header-anchor\" href=\"#outputs\">¶</a>outputs:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125;]</span><br><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125;]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改自定义规则\"><a class=\"header-anchor\" href=\"#修改自定义规则\">¶</a>修改自定义规则:</h4>\n<h5 id=\"多个规则排序\"><a class=\"header-anchor\" href=\"#多个规则排序\">¶</a>多个规则排序</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg: 按照Name升序,name相同时候,按照age降序.</span></span><br><span class=\"line\"><span class=\"comment\">// var SortingRules = map[string]bool&#123;&quot;Name&quot;: true,&quot;Age&quot; : false&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs-v2\"><a class=\"header-anchor\" href=\"#outputs-v2\">¶</a>outputs:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125;]</span><br><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125;]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"常见类型排序\"><a class=\"header-anchor\" href=\"#常见类型排序\">¶</a>常见类型排序:</h5>\n<p>修改重要部分:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// K: 排序字段 &quot;Count&quot;  v: true--&gt; 小--&gt;大    false--&gt; 大--&gt;小</span></span><br><span class=\"line\"><span class=\"comment\">// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则.(多个kv以第一个为准「仅在基本类型下有效」)</span></span><br><span class=\"line\"><span class=\"comment\">// eg: string类型排序,则key值为任意,value值决定排序规则,</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SortingRules = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">bool</span>&#123;<span class=\"string\">&quot;&quot;</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*isp = append(isp, User&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tName:  strconv.Itoa(rand.Intn(counter)),</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tAge:   i,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tCount: rand.Intn(counter),</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;)*/</span></span><br><span class=\"line\">        <span class=\"comment\">//***** string类型排序 *****</span></span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, strconv.Itoa(rand.Intn(counter))+<span class=\"string\">&quot;===&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//***** int类型排序 *****</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// isp = append(isp, rand.Intn(counter))</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(isp)</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\t<span class=\"comment\">// 主要的排序过程</span></span><br><span class=\"line\">\tnum := QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 类型不匹配则返回true，无法保证顺序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sortByRules(a, b, SortingRules)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tfmt.Println(num)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时：&quot;</span>,time.Now().Unix() - t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs-v3\"><a class=\"header-anchor\" href=\"#outputs-v3\">¶</a>outputs:</h5>\n<ul>\n<li>string类型:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>=== <span class=\"number\">7</span>=== <span class=\"number\">7</span>=== <span class=\"number\">9</span>=== <span class=\"number\">1</span>=== <span class=\"number\">8</span>=== <span class=\"number\">5</span>=== <span class=\"number\">0</span>=== <span class=\"number\">6</span>=== <span class=\"number\">0</span>===]</span><br><span class=\"line\">[<span class=\"number\">0</span>=== <span class=\"number\">0</span>=== <span class=\"number\">1</span>=== <span class=\"number\">1</span>=== <span class=\"number\">5</span>=== <span class=\"number\">6</span>=== <span class=\"number\">7</span>=== <span class=\"number\">7</span>=== <span class=\"number\">8</span>=== <span class=\"number\">9</span>===]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>int类型</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">7</span> <span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">0</span>]</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"header-anchor\" href=\"#总结\">¶</a>总结:</h3>\n<p>到这里也就差不多该结束了,基本和常用的就这么多了,其它需要扩充的后续再补充.</p>\n<ul>\n<li>优化点:\n<ul>\n<li>字段名称不区分大小写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html\">「37」Quick Sort快速排序</a>分析过快速排序,之前有个问题一直是个痛点:<br>\n自定义结构体排序过程中,还是要写不少逻辑判断代码,可以再抽象点么?<br>\n用最少的代码,完全实现结构体按照不通的字段进行排序.</p>","more":"<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F%E8%A7%84%E5%88%99%E5%81%9A%E6%B3%95%EF%BC%9A\">「37节」自定义排序做法:</a></p>\n<h3 id=\"方案设想\"><a class=\"header-anchor\" href=\"#方案设想\">¶</a>方案设想:</h3>\n<ul>\n<li>1、利用reflect反射,传入多个字段的名称,</li>\n<li>2、每个字段指定升序或者降序.</li>\n<li>3、提供升序或者降序.</li>\n</ul>\n<h4 id=\"coding\"><a class=\"header-anchor\" href=\"#coding\">¶</a>coding:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">QuickSortAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) []<span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> left &lt; right &#123;</span><br><span class=\"line\">\t\tmid := partitionAll(a, left, right, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, left, mid<span class=\"number\">-1</span>, By)</span><br><span class=\"line\">\t\tQuickSortAll(a, mid+<span class=\"number\">1</span>, right, By)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">partitionAll</span><span class=\"params\">(a []<span class=\"keyword\">interface</span>&#123;&#125;, left <span class=\"type\">int</span>, right <span class=\"type\">int</span>, By <span class=\"keyword\">func</span>(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tpivot := a[left]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; left &lt; right; &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[right] &gt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(a[right], pivot); &#123;</span><br><span class=\"line\">\t\t\tright--</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[left] = a[right]</span><br><span class=\"line\">\t\t<span class=\"comment\">//for ; left &lt; right &amp;&amp; a[left] &lt;= pivot; &#123;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ; left &lt; right &amp;&amp; By(pivot, a[left]); &#123;</span><br><span class=\"line\">\t\t\tleft++</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[right] = a[left]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[left] = pivot</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName  <span class=\"type\">string</span></span><br><span class=\"line\">\tAge   <span class=\"type\">int</span></span><br><span class=\"line\">\tCount <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> counter = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义的部分</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tflagResult = <span class=\"literal\">false</span></span><br><span class=\"line\">\tSortLow    = - <span class=\"number\">1</span></span><br><span class=\"line\">\tSortEquals = <span class=\"number\">0</span></span><br><span class=\"line\">\tSortHigh   = <span class=\"number\">1</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义排序规则,来源可以自定义</span></span><br><span class=\"line\"><span class=\"comment\">// K: 排序字段 &quot;Count&quot;  v: true--&gt; 小--&gt;大    false--&gt; 大--&gt;小</span></span><br><span class=\"line\"><span class=\"comment\">// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则。</span></span><br><span class=\"line\"><span class=\"comment\">// eg: 按照Name升序</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SortingRules = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">bool</span>&#123;<span class=\"string\">&quot;Name&quot;</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// eg: 按照Name升序,name相同时候,按照age降序.</span></span><br><span class=\"line\"><span class=\"comment\">// var SortingRules = map[string]bool&#123;&quot;Name&quot;: true,&quot;Age&quot; : false&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, User&#123;</span><br><span class=\"line\">\t\t\tName:  strconv.Itoa(rand.Intn(counter)),</span><br><span class=\"line\">\t\t\tAge:   i,</span><br><span class=\"line\">\t\t\tCount: rand.Intn(counter),</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\t<span class=\"comment\">//isp = append(isp, strconv.Itoa(rand.Intn(counter))+&quot;===&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(isp)</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\t<span class=\"comment\">// 主要的排序过程</span></span><br><span class=\"line\">\tnum := QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 类型不匹配则返回true，无法保证顺序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sortByRules(a, b, SortingRules)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tfmt.Println(num)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时：&quot;</span>,time.Now().Unix() - t)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sortByRules 自定义排序规则</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sortByRules</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;, sortingRules <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">bool</span>)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\tofType := reflect.ValueOf(a).Kind()</span><br><span class=\"line\">\tva := reflect.ValueOf(a)</span><br><span class=\"line\">\tvb := reflect.ValueOf(b)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> v, k := <span class=\"keyword\">range</span> sortingRules &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ofType != reflect.Struct &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//非结构体，常用的类型</span></span><br><span class=\"line\">\t\t\tresult := typeChooseOfReflect(va, vb, k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> result == SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> result &lt; SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> flagResult</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ofType == reflect.Struct &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 结构体比较</span></span><br><span class=\"line\">\t\t\tof := va.FieldByName(v)</span><br><span class=\"line\">\t\t\tofb := vb.FieldByName(v)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> of.Kind() == reflect.Struct || ofb.Kind() == reflect.Struct &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> !of.IsValid() || !ofb.IsValid() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tresult := typeChooseOfReflect(of, ofb, k)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> result == SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> result &lt; SortEquals &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> flagResult</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// typeChooseOfReflect 类型选择映射</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">typeChooseOfReflect</span><span class=\"params\">(valueOfA, valueOfB reflect.Value, flag <span class=\"type\">bool</span>)</span></span> <span class=\"type\">int8</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flag &#123;</span><br><span class=\"line\">\t\tvalueOfA, valueOfB = valueOfB, valueOfA</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tkind := valueOfA.Type().Kind()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> kind &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Bool:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Int() &lt; valueOfB.Int() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Int() == valueOfB.Int() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortEquals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Uint() &lt; valueOfB.Uint() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Uint() == valueOfB.Uint() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortEquals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.Float32, reflect.Float64:</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Float() &lt; valueOfB.Float() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortHigh</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> valueOfA.Float() == valueOfB.Float() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> SortEquals</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> reflect.String:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> -<span class=\"type\">int8</span>(strings.Compare(valueOfA.String(), valueOfB.String()))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> SortLow</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs\"><a class=\"header-anchor\" href=\"#outputs\">¶</a>outputs:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125;]</span><br><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125;]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改自定义规则\"><a class=\"header-anchor\" href=\"#修改自定义规则\">¶</a>修改自定义规则:</h4>\n<h5 id=\"多个规则排序\"><a class=\"header-anchor\" href=\"#多个规则排序\">¶</a>多个规则排序</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eg: 按照Name升序,name相同时候,按照age降序.</span></span><br><span class=\"line\"><span class=\"comment\">// var SortingRules = map[string]bool&#123;&quot;Name&quot;: true,&quot;Age&quot; : false&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs-v2\"><a class=\"header-anchor\" href=\"#outputs-v2\">¶</a>outputs:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125;]</span><br><span class=\"line\">[&#123;<span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">8</span>&#125; &#123;<span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">7</span>&#125; &#123;<span class=\"number\">2</span> <span class=\"number\">6</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">1</span>&#125; &#123;<span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">0</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">6</span>&#125; &#123;<span class=\"number\">7</span> <span class=\"number\">1</span> <span class=\"number\">9</span>&#125; &#123;<span class=\"number\">8</span> <span class=\"number\">7</span> <span class=\"number\">4</span>&#125;]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"常见类型排序\"><a class=\"header-anchor\" href=\"#常见类型排序\">¶</a>常见类型排序:</h5>\n<p>修改重要部分:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// K: 排序字段 &quot;Count&quot;  v: true--&gt; 小--&gt;大    false--&gt; 大--&gt;小</span></span><br><span class=\"line\"><span class=\"comment\">// 支持多个key，当key对应的值相等时候，则排序取决于第二个key自定义的排序规则.(多个kv以第一个为准「仅在基本类型下有效」)</span></span><br><span class=\"line\"><span class=\"comment\">// eg: string类型排序,则key值为任意,value值决定排序规则,</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> SortingRules = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">bool</span>&#123;<span class=\"string\">&quot;&quot;</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tisp := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"number\">0</span>, counter)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; counter; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*isp = append(isp, User&#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tName:  strconv.Itoa(rand.Intn(counter)),</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tAge:   i,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tCount: rand.Intn(counter),</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;)*/</span></span><br><span class=\"line\">        <span class=\"comment\">//***** string类型排序 *****</span></span><br><span class=\"line\">\t\tisp = <span class=\"built_in\">append</span>(isp, strconv.Itoa(rand.Intn(counter))+<span class=\"string\">&quot;===&quot;</span>)</span><br><span class=\"line\">        <span class=\"comment\">//***** int类型排序 *****</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// isp = append(isp, rand.Intn(counter))</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(isp)</span><br><span class=\"line\">\tt := time.Now().Unix()</span><br><span class=\"line\">\t<span class=\"comment\">// 主要的排序过程</span></span><br><span class=\"line\">\tnum := QuickSortAll(isp, <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(isp)<span class=\"number\">-1</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 类型不匹配则返回true，无法保证顺序</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> reflect.ValueOf(a).Kind() != reflect.ValueOf(b).Kind() &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> !flagResult</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sortByRules(a, b, SortingRules)</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\tfmt.Println(num)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;耗时：&quot;</span>,time.Now().Unix() - t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"outputs-v3\"><a class=\"header-anchor\" href=\"#outputs-v3\">¶</a>outputs:</h5>\n<ul>\n<li>string类型:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>=== <span class=\"number\">7</span>=== <span class=\"number\">7</span>=== <span class=\"number\">9</span>=== <span class=\"number\">1</span>=== <span class=\"number\">8</span>=== <span class=\"number\">5</span>=== <span class=\"number\">0</span>=== <span class=\"number\">6</span>=== <span class=\"number\">0</span>===]</span><br><span class=\"line\">[<span class=\"number\">0</span>=== <span class=\"number\">0</span>=== <span class=\"number\">1</span>=== <span class=\"number\">1</span>=== <span class=\"number\">5</span>=== <span class=\"number\">6</span>=== <span class=\"number\">7</span>=== <span class=\"number\">7</span>=== <span class=\"number\">8</span>=== <span class=\"number\">9</span>===]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>int类型</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span> <span class=\"number\">7</span> <span class=\"number\">7</span> <span class=\"number\">9</span> <span class=\"number\">1</span> <span class=\"number\">8</span> <span class=\"number\">5</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">0</span>]</span><br><span class=\"line\">[<span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">7</span> <span class=\"number\">8</span> <span class=\"number\">9</span>]</span><br><span class=\"line\">耗时： <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"header-anchor\" href=\"#总结\">¶</a>总结:</h3>\n<p>到这里也就差不多该结束了,基本和常用的就这么多了,其它需要扩充的后续再补充.</p>\n<ul>\n<li>优化点:\n<ul>\n<li>字段名称不区分大小写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Mar 01 2021 21:10:17 GMT+0800 (中国标准时间)","title":"「40」Quick Sort Plus之通用模版","path":"archives/359bb4b6.html","eyeCatchImage":null,"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p><a href=\"https://blog.imrcrab.com/archives/aa75061e.html\">「37」Quick Sort快速排序</a>分析过快速排序,之前有个问题一直是个痛点:<br>\n自定义结构体排序过程中,还是要写不少逻辑判断代码,可以再抽象点么?<br>\n用最少的代码,完全实现结构体按照不通的字段进行排序.</p>","date":{"_isAMomentObject":true,"_i":"2021-03-01T13:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-01T13:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6027},{"title":"「41」关于go中 _ [忽略]的使用","date":"2021-03-02T12:10:17.000Z","updated":"2021-03-02T12:10:17.000Z","keywords":"Go,忽略","mathjax":true,"abbrlink":"9af9679c","_content":"\n\n### 前序:\n\n* 前段时间看了这么个问题,输出是what?:\n\n```go\npackage main\n\nfunc main() {\n\tprintln(fff(1))\n}\n\nfunc fff(x int) (_, __ int) {\n\t_, __ = x, x\n\treturn\n}\n\n```\n\n<!--more-->\n\n### 结果分析\n\n#### outpus:\n \n> 0 1\n\n#### 汇编分析:\n```c#\n▶ go tool compile -N -l -S signore.go \n\"\".main STEXT size=158 args=0x0 locals=0x40 funcid=0x0\n        0x0000 00000 (signore.go:3)     TEXT    \"\".main(SB), ABIInternal, $64-0\n        0x0000 00000 (signore.go:3)     MOVQ    (TLS), CX\n        0x0009 00009 (signore.go:3)     CMPQ    SP, 16(CX)\n        0x000d 00013 (signore.go:3)     PCDATA  $0, $-2\n        0x000d 00013 (signore.go:3)     JLS     148\n        0x0013 00019 (signore.go:3)     PCDATA  $0, $-1\n        0x0013 00019 (signore.go:3)     SUBQ    $64, SP\n        0x0017 00023 (signore.go:3)     MOVQ    BP, 56(SP)\n        0x001c 00028 (signore.go:3)     LEAQ    56(SP), BP\n        0x0021 00033 (signore.go:3)     FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0021 00033 (signore.go:3)     FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0021 00033 (signore.go:4)     MOVQ    $1, (SP)\n        0x0029 00041 (signore.go:4)     PCDATA  $1, $0\n        0x0029 00041 (signore.go:4)     CALL    \"\".fff(SB)\n        0x002e 00046 (signore.go:4)     MOVQ    8(SP), AX\n        0x0033 00051 (signore.go:4)     MOVQ    16(SP), CX\n        0x0038 00056 (signore.go:4)     MOVQ    AX, \"\"..autotmp_2+32(SP)\n        0x003d 00061 (signore.go:4)     MOVQ    CX, \"\"..autotmp_3+24(SP)\n        0x0042 00066 (signore.go:4)     MOVQ    \"\"..autotmp_2+32(SP), AX\n        0x0047 00071 (signore.go:4)     MOVQ    AX, \"\"..autotmp_0+48(SP)\n        0x004c 00076 (signore.go:4)     MOVQ    \"\"..autotmp_3+24(SP), AX\n        0x0051 00081 (signore.go:4)     MOVQ    AX, \"\"..autotmp_1+40(SP)\n        0x0056 00086 (signore.go:4)     CALL    runtime.printlock(SB)\n        0x005b 00091 (signore.go:4)     MOVQ    \"\"..autotmp_0+48(SP), AX\n        0x0060 00096 (signore.go:4)     MOVQ    AX, (SP)\n        0x0064 00100 (signore.go:4)     CALL    runtime.printint(SB)\n        0x0069 00105 (signore.go:4)     CALL    runtime.printsp(SB)\n        0x006e 00110 (signore.go:4)     MOVQ    \"\"..autotmp_1+40(SP), AX\n        0x0073 00115 (signore.go:4)     MOVQ    AX, (SP)\n        0x0077 00119 (signore.go:4)     CALL    runtime.printint(SB)\n        0x007c 00124 (signore.go:4)     NOP\n        0x0080 00128 (signore.go:4)     CALL    runtime.printnl(SB)\n        0x0085 00133 (signore.go:4)     CALL    runtime.printunlock(SB)\n        0x008a 00138 (signore.go:5)     MOVQ    56(SP), BP\n        0x008f 00143 (signore.go:5)     ADDQ    $64, SP\n        0x0093 00147 (signore.go:5)     RET\n        0x0094 00148 (signore.go:5)     NOP\n        0x0094 00148 (signore.go:3)     PCDATA  $1, $-1\n        0x0094 00148 (signore.go:3)     PCDATA  $0, $-2\n        0x0094 00148 (signore.go:3)     CALL    runtime.morestack_noctxt(SB)\n        0x0099 00153 (signore.go:3)     PCDATA  $0, $-1\n        0x0099 00153 (signore.go:3)     JMP     0\n        0x0000 65 48 8b 0c 25 00 00 00 00 48 3b 61 10 0f 86 81  eH..%....H;a....\n        0x0010 00 00 00 48 83 ec 40 48 89 6c 24 38 48 8d 6c 24  ...H..@H.l$8H.l$\n        0x0020 38 48 c7 04 24 01 00 00 00 e8 00 00 00 00 48 8b  8H..$.........H.\n        0x0030 44 24 08 48 8b 4c 24 10 48 89 44 24 20 48 89 4c  D$.H.L$.H.D$ H.L\n        0x0040 24 18 48 8b 44 24 20 48 89 44 24 30 48 8b 44 24  $.H.D$ H.D$0H.D$\n        0x0050 18 48 89 44 24 28 e8 00 00 00 00 48 8b 44 24 30  .H.D$(.....H.D$0\n        0x0060 48 89 04 24 e8 00 00 00 00 e8 00 00 00 00 48 8b  H..$..........H.\n        0x0070 44 24 28 48 89 04 24 e8 00 00 00 00 0f 1f 40 00  D$(H..$.......@.\n        0x0080 e8 00 00 00 00 e8 00 00 00 00 48 8b 6c 24 38 48  ..........H.l$8H\n        0x0090 83 c4 40 c3 e8 00 00 00 00 e9 62 ff ff ff        ..@.......b...\n        rel 5+4 t=17 TLS+0\n        rel 42+4 t=8 \"\".fff+0\n        rel 87+4 t=8 runtime.printlock+0\n        rel 101+4 t=8 runtime.printint+0\n        rel 106+4 t=8 runtime.printsp+0\n        rel 120+4 t=8 runtime.printint+0\n        rel 129+4 t=8 runtime.printnl+0\n        rel 134+4 t=8 runtime.printunlock+0\n        rel 149+4 t=8 runtime.morestack_noctxt+0\n\"\".fff STEXT nosplit size=29 args=0x18 locals=0x0 funcid=0x0\n        0x0000 00000 (signore.go:7)     TEXT    \"\".fff(SB), NOSPLIT|ABIInternal, $0-24\n        0x0000 00000 (signore.go:7)     FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0000 00000 (signore.go:7)     FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        // ***这个 [~b]很关键,划重点\n        0x0000 00000 (signore.go:7)     MOVQ    $0, \"\".~b1+16(SP) \n        0x0009 00009 (signore.go:7)     MOVQ    $0, \"\".__+24(SP)\n        0x0012 00018 (signore.go:8)     MOVQ    \"\".x+8(SP), AX\n        0x0017 00023 (signore.go:8)     MOVQ    AX, \"\".__+24(SP)\n        0x001c 00028 (signore.go:9)     RET\n        0x0000 48 c7 44 24 10 00 00 00 00 48 c7 44 24 18 00 00  H.D$.....H.D$...\n        0x0010 00 00 48 8b 44 24 08 48 89 44 24 18 c3           ..H.D$.H.D$..\ngo.cuinfo.packagename. SDWARFCUINFO dupok size=0\n        0x0000 6d 61 69 6e                                      main\n\"\"..inittask SNOPTRDATA size=24\n        0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n        0x0010 00 00 00 00 00 00 00 00                          ........\ngclocals·33cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=8\n        0x0000 01 00 00 00 00 00 00 00                          ........\n\n```\n\n#### 为何 _ 就可以忽略返回值呢?\n\n>[官方文档](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/dcl.go#L426)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_095628.png)\n\n#### 调用方:\n* dcl 「参数」\n* import 「导入」\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_100643.png)\n\n##### 再向上:\n\n[-->genhash](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/reflect.go#L1290)\n\n##### 再向上:\n\n[--->compile](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/pgen.go#L228)\n\n##### start:\n\n[--->gc.main](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/main.go#L714)\n\n\n>有意思的点: gc.main需要9步,编译在第8步了,前面的有兴趣可自己看看.\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_101636.png)\n\n### End","source":"_posts/41-关于go中-的使用.md","raw":"---\ntitle: '「41」关于go中 _ [忽略]的使用'\ndate: '2021/03/02 20:10:17'\nupdated: '2021/03/02 20:10:17'\nkeywords: 'Go,忽略'\ntags:\n  - Go\n  - 源码\n  - Day\nmathjax: true\nabbrlink: 9af9679c\n---\n\n\n### 前序:\n\n* 前段时间看了这么个问题,输出是what?:\n\n```go\npackage main\n\nfunc main() {\n\tprintln(fff(1))\n}\n\nfunc fff(x int) (_, __ int) {\n\t_, __ = x, x\n\treturn\n}\n\n```\n\n<!--more-->\n\n### 结果分析\n\n#### outpus:\n \n> 0 1\n\n#### 汇编分析:\n```c#\n▶ go tool compile -N -l -S signore.go \n\"\".main STEXT size=158 args=0x0 locals=0x40 funcid=0x0\n        0x0000 00000 (signore.go:3)     TEXT    \"\".main(SB), ABIInternal, $64-0\n        0x0000 00000 (signore.go:3)     MOVQ    (TLS), CX\n        0x0009 00009 (signore.go:3)     CMPQ    SP, 16(CX)\n        0x000d 00013 (signore.go:3)     PCDATA  $0, $-2\n        0x000d 00013 (signore.go:3)     JLS     148\n        0x0013 00019 (signore.go:3)     PCDATA  $0, $-1\n        0x0013 00019 (signore.go:3)     SUBQ    $64, SP\n        0x0017 00023 (signore.go:3)     MOVQ    BP, 56(SP)\n        0x001c 00028 (signore.go:3)     LEAQ    56(SP), BP\n        0x0021 00033 (signore.go:3)     FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0021 00033 (signore.go:3)     FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0021 00033 (signore.go:4)     MOVQ    $1, (SP)\n        0x0029 00041 (signore.go:4)     PCDATA  $1, $0\n        0x0029 00041 (signore.go:4)     CALL    \"\".fff(SB)\n        0x002e 00046 (signore.go:4)     MOVQ    8(SP), AX\n        0x0033 00051 (signore.go:4)     MOVQ    16(SP), CX\n        0x0038 00056 (signore.go:4)     MOVQ    AX, \"\"..autotmp_2+32(SP)\n        0x003d 00061 (signore.go:4)     MOVQ    CX, \"\"..autotmp_3+24(SP)\n        0x0042 00066 (signore.go:4)     MOVQ    \"\"..autotmp_2+32(SP), AX\n        0x0047 00071 (signore.go:4)     MOVQ    AX, \"\"..autotmp_0+48(SP)\n        0x004c 00076 (signore.go:4)     MOVQ    \"\"..autotmp_3+24(SP), AX\n        0x0051 00081 (signore.go:4)     MOVQ    AX, \"\"..autotmp_1+40(SP)\n        0x0056 00086 (signore.go:4)     CALL    runtime.printlock(SB)\n        0x005b 00091 (signore.go:4)     MOVQ    \"\"..autotmp_0+48(SP), AX\n        0x0060 00096 (signore.go:4)     MOVQ    AX, (SP)\n        0x0064 00100 (signore.go:4)     CALL    runtime.printint(SB)\n        0x0069 00105 (signore.go:4)     CALL    runtime.printsp(SB)\n        0x006e 00110 (signore.go:4)     MOVQ    \"\"..autotmp_1+40(SP), AX\n        0x0073 00115 (signore.go:4)     MOVQ    AX, (SP)\n        0x0077 00119 (signore.go:4)     CALL    runtime.printint(SB)\n        0x007c 00124 (signore.go:4)     NOP\n        0x0080 00128 (signore.go:4)     CALL    runtime.printnl(SB)\n        0x0085 00133 (signore.go:4)     CALL    runtime.printunlock(SB)\n        0x008a 00138 (signore.go:5)     MOVQ    56(SP), BP\n        0x008f 00143 (signore.go:5)     ADDQ    $64, SP\n        0x0093 00147 (signore.go:5)     RET\n        0x0094 00148 (signore.go:5)     NOP\n        0x0094 00148 (signore.go:3)     PCDATA  $1, $-1\n        0x0094 00148 (signore.go:3)     PCDATA  $0, $-2\n        0x0094 00148 (signore.go:3)     CALL    runtime.morestack_noctxt(SB)\n        0x0099 00153 (signore.go:3)     PCDATA  $0, $-1\n        0x0099 00153 (signore.go:3)     JMP     0\n        0x0000 65 48 8b 0c 25 00 00 00 00 48 3b 61 10 0f 86 81  eH..%....H;a....\n        0x0010 00 00 00 48 83 ec 40 48 89 6c 24 38 48 8d 6c 24  ...H..@H.l$8H.l$\n        0x0020 38 48 c7 04 24 01 00 00 00 e8 00 00 00 00 48 8b  8H..$.........H.\n        0x0030 44 24 08 48 8b 4c 24 10 48 89 44 24 20 48 89 4c  D$.H.L$.H.D$ H.L\n        0x0040 24 18 48 8b 44 24 20 48 89 44 24 30 48 8b 44 24  $.H.D$ H.D$0H.D$\n        0x0050 18 48 89 44 24 28 e8 00 00 00 00 48 8b 44 24 30  .H.D$(.....H.D$0\n        0x0060 48 89 04 24 e8 00 00 00 00 e8 00 00 00 00 48 8b  H..$..........H.\n        0x0070 44 24 28 48 89 04 24 e8 00 00 00 00 0f 1f 40 00  D$(H..$.......@.\n        0x0080 e8 00 00 00 00 e8 00 00 00 00 48 8b 6c 24 38 48  ..........H.l$8H\n        0x0090 83 c4 40 c3 e8 00 00 00 00 e9 62 ff ff ff        ..@.......b...\n        rel 5+4 t=17 TLS+0\n        rel 42+4 t=8 \"\".fff+0\n        rel 87+4 t=8 runtime.printlock+0\n        rel 101+4 t=8 runtime.printint+0\n        rel 106+4 t=8 runtime.printsp+0\n        rel 120+4 t=8 runtime.printint+0\n        rel 129+4 t=8 runtime.printnl+0\n        rel 134+4 t=8 runtime.printunlock+0\n        rel 149+4 t=8 runtime.morestack_noctxt+0\n\"\".fff STEXT nosplit size=29 args=0x18 locals=0x0 funcid=0x0\n        0x0000 00000 (signore.go:7)     TEXT    \"\".fff(SB), NOSPLIT|ABIInternal, $0-24\n        0x0000 00000 (signore.go:7)     FUNCDATA        $0, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        0x0000 00000 (signore.go:7)     FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)\n        // ***这个 [~b]很关键,划重点\n        0x0000 00000 (signore.go:7)     MOVQ    $0, \"\".~b1+16(SP) \n        0x0009 00009 (signore.go:7)     MOVQ    $0, \"\".__+24(SP)\n        0x0012 00018 (signore.go:8)     MOVQ    \"\".x+8(SP), AX\n        0x0017 00023 (signore.go:8)     MOVQ    AX, \"\".__+24(SP)\n        0x001c 00028 (signore.go:9)     RET\n        0x0000 48 c7 44 24 10 00 00 00 00 48 c7 44 24 18 00 00  H.D$.....H.D$...\n        0x0010 00 00 48 8b 44 24 08 48 89 44 24 18 c3           ..H.D$.H.D$..\ngo.cuinfo.packagename. SDWARFCUINFO dupok size=0\n        0x0000 6d 61 69 6e                                      main\n\"\"..inittask SNOPTRDATA size=24\n        0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................\n        0x0010 00 00 00 00 00 00 00 00                          ........\ngclocals·33cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=8\n        0x0000 01 00 00 00 00 00 00 00                          ........\n\n```\n\n#### 为何 _ 就可以忽略返回值呢?\n\n>[官方文档](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/dcl.go#L426)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_095628.png)\n\n#### 调用方:\n* dcl 「参数」\n* import 「导入」\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_100643.png)\n\n##### 再向上:\n\n[-->genhash](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/reflect.go#L1290)\n\n##### 再向上:\n\n[--->compile](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/pgen.go#L228)\n\n##### start:\n\n[--->gc.main](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/main.go#L714)\n\n\n>有意思的点: gc.main需要9步,编译在第8步了,前面的有兴趣可自己看看.\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_101636.png)\n\n### End","slug":"41-关于go中-的使用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d580030zfqxf0fu2qcn","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<ul>\n<li>前段时间看了这么个问题,输出是what?:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(fff(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fff</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> (_, __ <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t_, __ = x, x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"结果分析\"><a class=\"header-anchor\" href=\"#结果分析\">¶</a>结果分析</h3>\n<h4 id=\"outpus\"><a class=\"header-anchor\" href=\"#outpus\">¶</a>outpus:</h4>\n<blockquote>\n<p>0 1</p>\n</blockquote>\n<h4 id=\"汇编分析\"><a class=\"header-anchor\" href=\"#汇编分析\">¶</a>汇编分析:</h4>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">▶ go tool compile -N -l -S signore.go </span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.main STEXT size=<span class=\"number\">158</span> args=<span class=\"number\">0x0</span> locals=<span class=\"number\">0x40</span> funcid=<span class=\"number\">0x0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">3</span>)     TEXT    <span class=\"string\">&quot;&quot;</span>.main(SB), ABIInternal, $<span class=\"number\">64</span><span class=\"number\">-0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">3</span>)     MOVQ    (TLS), CX</span><br><span class=\"line\">        <span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (signore.go:<span class=\"number\">3</span>)     CMPQ    SP, <span class=\"number\">16</span>(CX)</span><br><span class=\"line\">        <span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (signore.go:<span class=\"number\">3</span>)     JLS     <span class=\"number\">148</span></span><br><span class=\"line\">        <span class=\"number\">0x0013</span> <span class=\"number\">00019</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0013</span> <span class=\"number\">00019</span> (signore.go:<span class=\"number\">3</span>)     SUBQ    $<span class=\"number\">64</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x0017</span> <span class=\"number\">00023</span> (signore.go:<span class=\"number\">3</span>)     MOVQ    BP, <span class=\"number\">56</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x001c</span> <span class=\"number\">00028</span> (signore.go:<span class=\"number\">3</span>)     LEAQ    <span class=\"number\">56</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x0021</span> <span class=\"number\">00033</span> (signore.go:<span class=\"number\">3</span>)     FUNCDATA        $<span class=\"number\">0</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0021</span> <span class=\"number\">00033</span> (signore.go:<span class=\"number\">3</span>)     FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0021</span> <span class=\"number\">00033</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    $<span class=\"number\">1</span>, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x0029</span> <span class=\"number\">00041</span> (signore.go:<span class=\"number\">4</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0029</span> <span class=\"number\">00041</span> (signore.go:<span class=\"number\">4</span>)     CALL    <span class=\"string\">&quot;&quot;</span>.fff(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002e</span> <span class=\"number\">00046</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"number\">8</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0033</span> <span class=\"number\">00051</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"number\">16</span>(SP), CX</span><br><span class=\"line\">        <span class=\"number\">0x0038</span> <span class=\"number\">00056</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_2+<span class=\"number\">32</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x003d</span> <span class=\"number\">00061</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    CX, <span class=\"string\">&quot;&quot;</span>..autotmp_3+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0042</span> <span class=\"number\">00066</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_2+<span class=\"number\">32</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0047</span> <span class=\"number\">00071</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">48</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x004c</span> <span class=\"number\">00076</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_3+<span class=\"number\">24</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0051</span> <span class=\"number\">00081</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_1+<span class=\"number\">40</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0056</span> <span class=\"number\">00086</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printlock(SB)</span><br><span class=\"line\">        <span class=\"number\">0x005b</span> <span class=\"number\">00091</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">48</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0060</span> <span class=\"number\">00096</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x0064</span> <span class=\"number\">00100</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printint(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0069</span> <span class=\"number\">00105</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printsp(SB)</span><br><span class=\"line\">        <span class=\"number\">0x006e</span> <span class=\"number\">00110</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_1+<span class=\"number\">40</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0073</span> <span class=\"number\">00115</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printint(SB)</span><br><span class=\"line\">        <span class=\"number\">0x007c</span> <span class=\"number\">00124</span> (signore.go:<span class=\"number\">4</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x0080</span> <span class=\"number\">00128</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printnl(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0085</span> <span class=\"number\">00133</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printunlock(SB)</span><br><span class=\"line\">        <span class=\"number\">0x008a</span> <span class=\"number\">00138</span> (signore.go:<span class=\"number\">5</span>)     MOVQ    <span class=\"number\">56</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x008f</span> <span class=\"number\">00143</span> (signore.go:<span class=\"number\">5</span>)     ADDQ    $<span class=\"number\">64</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x0093</span> <span class=\"number\">00147</span> (signore.go:<span class=\"number\">5</span>)     RET</span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">5</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">3</span>)     CALL    runtime.morestack_noctxt(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0099</span> <span class=\"number\">00153</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0099</span> <span class=\"number\">00153</span> (signore.go:<span class=\"number\">3</span>)     JMP     <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">65</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">0</span>c <span class=\"number\">25</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">3b</span> <span class=\"number\">61</span> <span class=\"number\">10</span> <span class=\"number\">0f</span> <span class=\"number\">86</span> <span class=\"number\">81</span>  eH..%....H;a....</span><br><span class=\"line\">        <span class=\"number\">0x0010</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">40</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">6</span>c <span class=\"number\">24</span> <span class=\"number\">38</span> <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">6</span>c <span class=\"number\">24</span>  ...H..@H.l$<span class=\"number\">8</span>H.l$</span><br><span class=\"line\">        <span class=\"number\">0x0020</span> <span class=\"number\">38</span> <span class=\"number\">48</span> c7 <span class=\"number\">04</span> <span class=\"number\">24</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span>  <span class=\"number\">8</span>H..$.........H.</span><br><span class=\"line\">        <span class=\"number\">0x0030</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">08</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">4</span>c <span class=\"number\">24</span> <span class=\"number\">10</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">20</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">4</span>c  D$.H.L$.H.D$ H.L</span><br><span class=\"line\">        <span class=\"number\">0x0040</span> <span class=\"number\">24</span> <span class=\"number\">18</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">20</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">30</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span>  $.H.D$ H.D$<span class=\"number\">0</span>H.D$</span><br><span class=\"line\">        <span class=\"number\">0x0050</span> <span class=\"number\">18</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">28</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">30</span>  .H.D$(.....H.D$<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0060</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">04</span> <span class=\"number\">24</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span>  H..$..........H.</span><br><span class=\"line\">        <span class=\"number\">0x0070</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">28</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">04</span> <span class=\"number\">24</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">0f</span> <span class=\"number\">1f</span> <span class=\"number\">40</span> <span class=\"number\">00</span>  D$(H..$.......@.</span><br><span class=\"line\">        <span class=\"number\">0x0080</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">6</span>c <span class=\"number\">24</span> <span class=\"number\">38</span> <span class=\"number\">48</span>  ..........H.l$<span class=\"number\">8</span>H</span><br><span class=\"line\">        <span class=\"number\">0x0090</span> <span class=\"number\">83</span> c4 <span class=\"number\">40</span> c3 e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e9 <span class=\"number\">62</span> ff ff ff        ..@.......b...</span><br><span class=\"line\">        rel <span class=\"number\">5</span>+<span class=\"number\">4</span> t=<span class=\"number\">17</span> TLS+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">42</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> <span class=\"string\">&quot;&quot;</span>.fff+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">87</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printlock+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">101</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printint+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">106</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printsp+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">120</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printint+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">129</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printnl+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">134</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printunlock+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">149</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.morestack_noctxt+<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.fff STEXT nosplit size=<span class=\"number\">29</span> args=<span class=\"number\">0x18</span> locals=<span class=\"number\">0x0</span> funcid=<span class=\"number\">0x0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     TEXT    <span class=\"string\">&quot;&quot;</span>.fff(SB), NOSPLIT|ABIInternal, $<span class=\"number\">0</span><span class=\"number\">-24</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     FUNCDATA        $<span class=\"number\">0</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"comment\">// ***这个 [~b]很关键,划重点</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>.~b1+<span class=\"number\">16</span>(SP) </span><br><span class=\"line\">        <span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (signore.go:<span class=\"number\">7</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>.__+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0012</span> <span class=\"number\">00018</span> (signore.go:<span class=\"number\">8</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">8</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0017</span> <span class=\"number\">00023</span> (signore.go:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>.__+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x001c</span> <span class=\"number\">00028</span> (signore.go:<span class=\"number\">9</span>)     RET</span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">48</span> c7 <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">10</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> c7 <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">18</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  H.D$.....H.D$...</span><br><span class=\"line\">        <span class=\"number\">0x0010</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">08</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">18</span> c3           ..H.D$.H.D$..</span><br><span class=\"line\">go.cuinfo.packagename. SDWARFCUINFO dupok size=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">6</span>d <span class=\"number\">61</span> <span class=\"number\">69</span> <span class=\"number\">6</span>e                                      main</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>..inittask SNOPTRDATA size=<span class=\"number\">24</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</span><br><span class=\"line\">        <span class=\"number\">0x0010</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>                          ........</span><br><span class=\"line\">gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=<span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>                          ........</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"为何-就可以忽略返回值呢\"><a class=\"header-anchor\" href=\"#为何-就可以忽略返回值呢\">¶</a>为何 _ 就可以忽略返回值呢?</h4>\n<blockquote>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/dcl.go#L426\">官方文档</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_095628.png\" alt=\"\"></p>\n<h4 id=\"调用方\"><a class=\"header-anchor\" href=\"#调用方\">¶</a>调用方:</h4>\n<ul>\n<li>dcl 「参数」</li>\n<li>import 「导入」</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_100643.png\" alt=\"\"></p>\n<h5 id=\"再向上\"><a class=\"header-anchor\" href=\"#再向上\">¶</a>再向上:</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/reflect.go#L1290\">–&gt;genhash</a></p>\n<h5 id=\"再向上-v2\"><a class=\"header-anchor\" href=\"#再向上-v2\">¶</a>再向上:</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/pgen.go#L228\">—&gt;compile</a></p>\n<h5 id=\"start\"><a class=\"header-anchor\" href=\"#start\">¶</a>start:</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/main.go#L714\">—&gt;gc.main</a></p>\n<blockquote>\n<p>有意思的点: gc.main需要9步,编译在第8步了,前面的有兴趣可自己看看.</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_101636.png\" alt=\"\"></p>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<ul>\n<li>前段时间看了这么个问题,输出是what?:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(fff(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fff</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> (_, __ <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t_, __ = x, x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"结果分析\"><a class=\"header-anchor\" href=\"#结果分析\">¶</a>结果分析</h3>\n<h4 id=\"outpus\"><a class=\"header-anchor\" href=\"#outpus\">¶</a>outpus:</h4>\n<blockquote>\n<p>0 1</p>\n</blockquote>\n<h4 id=\"汇编分析\"><a class=\"header-anchor\" href=\"#汇编分析\">¶</a>汇编分析:</h4>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">▶ go tool compile -N -l -S signore.go </span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.main STEXT size=<span class=\"number\">158</span> args=<span class=\"number\">0x0</span> locals=<span class=\"number\">0x40</span> funcid=<span class=\"number\">0x0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">3</span>)     TEXT    <span class=\"string\">&quot;&quot;</span>.main(SB), ABIInternal, $<span class=\"number\">64</span><span class=\"number\">-0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">3</span>)     MOVQ    (TLS), CX</span><br><span class=\"line\">        <span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (signore.go:<span class=\"number\">3</span>)     CMPQ    SP, <span class=\"number\">16</span>(CX)</span><br><span class=\"line\">        <span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x000d</span> <span class=\"number\">00013</span> (signore.go:<span class=\"number\">3</span>)     JLS     <span class=\"number\">148</span></span><br><span class=\"line\">        <span class=\"number\">0x0013</span> <span class=\"number\">00019</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0013</span> <span class=\"number\">00019</span> (signore.go:<span class=\"number\">3</span>)     SUBQ    $<span class=\"number\">64</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x0017</span> <span class=\"number\">00023</span> (signore.go:<span class=\"number\">3</span>)     MOVQ    BP, <span class=\"number\">56</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x001c</span> <span class=\"number\">00028</span> (signore.go:<span class=\"number\">3</span>)     LEAQ    <span class=\"number\">56</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x0021</span> <span class=\"number\">00033</span> (signore.go:<span class=\"number\">3</span>)     FUNCDATA        $<span class=\"number\">0</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0021</span> <span class=\"number\">00033</span> (signore.go:<span class=\"number\">3</span>)     FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0021</span> <span class=\"number\">00033</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    $<span class=\"number\">1</span>, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x0029</span> <span class=\"number\">00041</span> (signore.go:<span class=\"number\">4</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0029</span> <span class=\"number\">00041</span> (signore.go:<span class=\"number\">4</span>)     CALL    <span class=\"string\">&quot;&quot;</span>.fff(SB)</span><br><span class=\"line\">        <span class=\"number\">0x002e</span> <span class=\"number\">00046</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"number\">8</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0033</span> <span class=\"number\">00051</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"number\">16</span>(SP), CX</span><br><span class=\"line\">        <span class=\"number\">0x0038</span> <span class=\"number\">00056</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_2+<span class=\"number\">32</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x003d</span> <span class=\"number\">00061</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    CX, <span class=\"string\">&quot;&quot;</span>..autotmp_3+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0042</span> <span class=\"number\">00066</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_2+<span class=\"number\">32</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0047</span> <span class=\"number\">00071</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">48</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x004c</span> <span class=\"number\">00076</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_3+<span class=\"number\">24</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0051</span> <span class=\"number\">00081</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>..autotmp_1+<span class=\"number\">40</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0056</span> <span class=\"number\">00086</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printlock(SB)</span><br><span class=\"line\">        <span class=\"number\">0x005b</span> <span class=\"number\">00091</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_0+<span class=\"number\">48</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0060</span> <span class=\"number\">00096</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x0064</span> <span class=\"number\">00100</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printint(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0069</span> <span class=\"number\">00105</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printsp(SB)</span><br><span class=\"line\">        <span class=\"number\">0x006e</span> <span class=\"number\">00110</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>..autotmp_1+<span class=\"number\">40</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0073</span> <span class=\"number\">00115</span> (signore.go:<span class=\"number\">4</span>)     MOVQ    AX, (SP)</span><br><span class=\"line\">        <span class=\"number\">0x0077</span> <span class=\"number\">00119</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printint(SB)</span><br><span class=\"line\">        <span class=\"number\">0x007c</span> <span class=\"number\">00124</span> (signore.go:<span class=\"number\">4</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x0080</span> <span class=\"number\">00128</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printnl(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0085</span> <span class=\"number\">00133</span> (signore.go:<span class=\"number\">4</span>)     CALL    runtime.printunlock(SB)</span><br><span class=\"line\">        <span class=\"number\">0x008a</span> <span class=\"number\">00138</span> (signore.go:<span class=\"number\">5</span>)     MOVQ    <span class=\"number\">56</span>(SP), BP</span><br><span class=\"line\">        <span class=\"number\">0x008f</span> <span class=\"number\">00143</span> (signore.go:<span class=\"number\">5</span>)     ADDQ    $<span class=\"number\">64</span>, SP</span><br><span class=\"line\">        <span class=\"number\">0x0093</span> <span class=\"number\">00147</span> (signore.go:<span class=\"number\">5</span>)     RET</span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">5</span>)     NOP</span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">1</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-2</span></span><br><span class=\"line\">        <span class=\"number\">0x0094</span> <span class=\"number\">00148</span> (signore.go:<span class=\"number\">3</span>)     CALL    runtime.morestack_noctxt(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0099</span> <span class=\"number\">00153</span> (signore.go:<span class=\"number\">3</span>)     PCDATA  $<span class=\"number\">0</span>, $<span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"number\">0x0099</span> <span class=\"number\">00153</span> (signore.go:<span class=\"number\">3</span>)     JMP     <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">65</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">0</span>c <span class=\"number\">25</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">3b</span> <span class=\"number\">61</span> <span class=\"number\">10</span> <span class=\"number\">0f</span> <span class=\"number\">86</span> <span class=\"number\">81</span>  eH..%....H;a....</span><br><span class=\"line\">        <span class=\"number\">0x0010</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">83</span> ec <span class=\"number\">40</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">6</span>c <span class=\"number\">24</span> <span class=\"number\">38</span> <span class=\"number\">48</span> <span class=\"number\">8</span>d <span class=\"number\">6</span>c <span class=\"number\">24</span>  ...H..@H.l$<span class=\"number\">8</span>H.l$</span><br><span class=\"line\">        <span class=\"number\">0x0020</span> <span class=\"number\">38</span> <span class=\"number\">48</span> c7 <span class=\"number\">04</span> <span class=\"number\">24</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span>  <span class=\"number\">8</span>H..$.........H.</span><br><span class=\"line\">        <span class=\"number\">0x0030</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">08</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">4</span>c <span class=\"number\">24</span> <span class=\"number\">10</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">20</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">4</span>c  D$.H.L$.H.D$ H.L</span><br><span class=\"line\">        <span class=\"number\">0x0040</span> <span class=\"number\">24</span> <span class=\"number\">18</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">20</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">30</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span>  $.H.D$ H.D$<span class=\"number\">0</span>H.D$</span><br><span class=\"line\">        <span class=\"number\">0x0050</span> <span class=\"number\">18</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">28</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">30</span>  .H.D$(.....H.D$<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0060</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">04</span> <span class=\"number\">24</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span>  H..$..........H.</span><br><span class=\"line\">        <span class=\"number\">0x0070</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">28</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">04</span> <span class=\"number\">24</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">0f</span> <span class=\"number\">1f</span> <span class=\"number\">40</span> <span class=\"number\">00</span>  D$(H..$.......@.</span><br><span class=\"line\">        <span class=\"number\">0x0080</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">6</span>c <span class=\"number\">24</span> <span class=\"number\">38</span> <span class=\"number\">48</span>  ..........H.l$<span class=\"number\">8</span>H</span><br><span class=\"line\">        <span class=\"number\">0x0090</span> <span class=\"number\">83</span> c4 <span class=\"number\">40</span> c3 e8 <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> e9 <span class=\"number\">62</span> ff ff ff        ..@.......b...</span><br><span class=\"line\">        rel <span class=\"number\">5</span>+<span class=\"number\">4</span> t=<span class=\"number\">17</span> TLS+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">42</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> <span class=\"string\">&quot;&quot;</span>.fff+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">87</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printlock+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">101</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printint+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">106</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printsp+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">120</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printint+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">129</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printnl+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">134</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.printunlock+<span class=\"number\">0</span></span><br><span class=\"line\">        rel <span class=\"number\">149</span>+<span class=\"number\">4</span> t=<span class=\"number\">8</span> runtime.morestack_noctxt+<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>.fff STEXT nosplit size=<span class=\"number\">29</span> args=<span class=\"number\">0x18</span> locals=<span class=\"number\">0x0</span> funcid=<span class=\"number\">0x0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     TEXT    <span class=\"string\">&quot;&quot;</span>.fff(SB), NOSPLIT|ABIInternal, $<span class=\"number\">0</span><span class=\"number\">-24</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     FUNCDATA        $<span class=\"number\">0</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     FUNCDATA        $<span class=\"number\">1</span>, gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb(SB)</span><br><span class=\"line\">        <span class=\"comment\">// ***这个 [~b]很关键,划重点</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00000</span> (signore.go:<span class=\"number\">7</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>.~b1+<span class=\"number\">16</span>(SP) </span><br><span class=\"line\">        <span class=\"number\">0x0009</span> <span class=\"number\">00009</span> (signore.go:<span class=\"number\">7</span>)     MOVQ    $<span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>.__+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x0012</span> <span class=\"number\">00018</span> (signore.go:<span class=\"number\">8</span>)     MOVQ    <span class=\"string\">&quot;&quot;</span>.x+<span class=\"number\">8</span>(SP), AX</span><br><span class=\"line\">        <span class=\"number\">0x0017</span> <span class=\"number\">00023</span> (signore.go:<span class=\"number\">8</span>)     MOVQ    AX, <span class=\"string\">&quot;&quot;</span>.__+<span class=\"number\">24</span>(SP)</span><br><span class=\"line\">        <span class=\"number\">0x001c</span> <span class=\"number\">00028</span> (signore.go:<span class=\"number\">9</span>)     RET</span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">48</span> c7 <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">10</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> c7 <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">18</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  H.D$.....H.D$...</span><br><span class=\"line\">        <span class=\"number\">0x0010</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">48</span> <span class=\"number\">8b</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">08</span> <span class=\"number\">48</span> <span class=\"number\">89</span> <span class=\"number\">44</span> <span class=\"number\">24</span> <span class=\"number\">18</span> c3           ..H.D$.H.D$..</span><br><span class=\"line\">go.cuinfo.packagename. SDWARFCUINFO dupok size=<span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">6</span>d <span class=\"number\">61</span> <span class=\"number\">69</span> <span class=\"number\">6</span>e                                      main</span><br><span class=\"line\"><span class=\"string\">&quot;&quot;</span>..inittask SNOPTRDATA size=<span class=\"number\">24</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>  ................</span><br><span class=\"line\">        <span class=\"number\">0x0010</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>                          ........</span><br><span class=\"line\">gclocals·<span class=\"number\">33</span>cdeccccebe80329f1fdbee7f5874cb SRODATA dupok size=<span class=\"number\">8</span></span><br><span class=\"line\">        <span class=\"number\">0x0000</span> <span class=\"number\">01</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span>                          ........</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"为何-就可以忽略返回值呢\"><a class=\"header-anchor\" href=\"#为何-就可以忽略返回值呢\">¶</a>为何 _ 就可以忽略返回值呢?</h4>\n<blockquote>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/dcl.go#L426\">官方文档</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_095628.png\" alt=\"\"></p>\n<h4 id=\"调用方\"><a class=\"header-anchor\" href=\"#调用方\">¶</a>调用方:</h4>\n<ul>\n<li>dcl 「参数」</li>\n<li>import 「导入」</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_100643.png\" alt=\"\"></p>\n<h5 id=\"再向上\"><a class=\"header-anchor\" href=\"#再向上\">¶</a>再向上:</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/reflect.go#L1290\">–&gt;genhash</a></p>\n<h5 id=\"再向上-v2\"><a class=\"header-anchor\" href=\"#再向上-v2\">¶</a>再向上:</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/pgen.go#L228\">—&gt;compile</a></p>\n<h5 id=\"start\"><a class=\"header-anchor\" href=\"#start\">¶</a>start:</h5>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/gc/main.go#L714\">—&gt;gc.main</a></p>\n<blockquote>\n<p>有意思的点: gc.main需要9步,编译在第8步了,前面的有兴趣可自己看看.</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_101636.png\" alt=\"\"></p>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_095628.png","popularPost_tmp_gaData":{"updated":"Tue Mar 02 2021 20:10:17 GMT+0800 (中国标准时间)","title":"「41」关于go中 _ [忽略]的使用","path":"archives/9af9679c.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210302_095628.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<ul>\n<li>前段时间看了这么个问题,输出是what?:</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">println</span>(fff(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fff</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> (_, __ <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t_, __ = x, x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","date":{"_isAMomentObject":true,"_i":"2021-03-02T12:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-02T12:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4194},{"title":"「42」Git Log常用场景","date":"2021-03-09T00:10:17.000Z","updated":"2021-03-09T00:10:17.000Z","keywords":"Git","mathjax":true,"abbrlink":"a02f04ba","_content":"\n## 前序：\n前面有总结过[Git常用的一些操作](https://blog.imrcrab.com/archives/3c1dd822.html)\n\n最近有很多使用到git log -- 的命令和需求，所以来搞搞这个git log的用法:\n\n<!--more-->\n\n## git log命令基本使用：\n\n>这里用go仓库的log来演示和学习log相关操作。\n\n### 版本：\n\n```go\n$ git version\ngit version 2.24.3 (Apple Git-128)\n```\n\n\n### 常用及展示：\n\n#### git log --help\n\n>查看使用方法「划重点」：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010044.png)\n\n**图中option地方为可选的配置项**\n\n#### git log \n\n>组成部分：\n\n* commit ID\n* author\n* date\n* commit message\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_125518.png)\n\n#### git log --s***\n\n>git log --s 然后按tab建就可以看到下面的信息，\n\n```git\n$ git log --s\n--shortstat               -- generate summary diffstat\n--show-linear-break       -- show a barrier between commits from different branches\n--show-signature          -- validate GPG signature of commit\n--simplify-by-decoration  -- show only commits that are referenced by a ref\n--simplify-merges         -- milder version of --full-history\n--since                   -- show commits more recent than given date\n--single-worktree         -- examine the current working tree only\n--skip                    -- skip given number of commits before output\n--source                  -- show which ref each commit is reached from\n--sparse                  -- when paths are given, display only commits that changes any of them\n--src-prefix              -- use given prefix for source\n--stat                    -- generate diffstat instead of patch\n--stdin                   -- additionally read commits from standard input\n--submodule               -- select output format for submodule differences\n--summary                 -- generate condensed summary of extended header information\n\n```\n\n##### git log --stat\n\n>可以看到diff的文件信息\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010656.png)\n\n#### git log --pretty=?\n\n```git\n下面命令按下tab自动补全的信息：\n$ git log --pretty= \nemail    -- use email headers like From and Subject\nformat   -- specify own format\nfull     -- all parts of commit messages\nfuller   -- like full and includes dates\nmedium   -- most parts of messages\noneline  -- commit-ids and subject of messages\nraw      -- the raw commits\nshort    -- few headers and only subject of messages\n```\n\n##### git log --pretty=fuller\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011529.png)\n\n#### git log --author=?\n\n> git log --author=\"Alex Brainman\"\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011728.png)\n\n#### 合并在一起，所有基本信息：\n\n>git log --author=\"Alex Brainman\" --stat --graph --tags --pretty=oneline --decorate\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012016.png)\n\n#### 某个文件的log\n\n>查看所有src/runtime文件夹的具体提交信息\n\n```git\ngit log  --stat --graph --tags --pretty=oneline --decorate src/runtime/\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012342.png)\n\n\n##### pretty=fuller和pretty=oneline的区别：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012556.png)\n\n#### git log --before=*** --after=***\n\n>pretty: oneline VS fuller\n```git\ngit log  --stat --graph --tags --pretty=oneline --before=\"2021-03-09\" --after=\"2020-03-10\"  --decorate src/runtime/\n\ngit log  --stat --graph --tags --pretty=fuller --before=\"2021-03-09\" --after=\"2020-03-10\" --decorate src/runtime/\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_013157.png)\n\n### End","source":"_posts/42-Git-log常用场景.md","raw":"---\ntitle: 「42」Git Log常用场景\ndate: '2021/03/09 08:10:17'\nupdated: '2021/03/09 08:10:17'\nkeywords: Git\ntags:\n  - Git\n  - Day\nmathjax: true\nabbrlink: a02f04ba\n---\n\n## 前序：\n前面有总结过[Git常用的一些操作](https://blog.imrcrab.com/archives/3c1dd822.html)\n\n最近有很多使用到git log -- 的命令和需求，所以来搞搞这个git log的用法:\n\n<!--more-->\n\n## git log命令基本使用：\n\n>这里用go仓库的log来演示和学习log相关操作。\n\n### 版本：\n\n```go\n$ git version\ngit version 2.24.3 (Apple Git-128)\n```\n\n\n### 常用及展示：\n\n#### git log --help\n\n>查看使用方法「划重点」：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010044.png)\n\n**图中option地方为可选的配置项**\n\n#### git log \n\n>组成部分：\n\n* commit ID\n* author\n* date\n* commit message\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_125518.png)\n\n#### git log --s***\n\n>git log --s 然后按tab建就可以看到下面的信息，\n\n```git\n$ git log --s\n--shortstat               -- generate summary diffstat\n--show-linear-break       -- show a barrier between commits from different branches\n--show-signature          -- validate GPG signature of commit\n--simplify-by-decoration  -- show only commits that are referenced by a ref\n--simplify-merges         -- milder version of --full-history\n--since                   -- show commits more recent than given date\n--single-worktree         -- examine the current working tree only\n--skip                    -- skip given number of commits before output\n--source                  -- show which ref each commit is reached from\n--sparse                  -- when paths are given, display only commits that changes any of them\n--src-prefix              -- use given prefix for source\n--stat                    -- generate diffstat instead of patch\n--stdin                   -- additionally read commits from standard input\n--submodule               -- select output format for submodule differences\n--summary                 -- generate condensed summary of extended header information\n\n```\n\n##### git log --stat\n\n>可以看到diff的文件信息\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010656.png)\n\n#### git log --pretty=?\n\n```git\n下面命令按下tab自动补全的信息：\n$ git log --pretty= \nemail    -- use email headers like From and Subject\nformat   -- specify own format\nfull     -- all parts of commit messages\nfuller   -- like full and includes dates\nmedium   -- most parts of messages\noneline  -- commit-ids and subject of messages\nraw      -- the raw commits\nshort    -- few headers and only subject of messages\n```\n\n##### git log --pretty=fuller\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011529.png)\n\n#### git log --author=?\n\n> git log --author=\"Alex Brainman\"\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011728.png)\n\n#### 合并在一起，所有基本信息：\n\n>git log --author=\"Alex Brainman\" --stat --graph --tags --pretty=oneline --decorate\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012016.png)\n\n#### 某个文件的log\n\n>查看所有src/runtime文件夹的具体提交信息\n\n```git\ngit log  --stat --graph --tags --pretty=oneline --decorate src/runtime/\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012342.png)\n\n\n##### pretty=fuller和pretty=oneline的区别：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012556.png)\n\n#### git log --before=*** --after=***\n\n>pretty: oneline VS fuller\n```git\ngit log  --stat --graph --tags --pretty=oneline --before=\"2021-03-09\" --after=\"2020-03-10\"  --decorate src/runtime/\n\ngit log  --stat --graph --tags --pretty=fuller --before=\"2021-03-09\" --after=\"2020-03-10\" --decorate src/runtime/\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_013157.png)\n\n### End","slug":"42-Git-log常用场景","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d590032zfqx93kn554y","content":"<h2 id=\"前序：\"><a class=\"header-anchor\" href=\"#前序：\">¶</a>前序：</h2>\n<p>前面有总结过<a href=\"https://blog.imrcrab.com/archives/3c1dd822.html\">Git常用的一些操作</a></p>\n<p>最近有很多使用到git log – 的命令和需求，所以来搞搞这个git log的用法:</p>\n<span id=\"more\"></span>\n<h2 id=\"git-log命令基本使用：\"><a class=\"header-anchor\" href=\"#git-log命令基本使用：\">¶</a>git log命令基本使用：</h2>\n<blockquote>\n<p>这里用go仓库的log来演示和学习log相关操作。</p>\n</blockquote>\n<h3 id=\"版本：\"><a class=\"header-anchor\" href=\"#版本：\">¶</a>版本：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git version</span><br><span class=\"line\">git version <span class=\"number\">2.24</span><span class=\"number\">.3</span> (Apple Git<span class=\"number\">-128</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用及展示：\"><a class=\"header-anchor\" href=\"#常用及展示：\">¶</a>常用及展示：</h3>\n<h4 id=\"git-log-help\"><a class=\"header-anchor\" href=\"#git-log-help\">¶</a>git log --help</h4>\n<blockquote>\n<p>查看使用方法「划重点」：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010044.png\" alt=\"\"></p>\n<p><strong>图中option地方为可选的配置项</strong></p>\n<h4 id=\"git-log\"><a class=\"header-anchor\" href=\"#git-log\">¶</a>git log</h4>\n<blockquote>\n<p>组成部分：</p>\n</blockquote>\n<ul>\n<li>commit ID</li>\n<li>author</li>\n<li>date</li>\n<li>commit message</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_125518.png\" alt=\"\"></p>\n<h4 id=\"git-log-s\"><a class=\"header-anchor\" href=\"#git-log-s\">¶</a>git log --s***</h4>\n<blockquote>\n<p>git log --s 然后按tab建就可以看到下面的信息，</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --s</span><br><span class=\"line\">--shortstat               -- generate summary diffstat</span><br><span class=\"line\">--show-linear-break       -- show a barrier between commits from different branches</span><br><span class=\"line\">--show-signature          -- validate GPG signature of commit</span><br><span class=\"line\">--simplify-by-decoration  -- show only commits that are referenced by a ref</span><br><span class=\"line\">--simplify-merges         -- milder version of --full-history</span><br><span class=\"line\">--since                   -- show commits more recent than given date</span><br><span class=\"line\">--single-worktree         -- examine the current working tree only</span><br><span class=\"line\">--skip                    -- skip given number of commits before output</span><br><span class=\"line\">--source                  -- show which ref each commit is reached from</span><br><span class=\"line\">--sparse                  -- when paths are given, display only commits that changes any of them</span><br><span class=\"line\">--src-prefix              -- use given prefix for source</span><br><span class=\"line\">--stat                    -- generate diffstat instead of patch</span><br><span class=\"line\">--stdin                   -- additionally read commits from standard input</span><br><span class=\"line\">--submodule               -- select output format for submodule differences</span><br><span class=\"line\">--summary                 -- generate condensed summary of extended header information</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"git-log-stat\"><a class=\"header-anchor\" href=\"#git-log-stat\">¶</a>git log --stat</h5>\n<blockquote>\n<p>可以看到diff的文件信息<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010656.png\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"git-log-pretty\"><a class=\"header-anchor\" href=\"#git-log-pretty\">¶</a>git log --pretty=?</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面命令按下tab自动补全的信息：</span><br><span class=\"line\">$ git log --pretty= </span><br><span class=\"line\">email    -- use email headers like From and Subject</span><br><span class=\"line\">format   -- specify own format</span><br><span class=\"line\">full     -- all parts of commit messages</span><br><span class=\"line\">fuller   -- like full and includes dates</span><br><span class=\"line\">medium   -- most parts of messages</span><br><span class=\"line\">oneline  -- commit-ids and subject of messages</span><br><span class=\"line\">raw      -- the raw commits</span><br><span class=\"line\">short    -- few headers and only subject of messages</span><br></pre></td></tr></table></figure>\n<h5 id=\"git-log-pretty-fuller\"><a class=\"header-anchor\" href=\"#git-log-pretty-fuller\">¶</a>git log --pretty=fuller</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011529.png\" alt=\"\"></p>\n<h4 id=\"git-log-author\"><a class=\"header-anchor\" href=\"#git-log-author\">¶</a>git log --author=?</h4>\n<blockquote>\n<p>git log --author=“Alex Brainman”</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011728.png\" alt=\"\"></p>\n<h4 id=\"合并在一起，所有基本信息：\"><a class=\"header-anchor\" href=\"#合并在一起，所有基本信息：\">¶</a>合并在一起，所有基本信息：</h4>\n<blockquote>\n<p>git log --author=“Alex Brainman” --stat --graph --tags --pretty=oneline --decorate</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012016.png\" alt=\"\"></p>\n<h4 id=\"某个文件的log\"><a class=\"header-anchor\" href=\"#某个文件的log\">¶</a>某个文件的log</h4>\n<blockquote>\n<p>查看所有src/runtime文件夹的具体提交信息</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  --stat --graph --tags --pretty=oneline --decorate src/runtime/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012342.png\" alt=\"\"></p>\n<h5 id=\"pretty-fuller和pretty-oneline的区别：\"><a class=\"header-anchor\" href=\"#pretty-fuller和pretty-oneline的区别：\">¶</a>pretty=fuller和pretty=oneline的区别：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012556.png\" alt=\"\"></p>\n<h4 id=\"git-log-before-after\"><a class=\"header-anchor\" href=\"#git-log-before-after\">¶</a>git log --before=*** --after=***</h4>\n<blockquote>\n<p>pretty: oneline VS fuller</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  --stat --graph --tags --pretty=oneline --before=&quot;2021-03-09&quot; --after=&quot;2020-03-10&quot;  --decorate src/runtime/</span><br><span class=\"line\"></span><br><span class=\"line\">git log  --stat --graph --tags --pretty=fuller --before=&quot;2021-03-09&quot; --after=&quot;2020-03-10&quot; --decorate src/runtime/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_013157.png\" alt=\"\"></p>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<h2 id=\"前序：\"><a class=\"header-anchor\" href=\"#前序：\">¶</a>前序：</h2>\n<p>前面有总结过<a href=\"https://blog.imrcrab.com/archives/3c1dd822.html\">Git常用的一些操作</a></p>\n<p>最近有很多使用到git log – 的命令和需求，所以来搞搞这个git log的用法:</p>","more":"<h2 id=\"git-log命令基本使用：\"><a class=\"header-anchor\" href=\"#git-log命令基本使用：\">¶</a>git log命令基本使用：</h2>\n<blockquote>\n<p>这里用go仓库的log来演示和学习log相关操作。</p>\n</blockquote>\n<h3 id=\"版本：\"><a class=\"header-anchor\" href=\"#版本：\">¶</a>版本：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git version</span><br><span class=\"line\">git version <span class=\"number\">2.24</span><span class=\"number\">.3</span> (Apple Git<span class=\"number\">-128</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用及展示：\"><a class=\"header-anchor\" href=\"#常用及展示：\">¶</a>常用及展示：</h3>\n<h4 id=\"git-log-help\"><a class=\"header-anchor\" href=\"#git-log-help\">¶</a>git log --help</h4>\n<blockquote>\n<p>查看使用方法「划重点」：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010044.png\" alt=\"\"></p>\n<p><strong>图中option地方为可选的配置项</strong></p>\n<h4 id=\"git-log\"><a class=\"header-anchor\" href=\"#git-log\">¶</a>git log</h4>\n<blockquote>\n<p>组成部分：</p>\n</blockquote>\n<ul>\n<li>commit ID</li>\n<li>author</li>\n<li>date</li>\n<li>commit message</li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_125518.png\" alt=\"\"></p>\n<h4 id=\"git-log-s\"><a class=\"header-anchor\" href=\"#git-log-s\">¶</a>git log --s***</h4>\n<blockquote>\n<p>git log --s 然后按tab建就可以看到下面的信息，</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git log --s</span><br><span class=\"line\">--shortstat               -- generate summary diffstat</span><br><span class=\"line\">--show-linear-break       -- show a barrier between commits from different branches</span><br><span class=\"line\">--show-signature          -- validate GPG signature of commit</span><br><span class=\"line\">--simplify-by-decoration  -- show only commits that are referenced by a ref</span><br><span class=\"line\">--simplify-merges         -- milder version of --full-history</span><br><span class=\"line\">--since                   -- show commits more recent than given date</span><br><span class=\"line\">--single-worktree         -- examine the current working tree only</span><br><span class=\"line\">--skip                    -- skip given number of commits before output</span><br><span class=\"line\">--source                  -- show which ref each commit is reached from</span><br><span class=\"line\">--sparse                  -- when paths are given, display only commits that changes any of them</span><br><span class=\"line\">--src-prefix              -- use given prefix for source</span><br><span class=\"line\">--stat                    -- generate diffstat instead of patch</span><br><span class=\"line\">--stdin                   -- additionally read commits from standard input</span><br><span class=\"line\">--submodule               -- select output format for submodule differences</span><br><span class=\"line\">--summary                 -- generate condensed summary of extended header information</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"git-log-stat\"><a class=\"header-anchor\" href=\"#git-log-stat\">¶</a>git log --stat</h5>\n<blockquote>\n<p>可以看到diff的文件信息<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010656.png\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"git-log-pretty\"><a class=\"header-anchor\" href=\"#git-log-pretty\">¶</a>git log --pretty=?</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下面命令按下tab自动补全的信息：</span><br><span class=\"line\">$ git log --pretty= </span><br><span class=\"line\">email    -- use email headers like From and Subject</span><br><span class=\"line\">format   -- specify own format</span><br><span class=\"line\">full     -- all parts of commit messages</span><br><span class=\"line\">fuller   -- like full and includes dates</span><br><span class=\"line\">medium   -- most parts of messages</span><br><span class=\"line\">oneline  -- commit-ids and subject of messages</span><br><span class=\"line\">raw      -- the raw commits</span><br><span class=\"line\">short    -- few headers and only subject of messages</span><br></pre></td></tr></table></figure>\n<h5 id=\"git-log-pretty-fuller\"><a class=\"header-anchor\" href=\"#git-log-pretty-fuller\">¶</a>git log --pretty=fuller</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011529.png\" alt=\"\"></p>\n<h4 id=\"git-log-author\"><a class=\"header-anchor\" href=\"#git-log-author\">¶</a>git log --author=?</h4>\n<blockquote>\n<p>git log --author=“Alex Brainman”</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_011728.png\" alt=\"\"></p>\n<h4 id=\"合并在一起，所有基本信息：\"><a class=\"header-anchor\" href=\"#合并在一起，所有基本信息：\">¶</a>合并在一起，所有基本信息：</h4>\n<blockquote>\n<p>git log --author=“Alex Brainman” --stat --graph --tags --pretty=oneline --decorate</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012016.png\" alt=\"\"></p>\n<h4 id=\"某个文件的log\"><a class=\"header-anchor\" href=\"#某个文件的log\">¶</a>某个文件的log</h4>\n<blockquote>\n<p>查看所有src/runtime文件夹的具体提交信息</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  --stat --graph --tags --pretty=oneline --decorate src/runtime/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012342.png\" alt=\"\"></p>\n<h5 id=\"pretty-fuller和pretty-oneline的区别：\"><a class=\"header-anchor\" href=\"#pretty-fuller和pretty-oneline的区别：\">¶</a>pretty=fuller和pretty=oneline的区别：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_012556.png\" alt=\"\"></p>\n<h4 id=\"git-log-before-after\"><a class=\"header-anchor\" href=\"#git-log-before-after\">¶</a>git log --before=*** --after=***</h4>\n<blockquote>\n<p>pretty: oneline VS fuller</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  --stat --graph --tags --pretty=oneline --before=&quot;2021-03-09&quot; --after=&quot;2020-03-10&quot;  --decorate src/runtime/</span><br><span class=\"line\"></span><br><span class=\"line\">git log  --stat --graph --tags --pretty=fuller --before=&quot;2021-03-09&quot; --after=&quot;2020-03-10&quot; --decorate src/runtime/</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_013157.png\" alt=\"\"></p>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010044.png","popularPost_tmp_gaData":{"updated":"Tue Mar 09 2021 08:10:17 GMT+0800 (中国标准时间)","title":"「42」Git Log常用场景","path":"archives/a02f04ba.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210309_010044.png","excerpt":"<h2 id=\"前序：\"><a class=\"header-anchor\" href=\"#前序：\">¶</a>前序：</h2>\n<p>前面有总结过<a href=\"https://blog.imrcrab.com/archives/3c1dd822.html\">Git常用的一些操作</a></p>\n<p>最近有很多使用到git log – 的命令和需求，所以来搞搞这个git log的用法:</p>","date":{"_isAMomentObject":true,"_i":"2021-03-09T00:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-09T00:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1994},{"title":"「43」Redis AOF持久化","date":"2021-03-17T14:10:17.000Z","updated":"2021-03-22T15:10:17.000Z","keywords":"Git","mathjax":true,"abbrlink":"777dd730","_content":"\n\n### 前序:\n\nAOF开启的配置:\n\n```\nappendonly yes\n#appendonly no\nappendfsync everysec\n```\n\n但是redis根据这配置到底是如何实现 AOF的呢?\n<!--more-->\n### appendOnly起点：\n\n通过config.c配置文件可以查到appendOnly对应的变量：\n```go\ncreateBoolConfig(\"appendonly\", NULL, MODIFIABLE_CONFIG, server.aof_enabled, 0, NULL, updateAppendonly)\n```\n\n#### 关于aof_enable使用地方：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020243.png)\n\n#### 再看下aof_state使用地方：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020100.png)\n\n### 主要方向：\n* aof在启动时候加载顺序\n* aof存文件如何被触发执行的\n* aof保存的机制/同步策略？\n* aof机制和rdb混用？\n* aof如何保持较高的性能？\n\n#### server启动，aof开启，加载流程：\n\n```c++\n/* Replay the append log file. On success C_OK is returned. On non fatal\n * error (the append only file is zero-length) C_ERR is returned. On\n * fatal error an error message is logged and the program exists. */\nint loadAppendOnlyFile(char *filename) {\n    struct client *fakeClient;\n    FILE *fp = fopen(filename,\"r\");\n    struct redis_stat sb;\n    int old_aof_state = server.aof_state;\n    long loops = 0;\n    off_t valid_up_to = 0; /* Offset of latest well-formed command loaded. */\n    off_t valid_before_multi = 0; /* Offset before MULTI command loaded. */\n\n    if (fp == NULL) {\n        serverLog(LL_WARNING,\"Fatal error: can't open the append log file for reading: %s\",strerror(errno));\n        exit(1);\n    }\n\n    /* Handle a zero-length AOF file as a special case. An empty AOF file\n     * is a valid AOF because an empty server with AOF enabled will create\n     * a zero length file at startup, that will remain like that if no write\n     * operation is received. */\n    if (fp && redis_fstat(fileno(fp),&sb) != -1 && sb.st_size == 0) {\n        server.aof_current_size = 0;\n        server.aof_fsync_offset = server.aof_current_size;\n        fclose(fp);\n        return C_ERR;\n    }\n\n    /* Temporarily disable AOF, to prevent EXEC from feeding a MULTI\n     * to the same file we're about to read. */\n    server.aof_state = AOF_OFF;\n    // 创建aof客户端\n    fakeClient = createAOFClient();\n    //加载文件\n    startLoadingFile(fp, filename, RDBFLAGS_AOF_PREAMBLE);\n\n    /* Check if this AOF file has an RDB preamble. In that case we need to\n     * load the RDB file and later continue loading the AOF tail. */\n    // 检查aof头部有没有rdb格式的内容，先加载rdb再加载aof\n    char sig[5]; /* \"REDIS\" */\n    if (fread(sig,1,5,fp) != 5 || memcmp(sig,\"REDIS\",5) != 0) {\n        /* No RDB preamble, seek back at 0 offset. */\n        // 没有rdb格式的，\n        if (fseek(fp,0,SEEK_SET) == -1) goto readerr;\n    } else {\n        /* RDB preamble. Pass loading the RDB functions. */\n        rio rdb;\n\n        serverLog(LL_NOTICE,\"Reading RDB preamble from AOF file...\");\n        if (fseek(fp,0,SEEK_SET) == -1) goto readerr;\n        rioInitWithFile(&rdb,fp);\n        // 加载rdb格式的文件\n        if (rdbLoadRio(&rdb,RDBFLAGS_AOF_PREAMBLE,NULL) != C_OK) {\n            serverLog(LL_WARNING,\"Error reading the RDB preamble of the AOF file, AOF loading aborted\");\n            goto readerr;\n        } else {\n            serverLog(LL_NOTICE,\"Reading the remaining AOF tail...\");\n        }\n    }\n\n    /* Read the actual AOF file, in REPL format, command by command. */\n    // 按照aof协议来读取/解析aof文件\n    while(1) {\n        int argc, j;\n        unsigned long len;\n        robj **argv;\n        char buf[128];\n        sds argsds;\n        struct redisCommand *cmd;\n\n        /* Serve the clients from time to time */\n        if (!(loops++ % 1000)) {\n            loadingProgress(ftello(fp));\n            processEventsWhileBlocked();\n            processModuleLoadingProgressEvent(1);\n        }\n\n        if (fgets(buf,sizeof(buf),fp) == NULL) {\n            if (feof(fp))\n                break;\n            else\n                goto readerr;\n        }\n        if (buf[0] != '*') goto fmterr;\n        if (buf[1] == '\\0') goto readerr;\n        argc = atoi(buf+1);\n        if (argc < 1) goto fmterr;\n\n        /* Load the next command in the AOF as our fake client\n         * argv. */\n        argv = zmalloc(sizeof(robj*)*argc);\n        fakeClient->argc = argc;\n        fakeClient->argv = argv;\n\n        for (j = 0; j < argc; j++) {\n            /* Parse the argument len. */\n            char *readres = fgets(buf,sizeof(buf),fp);\n            if (readres == NULL || buf[0] != '$') {\n                fakeClient->argc = j; /* Free up to j-1. */\n                freeFakeClientArgv(fakeClient);\n                if (readres == NULL)\n                    goto readerr;\n                else\n                    goto fmterr;\n            }\n            len = strtol(buf+1,NULL,10);\n\n            /* Read it into a string object. */\n            argsds = sdsnewlen(SDS_NOINIT,len);\n            if (len && fread(argsds,len,1,fp) == 0) {\n                sdsfree(argsds);\n                fakeClient->argc = j; /* Free up to j-1. */\n                freeFakeClientArgv(fakeClient);\n                goto readerr;\n            }\n            argv[j] = createObject(OBJ_STRING,argsds);\n\n            /* Discard CRLF. */\n            if (fread(buf,2,1,fp) == 0) {\n                fakeClient->argc = j+1; /* Free up to j. */\n                freeFakeClientArgv(fakeClient);\n                goto readerr;\n            }\n        }\n\n        /* Command lookup */\n        cmd = lookupCommand(argv[0]->ptr);\n        // 未知命令，启动直接退出了\n        if (!cmd) {\n            serverLog(LL_WARNING,\n                \"Unknown command '%s' reading the append only file\",\n                (char*)argv[0]->ptr);\n            exit(1);\n        }\n\n        if (cmd == server.multiCommand) valid_before_multi = valid_up_to;\n\n        /* Run the command in the context of a fake client */\n        fakeClient->cmd = fakeClient->lastcmd = cmd;\n        if (fakeClient->flags & CLIENT_MULTI &&\n            fakeClient->cmd->proc != execCommand)\n        {\n            queueMultiCommand(fakeClient);\n        } else {\n            cmd->proc(fakeClient);\n        }\n\n        /* The fake client should not have a reply */\n        serverAssert(fakeClient->bufpos == 0 &&\n                     listLength(fakeClient->reply) == 0);\n\n        /* The fake client should never get blocked */\n        serverAssert((fakeClient->flags & CLIENT_BLOCKED) == 0);\n\n        /* Clean up. Command code may have changed argv/argc so we use the\n         * argv/argc of the client instead of the local variables. */\n        freeFakeClientArgv(fakeClient);\n        fakeClient->cmd = NULL;\n        if (server.aof_load_truncated) valid_up_to = ftello(fp);\n        if (server.key_load_delay)\n            debugDelay(server.key_load_delay);\n    }\n\n    /* This point can only be reached when EOF is reached without errors.\n     * If the client is in the middle of a MULTI/EXEC, handle it as it was\n     * a short read, even if technically the protocol is correct: we want\n     * to remove the unprocessed tail and continue. */\n    if (fakeClient->flags & CLIENT_MULTI) {\n        serverLog(LL_WARNING,\n            \"Revert incomplete MULTI/EXEC transaction in AOF file\");\n        valid_up_to = valid_before_multi;\n        goto uxeof;\n    }\n\nloaded_ok: /* DB loaded, cleanup and return C_OK to the caller. */\n    fclose(fp);\n    freeFakeClient(fakeClient);\n    server.aof_state = old_aof_state;\n    stopLoading(1);\n    aofUpdateCurrentSize();\n    server.aof_rewrite_base_size = server.aof_current_size;\n    server.aof_fsync_offset = server.aof_current_size;\n    return C_OK;\n\nreaderr: /* Read error. If feof(fp) is true, fall through to unexpected EOF. */\n    if (!feof(fp)) {\n        if (fakeClient) freeFakeClient(fakeClient); /* avoid valgrind warning */\n        fclose(fp);\n        serverLog(LL_WARNING,\"Unrecoverable error reading the append only file: %s\", strerror(errno));\n        exit(1);\n    }\n\nuxeof: /* Unexpected AOF end of file. */\n    if (server.aof_load_truncated) {\n        serverLog(LL_WARNING,\"!!! Warning: short read while loading the AOF file !!!\");\n        serverLog(LL_WARNING,\"!!! Truncating the AOF at offset %llu !!!\",\n            (unsigned long long) valid_up_to);\n        if (valid_up_to == -1 || truncate(filename,valid_up_to) == -1) {\n            if (valid_up_to == -1) {\n                serverLog(LL_WARNING,\"Last valid command offset is invalid\");\n            } else {\n                serverLog(LL_WARNING,\"Error truncating the AOF file: %s\",\n                    strerror(errno));\n            }\n        } else {\n            /* Make sure the AOF file descriptor points to the end of the\n             * file after the truncate call. */\n            if (server.aof_fd != -1 && lseek(server.aof_fd,0,SEEK_END) == -1) {\n                serverLog(LL_WARNING,\"Can't seek the end of the AOF file: %s\",\n                    strerror(errno));\n            } else {\n                serverLog(LL_WARNING,\n                    \"AOF loaded anyway because aof-load-truncated is enabled\");\n                goto loaded_ok;\n            }\n        }\n    }\n    if (fakeClient) freeFakeClient(fakeClient); /* avoid valgrind warning */\n    fclose(fp);\n    serverLog(LL_WARNING,\"Unexpected end of file reading the append only file. You can: 1) Make a backup of your AOF file, then use ./redis-check-aof --fix <filename>. 2) Alternatively you can set the 'aof-load-truncated' configuration option to yes and restart the server.\");\n    exit(1);\n\nfmterr: /* Format error. */\n    if (fakeClient) freeFakeClient(fakeClient); /* avoid valgrind warning */\n    fclose(fp);\n    serverLog(LL_WARNING,\"Bad file format reading the append only file: make a backup of your AOF file, then use ./redis-check-aof --fix <filename>\");\n    exit(1);\n}\n```\n\n##### 流程图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_032504.png)\n\n#### aof触发流程：\n\n参照前面的方法，先找到appendfsync对应的变量，然后看使用场景。\n\n```c++\ncreateEnumConfig(\"appendfsync\", NULL, MODIFIABLE_CONFIG, aof_fsync_enum, server.aof_fsync, AOF_FSYNC_EVERYSEC, NULL, NULL),\n```\n##### appendfsync取值\n\n```c++\nconfigEnum aof_fsync_enum[] = {\n    {\"everysec\", AOF_FSYNC_EVERYSEC}, 每秒\n    {\"always\", AOF_FSYNC_ALWAYS}, 每个操作\n    {\"no\", AOF_FSYNC_NO}, 由操作系统决定何时同步\n    {NULL, 0}\n};\n```\n\n##### aof_fsync_enum哪里用到了？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_041746.png)\n\n##### 流程图:\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-3-18-22-38.png)\n\n#### aof和RDB混用的情况\n\n##### 配置项:\n\n```go\naof-use-rdb-preamble  true/false\n\nconfig.c配置:\n\ncreateBoolConfig(\"aof-use-rdb-preamble\", NULL, MODIFIABLE_CONFIG, server.aof_use_rdb_preamble, 1, NULL, NULL),\n```\n\n##### 流程图:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-21-23-34.png)\n\n\n\n\n#### aof文件如何“高效”持久化\n\n##### 如何持久化到硬盘？「flushAppendOnlyFile」\n\n```c++\nflushAppendOnlyFile函数\n\n说明：\n\n Write the append only file buffer on disk.\n```\n\n##### 流程图：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/acsz8-d5ehw.webp)\n\n\n### Todo\n\n- [ ] [aof和rdb多维度比较]\n\n### End","source":"_posts/43-redis-aof持久化.md","raw":"---\ntitle: 「43」Redis AOF持久化\ndate: '2021/03/17 22:10:17'\nupdated: '2021/03/22 23:10:17'\nkeywords: Git\ntags:\n  - Redis\n  - Day\nmathjax: true\nabbrlink: 777dd730\n---\n\n\n### 前序:\n\nAOF开启的配置:\n\n```\nappendonly yes\n#appendonly no\nappendfsync everysec\n```\n\n但是redis根据这配置到底是如何实现 AOF的呢?\n<!--more-->\n### appendOnly起点：\n\n通过config.c配置文件可以查到appendOnly对应的变量：\n```go\ncreateBoolConfig(\"appendonly\", NULL, MODIFIABLE_CONFIG, server.aof_enabled, 0, NULL, updateAppendonly)\n```\n\n#### 关于aof_enable使用地方：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020243.png)\n\n#### 再看下aof_state使用地方：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020100.png)\n\n### 主要方向：\n* aof在启动时候加载顺序\n* aof存文件如何被触发执行的\n* aof保存的机制/同步策略？\n* aof机制和rdb混用？\n* aof如何保持较高的性能？\n\n#### server启动，aof开启，加载流程：\n\n```c++\n/* Replay the append log file. On success C_OK is returned. On non fatal\n * error (the append only file is zero-length) C_ERR is returned. On\n * fatal error an error message is logged and the program exists. */\nint loadAppendOnlyFile(char *filename) {\n    struct client *fakeClient;\n    FILE *fp = fopen(filename,\"r\");\n    struct redis_stat sb;\n    int old_aof_state = server.aof_state;\n    long loops = 0;\n    off_t valid_up_to = 0; /* Offset of latest well-formed command loaded. */\n    off_t valid_before_multi = 0; /* Offset before MULTI command loaded. */\n\n    if (fp == NULL) {\n        serverLog(LL_WARNING,\"Fatal error: can't open the append log file for reading: %s\",strerror(errno));\n        exit(1);\n    }\n\n    /* Handle a zero-length AOF file as a special case. An empty AOF file\n     * is a valid AOF because an empty server with AOF enabled will create\n     * a zero length file at startup, that will remain like that if no write\n     * operation is received. */\n    if (fp && redis_fstat(fileno(fp),&sb) != -1 && sb.st_size == 0) {\n        server.aof_current_size = 0;\n        server.aof_fsync_offset = server.aof_current_size;\n        fclose(fp);\n        return C_ERR;\n    }\n\n    /* Temporarily disable AOF, to prevent EXEC from feeding a MULTI\n     * to the same file we're about to read. */\n    server.aof_state = AOF_OFF;\n    // 创建aof客户端\n    fakeClient = createAOFClient();\n    //加载文件\n    startLoadingFile(fp, filename, RDBFLAGS_AOF_PREAMBLE);\n\n    /* Check if this AOF file has an RDB preamble. In that case we need to\n     * load the RDB file and later continue loading the AOF tail. */\n    // 检查aof头部有没有rdb格式的内容，先加载rdb再加载aof\n    char sig[5]; /* \"REDIS\" */\n    if (fread(sig,1,5,fp) != 5 || memcmp(sig,\"REDIS\",5) != 0) {\n        /* No RDB preamble, seek back at 0 offset. */\n        // 没有rdb格式的，\n        if (fseek(fp,0,SEEK_SET) == -1) goto readerr;\n    } else {\n        /* RDB preamble. Pass loading the RDB functions. */\n        rio rdb;\n\n        serverLog(LL_NOTICE,\"Reading RDB preamble from AOF file...\");\n        if (fseek(fp,0,SEEK_SET) == -1) goto readerr;\n        rioInitWithFile(&rdb,fp);\n        // 加载rdb格式的文件\n        if (rdbLoadRio(&rdb,RDBFLAGS_AOF_PREAMBLE,NULL) != C_OK) {\n            serverLog(LL_WARNING,\"Error reading the RDB preamble of the AOF file, AOF loading aborted\");\n            goto readerr;\n        } else {\n            serverLog(LL_NOTICE,\"Reading the remaining AOF tail...\");\n        }\n    }\n\n    /* Read the actual AOF file, in REPL format, command by command. */\n    // 按照aof协议来读取/解析aof文件\n    while(1) {\n        int argc, j;\n        unsigned long len;\n        robj **argv;\n        char buf[128];\n        sds argsds;\n        struct redisCommand *cmd;\n\n        /* Serve the clients from time to time */\n        if (!(loops++ % 1000)) {\n            loadingProgress(ftello(fp));\n            processEventsWhileBlocked();\n            processModuleLoadingProgressEvent(1);\n        }\n\n        if (fgets(buf,sizeof(buf),fp) == NULL) {\n            if (feof(fp))\n                break;\n            else\n                goto readerr;\n        }\n        if (buf[0] != '*') goto fmterr;\n        if (buf[1] == '\\0') goto readerr;\n        argc = atoi(buf+1);\n        if (argc < 1) goto fmterr;\n\n        /* Load the next command in the AOF as our fake client\n         * argv. */\n        argv = zmalloc(sizeof(robj*)*argc);\n        fakeClient->argc = argc;\n        fakeClient->argv = argv;\n\n        for (j = 0; j < argc; j++) {\n            /* Parse the argument len. */\n            char *readres = fgets(buf,sizeof(buf),fp);\n            if (readres == NULL || buf[0] != '$') {\n                fakeClient->argc = j; /* Free up to j-1. */\n                freeFakeClientArgv(fakeClient);\n                if (readres == NULL)\n                    goto readerr;\n                else\n                    goto fmterr;\n            }\n            len = strtol(buf+1,NULL,10);\n\n            /* Read it into a string object. */\n            argsds = sdsnewlen(SDS_NOINIT,len);\n            if (len && fread(argsds,len,1,fp) == 0) {\n                sdsfree(argsds);\n                fakeClient->argc = j; /* Free up to j-1. */\n                freeFakeClientArgv(fakeClient);\n                goto readerr;\n            }\n            argv[j] = createObject(OBJ_STRING,argsds);\n\n            /* Discard CRLF. */\n            if (fread(buf,2,1,fp) == 0) {\n                fakeClient->argc = j+1; /* Free up to j. */\n                freeFakeClientArgv(fakeClient);\n                goto readerr;\n            }\n        }\n\n        /* Command lookup */\n        cmd = lookupCommand(argv[0]->ptr);\n        // 未知命令，启动直接退出了\n        if (!cmd) {\n            serverLog(LL_WARNING,\n                \"Unknown command '%s' reading the append only file\",\n                (char*)argv[0]->ptr);\n            exit(1);\n        }\n\n        if (cmd == server.multiCommand) valid_before_multi = valid_up_to;\n\n        /* Run the command in the context of a fake client */\n        fakeClient->cmd = fakeClient->lastcmd = cmd;\n        if (fakeClient->flags & CLIENT_MULTI &&\n            fakeClient->cmd->proc != execCommand)\n        {\n            queueMultiCommand(fakeClient);\n        } else {\n            cmd->proc(fakeClient);\n        }\n\n        /* The fake client should not have a reply */\n        serverAssert(fakeClient->bufpos == 0 &&\n                     listLength(fakeClient->reply) == 0);\n\n        /* The fake client should never get blocked */\n        serverAssert((fakeClient->flags & CLIENT_BLOCKED) == 0);\n\n        /* Clean up. Command code may have changed argv/argc so we use the\n         * argv/argc of the client instead of the local variables. */\n        freeFakeClientArgv(fakeClient);\n        fakeClient->cmd = NULL;\n        if (server.aof_load_truncated) valid_up_to = ftello(fp);\n        if (server.key_load_delay)\n            debugDelay(server.key_load_delay);\n    }\n\n    /* This point can only be reached when EOF is reached without errors.\n     * If the client is in the middle of a MULTI/EXEC, handle it as it was\n     * a short read, even if technically the protocol is correct: we want\n     * to remove the unprocessed tail and continue. */\n    if (fakeClient->flags & CLIENT_MULTI) {\n        serverLog(LL_WARNING,\n            \"Revert incomplete MULTI/EXEC transaction in AOF file\");\n        valid_up_to = valid_before_multi;\n        goto uxeof;\n    }\n\nloaded_ok: /* DB loaded, cleanup and return C_OK to the caller. */\n    fclose(fp);\n    freeFakeClient(fakeClient);\n    server.aof_state = old_aof_state;\n    stopLoading(1);\n    aofUpdateCurrentSize();\n    server.aof_rewrite_base_size = server.aof_current_size;\n    server.aof_fsync_offset = server.aof_current_size;\n    return C_OK;\n\nreaderr: /* Read error. If feof(fp) is true, fall through to unexpected EOF. */\n    if (!feof(fp)) {\n        if (fakeClient) freeFakeClient(fakeClient); /* avoid valgrind warning */\n        fclose(fp);\n        serverLog(LL_WARNING,\"Unrecoverable error reading the append only file: %s\", strerror(errno));\n        exit(1);\n    }\n\nuxeof: /* Unexpected AOF end of file. */\n    if (server.aof_load_truncated) {\n        serverLog(LL_WARNING,\"!!! Warning: short read while loading the AOF file !!!\");\n        serverLog(LL_WARNING,\"!!! Truncating the AOF at offset %llu !!!\",\n            (unsigned long long) valid_up_to);\n        if (valid_up_to == -1 || truncate(filename,valid_up_to) == -1) {\n            if (valid_up_to == -1) {\n                serverLog(LL_WARNING,\"Last valid command offset is invalid\");\n            } else {\n                serverLog(LL_WARNING,\"Error truncating the AOF file: %s\",\n                    strerror(errno));\n            }\n        } else {\n            /* Make sure the AOF file descriptor points to the end of the\n             * file after the truncate call. */\n            if (server.aof_fd != -1 && lseek(server.aof_fd,0,SEEK_END) == -1) {\n                serverLog(LL_WARNING,\"Can't seek the end of the AOF file: %s\",\n                    strerror(errno));\n            } else {\n                serverLog(LL_WARNING,\n                    \"AOF loaded anyway because aof-load-truncated is enabled\");\n                goto loaded_ok;\n            }\n        }\n    }\n    if (fakeClient) freeFakeClient(fakeClient); /* avoid valgrind warning */\n    fclose(fp);\n    serverLog(LL_WARNING,\"Unexpected end of file reading the append only file. You can: 1) Make a backup of your AOF file, then use ./redis-check-aof --fix <filename>. 2) Alternatively you can set the 'aof-load-truncated' configuration option to yes and restart the server.\");\n    exit(1);\n\nfmterr: /* Format error. */\n    if (fakeClient) freeFakeClient(fakeClient); /* avoid valgrind warning */\n    fclose(fp);\n    serverLog(LL_WARNING,\"Bad file format reading the append only file: make a backup of your AOF file, then use ./redis-check-aof --fix <filename>\");\n    exit(1);\n}\n```\n\n##### 流程图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_032504.png)\n\n#### aof触发流程：\n\n参照前面的方法，先找到appendfsync对应的变量，然后看使用场景。\n\n```c++\ncreateEnumConfig(\"appendfsync\", NULL, MODIFIABLE_CONFIG, aof_fsync_enum, server.aof_fsync, AOF_FSYNC_EVERYSEC, NULL, NULL),\n```\n##### appendfsync取值\n\n```c++\nconfigEnum aof_fsync_enum[] = {\n    {\"everysec\", AOF_FSYNC_EVERYSEC}, 每秒\n    {\"always\", AOF_FSYNC_ALWAYS}, 每个操作\n    {\"no\", AOF_FSYNC_NO}, 由操作系统决定何时同步\n    {NULL, 0}\n};\n```\n\n##### aof_fsync_enum哪里用到了？\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_041746.png)\n\n##### 流程图:\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-3-18-22-38.png)\n\n#### aof和RDB混用的情况\n\n##### 配置项:\n\n```go\naof-use-rdb-preamble  true/false\n\nconfig.c配置:\n\ncreateBoolConfig(\"aof-use-rdb-preamble\", NULL, MODIFIABLE_CONFIG, server.aof_use_rdb_preamble, 1, NULL, NULL),\n```\n\n##### 流程图:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-21-23-34.png)\n\n\n\n\n#### aof文件如何“高效”持久化\n\n##### 如何持久化到硬盘？「flushAppendOnlyFile」\n\n```c++\nflushAppendOnlyFile函数\n\n说明：\n\n Write the append only file buffer on disk.\n```\n\n##### 流程图：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/acsz8-d5ehw.webp)\n\n\n### Todo\n\n- [ ] [aof和rdb多维度比较]\n\n### End","slug":"43-redis-aof持久化","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5a0034zfqx371pfrrb","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p>AOF开启的配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br><span class=\"line\">#appendonly no</span><br><span class=\"line\">appendfsync everysec</span><br></pre></td></tr></table></figure>\n<p>但是redis根据这配置到底是如何实现 AOF的呢?</p>\n<span id=\"more\"></span>\n<h3 id=\"appendOnly起点：\"><a class=\"header-anchor\" href=\"#appendOnly起点：\">¶</a>appendOnly起点：</h3>\n<p>通过config.c配置文件可以查到appendOnly对应的变量：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createBoolConfig(<span class=\"string\">&quot;appendonly&quot;</span>, NULL, MODIFIABLE_CONFIG, server.aof_enabled, <span class=\"number\">0</span>, NULL, updateAppendonly)</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于aof-enable使用地方：\"><a class=\"header-anchor\" href=\"#关于aof-enable使用地方：\">¶</a>关于aof_enable使用地方：</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020243.png\" alt=\"\"></p>\n<h4 id=\"再看下aof-state使用地方：\"><a class=\"header-anchor\" href=\"#再看下aof-state使用地方：\">¶</a>再看下aof_state使用地方：</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020100.png\" alt=\"\"></p>\n<h3 id=\"主要方向：\"><a class=\"header-anchor\" href=\"#主要方向：\">¶</a>主要方向：</h3>\n<ul>\n<li>aof在启动时候加载顺序</li>\n<li>aof存文件如何被触发执行的</li>\n<li>aof保存的机制/同步策略？</li>\n<li>aof机制和rdb混用？</li>\n<li>aof如何保持较高的性能？</li>\n</ul>\n<h4 id=\"server启动，aof开启，加载流程：\"><a class=\"header-anchor\" href=\"#server启动，aof开启，加载流程：\">¶</a>server启动，aof开启，加载流程：</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Replay the append log file. On success C_OK is returned. On non fatal</span></span><br><span class=\"line\"><span class=\"comment\"> * error (the append only file is zero-length) C_ERR is returned. On</span></span><br><span class=\"line\"><span class=\"comment\"> * fatal error an error message is logged and the program exists. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">loadAppendOnlyFile</span><span class=\"params\">(<span class=\"type\">char</span> *filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">client</span> *fakeClient;</span><br><span class=\"line\">    FILE *fp = <span class=\"built_in\">fopen</span>(filename,<span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">redis_stat</span> sb;</span><br><span class=\"line\">    <span class=\"type\">int</span> old_aof_state = server.aof_state;</span><br><span class=\"line\">    <span class=\"type\">long</span> loops = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">off_t</span> valid_up_to = <span class=\"number\">0</span>; <span class=\"comment\">/* Offset of latest well-formed command loaded. */</span></span><br><span class=\"line\">    <span class=\"type\">off_t</span> valid_before_multi = <span class=\"number\">0</span>; <span class=\"comment\">/* Offset before MULTI command loaded. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Fatal error: can&#x27;t open the append log file for reading: %s&quot;</span>,<span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Handle a zero-length AOF file as a special case. An empty AOF file</span></span><br><span class=\"line\"><span class=\"comment\">     * is a valid AOF because an empty server with AOF enabled will create</span></span><br><span class=\"line\"><span class=\"comment\">     * a zero length file at startup, that will remain like that if no write</span></span><br><span class=\"line\"><span class=\"comment\">     * operation is received. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp &amp;&amp; <span class=\"built_in\">redis_fstat</span>(<span class=\"built_in\">fileno</span>(fp),&amp;sb) != <span class=\"number\">-1</span> &amp;&amp; sb.st_size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        server.aof_current_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        server.aof_fsync_offset = server.aof_current_size;</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Temporarily disable AOF, to prevent EXEC from feeding a MULTI</span></span><br><span class=\"line\"><span class=\"comment\">     * to the same file we&#x27;re about to read. */</span></span><br><span class=\"line\">    server.aof_state = AOF_OFF;</span><br><span class=\"line\">    <span class=\"comment\">// 创建aof客户端</span></span><br><span class=\"line\">    fakeClient = <span class=\"built_in\">createAOFClient</span>();</span><br><span class=\"line\">    <span class=\"comment\">//加载文件</span></span><br><span class=\"line\">    <span class=\"built_in\">startLoadingFile</span>(fp, filename, RDBFLAGS_AOF_PREAMBLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if this AOF file has an RDB preamble. In that case we need to</span></span><br><span class=\"line\"><span class=\"comment\">     * load the RDB file and later continue loading the AOF tail. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 检查aof头部有没有rdb格式的内容，先加载rdb再加载aof</span></span><br><span class=\"line\">    <span class=\"type\">char</span> sig[<span class=\"number\">5</span>]; <span class=\"comment\">/* &quot;REDIS&quot; */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fread</span>(sig,<span class=\"number\">1</span>,<span class=\"number\">5</span>,fp) != <span class=\"number\">5</span> || <span class=\"built_in\">memcmp</span>(sig,<span class=\"string\">&quot;REDIS&quot;</span>,<span class=\"number\">5</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* No RDB preamble, seek back at 0 offset. */</span></span><br><span class=\"line\">        <span class=\"comment\">// 没有rdb格式的，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fseek</span>(fp,<span class=\"number\">0</span>,SEEK_SET) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* RDB preamble. Pass loading the RDB functions. */</span></span><br><span class=\"line\">        rio rdb;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;Reading RDB preamble from AOF file...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fseek</span>(fp,<span class=\"number\">0</span>,SEEK_SET) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        <span class=\"built_in\">rioInitWithFile</span>(&amp;rdb,fp);</span><br><span class=\"line\">        <span class=\"comment\">// 加载rdb格式的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">rdbLoadRio</span>(&amp;rdb,RDBFLAGS_AOF_PREAMBLE,<span class=\"literal\">NULL</span>) != C_OK) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Error reading the RDB preamble of the AOF file, AOF loading aborted&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;Reading the remaining AOF tail...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Read the actual AOF file, in REPL format, command by command. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 按照aof协议来读取/解析aof文件</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> argc, j;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">long</span> len;</span><br><span class=\"line\">        robj **argv;</span><br><span class=\"line\">        <span class=\"type\">char</span> buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">        sds argsds;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">redisCommand</span> *cmd;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Serve the clients from time to time */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(loops++ % <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">loadingProgress</span>(<span class=\"built_in\">ftello</span>(fp));</span><br><span class=\"line\">            <span class=\"built_in\">processEventsWhileBlocked</span>();</span><br><span class=\"line\">            <span class=\"built_in\">processModuleLoadingProgressEvent</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fgets</span>(buf,<span class=\"built_in\">sizeof</span>(buf),fp) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">feof</span>(fp))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;*&#x27;</span>) <span class=\"keyword\">goto</span> fmterr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>) <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        argc = <span class=\"built_in\">atoi</span>(buf+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">1</span>) <span class=\"keyword\">goto</span> fmterr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Load the next command in the AOF as our fake client</span></span><br><span class=\"line\"><span class=\"comment\">         * argv. */</span></span><br><span class=\"line\">        argv = <span class=\"built_in\">zmalloc</span>(<span class=\"built_in\">sizeof</span>(robj*)*argc);</span><br><span class=\"line\">        fakeClient-&gt;argc = argc;</span><br><span class=\"line\">        fakeClient-&gt;argv = argv;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; argc; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Parse the argument len. */</span></span><br><span class=\"line\">            <span class=\"type\">char</span> *readres = <span class=\"built_in\">fgets</span>(buf,<span class=\"built_in\">sizeof</span>(buf),fp);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (readres == <span class=\"literal\">NULL</span> || buf[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">                fakeClient-&gt;argc = j; <span class=\"comment\">/* Free up to j-1. */</span></span><br><span class=\"line\">                <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (readres == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> fmterr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            len = <span class=\"built_in\">strtol</span>(buf+<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Read it into a string object. */</span></span><br><span class=\"line\">            argsds = <span class=\"built_in\">sdsnewlen</span>(SDS_NOINIT,len);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len &amp;&amp; <span class=\"built_in\">fread</span>(argsds,len,<span class=\"number\">1</span>,fp) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">sdsfree</span>(argsds);</span><br><span class=\"line\">                fakeClient-&gt;argc = j; <span class=\"comment\">/* Free up to j-1. */</span></span><br><span class=\"line\">                <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            argv[j] = <span class=\"built_in\">createObject</span>(OBJ_STRING,argsds);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Discard CRLF. */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fread</span>(buf,<span class=\"number\">2</span>,<span class=\"number\">1</span>,fp) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                fakeClient-&gt;argc = j+<span class=\"number\">1</span>; <span class=\"comment\">/* Free up to j. */</span></span><br><span class=\"line\">                <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Command lookup */</span></span><br><span class=\"line\">        cmd = <span class=\"built_in\">lookupCommand</span>(argv[<span class=\"number\">0</span>]-&gt;ptr);</span><br><span class=\"line\">        <span class=\"comment\">// 未知命令，启动直接退出了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cmd) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">                <span class=\"string\">&quot;Unknown command &#x27;%s&#x27; reading the append only file&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">char</span>*)argv[<span class=\"number\">0</span>]-&gt;ptr);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmd == server.multiCommand) valid_before_multi = valid_up_to;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Run the command in the context of a fake client */</span></span><br><span class=\"line\">        fakeClient-&gt;cmd = fakeClient-&gt;lastcmd = cmd;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fakeClient-&gt;flags &amp; CLIENT_MULTI &amp;&amp;</span><br><span class=\"line\">            fakeClient-&gt;cmd-&gt;proc != execCommand)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">queueMultiCommand</span>(fakeClient);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cmd-&gt;<span class=\"built_in\">proc</span>(fakeClient);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* The fake client should not have a reply */</span></span><br><span class=\"line\">        <span class=\"built_in\">serverAssert</span>(fakeClient-&gt;bufpos == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                     <span class=\"built_in\">listLength</span>(fakeClient-&gt;reply) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* The fake client should never get blocked */</span></span><br><span class=\"line\">        <span class=\"built_in\">serverAssert</span>((fakeClient-&gt;flags &amp; CLIENT_BLOCKED) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Clean up. Command code may have changed argv/argc so we use the</span></span><br><span class=\"line\"><span class=\"comment\">         * argv/argc of the client instead of the local variables. */</span></span><br><span class=\"line\">        <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">        fakeClient-&gt;cmd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (server.aof_load_truncated) valid_up_to = <span class=\"built_in\">ftello</span>(fp);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (server.key_load_delay)</span><br><span class=\"line\">            <span class=\"built_in\">debugDelay</span>(server.key_load_delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* This point can only be reached when EOF is reached without errors.</span></span><br><span class=\"line\"><span class=\"comment\">     * If the client is in the middle of a MULTI/EXEC, handle it as it was</span></span><br><span class=\"line\"><span class=\"comment\">     * a short read, even if technically the protocol is correct: we want</span></span><br><span class=\"line\"><span class=\"comment\">     * to remove the unprocessed tail and continue. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fakeClient-&gt;flags &amp; CLIENT_MULTI) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">            <span class=\"string\">&quot;Revert incomplete MULTI/EXEC transaction in AOF file&quot;</span>);</span><br><span class=\"line\">        valid_up_to = valid_before_multi;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> uxeof;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loaded_ok: <span class=\"comment\">/* DB loaded, cleanup and return C_OK to the caller. */</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">freeFakeClient</span>(fakeClient);</span><br><span class=\"line\">    server.aof_state = old_aof_state;</span><br><span class=\"line\">    <span class=\"built_in\">stopLoading</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">aofUpdateCurrentSize</span>();</span><br><span class=\"line\">    server.aof_rewrite_base_size = server.aof_current_size;</span><br><span class=\"line\">    server.aof_fsync_offset = server.aof_current_size;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">readerr: <span class=\"comment\">/* Read error. If feof(fp) is true, fall through to unexpected EOF. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">feof</span>(fp)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fakeClient) <span class=\"built_in\">freeFakeClient</span>(fakeClient); <span class=\"comment\">/* avoid valgrind warning */</span></span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Unrecoverable error reading the append only file: %s&quot;</span>, <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uxeof: <span class=\"comment\">/* Unexpected AOF end of file. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.aof_load_truncated) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;!!! Warning: short read while loading the AOF file !!!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;!!! Truncating the AOF at offset %llu !!!&quot;</span>,</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>) valid_up_to);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valid_up_to == <span class=\"number\">-1</span> || <span class=\"built_in\">truncate</span>(filename,valid_up_to) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (valid_up_to == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Last valid command offset is invalid&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Error truncating the AOF file: %s&quot;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Make sure the AOF file descriptor points to the end of the</span></span><br><span class=\"line\"><span class=\"comment\">             * file after the truncate call. */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server.aof_fd != <span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">lseek</span>(server.aof_fd,<span class=\"number\">0</span>,SEEK_END) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Can&#x27;t seek the end of the AOF file: %s&quot;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AOF loaded anyway because aof-load-truncated is enabled&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> loaded_ok;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fakeClient) <span class=\"built_in\">freeFakeClient</span>(fakeClient); <span class=\"comment\">/* avoid valgrind warning */</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Unexpected end of file reading the append only file. You can: 1) Make a backup of your AOF file, then use ./redis-check-aof --fix &lt;filename&gt;. 2) Alternatively you can set the &#x27;aof-load-truncated&#x27; configuration option to yes and restart the server.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fmterr: <span class=\"comment\">/* Format error. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fakeClient) <span class=\"built_in\">freeFakeClient</span>(fakeClient); <span class=\"comment\">/* avoid valgrind warning */</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Bad file format reading the append only file: make a backup of your AOF file, then use ./redis-check-aof --fix &lt;filename&gt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"流程图：\"><a class=\"header-anchor\" href=\"#流程图：\">¶</a>流程图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_032504.png\" alt=\"\"></p>\n<h4 id=\"aof触发流程：\"><a class=\"header-anchor\" href=\"#aof触发流程：\">¶</a>aof触发流程：</h4>\n<p>参照前面的方法，先找到appendfsync对应的变量，然后看使用场景。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">createEnumConfig</span>(<span class=\"string\">&quot;appendfsync&quot;</span>, <span class=\"literal\">NULL</span>, MODIFIABLE_CONFIG, aof_fsync_enum, server.aof_fsync, AOF_FSYNC_EVERYSEC, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>),</span><br></pre></td></tr></table></figure>\n<h5 id=\"appendfsync取值\"><a class=\"header-anchor\" href=\"#appendfsync取值\">¶</a>appendfsync取值</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configEnum aof_fsync_enum[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;everysec&quot;</span>, AOF_FSYNC_EVERYSEC&#125;, 每秒</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;always&quot;</span>, AOF_FSYNC_ALWAYS&#125;, 每个操作</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;no&quot;</span>, AOF_FSYNC_NO&#125;, 由操作系统决定何时同步</span><br><span class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"aof-fsync-enum哪里用到了？\"><a class=\"header-anchor\" href=\"#aof-fsync-enum哪里用到了？\">¶</a>aof_fsync_enum哪里用到了？</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_041746.png\" alt=\"\"></p>\n<h5 id=\"流程图\"><a class=\"header-anchor\" href=\"#流程图\">¶</a>流程图:</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-3-18-22-38.png\" alt=\"\"></p>\n<h4 id=\"aof和RDB混用的情况\"><a class=\"header-anchor\" href=\"#aof和RDB混用的情况\">¶</a>aof和RDB混用的情况</h4>\n<h5 id=\"配置项\"><a class=\"header-anchor\" href=\"#配置项\">¶</a>配置项:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aof-use-rdb-preamble  <span class=\"literal\">true</span>/<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">config.c配置:</span><br><span class=\"line\"></span><br><span class=\"line\">createBoolConfig(<span class=\"string\">&quot;aof-use-rdb-preamble&quot;</span>, NULL, MODIFIABLE_CONFIG, server.aof_use_rdb_preamble, <span class=\"number\">1</span>, NULL, NULL),</span><br></pre></td></tr></table></figure>\n<h5 id=\"流程图-v2\"><a class=\"header-anchor\" href=\"#流程图-v2\">¶</a>流程图:</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-21-23-34.png\" alt=\"\"></p>\n<h4 id=\"aof文件如何“高效”持久化\"><a class=\"header-anchor\" href=\"#aof文件如何“高效”持久化\">¶</a>aof文件如何“高效”持久化</h4>\n<h5 id=\"如何持久化到硬盘？「flushAppendOnlyFile」\"><a class=\"header-anchor\" href=\"#如何持久化到硬盘？「flushAppendOnlyFile」\">¶</a>如何持久化到硬盘？「flushAppendOnlyFile」</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushAppendOnlyFile函数</span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\"></span><br><span class=\"line\"> Write the append only file buffer on disk.</span><br></pre></td></tr></table></figure>\n<h5 id=\"流程图：-v2\"><a class=\"header-anchor\" href=\"#流程图：-v2\">¶</a>流程图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/acsz8-d5ehw.webp\" alt=\"\"></p>\n<h3 id=\"Todo\"><a class=\"header-anchor\" href=\"#Todo\">¶</a>Todo</h3>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">[aof和rdb多维度比较]</label></li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p>AOF开启的配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br><span class=\"line\">#appendonly no</span><br><span class=\"line\">appendfsync everysec</span><br></pre></td></tr></table></figure>\n<p>但是redis根据这配置到底是如何实现 AOF的呢?</p>","more":"<h3 id=\"appendOnly起点：\"><a class=\"header-anchor\" href=\"#appendOnly起点：\">¶</a>appendOnly起点：</h3>\n<p>通过config.c配置文件可以查到appendOnly对应的变量：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createBoolConfig(<span class=\"string\">&quot;appendonly&quot;</span>, NULL, MODIFIABLE_CONFIG, server.aof_enabled, <span class=\"number\">0</span>, NULL, updateAppendonly)</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于aof-enable使用地方：\"><a class=\"header-anchor\" href=\"#关于aof-enable使用地方：\">¶</a>关于aof_enable使用地方：</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020243.png\" alt=\"\"></p>\n<h4 id=\"再看下aof-state使用地方：\"><a class=\"header-anchor\" href=\"#再看下aof-state使用地方：\">¶</a>再看下aof_state使用地方：</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020100.png\" alt=\"\"></p>\n<h3 id=\"主要方向：\"><a class=\"header-anchor\" href=\"#主要方向：\">¶</a>主要方向：</h3>\n<ul>\n<li>aof在启动时候加载顺序</li>\n<li>aof存文件如何被触发执行的</li>\n<li>aof保存的机制/同步策略？</li>\n<li>aof机制和rdb混用？</li>\n<li>aof如何保持较高的性能？</li>\n</ul>\n<h4 id=\"server启动，aof开启，加载流程：\"><a class=\"header-anchor\" href=\"#server启动，aof开启，加载流程：\">¶</a>server启动，aof开启，加载流程：</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Replay the append log file. On success C_OK is returned. On non fatal</span></span><br><span class=\"line\"><span class=\"comment\"> * error (the append only file is zero-length) C_ERR is returned. On</span></span><br><span class=\"line\"><span class=\"comment\"> * fatal error an error message is logged and the program exists. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">loadAppendOnlyFile</span><span class=\"params\">(<span class=\"type\">char</span> *filename)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">client</span> *fakeClient;</span><br><span class=\"line\">    FILE *fp = <span class=\"built_in\">fopen</span>(filename,<span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">redis_stat</span> sb;</span><br><span class=\"line\">    <span class=\"type\">int</span> old_aof_state = server.aof_state;</span><br><span class=\"line\">    <span class=\"type\">long</span> loops = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">off_t</span> valid_up_to = <span class=\"number\">0</span>; <span class=\"comment\">/* Offset of latest well-formed command loaded. */</span></span><br><span class=\"line\">    <span class=\"type\">off_t</span> valid_before_multi = <span class=\"number\">0</span>; <span class=\"comment\">/* Offset before MULTI command loaded. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Fatal error: can&#x27;t open the append log file for reading: %s&quot;</span>,<span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Handle a zero-length AOF file as a special case. An empty AOF file</span></span><br><span class=\"line\"><span class=\"comment\">     * is a valid AOF because an empty server with AOF enabled will create</span></span><br><span class=\"line\"><span class=\"comment\">     * a zero length file at startup, that will remain like that if no write</span></span><br><span class=\"line\"><span class=\"comment\">     * operation is received. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fp &amp;&amp; <span class=\"built_in\">redis_fstat</span>(<span class=\"built_in\">fileno</span>(fp),&amp;sb) != <span class=\"number\">-1</span> &amp;&amp; sb.st_size == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        server.aof_current_size = <span class=\"number\">0</span>;</span><br><span class=\"line\">        server.aof_fsync_offset = server.aof_current_size;</span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> C_ERR;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Temporarily disable AOF, to prevent EXEC from feeding a MULTI</span></span><br><span class=\"line\"><span class=\"comment\">     * to the same file we&#x27;re about to read. */</span></span><br><span class=\"line\">    server.aof_state = AOF_OFF;</span><br><span class=\"line\">    <span class=\"comment\">// 创建aof客户端</span></span><br><span class=\"line\">    fakeClient = <span class=\"built_in\">createAOFClient</span>();</span><br><span class=\"line\">    <span class=\"comment\">//加载文件</span></span><br><span class=\"line\">    <span class=\"built_in\">startLoadingFile</span>(fp, filename, RDBFLAGS_AOF_PREAMBLE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if this AOF file has an RDB preamble. In that case we need to</span></span><br><span class=\"line\"><span class=\"comment\">     * load the RDB file and later continue loading the AOF tail. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 检查aof头部有没有rdb格式的内容，先加载rdb再加载aof</span></span><br><span class=\"line\">    <span class=\"type\">char</span> sig[<span class=\"number\">5</span>]; <span class=\"comment\">/* &quot;REDIS&quot; */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">fread</span>(sig,<span class=\"number\">1</span>,<span class=\"number\">5</span>,fp) != <span class=\"number\">5</span> || <span class=\"built_in\">memcmp</span>(sig,<span class=\"string\">&quot;REDIS&quot;</span>,<span class=\"number\">5</span>) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* No RDB preamble, seek back at 0 offset. */</span></span><br><span class=\"line\">        <span class=\"comment\">// 没有rdb格式的，</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fseek</span>(fp,<span class=\"number\">0</span>,SEEK_SET) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* RDB preamble. Pass loading the RDB functions. */</span></span><br><span class=\"line\">        rio rdb;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;Reading RDB preamble from AOF file...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fseek</span>(fp,<span class=\"number\">0</span>,SEEK_SET) == <span class=\"number\">-1</span>) <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        <span class=\"built_in\">rioInitWithFile</span>(&amp;rdb,fp);</span><br><span class=\"line\">        <span class=\"comment\">// 加载rdb格式的文件</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">rdbLoadRio</span>(&amp;rdb,RDBFLAGS_AOF_PREAMBLE,<span class=\"literal\">NULL</span>) != C_OK) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Error reading the RDB preamble of the AOF file, AOF loading aborted&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_NOTICE,<span class=\"string\">&quot;Reading the remaining AOF tail...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Read the actual AOF file, in REPL format, command by command. */</span></span><br><span class=\"line\">    <span class=\"comment\">// 按照aof协议来读取/解析aof文件</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> argc, j;</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> <span class=\"type\">long</span> len;</span><br><span class=\"line\">        robj **argv;</span><br><span class=\"line\">        <span class=\"type\">char</span> buf[<span class=\"number\">128</span>];</span><br><span class=\"line\">        sds argsds;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">redisCommand</span> *cmd;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Serve the clients from time to time */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(loops++ % <span class=\"number\">1000</span>)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">loadingProgress</span>(<span class=\"built_in\">ftello</span>(fp));</span><br><span class=\"line\">            <span class=\"built_in\">processEventsWhileBlocked</span>();</span><br><span class=\"line\">            <span class=\"built_in\">processModuleLoadingProgressEvent</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">fgets</span>(buf,<span class=\"built_in\">sizeof</span>(buf),fp) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">feof</span>(fp))</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;*&#x27;</span>) <span class=\"keyword\">goto</span> fmterr;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (buf[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>) <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">        argc = <span class=\"built_in\">atoi</span>(buf+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">1</span>) <span class=\"keyword\">goto</span> fmterr;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Load the next command in the AOF as our fake client</span></span><br><span class=\"line\"><span class=\"comment\">         * argv. */</span></span><br><span class=\"line\">        argv = <span class=\"built_in\">zmalloc</span>(<span class=\"built_in\">sizeof</span>(robj*)*argc);</span><br><span class=\"line\">        fakeClient-&gt;argc = argc;</span><br><span class=\"line\">        fakeClient-&gt;argv = argv;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; argc; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Parse the argument len. */</span></span><br><span class=\"line\">            <span class=\"type\">char</span> *readres = <span class=\"built_in\">fgets</span>(buf,<span class=\"built_in\">sizeof</span>(buf),fp);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (readres == <span class=\"literal\">NULL</span> || buf[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">                fakeClient-&gt;argc = j; <span class=\"comment\">/* Free up to j-1. */</span></span><br><span class=\"line\">                <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (readres == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    <span class=\"keyword\">goto</span> fmterr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            len = <span class=\"built_in\">strtol</span>(buf+<span class=\"number\">1</span>,<span class=\"literal\">NULL</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Read it into a string object. */</span></span><br><span class=\"line\">            argsds = <span class=\"built_in\">sdsnewlen</span>(SDS_NOINIT,len);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (len &amp;&amp; <span class=\"built_in\">fread</span>(argsds,len,<span class=\"number\">1</span>,fp) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">sdsfree</span>(argsds);</span><br><span class=\"line\">                fakeClient-&gt;argc = j; <span class=\"comment\">/* Free up to j-1. */</span></span><br><span class=\"line\">                <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            argv[j] = <span class=\"built_in\">createObject</span>(OBJ_STRING,argsds);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">/* Discard CRLF. */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">fread</span>(buf,<span class=\"number\">2</span>,<span class=\"number\">1</span>,fp) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                fakeClient-&gt;argc = j+<span class=\"number\">1</span>; <span class=\"comment\">/* Free up to j. */</span></span><br><span class=\"line\">                <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> readerr;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Command lookup */</span></span><br><span class=\"line\">        cmd = <span class=\"built_in\">lookupCommand</span>(argv[<span class=\"number\">0</span>]-&gt;ptr);</span><br><span class=\"line\">        <span class=\"comment\">// 未知命令，启动直接退出了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!cmd) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">                <span class=\"string\">&quot;Unknown command &#x27;%s&#x27; reading the append only file&quot;</span>,</span><br><span class=\"line\">                (<span class=\"type\">char</span>*)argv[<span class=\"number\">0</span>]-&gt;ptr);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cmd == server.multiCommand) valid_before_multi = valid_up_to;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Run the command in the context of a fake client */</span></span><br><span class=\"line\">        fakeClient-&gt;cmd = fakeClient-&gt;lastcmd = cmd;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fakeClient-&gt;flags &amp; CLIENT_MULTI &amp;&amp;</span><br><span class=\"line\">            fakeClient-&gt;cmd-&gt;proc != execCommand)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">queueMultiCommand</span>(fakeClient);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cmd-&gt;<span class=\"built_in\">proc</span>(fakeClient);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* The fake client should not have a reply */</span></span><br><span class=\"line\">        <span class=\"built_in\">serverAssert</span>(fakeClient-&gt;bufpos == <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">                     <span class=\"built_in\">listLength</span>(fakeClient-&gt;reply) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* The fake client should never get blocked */</span></span><br><span class=\"line\">        <span class=\"built_in\">serverAssert</span>((fakeClient-&gt;flags &amp; CLIENT_BLOCKED) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Clean up. Command code may have changed argv/argc so we use the</span></span><br><span class=\"line\"><span class=\"comment\">         * argv/argc of the client instead of the local variables. */</span></span><br><span class=\"line\">        <span class=\"built_in\">freeFakeClientArgv</span>(fakeClient);</span><br><span class=\"line\">        fakeClient-&gt;cmd = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (server.aof_load_truncated) valid_up_to = <span class=\"built_in\">ftello</span>(fp);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (server.key_load_delay)</span><br><span class=\"line\">            <span class=\"built_in\">debugDelay</span>(server.key_load_delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* This point can only be reached when EOF is reached without errors.</span></span><br><span class=\"line\"><span class=\"comment\">     * If the client is in the middle of a MULTI/EXEC, handle it as it was</span></span><br><span class=\"line\"><span class=\"comment\">     * a short read, even if technically the protocol is correct: we want</span></span><br><span class=\"line\"><span class=\"comment\">     * to remove the unprocessed tail and continue. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fakeClient-&gt;flags &amp; CLIENT_MULTI) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">            <span class=\"string\">&quot;Revert incomplete MULTI/EXEC transaction in AOF file&quot;</span>);</span><br><span class=\"line\">        valid_up_to = valid_before_multi;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> uxeof;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">loaded_ok: <span class=\"comment\">/* DB loaded, cleanup and return C_OK to the caller. */</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">freeFakeClient</span>(fakeClient);</span><br><span class=\"line\">    server.aof_state = old_aof_state;</span><br><span class=\"line\">    <span class=\"built_in\">stopLoading</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">aofUpdateCurrentSize</span>();</span><br><span class=\"line\">    server.aof_rewrite_base_size = server.aof_current_size;</span><br><span class=\"line\">    server.aof_fsync_offset = server.aof_current_size;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> C_OK;</span><br><span class=\"line\"></span><br><span class=\"line\">readerr: <span class=\"comment\">/* Read error. If feof(fp) is true, fall through to unexpected EOF. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">feof</span>(fp)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fakeClient) <span class=\"built_in\">freeFakeClient</span>(fakeClient); <span class=\"comment\">/* avoid valgrind warning */</span></span><br><span class=\"line\">        <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Unrecoverable error reading the append only file: %s&quot;</span>, <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">uxeof: <span class=\"comment\">/* Unexpected AOF end of file. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server.aof_load_truncated) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;!!! Warning: short read while loading the AOF file !!!&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;!!! Truncating the AOF at offset %llu !!!&quot;</span>,</span><br><span class=\"line\">            (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>) valid_up_to);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (valid_up_to == <span class=\"number\">-1</span> || <span class=\"built_in\">truncate</span>(filename,valid_up_to) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (valid_up_to == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Last valid command offset is invalid&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Error truncating the AOF file: %s&quot;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* Make sure the AOF file descriptor points to the end of the</span></span><br><span class=\"line\"><span class=\"comment\">             * file after the truncate call. */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (server.aof_fd != <span class=\"number\">-1</span> &amp;&amp; <span class=\"built_in\">lseek</span>(server.aof_fd,<span class=\"number\">0</span>,SEEK_END) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Can&#x27;t seek the end of the AOF file: %s&quot;</span>,</span><br><span class=\"line\">                    <span class=\"built_in\">strerror</span>(errno));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">serverLog</span>(LL_WARNING,</span><br><span class=\"line\">                    <span class=\"string\">&quot;AOF loaded anyway because aof-load-truncated is enabled&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">goto</span> loaded_ok;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fakeClient) <span class=\"built_in\">freeFakeClient</span>(fakeClient); <span class=\"comment\">/* avoid valgrind warning */</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Unexpected end of file reading the append only file. You can: 1) Make a backup of your AOF file, then use ./redis-check-aof --fix &lt;filename&gt;. 2) Alternatively you can set the &#x27;aof-load-truncated&#x27; configuration option to yes and restart the server.&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fmterr: <span class=\"comment\">/* Format error. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fakeClient) <span class=\"built_in\">freeFakeClient</span>(fakeClient); <span class=\"comment\">/* avoid valgrind warning */</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(fp);</span><br><span class=\"line\">    <span class=\"built_in\">serverLog</span>(LL_WARNING,<span class=\"string\">&quot;Bad file format reading the append only file: make a backup of your AOF file, then use ./redis-check-aof --fix &lt;filename&gt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"流程图：\"><a class=\"header-anchor\" href=\"#流程图：\">¶</a>流程图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_032504.png\" alt=\"\"></p>\n<h4 id=\"aof触发流程：\"><a class=\"header-anchor\" href=\"#aof触发流程：\">¶</a>aof触发流程：</h4>\n<p>参照前面的方法，先找到appendfsync对应的变量，然后看使用场景。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">createEnumConfig</span>(<span class=\"string\">&quot;appendfsync&quot;</span>, <span class=\"literal\">NULL</span>, MODIFIABLE_CONFIG, aof_fsync_enum, server.aof_fsync, AOF_FSYNC_EVERYSEC, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>),</span><br></pre></td></tr></table></figure>\n<h5 id=\"appendfsync取值\"><a class=\"header-anchor\" href=\"#appendfsync取值\">¶</a>appendfsync取值</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configEnum aof_fsync_enum[] = &#123;</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;everysec&quot;</span>, AOF_FSYNC_EVERYSEC&#125;, 每秒</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;always&quot;</span>, AOF_FSYNC_ALWAYS&#125;, 每个操作</span><br><span class=\"line\">    &#123;<span class=\"string\">&quot;no&quot;</span>, AOF_FSYNC_NO&#125;, 由操作系统决定何时同步</span><br><span class=\"line\">    &#123;<span class=\"literal\">NULL</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"aof-fsync-enum哪里用到了？\"><a class=\"header-anchor\" href=\"#aof-fsync-enum哪里用到了？\">¶</a>aof_fsync_enum哪里用到了？</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_041746.png\" alt=\"\"></p>\n<h5 id=\"流程图\"><a class=\"header-anchor\" href=\"#流程图\">¶</a>流程图:</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-3-18-22-38.png\" alt=\"\"></p>\n<h4 id=\"aof和RDB混用的情况\"><a class=\"header-anchor\" href=\"#aof和RDB混用的情况\">¶</a>aof和RDB混用的情况</h4>\n<h5 id=\"配置项\"><a class=\"header-anchor\" href=\"#配置项\">¶</a>配置项:</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aof-use-rdb-preamble  <span class=\"literal\">true</span>/<span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\">config.c配置:</span><br><span class=\"line\"></span><br><span class=\"line\">createBoolConfig(<span class=\"string\">&quot;aof-use-rdb-preamble&quot;</span>, NULL, MODIFIABLE_CONFIG, server.aof_use_rdb_preamble, <span class=\"number\">1</span>, NULL, NULL),</span><br></pre></td></tr></table></figure>\n<h5 id=\"流程图-v2\"><a class=\"header-anchor\" href=\"#流程图-v2\">¶</a>流程图:</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/redis-2021-03-21-23-34.png\" alt=\"\"></p>\n<h4 id=\"aof文件如何“高效”持久化\"><a class=\"header-anchor\" href=\"#aof文件如何“高效”持久化\">¶</a>aof文件如何“高效”持久化</h4>\n<h5 id=\"如何持久化到硬盘？「flushAppendOnlyFile」\"><a class=\"header-anchor\" href=\"#如何持久化到硬盘？「flushAppendOnlyFile」\">¶</a>如何持久化到硬盘？「flushAppendOnlyFile」</h5>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flushAppendOnlyFile函数</span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\"></span><br><span class=\"line\"> Write the append only file buffer on disk.</span><br></pre></td></tr></table></figure>\n<h5 id=\"流程图：-v2\"><a class=\"header-anchor\" href=\"#流程图：-v2\">¶</a>流程图：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/acsz8-d5ehw.webp\" alt=\"\"></p>\n<h3 id=\"Todo\"><a class=\"header-anchor\" href=\"#Todo\">¶</a>Todo</h3>\n<ul>\n<li><input type=\"checkbox\" id=\"checkbox0\"><label for=\"checkbox0\">[aof和rdb多维度比较]</label></li>\n</ul>\n<h3 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020243.png","popularPost_tmp_gaData":{"updated":"Mon Mar 22 2021 23:10:17 GMT+0800 (中国标准时间)","title":"「43」Redis AOF持久化","path":"archives/777dd730.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210318_020243.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序:</h3>\n<p>AOF开启的配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly yes</span><br><span class=\"line\">#appendonly no</span><br><span class=\"line\">appendfsync everysec</span><br></pre></td></tr></table></figure>\n<p>但是redis根据这配置到底是如何实现 AOF的呢?</p>","date":{"_isAMomentObject":true,"_i":"2021-03-17T14:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-03-17T14:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","Redis"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":8447},{"title":"「44」redis-sds源码","date":"2021-04-12T15:15:43.000Z","updated":"2021-07-26T05:09:17.000Z","abbrlink":"9989a7c4","_content":"\n>SDS在redis中也算是用来存储string高效的做法，采用header+string的形式。\n\n\n\n### 学完预期的目标:\n* SDS 结构类型\n* SDS 结构为何高效？\n* 创建？\n* 扩容？\n* 释放？\n* 复制？\n* Join连接？\n* Resize the allocation ？？\n* 其它\n<!--more-->\n\n### SDS结构\n\n\n> [☞☞ SDS官方定义](https://github.com/redis/redis/blob/unstable/src/sds.h#L43) \n\n\n>⚙️ 4种大小的定义，适配不同的场景需求。\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210726_112207.png)\n\n### why高效?\n\n#### 获取字符串长度：O(1)\n\nsds: O(1)\nc字符串： O(N)\n\n#### 防止内存溢出\n\nsds: 封装好的函数，易于操作和检查\nc字符串：操作不当易内存溢出\n\n#### 内存分配\n\nsds: 空间预分配和惰性释放\nc字符串：无此特性\n\n#### 二进制安全\n\nsds: 按照二进制方式处理，因此无限制\nc字符串：必须符合编码（ascii），限制c中不能保存图片和音频等\n\n### SDS API列表\n\n>待更新...\n\n### Reference\n\n* [☞ SDS官方定义](https://github.com/redis/redis/blob/unstable/src/sds.h#L43)\n\n\n\n\n* [👉🏿 Simple Dynamic Strings](https://github.com/antirez/sds)","source":"_posts/44-redis-sds源码.md","raw":"---\ntitle: 「44」redis-sds源码\ndate: '2021/04/12 23:15:43'\nupdated: '2021/07/26 13:09:17'\ntags:\n  - Redis\n  - SDS\nabbrlink: 9989a7c4\n---\n\n>SDS在redis中也算是用来存储string高效的做法，采用header+string的形式。\n\n\n\n### 学完预期的目标:\n* SDS 结构类型\n* SDS 结构为何高效？\n* 创建？\n* 扩容？\n* 释放？\n* 复制？\n* Join连接？\n* Resize the allocation ？？\n* 其它\n<!--more-->\n\n### SDS结构\n\n\n> [☞☞ SDS官方定义](https://github.com/redis/redis/blob/unstable/src/sds.h#L43) \n\n\n>⚙️ 4种大小的定义，适配不同的场景需求。\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210726_112207.png)\n\n### why高效?\n\n#### 获取字符串长度：O(1)\n\nsds: O(1)\nc字符串： O(N)\n\n#### 防止内存溢出\n\nsds: 封装好的函数，易于操作和检查\nc字符串：操作不当易内存溢出\n\n#### 内存分配\n\nsds: 空间预分配和惰性释放\nc字符串：无此特性\n\n#### 二进制安全\n\nsds: 按照二进制方式处理，因此无限制\nc字符串：必须符合编码（ascii），限制c中不能保存图片和音频等\n\n### SDS API列表\n\n>待更新...\n\n### Reference\n\n* [☞ SDS官方定义](https://github.com/redis/redis/blob/unstable/src/sds.h#L43)\n\n\n\n\n* [👉🏿 Simple Dynamic Strings](https://github.com/antirez/sds)","slug":"44-redis-sds源码","published":1,"_id":"cl82u8d5b0037zfqx6mg75qib","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>SDS在redis中也算是用来存储string高效的做法，采用header+string的形式。</p>\n</blockquote>\n<h3 id=\"学完预期的目标\"><a class=\"header-anchor\" href=\"#学完预期的目标\">¶</a>学完预期的目标:</h3>\n<ul>\n<li>SDS 结构类型</li>\n<li>SDS 结构为何高效？</li>\n<li>创建？</li>\n<li>扩容？</li>\n<li>释放？</li>\n<li>复制？</li>\n<li>Join连接？</li>\n<li>Resize the allocation ？？</li>\n<li>其它</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"SDS结构\"><a class=\"header-anchor\" href=\"#SDS结构\">¶</a>SDS结构</h3>\n<blockquote>\n<p><a href=\"https://github.com/redis/redis/blob/unstable/src/sds.h#L43\">☞☞ SDS官方定义</a></p>\n</blockquote>\n<blockquote>\n<p>⚙️ 4种大小的定义，适配不同的场景需求。</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210726_112207.png\" alt=\"\"></p>\n<h3 id=\"why高效\"><a class=\"header-anchor\" href=\"#why高效\">¶</a>why高效?</h3>\n<h4 id=\"获取字符串长度：O-1\"><a class=\"header-anchor\" href=\"#获取字符串长度：O-1\">¶</a>获取字符串长度：O(1)</h4>\n<p>sds: O(1)<br>\nc字符串： O(N)</p>\n<h4 id=\"防止内存溢出\"><a class=\"header-anchor\" href=\"#防止内存溢出\">¶</a>防止内存溢出</h4>\n<p>sds: 封装好的函数，易于操作和检查<br>\nc字符串：操作不当易内存溢出</p>\n<h4 id=\"内存分配\"><a class=\"header-anchor\" href=\"#内存分配\">¶</a>内存分配</h4>\n<p>sds: 空间预分配和惰性释放<br>\nc字符串：无此特性</p>\n<h4 id=\"二进制安全\"><a class=\"header-anchor\" href=\"#二进制安全\">¶</a>二进制安全</h4>\n<p>sds: 按照二进制方式处理，因此无限制<br>\nc字符串：必须符合编码（ascii），限制c中不能保存图片和音频等</p>\n<h3 id=\"SDS-API列表\"><a class=\"header-anchor\" href=\"#SDS-API列表\">¶</a>SDS API列表</h3>\n<blockquote>\n<p>待更新…</p>\n</blockquote>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/redis/redis/blob/unstable/src/sds.h#L43\">☞ SDS官方定义</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/antirez/sds\">👉🏿 Simple Dynamic Strings</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>SDS在redis中也算是用来存储string高效的做法，采用header+string的形式。</p>\n</blockquote>\n<h3 id=\"学完预期的目标\"><a class=\"header-anchor\" href=\"#学完预期的目标\">¶</a>学完预期的目标:</h3>\n<ul>\n<li>SDS 结构类型</li>\n<li>SDS 结构为何高效？</li>\n<li>创建？</li>\n<li>扩容？</li>\n<li>释放？</li>\n<li>复制？</li>\n<li>Join连接？</li>\n<li>Resize the allocation ？？</li>\n<li>其它</li>\n</ul>","more":"<h3 id=\"SDS结构\"><a class=\"header-anchor\" href=\"#SDS结构\">¶</a>SDS结构</h3>\n<blockquote>\n<p><a href=\"https://github.com/redis/redis/blob/unstable/src/sds.h#L43\">☞☞ SDS官方定义</a></p>\n</blockquote>\n<blockquote>\n<p>⚙️ 4种大小的定义，适配不同的场景需求。</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210726_112207.png\" alt=\"\"></p>\n<h3 id=\"why高效\"><a class=\"header-anchor\" href=\"#why高效\">¶</a>why高效?</h3>\n<h4 id=\"获取字符串长度：O-1\"><a class=\"header-anchor\" href=\"#获取字符串长度：O-1\">¶</a>获取字符串长度：O(1)</h4>\n<p>sds: O(1)<br>\nc字符串： O(N)</p>\n<h4 id=\"防止内存溢出\"><a class=\"header-anchor\" href=\"#防止内存溢出\">¶</a>防止内存溢出</h4>\n<p>sds: 封装好的函数，易于操作和检查<br>\nc字符串：操作不当易内存溢出</p>\n<h4 id=\"内存分配\"><a class=\"header-anchor\" href=\"#内存分配\">¶</a>内存分配</h4>\n<p>sds: 空间预分配和惰性释放<br>\nc字符串：无此特性</p>\n<h4 id=\"二进制安全\"><a class=\"header-anchor\" href=\"#二进制安全\">¶</a>二进制安全</h4>\n<p>sds: 按照二进制方式处理，因此无限制<br>\nc字符串：必须符合编码（ascii），限制c中不能保存图片和音频等</p>\n<h3 id=\"SDS-API列表\"><a class=\"header-anchor\" href=\"#SDS-API列表\">¶</a>SDS API列表</h3>\n<blockquote>\n<p>待更新…</p>\n</blockquote>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li>\n<p><a href=\"https://github.com/redis/redis/blob/unstable/src/sds.h#L43\">☞ SDS官方定义</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/antirez/sds\">👉🏿 Simple Dynamic Strings</a></p>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210726_112207.png","popularPost_tmp_gaData":{"updated":"Mon Jul 26 2021 13:09:17 GMT+0800 (中国标准时间)","title":"「44」redis-sds源码","path":"archives/9989a7c4.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210726_112207.png","excerpt":"<blockquote>\n<p>SDS在redis中也算是用来存储string高效的做法，采用header+string的形式。</p>\n</blockquote>\n<h3 id=\"学完预期的目标\"><a class=\"header-anchor\" href=\"#学完预期的目标\">¶</a>学完预期的目标:</h3>\n<ul>\n<li>SDS 结构类型</li>\n<li>SDS 结构为何高效？</li>\n<li>创建？</li>\n<li>扩容？</li>\n<li>释放？</li>\n<li>复制？</li>\n<li>Join连接？</li>\n<li>Resize the allocation ？？</li>\n<li>其它</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-04-12T15:15:43.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-04-12T15:15:43.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Redis","SDS"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":368},{"title":"「45」Go 1.17特性","date":"2021-04-17T14:10:17.000Z","updated":"2021-04-24T00:10:17.000Z","keywords":"Go,Go 1.17","mathjax":true,"abbrlink":"5549cd1","_content":"\nGo 1.17特性：\n<!--more -->\n\n##  1、「slice」 [allow conversion from slice to array ptr ](https://github.com/golang/go/issues/395)\n\n>commit: [reflect: allow conversion from slice to array ptr](https://github.com/golang/go/commit/760d3b2a16544aab553ca7ec6e6ed3bf4dc9aa3f)\n\n\n参考：\n[Go 1.17 will allow converting a slice to an array pointer (some of the time)](https://utcc.utoronto.ca/~cks/space/blog/programming/GoConvertSliceToArray)\n\n## 2、「net」  add IP.IsPrivate\n\n[👋➡️review:](https://go-review.googlesource.com/c/go/+/272668/)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_011546.png)\n\n## 3、「Test」 [add TB.Setenv](https://github.com/bynov/go/commit/0ca12fa565318f350b927e2ef94f3b4f792c75c2)\n\n>测试后还原env变量，不能用于并发测试\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012002.png)\n\n","source":"_posts/45-Go-1-17新特性.md","raw":"---\ntitle: 「45」Go 1.17特性\ndate: '2021/04/17 22:10:17'\nupdated: '2021/04/24 08:10:17'\nkeywords: 'Go,Go 1.17'\ntags:\n  - Go_1.17\n  - Day\n  - Go\nmathjax: true\nabbrlink: 5549cd1\n---\n\nGo 1.17特性：\n<!--more -->\n\n##  1、「slice」 [allow conversion from slice to array ptr ](https://github.com/golang/go/issues/395)\n\n>commit: [reflect: allow conversion from slice to array ptr](https://github.com/golang/go/commit/760d3b2a16544aab553ca7ec6e6ed3bf4dc9aa3f)\n\n\n参考：\n[Go 1.17 will allow converting a slice to an array pointer (some of the time)](https://utcc.utoronto.ca/~cks/space/blog/programming/GoConvertSliceToArray)\n\n## 2、「net」  add IP.IsPrivate\n\n[👋➡️review:](https://go-review.googlesource.com/c/go/+/272668/)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_011546.png)\n\n## 3、「Test」 [add TB.Setenv](https://github.com/bynov/go/commit/0ca12fa565318f350b927e2ef94f3b4f792c75c2)\n\n>测试后还原env变量，不能用于并发测试\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012002.png)\n\n","slug":"45-Go-1-17新特性","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5b0039zfqxgaanh9dl","content":"<p>Go 1.17特性：</p>\n<span id=\"more\"></span>\n<h2 id=\"1、「slice」-allow-conversion-from-slice-to-array-ptr\"><a class=\"header-anchor\" href=\"#1、「slice」-allow-conversion-from-slice-to-array-ptr\">¶</a>1、「slice」 <a href=\"https://github.com/golang/go/issues/395\">allow conversion from slice to array ptr </a></h2>\n<blockquote>\n<p>commit: <a href=\"https://github.com/golang/go/commit/760d3b2a16544aab553ca7ec6e6ed3bf4dc9aa3f\">reflect: allow conversion from slice to array ptr</a></p>\n</blockquote>\n<p>参考：<br>\n<a href=\"https://utcc.utoronto.ca/~cks/space/blog/programming/GoConvertSliceToArray\">Go 1.17 will allow converting a slice to an array pointer (some of the time)</a></p>\n<h2 id=\"2、「net」-add-IP-IsPrivate\"><a class=\"header-anchor\" href=\"#2、「net」-add-IP-IsPrivate\">¶</a>2、「net」  add IP.IsPrivate</h2>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/272668/\">👋➡️review:</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_011546.png\" alt=\"\"></p>\n<h2 id=\"3、「Test」-add-TB-Setenv\"><a class=\"header-anchor\" href=\"#3、「Test」-add-TB-Setenv\">¶</a>3、「Test」 <a href=\"https://github.com/bynov/go/commit/0ca12fa565318f350b927e2ef94f3b4f792c75c2\">add TB.Setenv</a></h2>\n<blockquote>\n<p>测试后还原env变量，不能用于并发测试</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012002.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"<p>Go 1.17特性：</p>","more":"<h2 id=\"1、「slice」-allow-conversion-from-slice-to-array-ptr\"><a class=\"header-anchor\" href=\"#1、「slice」-allow-conversion-from-slice-to-array-ptr\">¶</a>1、「slice」 <a href=\"https://github.com/golang/go/issues/395\">allow conversion from slice to array ptr </a></h2>\n<blockquote>\n<p>commit: <a href=\"https://github.com/golang/go/commit/760d3b2a16544aab553ca7ec6e6ed3bf4dc9aa3f\">reflect: allow conversion from slice to array ptr</a></p>\n</blockquote>\n<p>参考：<br>\n<a href=\"https://utcc.utoronto.ca/~cks/space/blog/programming/GoConvertSliceToArray\">Go 1.17 will allow converting a slice to an array pointer (some of the time)</a></p>\n<h2 id=\"2、「net」-add-IP-IsPrivate\"><a class=\"header-anchor\" href=\"#2、「net」-add-IP-IsPrivate\">¶</a>2、「net」  add IP.IsPrivate</h2>\n<p><a href=\"https://go-review.googlesource.com/c/go/+/272668/\">👋➡️review:</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_011546.png\" alt=\"\"></p>\n<h2 id=\"3、「Test」-add-TB-Setenv\"><a class=\"header-anchor\" href=\"#3、「Test」-add-TB-Setenv\">¶</a>3、「Test」 <a href=\"https://github.com/bynov/go/commit/0ca12fa565318f350b927e2ef94f3b4f792c75c2\">add TB.Setenv</a></h2>\n<blockquote>\n<p>测试后还原env变量，不能用于并发测试</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_012002.png\" alt=\"\"></p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_011546.png","popularPost_tmp_gaData":{"updated":"Sat Apr 24 2021 08:10:17 GMT+0800 (中国标准时间)","title":"「45」Go 1.17特性","path":"archives/5549cd1.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210424_011546.png","excerpt":"<p>Go 1.17特性：</p>","date":{"_isAMomentObject":true,"_i":"2021-04-17T14:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-04-17T14:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Day","Go_1.17"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":241},{"title":"「46」chan布局和设计「源码」","date":"2021-04-28T14:10:17.000Z","updated":"2021-04-29T00:10:17.000Z","keywords":"Go,chan,hchan","mathjax":true,"abbrlink":"a0547b09","_content":"\nchan在Go中很常用，平时用的不少，但是总是没用的完整，\n下来看了多次chan源码，总结记录下：\n\n### 结构方面\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png)\n\n<!--more-->\n\n### makechan方面\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/makechan.png)\n\n### chansend「c<-\"aaa\"」消息发送\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chansend.png)\n\n\n### chanrecv 「<-c」 消息消费\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chanrecv.png)\n\n### closed过程\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/closed.png)\n\n### summary\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/summary.png)\n\n### 待更...","source":"_posts/46-chan布局和设计「源码」.md","raw":"---\ntitle: 「46」chan布局和设计「源码」\ndate: '2021/04/28 22:10:17'\nupdated: '2021/04/29 08:10:17'\nkeywords: 'Go,chan,hchan'\ntags:\n  - chan\n  - Day\n  - Go\n  - Go源码\nmathjax: true\nabbrlink: a0547b09\n---\n\nchan在Go中很常用，平时用的不少，但是总是没用的完整，\n下来看了多次chan源码，总结记录下：\n\n### 结构方面\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png)\n\n<!--more-->\n\n### makechan方面\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/makechan.png)\n\n### chansend「c<-\"aaa\"」消息发送\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chansend.png)\n\n\n### chanrecv 「<-c」 消息消费\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chanrecv.png)\n\n### closed过程\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/closed.png)\n\n### summary\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/summary.png)\n\n### 待更...","slug":"46-chan布局和设计「源码」","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5c003czfqxbtf0g394","content":"<p>chan在Go中很常用，平时用的不少，但是总是没用的完整，<br>\n下来看了多次chan源码，总结记录下：</p>\n<h3 id=\"结构方面\"><a class=\"header-anchor\" href=\"#结构方面\">¶</a>结构方面</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h3 id=\"makechan方面\"><a class=\"header-anchor\" href=\"#makechan方面\">¶</a>makechan方面</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/makechan.png\" alt=\"\"></p>\n<h3 id=\"chansend「c-“aaa”」消息发送\"><a class=\"header-anchor\" href=\"#chansend「c-“aaa”」消息发送\">¶</a>chansend「c&lt;-“aaa”」消息发送</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chansend.png\" alt=\"\"></p>\n<h3 id=\"chanrecv-「-c」-消息消费\"><a class=\"header-anchor\" href=\"#chanrecv-「-c」-消息消费\">¶</a>chanrecv 「&lt;-c」 消息消费</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chanrecv.png\" alt=\"\"></p>\n<h3 id=\"closed过程\"><a class=\"header-anchor\" href=\"#closed过程\">¶</a>closed过程</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/closed.png\" alt=\"\"></p>\n<h3 id=\"summary\"><a class=\"header-anchor\" href=\"#summary\">¶</a>summary</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/summary.png\" alt=\"\"></p>\n<h3 id=\"待更…\"><a class=\"header-anchor\" href=\"#待更…\">¶</a>待更…</h3>\n","site":{"data":{}},"excerpt":"<p>chan在Go中很常用，平时用的不少，但是总是没用的完整，<br>\n下来看了多次chan源码，总结记录下：</p>\n<h3 id=\"结构方面\"><a class=\"header-anchor\" href=\"#结构方面\">¶</a>结构方面</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png\" alt=\"\"></p>","more":"<h3 id=\"makechan方面\"><a class=\"header-anchor\" href=\"#makechan方面\">¶</a>makechan方面</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/makechan.png\" alt=\"\"></p>\n<h3 id=\"chansend「c-“aaa”」消息发送\"><a class=\"header-anchor\" href=\"#chansend「c-“aaa”」消息发送\">¶</a>chansend「c&lt;-“aaa”」消息发送</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chansend.png\" alt=\"\"></p>\n<h3 id=\"chanrecv-「-c」-消息消费\"><a class=\"header-anchor\" href=\"#chanrecv-「-c」-消息消费\">¶</a>chanrecv 「&lt;-c」 消息消费</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/chanrecv.png\" alt=\"\"></p>\n<h3 id=\"closed过程\"><a class=\"header-anchor\" href=\"#closed过程\">¶</a>closed过程</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/closed.png\" alt=\"\"></p>\n<h3 id=\"summary\"><a class=\"header-anchor\" href=\"#summary\">¶</a>summary</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/summary.png\" alt=\"\"></p>\n<h3 id=\"待更…\"><a class=\"header-anchor\" href=\"#待更…\">¶</a>待更…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png","popularPost_tmp_gaData":{"updated":"Thu Apr 29 2021 08:10:17 GMT+0800 (中国标准时间)","title":"「46」chan布局和设计「源码」","path":"archives/a0547b09.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png","excerpt":"<p>chan在Go中很常用，平时用的不少，但是总是没用的完整，<br>\n下来看了多次chan源码，总结记录下：</p>\n<h3 id=\"结构方面\"><a class=\"header-anchor\" href=\"#结构方面\">¶</a>结构方面</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/Canvas%201.png\" alt=\"\"></p>","date":{"_isAMomentObject":true,"_i":"2021-04-28T14:10:17.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-04-28T14:10:17.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Day","chan"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":132},{"title":"「47」GPM main启动","date":"2021-05-05T13:32:25.000Z","updated":"2021-05-06T12:33:17.000Z","keywords":"Go,GPM,G0,M0","mathjax":true,"abbrlink":"66b6223a","_content":"\n\n之前扯过GPM的[g0和m0关系](https://blog.imrcrab.com/archives/392d66f0.html)和[main函数入口](https://blog.imrcrab.com/archives/9bb71eca.html)的一些相关信息。\n\n\n多次看go mian函数的启动流程，多次分析，多次理解，关注点和结论各有不同，以此记录。\n\n\n\n### [👋入口](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22)：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png)\n\n\n<!--more-->\n\n### 搞一个简单的main函数看下汇编：\n\n#### Main函数\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n\n```\n\n#### 汇编结果\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_111747.png)\n\n\n### 大体流程：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_013950.png)\n\n### 汇编代码定义：\n\n* 全局：[👉🏻](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L236)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_112649.png)\n\n* 入口：[👉🏻](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_122959.png)\n\n\n### rt0_go函数：\n\n```go\nTEXT runtime·rt0_go(SB),NOSPLIT|TOPFRAME,$0\n\t// copy arguments forward on an even stack\n\tMOVQ\tDI, AX\t\t// argc\n\tMOVQ\tSI, BX\t\t// argv\n\tSUBQ\t$(4*8+7), SP\t\t// 2args 2auto\n\tANDQ\t$~15, SP\n\tMOVQ\tAX, 16(SP)\n\tMOVQ\tBX, 24(SP)\n\n    // 创建操作系统stack\n\t// create istack out of the given (operating system) stack.\n\t// _cgo_init may update stackguard.\n\tMOVQ\t$runtime·g0(SB), DI\n\tLEAQ\t(-64*1024+104)(SP), BX\n\tMOVQ\tBX, g_stackguard0(DI)\n\tMOVQ\tBX, g_stackguard1(DI)\n\tMOVQ\tBX, (g_stack+stack_lo)(DI)\n\tMOVQ\tSP, (g_stack+stack_hi)(DI)\n\n\t// find out information about the processor we're on\n\tMOVL\t$0, AX\n\tCPUID\n\tMOVL\tAX, SI\n\tCMPL\tAX, $0\n\tJE\tnocpuinfo\n\n    // 序列化选择\n\t// Figure out how to serialize RDTSC.\n\t// On Intel processors LFENCE is enough. AMD requires MFENCE.\n\t// Don't know about the rest, so let's do MFENCE.\n\tCMPL\tBX, $0x756E6547  // \"Genu\"\n\tJNE\tnotintel\n\tCMPL\tDX, $0x49656E69  // \"ineI\"\n\tJNE\tnotintel\n\tCMPL\tCX, $0x6C65746E  // \"ntel\"\n\tJNE\tnotintel\n\tMOVB\t$1, runtime·isIntel(SB)\n\tMOVB\t$1, runtime·lfenceBeforeRdtsc(SB)\nnotintel:\n\n\t// Load EAX=1 cpuid flags\n\tMOVL\t$1, AX\n\tCPUID\n\tMOVL\tAX, runtime·processorVersionInfo(SB)\n\nnocpuinfo:\n\t// if there is an _cgo_init, call it.\n\tMOVQ\t_cgo_init(SB), AX\n\tTESTQ\tAX, AX\n\tJZ\tneedtls\n\t// arg 1: g0, already in DI\n\tMOVQ\t$setg_gcc<>(SB), SI // arg 2: setg_gcc\n#ifdef GOOS_android\n\tMOVQ\t$runtime·tls_g(SB), DX \t// arg 3: &tls_g\n\t// arg 4: TLS base, stored in slot 0 (Android's TLS_SLOT_SELF).\n\t// Compensate for tls_g (+16).\n\tMOVQ\t-16(TLS), CX\n#else\n\tMOVQ\t$0, DX\t// arg 3, 4: not used when using platform's TLS\n\tMOVQ\t$0, CX\n#endif\n#ifdef GOOS_windows\n\t// Adjust for the Win64 calling convention.\n\tMOVQ\tCX, R9 // arg 4\n\tMOVQ\tDX, R8 // arg 3\n\tMOVQ\tSI, DX // arg 2\n\tMOVQ\tDI, CX // arg 1\n#endif\n\tCALL\tAX\n\n\t// update stackguard after _cgo_init\n\tMOVQ\t$runtime·g0(SB), CX\n\tMOVQ\t(g_stack+stack_lo)(CX), AX\n\tADDQ\t$const__StackGuard, AX\n\tMOVQ\tAX, g_stackguard0(CX)\n\tMOVQ\tAX, g_stackguard1(CX)\n\n#ifndef GOOS_windows\n\tJMP ok\n#endif\nneedtls:\n#ifdef GOOS_plan9\n\t// skip TLS setup on Plan 9\n\tJMP ok\n#endif\n#ifdef GOOS_solaris\n\t// skip TLS setup on Solaris\n\tJMP ok\n#endif\n#ifdef GOOS_illumos\n\t// skip TLS setup on illumos\n\tJMP ok\n#endif\n#ifdef GOOS_darwin\n\t// skip TLS setup on Darwin\n\tJMP ok\n#endif\n#ifdef GOOS_openbsd\n\t// skip TLS setup on OpenBSD\n\tJMP ok\n#endif\n\n\tLEAQ\truntime·m0+m_tls(SB), DI\n\tCALL\truntime·settls(SB)\n\n    // tls设置\n\t// store through it, to make sure it works\n\tget_tls(BX)\n\tMOVQ\t$0x123, g(BX)\n\tMOVQ\truntime·m0+m_tls(SB), AX\n\tCMPQ\tAX, $0x123\n\tJEQ 2(PC)\n\tCALL\truntime·abort(SB)\nok:\n\t// set the per-goroutine and per-mach \"registers\"\n\tget_tls(BX)\n\tLEAQ\truntime·g0(SB), CX\n\tMOVQ\tCX, g(BX)\n\tLEAQ\truntime·m0(SB), AX\n\n    // m.g0绑定一个g0\n\t// save m->g0 = g0\n\tMOVQ\tCX, m_g0(AX)\n    // g0绑定m0\n\t// save m0 to g0->m\n\tMOVQ\tAX, g_m(CX)\n\n\tCLD\t\t\t\t// convention is D is always left cleared\n\tCALL\truntime·check(SB)\n\n\tMOVL\t16(SP), AX\t\t// copy argc\n\tMOVL\tAX, 0(SP)\n\tMOVQ\t24(SP), AX\t\t// copy argv\n\tMOVQ\tAX, 8(SP)\n    // 参数初始化\n\tCALL\truntime·args(SB)\n    // 系统初始化\n\tCALL\truntime·osinit(SB)\n    // 调度任务初始化，具体逻辑下面有提到\n\tCALL\truntime·schedinit(SB)\n\n    // 创建第一个g，用于启动程序\n\t// create a new goroutine to start program\n\tMOVQ\t$runtime·mainPC(SB), AX\t\t// entry\n\tPUSHQ\tAX\n\tPUSHQ\t$0\t\t\t// arg size\n\tCALL\truntime·newproc(SB)\n\tPOPQ\tAX\n\tPOPQ\tAX\n\n\t// start this M\n    //  启动M\n\tCALL\truntime·mstart(SB)\n\n\tCALL\truntime·abort(SB)\t// mstart should never return\n\tRET\n\n\t// Prevent dead-code elimination of debugCallV2, which is\n\t// intended to be called by debuggers.\n\tMOVQ\t$runtime·debugCallV2<ABIInternal>(SB), AX\n\tRET\n\n```\n\n### ➡️➡️[👋mstart作用](https://blog.imrcrab.com/archives/392d66f0.html#mstart)\n\n\n\n\n\n### END","source":"_posts/47-GMP-main启动.md","raw":"---\ntitle: 「47」GPM main启动\ndate: '2021/05/05 21:32:25'\nupdated: '2021/05/06 20:33:17'\nkeywords: 'Go,GPM,G0,M0'\ntags:\n  - GPM\n  - Day\n  - Go\n  - Go源码\nmathjax: true\nabbrlink: 66b6223a\n---\n\n\n之前扯过GPM的[g0和m0关系](https://blog.imrcrab.com/archives/392d66f0.html)和[main函数入口](https://blog.imrcrab.com/archives/9bb71eca.html)的一些相关信息。\n\n\n多次看go mian函数的启动流程，多次分析，多次理解，关注点和结论各有不同，以此记录。\n\n\n\n### [👋入口](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22)：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png)\n\n\n<!--more-->\n\n### 搞一个简单的main函数看下汇编：\n\n#### Main函数\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello world\")\n}\n\n```\n\n#### 汇编结果\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_111747.png)\n\n\n### 大体流程：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_013950.png)\n\n### 汇编代码定义：\n\n* 全局：[👉🏻](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L236)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_112649.png)\n\n* 入口：[👉🏻](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_122959.png)\n\n\n### rt0_go函数：\n\n```go\nTEXT runtime·rt0_go(SB),NOSPLIT|TOPFRAME,$0\n\t// copy arguments forward on an even stack\n\tMOVQ\tDI, AX\t\t// argc\n\tMOVQ\tSI, BX\t\t// argv\n\tSUBQ\t$(4*8+7), SP\t\t// 2args 2auto\n\tANDQ\t$~15, SP\n\tMOVQ\tAX, 16(SP)\n\tMOVQ\tBX, 24(SP)\n\n    // 创建操作系统stack\n\t// create istack out of the given (operating system) stack.\n\t// _cgo_init may update stackguard.\n\tMOVQ\t$runtime·g0(SB), DI\n\tLEAQ\t(-64*1024+104)(SP), BX\n\tMOVQ\tBX, g_stackguard0(DI)\n\tMOVQ\tBX, g_stackguard1(DI)\n\tMOVQ\tBX, (g_stack+stack_lo)(DI)\n\tMOVQ\tSP, (g_stack+stack_hi)(DI)\n\n\t// find out information about the processor we're on\n\tMOVL\t$0, AX\n\tCPUID\n\tMOVL\tAX, SI\n\tCMPL\tAX, $0\n\tJE\tnocpuinfo\n\n    // 序列化选择\n\t// Figure out how to serialize RDTSC.\n\t// On Intel processors LFENCE is enough. AMD requires MFENCE.\n\t// Don't know about the rest, so let's do MFENCE.\n\tCMPL\tBX, $0x756E6547  // \"Genu\"\n\tJNE\tnotintel\n\tCMPL\tDX, $0x49656E69  // \"ineI\"\n\tJNE\tnotintel\n\tCMPL\tCX, $0x6C65746E  // \"ntel\"\n\tJNE\tnotintel\n\tMOVB\t$1, runtime·isIntel(SB)\n\tMOVB\t$1, runtime·lfenceBeforeRdtsc(SB)\nnotintel:\n\n\t// Load EAX=1 cpuid flags\n\tMOVL\t$1, AX\n\tCPUID\n\tMOVL\tAX, runtime·processorVersionInfo(SB)\n\nnocpuinfo:\n\t// if there is an _cgo_init, call it.\n\tMOVQ\t_cgo_init(SB), AX\n\tTESTQ\tAX, AX\n\tJZ\tneedtls\n\t// arg 1: g0, already in DI\n\tMOVQ\t$setg_gcc<>(SB), SI // arg 2: setg_gcc\n#ifdef GOOS_android\n\tMOVQ\t$runtime·tls_g(SB), DX \t// arg 3: &tls_g\n\t// arg 4: TLS base, stored in slot 0 (Android's TLS_SLOT_SELF).\n\t// Compensate for tls_g (+16).\n\tMOVQ\t-16(TLS), CX\n#else\n\tMOVQ\t$0, DX\t// arg 3, 4: not used when using platform's TLS\n\tMOVQ\t$0, CX\n#endif\n#ifdef GOOS_windows\n\t// Adjust for the Win64 calling convention.\n\tMOVQ\tCX, R9 // arg 4\n\tMOVQ\tDX, R8 // arg 3\n\tMOVQ\tSI, DX // arg 2\n\tMOVQ\tDI, CX // arg 1\n#endif\n\tCALL\tAX\n\n\t// update stackguard after _cgo_init\n\tMOVQ\t$runtime·g0(SB), CX\n\tMOVQ\t(g_stack+stack_lo)(CX), AX\n\tADDQ\t$const__StackGuard, AX\n\tMOVQ\tAX, g_stackguard0(CX)\n\tMOVQ\tAX, g_stackguard1(CX)\n\n#ifndef GOOS_windows\n\tJMP ok\n#endif\nneedtls:\n#ifdef GOOS_plan9\n\t// skip TLS setup on Plan 9\n\tJMP ok\n#endif\n#ifdef GOOS_solaris\n\t// skip TLS setup on Solaris\n\tJMP ok\n#endif\n#ifdef GOOS_illumos\n\t// skip TLS setup on illumos\n\tJMP ok\n#endif\n#ifdef GOOS_darwin\n\t// skip TLS setup on Darwin\n\tJMP ok\n#endif\n#ifdef GOOS_openbsd\n\t// skip TLS setup on OpenBSD\n\tJMP ok\n#endif\n\n\tLEAQ\truntime·m0+m_tls(SB), DI\n\tCALL\truntime·settls(SB)\n\n    // tls设置\n\t// store through it, to make sure it works\n\tget_tls(BX)\n\tMOVQ\t$0x123, g(BX)\n\tMOVQ\truntime·m0+m_tls(SB), AX\n\tCMPQ\tAX, $0x123\n\tJEQ 2(PC)\n\tCALL\truntime·abort(SB)\nok:\n\t// set the per-goroutine and per-mach \"registers\"\n\tget_tls(BX)\n\tLEAQ\truntime·g0(SB), CX\n\tMOVQ\tCX, g(BX)\n\tLEAQ\truntime·m0(SB), AX\n\n    // m.g0绑定一个g0\n\t// save m->g0 = g0\n\tMOVQ\tCX, m_g0(AX)\n    // g0绑定m0\n\t// save m0 to g0->m\n\tMOVQ\tAX, g_m(CX)\n\n\tCLD\t\t\t\t// convention is D is always left cleared\n\tCALL\truntime·check(SB)\n\n\tMOVL\t16(SP), AX\t\t// copy argc\n\tMOVL\tAX, 0(SP)\n\tMOVQ\t24(SP), AX\t\t// copy argv\n\tMOVQ\tAX, 8(SP)\n    // 参数初始化\n\tCALL\truntime·args(SB)\n    // 系统初始化\n\tCALL\truntime·osinit(SB)\n    // 调度任务初始化，具体逻辑下面有提到\n\tCALL\truntime·schedinit(SB)\n\n    // 创建第一个g，用于启动程序\n\t// create a new goroutine to start program\n\tMOVQ\t$runtime·mainPC(SB), AX\t\t// entry\n\tPUSHQ\tAX\n\tPUSHQ\t$0\t\t\t// arg size\n\tCALL\truntime·newproc(SB)\n\tPOPQ\tAX\n\tPOPQ\tAX\n\n\t// start this M\n    //  启动M\n\tCALL\truntime·mstart(SB)\n\n\tCALL\truntime·abort(SB)\t// mstart should never return\n\tRET\n\n\t// Prevent dead-code elimination of debugCallV2, which is\n\t// intended to be called by debuggers.\n\tMOVQ\t$runtime·debugCallV2<ABIInternal>(SB), AX\n\tRET\n\n```\n\n### ➡️➡️[👋mstart作用](https://blog.imrcrab.com/archives/392d66f0.html#mstart)\n\n\n\n\n\n### END","slug":"47-GMP-main启动","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5d003ezfqxeg628vwa","content":"<p>之前扯过GPM的<a href=\"https://blog.imrcrab.com/archives/392d66f0.html\">g0和m0关系</a>和<a href=\"https://blog.imrcrab.com/archives/9bb71eca.html\">main函数入口</a>的一些相关信息。</p>\n<p>多次看go mian函数的启动流程，多次分析，多次理解，关注点和结论各有不同，以此记录。</p>\n<h3 id=\"👋入口：\"><a class=\"header-anchor\" href=\"#👋入口：\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22\">👋入口</a>：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h3 id=\"搞一个简单的main函数看下汇编：\"><a class=\"header-anchor\" href=\"#搞一个简单的main函数看下汇编：\">¶</a>搞一个简单的main函数看下汇编：</h3>\n<h4 id=\"Main函数\"><a class=\"header-anchor\" href=\"#Main函数\">¶</a>Main函数</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"汇编结果\"><a class=\"header-anchor\" href=\"#汇编结果\">¶</a>汇编结果</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_111747.png\" alt=\"\"></p>\n<h3 id=\"大体流程：\"><a class=\"header-anchor\" href=\"#大体流程：\">¶</a>大体流程：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_013950.png\" alt=\"\"></p>\n<h3 id=\"汇编代码定义：\"><a class=\"header-anchor\" href=\"#汇编代码定义：\">¶</a>汇编代码定义：</h3>\n<ul>\n<li>全局：<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L236\">👉🏻</a></li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_112649.png\" alt=\"\"></p>\n<ul>\n<li>入口：<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22\">👉🏻</a></li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_122959.png\" alt=\"\"></p>\n<h3 id=\"rt0-go函数：\"><a class=\"header-anchor\" href=\"#rt0-go函数：\">¶</a>rt0_go函数：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·rt0_go(SB),NOSPLIT|TOPFRAME,$<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// copy arguments forward on an even stack</span></span><br><span class=\"line\">\tMOVQ\tDI, AX\t\t<span class=\"comment\">// argc</span></span><br><span class=\"line\">\tMOVQ\tSI, BX\t\t<span class=\"comment\">// argv</span></span><br><span class=\"line\">\tSUBQ\t$(<span class=\"number\">4</span>*<span class=\"number\">8</span>+<span class=\"number\">7</span>), SP\t\t<span class=\"comment\">// 2args 2auto</span></span><br><span class=\"line\">\tANDQ\t$~<span class=\"number\">15</span>, SP</span><br><span class=\"line\">\tMOVQ\tAX, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">\tMOVQ\tBX, <span class=\"number\">24</span>(SP)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建操作系统stack</span></span><br><span class=\"line\">\t<span class=\"comment\">// create istack out of the given (operating system) stack.</span></span><br><span class=\"line\">\t<span class=\"comment\">// _cgo_init may update stackguard.</span></span><br><span class=\"line\">\tMOVQ\t$runtime·g0(SB), DI</span><br><span class=\"line\">\tLEAQ\t(<span class=\"number\">-64</span>*<span class=\"number\">1024</span>+<span class=\"number\">104</span>)(SP), BX</span><br><span class=\"line\">\tMOVQ\tBX, g_stackguard0(DI)</span><br><span class=\"line\">\tMOVQ\tBX, g_stackguard1(DI)</span><br><span class=\"line\">\tMOVQ\tBX, (g_stack+stack_lo)(DI)</span><br><span class=\"line\">\tMOVQ\tSP, (g_stack+stack_hi)(DI)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// find out information about the processor we&#x27;re on</span></span><br><span class=\"line\">\tMOVL\t$<span class=\"number\">0</span>, AX</span><br><span class=\"line\">\tCPUID</span><br><span class=\"line\">\tMOVL\tAX, SI</span><br><span class=\"line\">\tCMPL\tAX, $<span class=\"number\">0</span></span><br><span class=\"line\">\tJE\tnocpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 序列化选择</span></span><br><span class=\"line\">\t<span class=\"comment\">// Figure out how to serialize RDTSC.</span></span><br><span class=\"line\">\t<span class=\"comment\">// On Intel processors LFENCE is enough. AMD requires MFENCE.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Don&#x27;t know about the rest, so let&#x27;s do MFENCE.</span></span><br><span class=\"line\">\tCMPL\tBX, $<span class=\"number\">0x756E6547</span>  <span class=\"comment\">// &quot;Genu&quot;</span></span><br><span class=\"line\">\tJNE\tnotintel</span><br><span class=\"line\">\tCMPL\tDX, $<span class=\"number\">0x49656E69</span>  <span class=\"comment\">// &quot;ineI&quot;</span></span><br><span class=\"line\">\tJNE\tnotintel</span><br><span class=\"line\">\tCMPL\tCX, $<span class=\"number\">0x6C65746E</span>  <span class=\"comment\">// &quot;ntel&quot;</span></span><br><span class=\"line\">\tJNE\tnotintel</span><br><span class=\"line\">\tMOVB\t$<span class=\"number\">1</span>, runtime·isIntel(SB)</span><br><span class=\"line\">\tMOVB\t$<span class=\"number\">1</span>, runtime·lfenceBeforeRdtsc(SB)</span><br><span class=\"line\">notintel:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Load EAX=1 cpuid flags</span></span><br><span class=\"line\">\tMOVL\t$<span class=\"number\">1</span>, AX</span><br><span class=\"line\">\tCPUID</span><br><span class=\"line\">\tMOVL\tAX, runtime·processorVersionInfo(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">nocpuinfo:</span><br><span class=\"line\">\t<span class=\"comment\">// if there is an _cgo_init, call it.</span></span><br><span class=\"line\">\tMOVQ\t_cgo_init(SB), AX</span><br><span class=\"line\">\tTESTQ\tAX, AX</span><br><span class=\"line\">\tJZ\tneedtls</span><br><span class=\"line\">\t<span class=\"comment\">// arg 1: g0, already in DI</span></span><br><span class=\"line\">\tMOVQ\t$setg_gcc&lt;&gt;(SB), SI <span class=\"comment\">// arg 2: setg_gcc</span></span><br><span class=\"line\">#ifdef GOOS_android</span><br><span class=\"line\">\tMOVQ\t$runtime·tls_g(SB), DX \t<span class=\"comment\">// arg 3: &amp;tls_g</span></span><br><span class=\"line\">\t<span class=\"comment\">// arg 4: TLS base, stored in slot 0 (Android&#x27;s TLS_SLOT_SELF).</span></span><br><span class=\"line\">\t<span class=\"comment\">// Compensate for tls_g (+16).</span></span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">-16</span>(TLS), CX</span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\">\tMOVQ\t$<span class=\"number\">0</span>, DX\t<span class=\"comment\">// arg 3, 4: not used when using platform&#x27;s TLS</span></span><br><span class=\"line\">\tMOVQ\t$<span class=\"number\">0</span>, CX</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_windows</span><br><span class=\"line\">\t<span class=\"comment\">// Adjust for the Win64 calling convention.</span></span><br><span class=\"line\">\tMOVQ\tCX, R9 <span class=\"comment\">// arg 4</span></span><br><span class=\"line\">\tMOVQ\tDX, R8 <span class=\"comment\">// arg 3</span></span><br><span class=\"line\">\tMOVQ\tSI, DX <span class=\"comment\">// arg 2</span></span><br><span class=\"line\">\tMOVQ\tDI, CX <span class=\"comment\">// arg 1</span></span><br><span class=\"line\">#endif</span><br><span class=\"line\">\tCALL\tAX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// update stackguard after _cgo_init</span></span><br><span class=\"line\">\tMOVQ\t$runtime·g0(SB), CX</span><br><span class=\"line\">\tMOVQ\t(g_stack+stack_lo)(CX), AX</span><br><span class=\"line\">\tADDQ\t$const__StackGuard, AX</span><br><span class=\"line\">\tMOVQ\tAX, g_stackguard0(CX)</span><br><span class=\"line\">\tMOVQ\tAX, g_stackguard1(CX)</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef GOOS_windows</span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">needtls:</span><br><span class=\"line\">#ifdef GOOS_plan9</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on Plan 9</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_solaris</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on Solaris</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_illumos</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on illumos</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_darwin</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on Darwin</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_openbsd</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on OpenBSD</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">\tLEAQ\truntime·m0+m_tls(SB), DI</span><br><span class=\"line\">\tCALL\truntime·settls(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// tls设置</span></span><br><span class=\"line\">\t<span class=\"comment\">// store through it, to make sure it works</span></span><br><span class=\"line\">\tget_tls(BX)</span><br><span class=\"line\">\tMOVQ\t$<span class=\"number\">0x123</span>, g(BX)</span><br><span class=\"line\">\tMOVQ\truntime·m0+m_tls(SB), AX</span><br><span class=\"line\">\tCMPQ\tAX, $<span class=\"number\">0x123</span></span><br><span class=\"line\">\tJEQ <span class=\"number\">2</span>(PC)</span><br><span class=\"line\">\tCALL\truntime·abort(SB)</span><br><span class=\"line\">ok:</span><br><span class=\"line\">\t<span class=\"comment\">// set the per-goroutine and per-mach &quot;registers&quot;</span></span><br><span class=\"line\">\tget_tls(BX)</span><br><span class=\"line\">\tLEAQ\truntime·g0(SB), CX</span><br><span class=\"line\">\tMOVQ\tCX, g(BX)</span><br><span class=\"line\">\tLEAQ\truntime·m0(SB), AX</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// m.g0绑定一个g0</span></span><br><span class=\"line\">\t<span class=\"comment\">// save m-&gt;g0 = g0</span></span><br><span class=\"line\">\tMOVQ\tCX, m_g0(AX)</span><br><span class=\"line\">    <span class=\"comment\">// g0绑定m0</span></span><br><span class=\"line\">\t<span class=\"comment\">// save m0 to g0-&gt;m</span></span><br><span class=\"line\">\tMOVQ\tAX, g_m(CX)</span><br><span class=\"line\"></span><br><span class=\"line\">\tCLD\t\t\t\t<span class=\"comment\">// convention is D is always left cleared</span></span><br><span class=\"line\">\tCALL\truntime·check(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVL\t<span class=\"number\">16</span>(SP), AX\t\t<span class=\"comment\">// copy argc</span></span><br><span class=\"line\">\tMOVL\tAX, <span class=\"number\">0</span>(SP)</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">24</span>(SP), AX\t\t<span class=\"comment\">// copy argv</span></span><br><span class=\"line\">\tMOVQ\tAX, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">    <span class=\"comment\">// 参数初始化</span></span><br><span class=\"line\">\tCALL\truntime·args(SB)</span><br><span class=\"line\">    <span class=\"comment\">// 系统初始化</span></span><br><span class=\"line\">\tCALL\truntime·osinit(SB)</span><br><span class=\"line\">    <span class=\"comment\">// 调度任务初始化，具体逻辑下面有提到</span></span><br><span class=\"line\">\tCALL\truntime·schedinit(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建第一个g，用于启动程序</span></span><br><span class=\"line\">\t<span class=\"comment\">// create a new goroutine to start program</span></span><br><span class=\"line\">\tMOVQ\t$runtime·mainPC(SB), AX\t\t<span class=\"comment\">// entry</span></span><br><span class=\"line\">\tPUSHQ\tAX</span><br><span class=\"line\">\tPUSHQ\t$<span class=\"number\">0</span>\t\t\t<span class=\"comment\">// arg size</span></span><br><span class=\"line\">\tCALL\truntime·newproc(SB)</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// start this M</span></span><br><span class=\"line\">    <span class=\"comment\">//  启动M</span></span><br><span class=\"line\">\tCALL\truntime·mstart(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\tCALL\truntime·abort(SB)\t<span class=\"comment\">// mstart should never return</span></span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prevent dead-code elimination of debugCallV2, which is</span></span><br><span class=\"line\">\t<span class=\"comment\">// intended to be called by debuggers.</span></span><br><span class=\"line\">\tMOVQ\t$runtime·debugCallV2&lt;ABIInternal&gt;(SB), AX</span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"➡️➡️👋mstart作用\"><a class=\"header-anchor\" href=\"#➡️➡️👋mstart作用\">¶</a>➡️➡️<a href=\"https://blog.imrcrab.com/archives/392d66f0.html#mstart\">👋mstart作用</a></h3>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>之前扯过GPM的<a href=\"https://blog.imrcrab.com/archives/392d66f0.html\">g0和m0关系</a>和<a href=\"https://blog.imrcrab.com/archives/9bb71eca.html\">main函数入口</a>的一些相关信息。</p>\n<p>多次看go mian函数的启动流程，多次分析，多次理解，关注点和结论各有不同，以此记录。</p>\n<h3 id=\"👋入口：\"><a class=\"header-anchor\" href=\"#👋入口：\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22\">👋入口</a>：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png\" alt=\"\"></p>","more":"<h3 id=\"搞一个简单的main函数看下汇编：\"><a class=\"header-anchor\" href=\"#搞一个简单的main函数看下汇编：\">¶</a>搞一个简单的main函数看下汇编：</h3>\n<h4 id=\"Main函数\"><a class=\"header-anchor\" href=\"#Main函数\">¶</a>Main函数</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"汇编结果\"><a class=\"header-anchor\" href=\"#汇编结果\">¶</a>汇编结果</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_111747.png\" alt=\"\"></p>\n<h3 id=\"大体流程：\"><a class=\"header-anchor\" href=\"#大体流程：\">¶</a>大体流程：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_013950.png\" alt=\"\"></p>\n<h3 id=\"汇编代码定义：\"><a class=\"header-anchor\" href=\"#汇编代码定义：\">¶</a>汇编代码定义：</h3>\n<ul>\n<li>全局：<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L236\">👉🏻</a></li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_112649.png\" alt=\"\"></p>\n<ul>\n<li>入口：<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22\">👉🏻</a></li>\n</ul>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_122959.png\" alt=\"\"></p>\n<h3 id=\"rt0-go函数：\"><a class=\"header-anchor\" href=\"#rt0-go函数：\">¶</a>rt0_go函数：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TEXT runtime·rt0_go(SB),NOSPLIT|TOPFRAME,$<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"comment\">// copy arguments forward on an even stack</span></span><br><span class=\"line\">\tMOVQ\tDI, AX\t\t<span class=\"comment\">// argc</span></span><br><span class=\"line\">\tMOVQ\tSI, BX\t\t<span class=\"comment\">// argv</span></span><br><span class=\"line\">\tSUBQ\t$(<span class=\"number\">4</span>*<span class=\"number\">8</span>+<span class=\"number\">7</span>), SP\t\t<span class=\"comment\">// 2args 2auto</span></span><br><span class=\"line\">\tANDQ\t$~<span class=\"number\">15</span>, SP</span><br><span class=\"line\">\tMOVQ\tAX, <span class=\"number\">16</span>(SP)</span><br><span class=\"line\">\tMOVQ\tBX, <span class=\"number\">24</span>(SP)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建操作系统stack</span></span><br><span class=\"line\">\t<span class=\"comment\">// create istack out of the given (operating system) stack.</span></span><br><span class=\"line\">\t<span class=\"comment\">// _cgo_init may update stackguard.</span></span><br><span class=\"line\">\tMOVQ\t$runtime·g0(SB), DI</span><br><span class=\"line\">\tLEAQ\t(<span class=\"number\">-64</span>*<span class=\"number\">1024</span>+<span class=\"number\">104</span>)(SP), BX</span><br><span class=\"line\">\tMOVQ\tBX, g_stackguard0(DI)</span><br><span class=\"line\">\tMOVQ\tBX, g_stackguard1(DI)</span><br><span class=\"line\">\tMOVQ\tBX, (g_stack+stack_lo)(DI)</span><br><span class=\"line\">\tMOVQ\tSP, (g_stack+stack_hi)(DI)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// find out information about the processor we&#x27;re on</span></span><br><span class=\"line\">\tMOVL\t$<span class=\"number\">0</span>, AX</span><br><span class=\"line\">\tCPUID</span><br><span class=\"line\">\tMOVL\tAX, SI</span><br><span class=\"line\">\tCMPL\tAX, $<span class=\"number\">0</span></span><br><span class=\"line\">\tJE\tnocpuinfo</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 序列化选择</span></span><br><span class=\"line\">\t<span class=\"comment\">// Figure out how to serialize RDTSC.</span></span><br><span class=\"line\">\t<span class=\"comment\">// On Intel processors LFENCE is enough. AMD requires MFENCE.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Don&#x27;t know about the rest, so let&#x27;s do MFENCE.</span></span><br><span class=\"line\">\tCMPL\tBX, $<span class=\"number\">0x756E6547</span>  <span class=\"comment\">// &quot;Genu&quot;</span></span><br><span class=\"line\">\tJNE\tnotintel</span><br><span class=\"line\">\tCMPL\tDX, $<span class=\"number\">0x49656E69</span>  <span class=\"comment\">// &quot;ineI&quot;</span></span><br><span class=\"line\">\tJNE\tnotintel</span><br><span class=\"line\">\tCMPL\tCX, $<span class=\"number\">0x6C65746E</span>  <span class=\"comment\">// &quot;ntel&quot;</span></span><br><span class=\"line\">\tJNE\tnotintel</span><br><span class=\"line\">\tMOVB\t$<span class=\"number\">1</span>, runtime·isIntel(SB)</span><br><span class=\"line\">\tMOVB\t$<span class=\"number\">1</span>, runtime·lfenceBeforeRdtsc(SB)</span><br><span class=\"line\">notintel:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Load EAX=1 cpuid flags</span></span><br><span class=\"line\">\tMOVL\t$<span class=\"number\">1</span>, AX</span><br><span class=\"line\">\tCPUID</span><br><span class=\"line\">\tMOVL\tAX, runtime·processorVersionInfo(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">nocpuinfo:</span><br><span class=\"line\">\t<span class=\"comment\">// if there is an _cgo_init, call it.</span></span><br><span class=\"line\">\tMOVQ\t_cgo_init(SB), AX</span><br><span class=\"line\">\tTESTQ\tAX, AX</span><br><span class=\"line\">\tJZ\tneedtls</span><br><span class=\"line\">\t<span class=\"comment\">// arg 1: g0, already in DI</span></span><br><span class=\"line\">\tMOVQ\t$setg_gcc&lt;&gt;(SB), SI <span class=\"comment\">// arg 2: setg_gcc</span></span><br><span class=\"line\">#ifdef GOOS_android</span><br><span class=\"line\">\tMOVQ\t$runtime·tls_g(SB), DX \t<span class=\"comment\">// arg 3: &amp;tls_g</span></span><br><span class=\"line\">\t<span class=\"comment\">// arg 4: TLS base, stored in slot 0 (Android&#x27;s TLS_SLOT_SELF).</span></span><br><span class=\"line\">\t<span class=\"comment\">// Compensate for tls_g (+16).</span></span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">-16</span>(TLS), CX</span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\">\tMOVQ\t$<span class=\"number\">0</span>, DX\t<span class=\"comment\">// arg 3, 4: not used when using platform&#x27;s TLS</span></span><br><span class=\"line\">\tMOVQ\t$<span class=\"number\">0</span>, CX</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_windows</span><br><span class=\"line\">\t<span class=\"comment\">// Adjust for the Win64 calling convention.</span></span><br><span class=\"line\">\tMOVQ\tCX, R9 <span class=\"comment\">// arg 4</span></span><br><span class=\"line\">\tMOVQ\tDX, R8 <span class=\"comment\">// arg 3</span></span><br><span class=\"line\">\tMOVQ\tSI, DX <span class=\"comment\">// arg 2</span></span><br><span class=\"line\">\tMOVQ\tDI, CX <span class=\"comment\">// arg 1</span></span><br><span class=\"line\">#endif</span><br><span class=\"line\">\tCALL\tAX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// update stackguard after _cgo_init</span></span><br><span class=\"line\">\tMOVQ\t$runtime·g0(SB), CX</span><br><span class=\"line\">\tMOVQ\t(g_stack+stack_lo)(CX), AX</span><br><span class=\"line\">\tADDQ\t$const__StackGuard, AX</span><br><span class=\"line\">\tMOVQ\tAX, g_stackguard0(CX)</span><br><span class=\"line\">\tMOVQ\tAX, g_stackguard1(CX)</span><br><span class=\"line\"></span><br><span class=\"line\">#ifndef GOOS_windows</span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">needtls:</span><br><span class=\"line\">#ifdef GOOS_plan9</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on Plan 9</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_solaris</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on Solaris</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_illumos</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on illumos</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_darwin</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on Darwin</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\">#ifdef GOOS_openbsd</span><br><span class=\"line\">\t<span class=\"comment\">// skip TLS setup on OpenBSD</span></span><br><span class=\"line\">\tJMP ok</span><br><span class=\"line\">#endif</span><br><span class=\"line\"></span><br><span class=\"line\">\tLEAQ\truntime·m0+m_tls(SB), DI</span><br><span class=\"line\">\tCALL\truntime·settls(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// tls设置</span></span><br><span class=\"line\">\t<span class=\"comment\">// store through it, to make sure it works</span></span><br><span class=\"line\">\tget_tls(BX)</span><br><span class=\"line\">\tMOVQ\t$<span class=\"number\">0x123</span>, g(BX)</span><br><span class=\"line\">\tMOVQ\truntime·m0+m_tls(SB), AX</span><br><span class=\"line\">\tCMPQ\tAX, $<span class=\"number\">0x123</span></span><br><span class=\"line\">\tJEQ <span class=\"number\">2</span>(PC)</span><br><span class=\"line\">\tCALL\truntime·abort(SB)</span><br><span class=\"line\">ok:</span><br><span class=\"line\">\t<span class=\"comment\">// set the per-goroutine and per-mach &quot;registers&quot;</span></span><br><span class=\"line\">\tget_tls(BX)</span><br><span class=\"line\">\tLEAQ\truntime·g0(SB), CX</span><br><span class=\"line\">\tMOVQ\tCX, g(BX)</span><br><span class=\"line\">\tLEAQ\truntime·m0(SB), AX</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// m.g0绑定一个g0</span></span><br><span class=\"line\">\t<span class=\"comment\">// save m-&gt;g0 = g0</span></span><br><span class=\"line\">\tMOVQ\tCX, m_g0(AX)</span><br><span class=\"line\">    <span class=\"comment\">// g0绑定m0</span></span><br><span class=\"line\">\t<span class=\"comment\">// save m0 to g0-&gt;m</span></span><br><span class=\"line\">\tMOVQ\tAX, g_m(CX)</span><br><span class=\"line\"></span><br><span class=\"line\">\tCLD\t\t\t\t<span class=\"comment\">// convention is D is always left cleared</span></span><br><span class=\"line\">\tCALL\truntime·check(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\tMOVL\t<span class=\"number\">16</span>(SP), AX\t\t<span class=\"comment\">// copy argc</span></span><br><span class=\"line\">\tMOVL\tAX, <span class=\"number\">0</span>(SP)</span><br><span class=\"line\">\tMOVQ\t<span class=\"number\">24</span>(SP), AX\t\t<span class=\"comment\">// copy argv</span></span><br><span class=\"line\">\tMOVQ\tAX, <span class=\"number\">8</span>(SP)</span><br><span class=\"line\">    <span class=\"comment\">// 参数初始化</span></span><br><span class=\"line\">\tCALL\truntime·args(SB)</span><br><span class=\"line\">    <span class=\"comment\">// 系统初始化</span></span><br><span class=\"line\">\tCALL\truntime·osinit(SB)</span><br><span class=\"line\">    <span class=\"comment\">// 调度任务初始化，具体逻辑下面有提到</span></span><br><span class=\"line\">\tCALL\truntime·schedinit(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 创建第一个g，用于启动程序</span></span><br><span class=\"line\">\t<span class=\"comment\">// create a new goroutine to start program</span></span><br><span class=\"line\">\tMOVQ\t$runtime·mainPC(SB), AX\t\t<span class=\"comment\">// entry</span></span><br><span class=\"line\">\tPUSHQ\tAX</span><br><span class=\"line\">\tPUSHQ\t$<span class=\"number\">0</span>\t\t\t<span class=\"comment\">// arg size</span></span><br><span class=\"line\">\tCALL\truntime·newproc(SB)</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\">\tPOPQ\tAX</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// start this M</span></span><br><span class=\"line\">    <span class=\"comment\">//  启动M</span></span><br><span class=\"line\">\tCALL\truntime·mstart(SB)</span><br><span class=\"line\"></span><br><span class=\"line\">\tCALL\truntime·abort(SB)\t<span class=\"comment\">// mstart should never return</span></span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prevent dead-code elimination of debugCallV2, which is</span></span><br><span class=\"line\">\t<span class=\"comment\">// intended to be called by debuggers.</span></span><br><span class=\"line\">\tMOVQ\t$runtime·debugCallV2&lt;ABIInternal&gt;(SB), AX</span><br><span class=\"line\">\tRET</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"➡️➡️👋mstart作用\"><a class=\"header-anchor\" href=\"#➡️➡️👋mstart作用\">¶</a>➡️➡️<a href=\"https://blog.imrcrab.com/archives/392d66f0.html#mstart\">👋mstart作用</a></h3>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png","popularPost_tmp_gaData":{"updated":"Thu May 06 2021 20:33:17 GMT+0800 (中国标准时间)","title":"「47」GPM main启动","path":"archives/66b6223a.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png","excerpt":"<p>之前扯过GPM的<a href=\"https://blog.imrcrab.com/archives/392d66f0.html\">g0和m0关系</a>和<a href=\"https://blog.imrcrab.com/archives/9bb71eca.html\">main函数入口</a>的一些相关信息。</p>\n<p>多次看go mian函数的启动流程，多次分析，多次理解，关注点和结论各有不同，以此记录。</p>\n<h3 id=\"👋入口：\"><a class=\"header-anchor\" href=\"#👋入口：\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/asm_amd64.s#L22\">👋入口</a>：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210505_094951.png\" alt=\"\"></p>","date":{"_isAMomentObject":true,"_i":"2021-05-05T13:32:25.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-05T13:32:25.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3511},{"title":"「48」GMP main之G&M创建","date":"2021-05-06T13:55:30.000Z","updated":"2021-05-15T10:56:17.000Z","keywords":"Go,GPM,G0,M0","mathjax":true,"abbrlink":"a90dcb34","_content":"\n前面说了GPM的main函数启动[「47」GPM main启动](https://blog.imrcrab.com/archives/66b6223a.html#more)，这次看下这个启动过程中如何创建第一个M和G的操作。\n\n在main函数汇编的入口地方call这么几个函数：\n\n* args 参数设定\n* osinit os系统初始化\n* schedinit 调度初始化\n\n<!--more-->\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105845.png)\n\n\n### [call osinit函数](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/os_plan9.go#L291)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105719.png)\n\n>getpid()获取当前的proc的id号，赋值给当前g->m.procid\n\n### [call schedinit函数](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L532)\n\n\n```go\n\n// The bootstrap sequence is:\n//\n//\tcall osinit\n//\tcall schedinit\n//\tmake & queue new G\n//\tcall runtime·mstart\n//\n// The new G calls runtime·main.\nfunc schedinit() {\n\n    // 一大堆lock的初始化\n\tlockInit(&sched.lock, lockRankSched)\n\tlockInit(&sched.sysmonlock, lockRankSysmon)\n\tlockInit(&sched.deferlock, lockRankDefer)\n\tlockInit(&sched.sudoglock, lockRankSudog)\n\tlockInit(&deadlock, lockRankDeadlock)\n\tlockInit(&paniclk, lockRankPanic)\n\tlockInit(&allglock, lockRankAllg)\n\tlockInit(&allpLock, lockRankAllp)\n\tlockInit(&reflectOffs.lock, lockRankReflectOffs)\n\tlockInit(&finlock, lockRankFin)\n\tlockInit(&trace.bufLock, lockRankTraceBuf)\n\tlockInit(&trace.stringsLock, lockRankTraceStrings)\n\tlockInit(&trace.lock, lockRankTrace)\n\tlockInit(&cpuprof.lock, lockRankCpuprof)\n\tlockInit(&trace.stackTab.lock, lockRankTraceStackTab)\n\t// Enforce that this lock is always a leaf lock.\n\t// All of this lock's critical sections should be\n\t// extremely short.\n\tlockInit(&memstats.heapStats.noPLock, lockRankLeafRank)\n\n\t// raceinit must be the first call to race detector.\n\t// In particular, it must be done before mallocinit below calls racemapshadow.\n    // 获取当前的g\n\t_g_ := getg()\n\tif raceenabled {\n\t\t_g_.racectx, raceprocctx0 = raceinit()\n\t}\n\n    // 最大的m为1w个\n\tsched.maxmcount = 10000\n\n\t// The world starts stopped.\n\tworldStopped()\n\n\tmoduledataverify()\n    // stack初始化\n\tstackinit()\n    // 内存分配器初始化\n\tmallocinit()\n    // 随机数初始化\n\tfastrandinit() // must run before mcommoninit\n    // id预分配\n\tmcommoninit(_g_.m, -1)\n\tcpuinit()       // must run before alginit\n    // 内存堆齐初始化\n\talginit()       // maps must not be used before this call\n\tmodulesinit()   // provides activeModules\n\ttypelinksinit() // uses maps, activeModules\n\titabsinit()     // uses activeModules\n\n\tsigsave(&_g_.m.sigmask)\n\tinitSigmask = _g_.m.sigmask\n\n\tif offset := unsafe.Offsetof(sched.timeToRun); offset%8 != 0 {\n\t\tprintln(offset)\n\t\tthrow(\"sched.timeToRun not aligned to 8 bytes\")\n\t}\n\n\tgoargs()\n\tgoenvs()\n\tparsedebugvars()\n\tgcinit()\n\n\tlock(&sched.lock)\n\tsched.lastpoll = uint64(nanotime())\n\tprocs := ncpu\n\tif n, ok := atoi32(gogetenv(\"GOMAXPROCS\")); ok && n > 0 {\n\t\tprocs = n\n\t}\n\tif procresize(procs) != nil {\n\t\tthrow(\"unknown runnable goroutine during bootstrap\")\n\t}\n\tunlock(&sched.lock)\n\n\t// World is effectively started now, as P's can run.\n\tworldStarted()\n\n\t// For cgocheck > 1, we turn on the write barrier at all times\n\t// and check all pointer writes. We can't do this until after\n\t// procresize because the write barrier needs a P.\n\tif debug.cgocheck > 1 {\n\t\twriteBarrier.cgo = true\n\t\twriteBarrier.enabled = true\n\t\tfor _, p := range allp {\n\t\t\tp.wbBuf.reset()\n\t\t}\n\t}\n\n\tif buildVersion == \"\" {\n\t\t// Condition should never trigger. This code just serves\n\t\t// to ensure runtime·buildVersion is kept in the resulting binary.\n\t\tbuildVersion = \"unknown\"\n\t}\n\tif len(modinfo) == 1 {\n\t\t// Condition should never trigger. This code just serves\n\t\t// to ensure runtime·modinfo is kept in the resulting binary.\n\t\tmodinfo = \"\"\n\t}\n}\n```\n\n#### 大体流程\n```markdown\n1、lockinit\n2、g:=getg()\n3、maxmcount = 10000\n4、stackinit\n5、mallocinit「内存分配器初始化」\n6、随机数\n7、mcommon公公部分init\n8、cpu和byte等初始化。\n9、goenv初始化\n10、gcinit()\n11、GOMAXPROCS设置\n12、cgo等初始化\n```\n#### 函数分析\n\n##### schedinit\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102713.png)\n\n##### worldstop\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102811.png)\n\n##### stackinit\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102849.png)\n\n##### sigsave\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102930.png)\n\n### 关于gomaxprocs最大值\n#### [Go 1.8及以前](https://github.com/golang/go/blob/release-branch.go1.8/src/runtime/runtime2.go#L533)\n\n>最大为256\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210507_102912.png)\n\n#### [Go 1.9中](https://github.com/golang/go/blob/release-branch.go1.9/src/runtime/runtime2.go#L523)\n\n>最大为1024\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_115200.png)\n\n#### [Go 1.9以后「1.14为例」](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L1018)\n\n>最大为int32的最大值：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_121640.png)\n\n#### 坑点：\n\nGo 1.14以后看似最大是int32最大值，但是有一个新问题，真的可以设置到最大值吗？实验一把：\n\n```go\npackage main\nfunc main() {\n\truntime.GOMAXPROCS(int32(^uint32(0) >> 1))\n\tfmt.Println(\"hello world\")\n}\n```\n结果报错：\n\n```go\nfatal error: slice bounds out of range\nfatal error: unexpected signal during runtime execution\npanic during panic\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x4 pc=0x104098b]\n\n...\n....\n.....\n```\n\n>🤔🤔🤔🤔🤔数组越界了？\n\n>又反复看了看源码，问题找出来了：\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_122730.png)\n\n\n##### 问题的关键\n```go\nmaskWords := (nprocs + 31) / 32\n\n导致：maskWords数值溢出了，导致下面截取panic。\n\nif nprocs <= int32(cap(allp)) {\n\tallp = allp[:nprocs]\n}\n\n```\n### GOMAXPROCS最大值？？\n>所以GOMAXPROCS最大为: int32(^uint32(0) >> 1)-31\n\n### END","source":"_posts/48-GMP-main之G-M创建.md","raw":"---\ntitle: 「48」GMP main之G&M创建\ndate: '2021/05/06 21:55:30'\nupdated: '2021/05/15 18:56:17'\nkeywords: 'Go,GPM,G0,M0'\ntags:\n  - GPM\n  - Day\n  - Go\n  - Go源码\nmathjax: true\nabbrlink: a90dcb34\n---\n\n前面说了GPM的main函数启动[「47」GPM main启动](https://blog.imrcrab.com/archives/66b6223a.html#more)，这次看下这个启动过程中如何创建第一个M和G的操作。\n\n在main函数汇编的入口地方call这么几个函数：\n\n* args 参数设定\n* osinit os系统初始化\n* schedinit 调度初始化\n\n<!--more-->\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105845.png)\n\n\n### [call osinit函数](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/os_plan9.go#L291)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105719.png)\n\n>getpid()获取当前的proc的id号，赋值给当前g->m.procid\n\n### [call schedinit函数](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L532)\n\n\n```go\n\n// The bootstrap sequence is:\n//\n//\tcall osinit\n//\tcall schedinit\n//\tmake & queue new G\n//\tcall runtime·mstart\n//\n// The new G calls runtime·main.\nfunc schedinit() {\n\n    // 一大堆lock的初始化\n\tlockInit(&sched.lock, lockRankSched)\n\tlockInit(&sched.sysmonlock, lockRankSysmon)\n\tlockInit(&sched.deferlock, lockRankDefer)\n\tlockInit(&sched.sudoglock, lockRankSudog)\n\tlockInit(&deadlock, lockRankDeadlock)\n\tlockInit(&paniclk, lockRankPanic)\n\tlockInit(&allglock, lockRankAllg)\n\tlockInit(&allpLock, lockRankAllp)\n\tlockInit(&reflectOffs.lock, lockRankReflectOffs)\n\tlockInit(&finlock, lockRankFin)\n\tlockInit(&trace.bufLock, lockRankTraceBuf)\n\tlockInit(&trace.stringsLock, lockRankTraceStrings)\n\tlockInit(&trace.lock, lockRankTrace)\n\tlockInit(&cpuprof.lock, lockRankCpuprof)\n\tlockInit(&trace.stackTab.lock, lockRankTraceStackTab)\n\t// Enforce that this lock is always a leaf lock.\n\t// All of this lock's critical sections should be\n\t// extremely short.\n\tlockInit(&memstats.heapStats.noPLock, lockRankLeafRank)\n\n\t// raceinit must be the first call to race detector.\n\t// In particular, it must be done before mallocinit below calls racemapshadow.\n    // 获取当前的g\n\t_g_ := getg()\n\tif raceenabled {\n\t\t_g_.racectx, raceprocctx0 = raceinit()\n\t}\n\n    // 最大的m为1w个\n\tsched.maxmcount = 10000\n\n\t// The world starts stopped.\n\tworldStopped()\n\n\tmoduledataverify()\n    // stack初始化\n\tstackinit()\n    // 内存分配器初始化\n\tmallocinit()\n    // 随机数初始化\n\tfastrandinit() // must run before mcommoninit\n    // id预分配\n\tmcommoninit(_g_.m, -1)\n\tcpuinit()       // must run before alginit\n    // 内存堆齐初始化\n\talginit()       // maps must not be used before this call\n\tmodulesinit()   // provides activeModules\n\ttypelinksinit() // uses maps, activeModules\n\titabsinit()     // uses activeModules\n\n\tsigsave(&_g_.m.sigmask)\n\tinitSigmask = _g_.m.sigmask\n\n\tif offset := unsafe.Offsetof(sched.timeToRun); offset%8 != 0 {\n\t\tprintln(offset)\n\t\tthrow(\"sched.timeToRun not aligned to 8 bytes\")\n\t}\n\n\tgoargs()\n\tgoenvs()\n\tparsedebugvars()\n\tgcinit()\n\n\tlock(&sched.lock)\n\tsched.lastpoll = uint64(nanotime())\n\tprocs := ncpu\n\tif n, ok := atoi32(gogetenv(\"GOMAXPROCS\")); ok && n > 0 {\n\t\tprocs = n\n\t}\n\tif procresize(procs) != nil {\n\t\tthrow(\"unknown runnable goroutine during bootstrap\")\n\t}\n\tunlock(&sched.lock)\n\n\t// World is effectively started now, as P's can run.\n\tworldStarted()\n\n\t// For cgocheck > 1, we turn on the write barrier at all times\n\t// and check all pointer writes. We can't do this until after\n\t// procresize because the write barrier needs a P.\n\tif debug.cgocheck > 1 {\n\t\twriteBarrier.cgo = true\n\t\twriteBarrier.enabled = true\n\t\tfor _, p := range allp {\n\t\t\tp.wbBuf.reset()\n\t\t}\n\t}\n\n\tif buildVersion == \"\" {\n\t\t// Condition should never trigger. This code just serves\n\t\t// to ensure runtime·buildVersion is kept in the resulting binary.\n\t\tbuildVersion = \"unknown\"\n\t}\n\tif len(modinfo) == 1 {\n\t\t// Condition should never trigger. This code just serves\n\t\t// to ensure runtime·modinfo is kept in the resulting binary.\n\t\tmodinfo = \"\"\n\t}\n}\n```\n\n#### 大体流程\n```markdown\n1、lockinit\n2、g:=getg()\n3、maxmcount = 10000\n4、stackinit\n5、mallocinit「内存分配器初始化」\n6、随机数\n7、mcommon公公部分init\n8、cpu和byte等初始化。\n9、goenv初始化\n10、gcinit()\n11、GOMAXPROCS设置\n12、cgo等初始化\n```\n#### 函数分析\n\n##### schedinit\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102713.png)\n\n##### worldstop\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102811.png)\n\n##### stackinit\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102849.png)\n\n##### sigsave\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102930.png)\n\n### 关于gomaxprocs最大值\n#### [Go 1.8及以前](https://github.com/golang/go/blob/release-branch.go1.8/src/runtime/runtime2.go#L533)\n\n>最大为256\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210507_102912.png)\n\n#### [Go 1.9中](https://github.com/golang/go/blob/release-branch.go1.9/src/runtime/runtime2.go#L523)\n\n>最大为1024\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_115200.png)\n\n#### [Go 1.9以后「1.14为例」](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L1018)\n\n>最大为int32的最大值：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_121640.png)\n\n#### 坑点：\n\nGo 1.14以后看似最大是int32最大值，但是有一个新问题，真的可以设置到最大值吗？实验一把：\n\n```go\npackage main\nfunc main() {\n\truntime.GOMAXPROCS(int32(^uint32(0) >> 1))\n\tfmt.Println(\"hello world\")\n}\n```\n结果报错：\n\n```go\nfatal error: slice bounds out of range\nfatal error: unexpected signal during runtime execution\npanic during panic\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x4 pc=0x104098b]\n\n...\n....\n.....\n```\n\n>🤔🤔🤔🤔🤔数组越界了？\n\n>又反复看了看源码，问题找出来了：\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_122730.png)\n\n\n##### 问题的关键\n```go\nmaskWords := (nprocs + 31) / 32\n\n导致：maskWords数值溢出了，导致下面截取panic。\n\nif nprocs <= int32(cap(allp)) {\n\tallp = allp[:nprocs]\n}\n\n```\n### GOMAXPROCS最大值？？\n>所以GOMAXPROCS最大为: int32(^uint32(0) >> 1)-31\n\n### END","slug":"48-GMP-main之G-M创建","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5e003hzfqxgti1chs1","content":"<p>前面说了GPM的main函数启动<a href=\"https://blog.imrcrab.com/archives/66b6223a.html#more\">「47」GPM main启动</a>，这次看下这个启动过程中如何创建第一个M和G的操作。</p>\n<p>在main函数汇编的入口地方call这么几个函数：</p>\n<ul>\n<li>args 参数设定</li>\n<li>osinit os系统初始化</li>\n<li>schedinit 调度初始化</li>\n</ul>\n<span id=\"more\"></span>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105845.png\" alt=\"\"></p>\n<h3 id=\"call-osinit函数\"><a class=\"header-anchor\" href=\"#call-osinit函数\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/os_plan9.go#L291\">call osinit函数</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105719.png\" alt=\"\"></p>\n<blockquote>\n<p>getpid()获取当前的proc的id号，赋值给当前g-&gt;m.procid</p>\n</blockquote>\n<h3 id=\"call-schedinit函数\"><a class=\"header-anchor\" href=\"#call-schedinit函数\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L532\">call schedinit函数</a></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The bootstrap sequence is:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall osinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall schedinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tmake &amp; queue new G</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall runtime·mstart</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The new G calls runtime·main.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">schedinit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一大堆lock的初始化</span></span><br><span class=\"line\">\tlockInit(&amp;sched.lock, lockRankSched)</span><br><span class=\"line\">\tlockInit(&amp;sched.sysmonlock, lockRankSysmon)</span><br><span class=\"line\">\tlockInit(&amp;sched.deferlock, lockRankDefer)</span><br><span class=\"line\">\tlockInit(&amp;sched.sudoglock, lockRankSudog)</span><br><span class=\"line\">\tlockInit(&amp;deadlock, lockRankDeadlock)</span><br><span class=\"line\">\tlockInit(&amp;paniclk, lockRankPanic)</span><br><span class=\"line\">\tlockInit(&amp;allglock, lockRankAllg)</span><br><span class=\"line\">\tlockInit(&amp;allpLock, lockRankAllp)</span><br><span class=\"line\">\tlockInit(&amp;reflectOffs.lock, lockRankReflectOffs)</span><br><span class=\"line\">\tlockInit(&amp;finlock, lockRankFin)</span><br><span class=\"line\">\tlockInit(&amp;trace.bufLock, lockRankTraceBuf)</span><br><span class=\"line\">\tlockInit(&amp;trace.stringsLock, lockRankTraceStrings)</span><br><span class=\"line\">\tlockInit(&amp;trace.lock, lockRankTrace)</span><br><span class=\"line\">\tlockInit(&amp;cpuprof.lock, lockRankCpuprof)</span><br><span class=\"line\">\tlockInit(&amp;trace.stackTab.lock, lockRankTraceStackTab)</span><br><span class=\"line\">\t<span class=\"comment\">// Enforce that this lock is always a leaf lock.</span></span><br><span class=\"line\">\t<span class=\"comment\">// All of this lock&#x27;s critical sections should be</span></span><br><span class=\"line\">\t<span class=\"comment\">// extremely short.</span></span><br><span class=\"line\">\tlockInit(&amp;memstats.heapStats.noPLock, lockRankLeafRank)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// raceinit must be the first call to race detector.</span></span><br><span class=\"line\">\t<span class=\"comment\">// In particular, it must be done before mallocinit below calls racemapshadow.</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前的g</span></span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\t_g_.racectx, raceprocctx0 = raceinit()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最大的m为1w个</span></span><br><span class=\"line\">\tsched.maxmcount = <span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The world starts stopped.</span></span><br><span class=\"line\">\tworldStopped()</span><br><span class=\"line\"></span><br><span class=\"line\">\tmoduledataverify()</span><br><span class=\"line\">    <span class=\"comment\">// stack初始化</span></span><br><span class=\"line\">\tstackinit()</span><br><span class=\"line\">    <span class=\"comment\">// 内存分配器初始化</span></span><br><span class=\"line\">\tmallocinit()</span><br><span class=\"line\">    <span class=\"comment\">// 随机数初始化</span></span><br><span class=\"line\">\tfastrandinit() <span class=\"comment\">// must run before mcommoninit</span></span><br><span class=\"line\">    <span class=\"comment\">// id预分配</span></span><br><span class=\"line\">\tmcommoninit(_g_.m, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\tcpuinit()       <span class=\"comment\">// must run before alginit</span></span><br><span class=\"line\">    <span class=\"comment\">// 内存堆齐初始化</span></span><br><span class=\"line\">\talginit()       <span class=\"comment\">// maps must not be used before this call</span></span><br><span class=\"line\">\tmodulesinit()   <span class=\"comment\">// provides activeModules</span></span><br><span class=\"line\">\ttypelinksinit() <span class=\"comment\">// uses maps, activeModules</span></span><br><span class=\"line\">\titabsinit()     <span class=\"comment\">// uses activeModules</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsigsave(&amp;_g_.m.sigmask)</span><br><span class=\"line\">\tinitSigmask = _g_.m.sigmask</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> offset := unsafe.Offsetof(sched.timeToRun); offset%<span class=\"number\">8</span> != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(offset)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sched.timeToRun not aligned to 8 bytes&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoargs()</span><br><span class=\"line\">\tgoenvs()</span><br><span class=\"line\">\tparsedebugvars()</span><br><span class=\"line\">\tgcinit()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlock(&amp;sched.lock)</span><br><span class=\"line\">\tsched.lastpoll = <span class=\"type\">uint64</span>(nanotime())</span><br><span class=\"line\">\tprocs := ncpu</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n, ok := atoi32(gogetenv(<span class=\"string\">&quot;GOMAXPROCS&quot;</span>)); ok &amp;&amp; n &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tprocs = n</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> procresize(procs) != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;unknown runnable goroutine during bootstrap&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tunlock(&amp;sched.lock)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// World is effectively started now, as P&#x27;s can run.</span></span><br><span class=\"line\">\tworldStarted()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// For cgocheck &gt; 1, we turn on the write barrier at all times</span></span><br><span class=\"line\">\t<span class=\"comment\">// and check all pointer writes. We can&#x27;t do this until after</span></span><br><span class=\"line\">\t<span class=\"comment\">// procresize because the write barrier needs a P.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> debug.cgocheck &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\twriteBarrier.cgo = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\twriteBarrier.enabled = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, p := <span class=\"keyword\">range</span> allp &#123;</span><br><span class=\"line\">\t\t\tp.wbBuf.reset()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> buildVersion == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Condition should never trigger. This code just serves</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to ensure runtime·buildVersion is kept in the resulting binary.</span></span><br><span class=\"line\">\t\tbuildVersion = <span class=\"string\">&quot;unknown&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(modinfo) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Condition should never trigger. This code just serves</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to ensure runtime·modinfo is kept in the resulting binary.</span></span><br><span class=\"line\">\t\tmodinfo = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"大体流程\"><a class=\"header-anchor\" href=\"#大体流程\">¶</a>大体流程</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、lockinit</span><br><span class=\"line\">2、g:=getg()</span><br><span class=\"line\">3、maxmcount = 10000</span><br><span class=\"line\">4、stackinit</span><br><span class=\"line\">5、mallocinit「内存分配器初始化」</span><br><span class=\"line\">6、随机数</span><br><span class=\"line\">7、mcommon公公部分init</span><br><span class=\"line\">8、cpu和byte等初始化。</span><br><span class=\"line\">9、goenv初始化</span><br><span class=\"line\">10、gcinit()</span><br><span class=\"line\">11、GOMAXPROCS设置</span><br><span class=\"line\">12、cgo等初始化</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数分析\"><a class=\"header-anchor\" href=\"#函数分析\">¶</a>函数分析</h4>\n<h5 id=\"schedinit\"><a class=\"header-anchor\" href=\"#schedinit\">¶</a>schedinit</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102713.png\" alt=\"\"></p>\n<h5 id=\"worldstop\"><a class=\"header-anchor\" href=\"#worldstop\">¶</a>worldstop</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102811.png\" alt=\"\"></p>\n<h5 id=\"stackinit\"><a class=\"header-anchor\" href=\"#stackinit\">¶</a>stackinit</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102849.png\" alt=\"\"></p>\n<h5 id=\"sigsave\"><a class=\"header-anchor\" href=\"#sigsave\">¶</a>sigsave</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102930.png\" alt=\"\"></p>\n<h3 id=\"关于gomaxprocs最大值\"><a class=\"header-anchor\" href=\"#关于gomaxprocs最大值\">¶</a>关于gomaxprocs最大值</h3>\n<h4 id=\"Go-1-8及以前\"><a class=\"header-anchor\" href=\"#Go-1-8及以前\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.8/src/runtime/runtime2.go#L533\">Go 1.8及以前</a></h4>\n<blockquote>\n<p>最大为256</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210507_102912.png\" alt=\"\"></p>\n<h4 id=\"Go-1-9中\"><a class=\"header-anchor\" href=\"#Go-1-9中\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.9/src/runtime/runtime2.go#L523\">Go 1.9中</a></h4>\n<blockquote>\n<p>最大为1024</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_115200.png\" alt=\"\"></p>\n<h4 id=\"Go-1-9以后「1-14为例」\"><a class=\"header-anchor\" href=\"#Go-1-9以后「1-14为例」\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L1018\">Go 1.9以后「1.14为例」</a></h4>\n<blockquote>\n<p>最大为int32的最大值：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_121640.png\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"坑点：\"><a class=\"header-anchor\" href=\"#坑点：\">¶</a>坑点：</h4>\n<p>Go 1.14以后看似最大是int32最大值，但是有一个新问题，真的可以设置到最大值吗？实验一把：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\truntime.GOMAXPROCS(<span class=\"type\">int32</span>(^<span class=\"type\">uint32</span>(<span class=\"number\">0</span>) &gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果报错：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal <span class=\"type\">error</span>: slice bounds out of <span class=\"keyword\">range</span></span><br><span class=\"line\">fatal <span class=\"type\">error</span>: unexpected signal during runtime execution</span><br><span class=\"line\"><span class=\"built_in\">panic</span> during <span class=\"built_in\">panic</span></span><br><span class=\"line\">[signal SIGSEGV: segmentation violation code=<span class=\"number\">0x1</span> addr=<span class=\"number\">0x4</span> pc=<span class=\"number\">0x104098b</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">....</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>🤔🤔🤔🤔🤔数组越界了？</p>\n</blockquote>\n<blockquote>\n<p>又反复看了看源码，问题找出来了：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_122730.png\" alt=\"\"></p>\n<h5 id=\"问题的关键\"><a class=\"header-anchor\" href=\"#问题的关键\">¶</a>问题的关键</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maskWords := (nprocs + <span class=\"number\">31</span>) / <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">导致：maskWords数值溢出了，导致下面截取<span class=\"built_in\">panic</span>。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> nprocs &lt;= <span class=\"type\">int32</span>(<span class=\"built_in\">cap</span>(allp)) &#123;</span><br><span class=\"line\">\tallp = allp[:nprocs]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"GOMAXPROCS最大值？？\"><a class=\"header-anchor\" href=\"#GOMAXPROCS最大值？？\">¶</a>GOMAXPROCS最大值？？</h3>\n<blockquote>\n<p>所以GOMAXPROCS最大为: int32(^uint32(0) &gt;&gt; 1)-31</p>\n</blockquote>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>前面说了GPM的main函数启动<a href=\"https://blog.imrcrab.com/archives/66b6223a.html#more\">「47」GPM main启动</a>，这次看下这个启动过程中如何创建第一个M和G的操作。</p>\n<p>在main函数汇编的入口地方call这么几个函数：</p>\n<ul>\n<li>args 参数设定</li>\n<li>osinit os系统初始化</li>\n<li>schedinit 调度初始化</li>\n</ul>","more":"<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105845.png\" alt=\"\"></p>\n<h3 id=\"call-osinit函数\"><a class=\"header-anchor\" href=\"#call-osinit函数\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/os_plan9.go#L291\">call osinit函数</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105719.png\" alt=\"\"></p>\n<blockquote>\n<p>getpid()获取当前的proc的id号，赋值给当前g-&gt;m.procid</p>\n</blockquote>\n<h3 id=\"call-schedinit函数\"><a class=\"header-anchor\" href=\"#call-schedinit函数\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L532\">call schedinit函数</a></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// The bootstrap sequence is:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall osinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall schedinit</span></span><br><span class=\"line\"><span class=\"comment\">//\tmake &amp; queue new G</span></span><br><span class=\"line\"><span class=\"comment\">//\tcall runtime·mstart</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The new G calls runtime·main.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">schedinit</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一大堆lock的初始化</span></span><br><span class=\"line\">\tlockInit(&amp;sched.lock, lockRankSched)</span><br><span class=\"line\">\tlockInit(&amp;sched.sysmonlock, lockRankSysmon)</span><br><span class=\"line\">\tlockInit(&amp;sched.deferlock, lockRankDefer)</span><br><span class=\"line\">\tlockInit(&amp;sched.sudoglock, lockRankSudog)</span><br><span class=\"line\">\tlockInit(&amp;deadlock, lockRankDeadlock)</span><br><span class=\"line\">\tlockInit(&amp;paniclk, lockRankPanic)</span><br><span class=\"line\">\tlockInit(&amp;allglock, lockRankAllg)</span><br><span class=\"line\">\tlockInit(&amp;allpLock, lockRankAllp)</span><br><span class=\"line\">\tlockInit(&amp;reflectOffs.lock, lockRankReflectOffs)</span><br><span class=\"line\">\tlockInit(&amp;finlock, lockRankFin)</span><br><span class=\"line\">\tlockInit(&amp;trace.bufLock, lockRankTraceBuf)</span><br><span class=\"line\">\tlockInit(&amp;trace.stringsLock, lockRankTraceStrings)</span><br><span class=\"line\">\tlockInit(&amp;trace.lock, lockRankTrace)</span><br><span class=\"line\">\tlockInit(&amp;cpuprof.lock, lockRankCpuprof)</span><br><span class=\"line\">\tlockInit(&amp;trace.stackTab.lock, lockRankTraceStackTab)</span><br><span class=\"line\">\t<span class=\"comment\">// Enforce that this lock is always a leaf lock.</span></span><br><span class=\"line\">\t<span class=\"comment\">// All of this lock&#x27;s critical sections should be</span></span><br><span class=\"line\">\t<span class=\"comment\">// extremely short.</span></span><br><span class=\"line\">\tlockInit(&amp;memstats.heapStats.noPLock, lockRankLeafRank)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// raceinit must be the first call to race detector.</span></span><br><span class=\"line\">\t<span class=\"comment\">// In particular, it must be done before mallocinit below calls racemapshadow.</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前的g</span></span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raceenabled &#123;</span><br><span class=\"line\">\t\t_g_.racectx, raceprocctx0 = raceinit()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 最大的m为1w个</span></span><br><span class=\"line\">\tsched.maxmcount = <span class=\"number\">10000</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The world starts stopped.</span></span><br><span class=\"line\">\tworldStopped()</span><br><span class=\"line\"></span><br><span class=\"line\">\tmoduledataverify()</span><br><span class=\"line\">    <span class=\"comment\">// stack初始化</span></span><br><span class=\"line\">\tstackinit()</span><br><span class=\"line\">    <span class=\"comment\">// 内存分配器初始化</span></span><br><span class=\"line\">\tmallocinit()</span><br><span class=\"line\">    <span class=\"comment\">// 随机数初始化</span></span><br><span class=\"line\">\tfastrandinit() <span class=\"comment\">// must run before mcommoninit</span></span><br><span class=\"line\">    <span class=\"comment\">// id预分配</span></span><br><span class=\"line\">\tmcommoninit(_g_.m, <span class=\"number\">-1</span>)</span><br><span class=\"line\">\tcpuinit()       <span class=\"comment\">// must run before alginit</span></span><br><span class=\"line\">    <span class=\"comment\">// 内存堆齐初始化</span></span><br><span class=\"line\">\talginit()       <span class=\"comment\">// maps must not be used before this call</span></span><br><span class=\"line\">\tmodulesinit()   <span class=\"comment\">// provides activeModules</span></span><br><span class=\"line\">\ttypelinksinit() <span class=\"comment\">// uses maps, activeModules</span></span><br><span class=\"line\">\titabsinit()     <span class=\"comment\">// uses activeModules</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tsigsave(&amp;_g_.m.sigmask)</span><br><span class=\"line\">\tinitSigmask = _g_.m.sigmask</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> offset := unsafe.Offsetof(sched.timeToRun); offset%<span class=\"number\">8</span> != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">println</span>(offset)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sched.timeToRun not aligned to 8 bytes&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tgoargs()</span><br><span class=\"line\">\tgoenvs()</span><br><span class=\"line\">\tparsedebugvars()</span><br><span class=\"line\">\tgcinit()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlock(&amp;sched.lock)</span><br><span class=\"line\">\tsched.lastpoll = <span class=\"type\">uint64</span>(nanotime())</span><br><span class=\"line\">\tprocs := ncpu</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n, ok := atoi32(gogetenv(<span class=\"string\">&quot;GOMAXPROCS&quot;</span>)); ok &amp;&amp; n &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tprocs = n</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> procresize(procs) != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;unknown runnable goroutine during bootstrap&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tunlock(&amp;sched.lock)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// World is effectively started now, as P&#x27;s can run.</span></span><br><span class=\"line\">\tworldStarted()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// For cgocheck &gt; 1, we turn on the write barrier at all times</span></span><br><span class=\"line\">\t<span class=\"comment\">// and check all pointer writes. We can&#x27;t do this until after</span></span><br><span class=\"line\">\t<span class=\"comment\">// procresize because the write barrier needs a P.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> debug.cgocheck &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\twriteBarrier.cgo = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\twriteBarrier.enabled = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> _, p := <span class=\"keyword\">range</span> allp &#123;</span><br><span class=\"line\">\t\t\tp.wbBuf.reset()</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> buildVersion == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Condition should never trigger. This code just serves</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to ensure runtime·buildVersion is kept in the resulting binary.</span></span><br><span class=\"line\">\t\tbuildVersion = <span class=\"string\">&quot;unknown&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(modinfo) == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Condition should never trigger. This code just serves</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// to ensure runtime·modinfo is kept in the resulting binary.</span></span><br><span class=\"line\">\t\tmodinfo = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"大体流程\"><a class=\"header-anchor\" href=\"#大体流程\">¶</a>大体流程</h4>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、lockinit</span><br><span class=\"line\">2、g:=getg()</span><br><span class=\"line\">3、maxmcount = 10000</span><br><span class=\"line\">4、stackinit</span><br><span class=\"line\">5、mallocinit「内存分配器初始化」</span><br><span class=\"line\">6、随机数</span><br><span class=\"line\">7、mcommon公公部分init</span><br><span class=\"line\">8、cpu和byte等初始化。</span><br><span class=\"line\">9、goenv初始化</span><br><span class=\"line\">10、gcinit()</span><br><span class=\"line\">11、GOMAXPROCS设置</span><br><span class=\"line\">12、cgo等初始化</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数分析\"><a class=\"header-anchor\" href=\"#函数分析\">¶</a>函数分析</h4>\n<h5 id=\"schedinit\"><a class=\"header-anchor\" href=\"#schedinit\">¶</a>schedinit</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102713.png\" alt=\"\"></p>\n<h5 id=\"worldstop\"><a class=\"header-anchor\" href=\"#worldstop\">¶</a>worldstop</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102811.png\" alt=\"\"></p>\n<h5 id=\"stackinit\"><a class=\"header-anchor\" href=\"#stackinit\">¶</a>stackinit</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102849.png\" alt=\"\"></p>\n<h5 id=\"sigsave\"><a class=\"header-anchor\" href=\"#sigsave\">¶</a>sigsave</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210515_102930.png\" alt=\"\"></p>\n<h3 id=\"关于gomaxprocs最大值\"><a class=\"header-anchor\" href=\"#关于gomaxprocs最大值\">¶</a>关于gomaxprocs最大值</h3>\n<h4 id=\"Go-1-8及以前\"><a class=\"header-anchor\" href=\"#Go-1-8及以前\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.8/src/runtime/runtime2.go#L533\">Go 1.8及以前</a></h4>\n<blockquote>\n<p>最大为256</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/ico/clipboard_20210507_102912.png\" alt=\"\"></p>\n<h4 id=\"Go-1-9中\"><a class=\"header-anchor\" href=\"#Go-1-9中\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.9/src/runtime/runtime2.go#L523\">Go 1.9中</a></h4>\n<blockquote>\n<p>最大为1024</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_115200.png\" alt=\"\"></p>\n<h4 id=\"Go-1-9以后「1-14为例」\"><a class=\"header-anchor\" href=\"#Go-1-9以后「1-14为例」\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L1018\">Go 1.9以后「1.14为例」</a></h4>\n<blockquote>\n<p>最大为int32的最大值：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_121640.png\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"坑点：\"><a class=\"header-anchor\" href=\"#坑点：\">¶</a>坑点：</h4>\n<p>Go 1.14以后看似最大是int32最大值，但是有一个新问题，真的可以设置到最大值吗？实验一把：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\truntime.GOMAXPROCS(<span class=\"type\">int32</span>(^<span class=\"type\">uint32</span>(<span class=\"number\">0</span>) &gt;&gt; <span class=\"number\">1</span>))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果报错：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal <span class=\"type\">error</span>: slice bounds out of <span class=\"keyword\">range</span></span><br><span class=\"line\">fatal <span class=\"type\">error</span>: unexpected signal during runtime execution</span><br><span class=\"line\"><span class=\"built_in\">panic</span> during <span class=\"built_in\">panic</span></span><br><span class=\"line\">[signal SIGSEGV: segmentation violation code=<span class=\"number\">0x1</span> addr=<span class=\"number\">0x4</span> pc=<span class=\"number\">0x104098b</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\">....</span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>🤔🤔🤔🤔🤔数组越界了？</p>\n</blockquote>\n<blockquote>\n<p>又反复看了看源码，问题找出来了：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210507_122730.png\" alt=\"\"></p>\n<h5 id=\"问题的关键\"><a class=\"header-anchor\" href=\"#问题的关键\">¶</a>问题的关键</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maskWords := (nprocs + <span class=\"number\">31</span>) / <span class=\"number\">32</span></span><br><span class=\"line\"></span><br><span class=\"line\">导致：maskWords数值溢出了，导致下面截取<span class=\"built_in\">panic</span>。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> nprocs &lt;= <span class=\"type\">int32</span>(<span class=\"built_in\">cap</span>(allp)) &#123;</span><br><span class=\"line\">\tallp = allp[:nprocs]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"GOMAXPROCS最大值？？\"><a class=\"header-anchor\" href=\"#GOMAXPROCS最大值？？\">¶</a>GOMAXPROCS最大值？？</h3>\n<blockquote>\n<p>所以GOMAXPROCS最大为: int32(^uint32(0) &gt;&gt; 1)-31</p>\n</blockquote>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105845.png","popularPost_tmp_gaData":{"updated":"Sat May 15 2021 18:56:17 GMT+0800 (中国标准时间)","title":"「48」GMP main之G&M创建","path":"archives/a90dcb34.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210506_105845.png","excerpt":"<p>前面说了GPM的main函数启动<a href=\"https://blog.imrcrab.com/archives/66b6223a.html#more\">「47」GPM main启动</a>，这次看下这个启动过程中如何创建第一个M和G的操作。</p>\n<p>在main函数汇编的入口地方call这么几个函数：</p>\n<ul>\n<li>args 参数设定</li>\n<li>osinit os系统初始化</li>\n<li>schedinit 调度初始化</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-05-06T13:55:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-06T13:55:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3984},{"title":"「49」Go runtime操作「持续更新」","date":"2021-05-06T13:55:30.000Z","updated":"2021-05-19T13:56:17.000Z","keywords":"Go,GPM,G0,M0","top":false,"mathjax":true,"abbrlink":"3b137bd0","_content":"\n主要从以下几个方面：\n* 变量的含义和存在的作用\n* 方法的用途\n* 设计方式分析\n\n<!--more-->\n\n### 变量作用：\n\n\n#### 全局的\n```go\nvar (\n\t// 全局m\n\tallm       *m\n\t// proc最大值\n\tgomaxprocs int32\n\t// cpu数量\n\tncpu       int32\n\tforcegc    forcegcstate\n\t// 调度过程中的结构体\n\tsched      schedt\n\t// gomaxprocs数量\n\tnewprocs   int32\n\n\t// allpLock protects P-less reads and size changes of allp, idlepMask,\n\t// and timerpMask, and all writes to allp.\n\t// 全局p对应的lock\n\tallpLock mutex\n\t// len(allp) == gomaxprocs; may change at safe points, otherwise\n\t// immutable.\n\t// P的全局队列\n\tallp []*p\n\t......\n\t....\n\t...\n)\n```\n\n\n#### G的状态：\n\n```go\n_Gidle\n_Grunnable\n_Grunning\n_Gsyscall\n_Gwaiting\n_Gdead\n_Gcopystack\n_Gpreempted\n_Gscan = 0x1000\n_Gscanrunnable\n_Gscansyscall\n_Gscanwaiting\n_Gscanpreempted\n```\n\n#### P的状态：\n\n```go\n_Pidle\n_Prunning\n_Psyscall\n_Pgcstop\n_Pdead\n```\n\n#### [sudog](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L332)\n\n```go\n// sudog represents a g in a wait list, such as for sending/receiving\n// on a channel.\n//\n// sudog is necessary because the g ↔ synchronization object relation\n// is many-to-many. A g can be on many wait lists, so there may be\n// many sudogs for one g; and many gs may be waiting on the same\n// synchronization object, so there may be many sudogs for one object.\n//\n// sudogs are allocated from a special pool. Use acquireSudog and\n// releaseSudog to allocate and free them.\ntype sudog struct {\n\t// The following fields are protected by the hchan.lock of the\n\t// channel this sudog is blocking on. shrinkstack depends on\n\t// this for sudogs involved in channel ops.\n\t// 当前处于goroutine\n\tg *g \n\n\t// isSelect indicates g is participating in a select, so\n\t// g.selectDone must be CAS'd to win the wake-up race.\n\t// 标记select\n\tisSelect bool\n\tnext     *sudog\n\tprev     *sudog\n\telem     unsafe.Pointer // data element (may point to stack)\n\n\t// The following fields are never accessed concurrently.\n\t// For channels, waitlink is only accessed by g.\n\t// For semaphores, all fields (including the ones above)\n\t// are only accessed when holding a semaRoot lock.\n\n\tacquiretime int64\n\treleasetime int64\n\tticket      uint32\n\tparent      *sudog // semaRoot binary tree\n\twaitlink    *sudog // g.waiting list or semaRoot\n\twaittail    *sudog // semaRoot\n\tc           *hchan // channel\n}\n```\n\n#### [g](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L395)\n\n```go\n// panic结构\n_panic\t\t*_panic\n// defer函数结构\n_defer\t\t*_defer\n// 绑定的m\nm     \t\t *m\n// goid序号\ngoid\t\t int64\n// 抢占关系 \npreempt\t\t bool\n// 等待的队列\nwaiting\t\t *sudog\n//cached for time.sleep\ntimer\t\t *timer\n.....\n....\n...\n```\n\n#### [m](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L477)\n\n```go\ng0 \t\t*g\ncurrg \t*g\nprocid  uint64\n// 自旋\nspinning bool \n// 随机数\nfastrand [2]uint32\n\npark     note\nalllink *m\n\n```\n\n#### [p](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L556)\n\n```go\nid\t\tint32\nstatus \tuint32\nm \t\t*m\n// timer使用相关\ntimerslock mutex\ntimers []*timer\nnumTimers uint32\n// 抢占关系\npreempt bool\n```\n\n#### [_defer](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865)\n```go\n\t...\n\tfn        *funcval // can be nil for open-coded defers\n\t_panic    *_panic  // panic that is running defer\n\tlink      *_defer\n\t...\n```\n#### [_panic](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903)\n```go\n// A _panic holds information about an active panic.\n//\n// A _panic value must only ever live on the stack.\n//\n// The argp and link fields are stack pointers, but don't need special\n// handling during stack growth: because they are pointer-typed and\n// _panic values only live on the stack, regular stack pointer\n// adjustment takes care of them.\ntype _panic struct {\n\t// function\n\targp      unsafe.Pointer // pointer to arguments of deferred call run during panic; cannot move - known to liblink\n\t// 参数\n\targ       interface{}    // argument to panic\n\t// link to _panic\n\tlink      *_panic        // link to earlier panic\n\tpc        uintptr        // where to return to in runtime if this panic is bypassed\n\tsp        unsafe.Pointer // where to return to in runtime if this panic is bypassed\n\t// recover标志\n\trecovered bool           // whether this panic is over\n\taborted   bool           // the panic was aborted\n\tgoexit    bool\n}\n```\n### 持续更新...","source":"_posts/49-GPM-runtime操作.md","raw":"---\ntitle: 「49」Go runtime操作「持续更新」\ndate: '2021/05/06 21:55:30'\nupdated: '2021/05/19 21:56:17'\nkeywords: 'Go,GPM,G0,M0'\ntop: false\ntags:\n  - Runtime\n  - Day\n  - Go\n  - Go源码\nmathjax: true\nabbrlink: 3b137bd0\n---\n\n主要从以下几个方面：\n* 变量的含义和存在的作用\n* 方法的用途\n* 设计方式分析\n\n<!--more-->\n\n### 变量作用：\n\n\n#### 全局的\n```go\nvar (\n\t// 全局m\n\tallm       *m\n\t// proc最大值\n\tgomaxprocs int32\n\t// cpu数量\n\tncpu       int32\n\tforcegc    forcegcstate\n\t// 调度过程中的结构体\n\tsched      schedt\n\t// gomaxprocs数量\n\tnewprocs   int32\n\n\t// allpLock protects P-less reads and size changes of allp, idlepMask,\n\t// and timerpMask, and all writes to allp.\n\t// 全局p对应的lock\n\tallpLock mutex\n\t// len(allp) == gomaxprocs; may change at safe points, otherwise\n\t// immutable.\n\t// P的全局队列\n\tallp []*p\n\t......\n\t....\n\t...\n)\n```\n\n\n#### G的状态：\n\n```go\n_Gidle\n_Grunnable\n_Grunning\n_Gsyscall\n_Gwaiting\n_Gdead\n_Gcopystack\n_Gpreempted\n_Gscan = 0x1000\n_Gscanrunnable\n_Gscansyscall\n_Gscanwaiting\n_Gscanpreempted\n```\n\n#### P的状态：\n\n```go\n_Pidle\n_Prunning\n_Psyscall\n_Pgcstop\n_Pdead\n```\n\n#### [sudog](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L332)\n\n```go\n// sudog represents a g in a wait list, such as for sending/receiving\n// on a channel.\n//\n// sudog is necessary because the g ↔ synchronization object relation\n// is many-to-many. A g can be on many wait lists, so there may be\n// many sudogs for one g; and many gs may be waiting on the same\n// synchronization object, so there may be many sudogs for one object.\n//\n// sudogs are allocated from a special pool. Use acquireSudog and\n// releaseSudog to allocate and free them.\ntype sudog struct {\n\t// The following fields are protected by the hchan.lock of the\n\t// channel this sudog is blocking on. shrinkstack depends on\n\t// this for sudogs involved in channel ops.\n\t// 当前处于goroutine\n\tg *g \n\n\t// isSelect indicates g is participating in a select, so\n\t// g.selectDone must be CAS'd to win the wake-up race.\n\t// 标记select\n\tisSelect bool\n\tnext     *sudog\n\tprev     *sudog\n\telem     unsafe.Pointer // data element (may point to stack)\n\n\t// The following fields are never accessed concurrently.\n\t// For channels, waitlink is only accessed by g.\n\t// For semaphores, all fields (including the ones above)\n\t// are only accessed when holding a semaRoot lock.\n\n\tacquiretime int64\n\treleasetime int64\n\tticket      uint32\n\tparent      *sudog // semaRoot binary tree\n\twaitlink    *sudog // g.waiting list or semaRoot\n\twaittail    *sudog // semaRoot\n\tc           *hchan // channel\n}\n```\n\n#### [g](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L395)\n\n```go\n// panic结构\n_panic\t\t*_panic\n// defer函数结构\n_defer\t\t*_defer\n// 绑定的m\nm     \t\t *m\n// goid序号\ngoid\t\t int64\n// 抢占关系 \npreempt\t\t bool\n// 等待的队列\nwaiting\t\t *sudog\n//cached for time.sleep\ntimer\t\t *timer\n.....\n....\n...\n```\n\n#### [m](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L477)\n\n```go\ng0 \t\t*g\ncurrg \t*g\nprocid  uint64\n// 自旋\nspinning bool \n// 随机数\nfastrand [2]uint32\n\npark     note\nalllink *m\n\n```\n\n#### [p](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L556)\n\n```go\nid\t\tint32\nstatus \tuint32\nm \t\t*m\n// timer使用相关\ntimerslock mutex\ntimers []*timer\nnumTimers uint32\n// 抢占关系\npreempt bool\n```\n\n#### [_defer](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865)\n```go\n\t...\n\tfn        *funcval // can be nil for open-coded defers\n\t_panic    *_panic  // panic that is running defer\n\tlink      *_defer\n\t...\n```\n#### [_panic](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903)\n```go\n// A _panic holds information about an active panic.\n//\n// A _panic value must only ever live on the stack.\n//\n// The argp and link fields are stack pointers, but don't need special\n// handling during stack growth: because they are pointer-typed and\n// _panic values only live on the stack, regular stack pointer\n// adjustment takes care of them.\ntype _panic struct {\n\t// function\n\targp      unsafe.Pointer // pointer to arguments of deferred call run during panic; cannot move - known to liblink\n\t// 参数\n\targ       interface{}    // argument to panic\n\t// link to _panic\n\tlink      *_panic        // link to earlier panic\n\tpc        uintptr        // where to return to in runtime if this panic is bypassed\n\tsp        unsafe.Pointer // where to return to in runtime if this panic is bypassed\n\t// recover标志\n\trecovered bool           // whether this panic is over\n\taborted   bool           // the panic was aborted\n\tgoexit    bool\n}\n```\n### 持续更新...","slug":"49-GPM-runtime操作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5e003jzfqx0k2jc8cw","content":"<p>主要从以下几个方面：</p>\n<ul>\n<li>变量的含义和存在的作用</li>\n<li>方法的用途</li>\n<li>设计方式分析</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"变量作用：\"><a class=\"header-anchor\" href=\"#变量作用：\">¶</a>变量作用：</h3>\n<h4 id=\"全局的\"><a class=\"header-anchor\" href=\"#全局的\">¶</a>全局的</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 全局m</span></span><br><span class=\"line\">\tallm       *m</span><br><span class=\"line\">\t<span class=\"comment\">// proc最大值</span></span><br><span class=\"line\">\tgomaxprocs <span class=\"type\">int32</span></span><br><span class=\"line\">\t<span class=\"comment\">// cpu数量</span></span><br><span class=\"line\">\tncpu       <span class=\"type\">int32</span></span><br><span class=\"line\">\tforcegc    forcegcstate</span><br><span class=\"line\">\t<span class=\"comment\">// 调度过程中的结构体</span></span><br><span class=\"line\">\tsched      schedt</span><br><span class=\"line\">\t<span class=\"comment\">// gomaxprocs数量</span></span><br><span class=\"line\">\tnewprocs   <span class=\"type\">int32</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// allpLock protects P-less reads and size changes of allp, idlepMask,</span></span><br><span class=\"line\">\t<span class=\"comment\">// and timerpMask, and all writes to allp.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 全局p对应的lock</span></span><br><span class=\"line\">\tallpLock mutex</span><br><span class=\"line\">\t<span class=\"comment\">// len(allp) == gomaxprocs; may change at safe points, otherwise</span></span><br><span class=\"line\">\t<span class=\"comment\">// immutable.</span></span><br><span class=\"line\">\t<span class=\"comment\">// P的全局队列</span></span><br><span class=\"line\">\tallp []*p</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"G的状态：\"><a class=\"header-anchor\" href=\"#G的状态：\">¶</a>G的状态：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Gidle</span><br><span class=\"line\">_Grunnable</span><br><span class=\"line\">_Grunning</span><br><span class=\"line\">_Gsyscall</span><br><span class=\"line\">_Gwaiting</span><br><span class=\"line\">_Gdead</span><br><span class=\"line\">_Gcopystack</span><br><span class=\"line\">_Gpreempted</span><br><span class=\"line\">_Gscan = <span class=\"number\">0x1000</span></span><br><span class=\"line\">_Gscanrunnable</span><br><span class=\"line\">_Gscansyscall</span><br><span class=\"line\">_Gscanwaiting</span><br><span class=\"line\">_Gscanpreempted</span><br></pre></td></tr></table></figure>\n<h4 id=\"P的状态：\"><a class=\"header-anchor\" href=\"#P的状态：\">¶</a>P的状态：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Pidle</span><br><span class=\"line\">_Prunning</span><br><span class=\"line\">_Psyscall</span><br><span class=\"line\">_Pgcstop</span><br><span class=\"line\">_Pdead</span><br></pre></td></tr></table></figure>\n<h4 id=\"sudog\"><a class=\"header-anchor\" href=\"#sudog\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L332\">sudog</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sudog represents a g in a wait list, such as for sending/receiving</span></span><br><span class=\"line\"><span class=\"comment\">// on a channel.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// sudog is necessary because the g ↔ synchronization object relation</span></span><br><span class=\"line\"><span class=\"comment\">// is many-to-many. A g can be on many wait lists, so there may be</span></span><br><span class=\"line\"><span class=\"comment\">// many sudogs for one g; and many gs may be waiting on the same</span></span><br><span class=\"line\"><span class=\"comment\">// synchronization object, so there may be many sudogs for one object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// sudogs are allocated from a special pool. Use acquireSudog and</span></span><br><span class=\"line\"><span class=\"comment\">// releaseSudog to allocate and free them.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> sudog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// The following fields are protected by the hchan.lock of the</span></span><br><span class=\"line\">\t<span class=\"comment\">// channel this sudog is blocking on. shrinkstack depends on</span></span><br><span class=\"line\">\t<span class=\"comment\">// this for sudogs involved in channel ops.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 当前处于goroutine</span></span><br><span class=\"line\">\tg *g </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isSelect indicates g is participating in a select, so</span></span><br><span class=\"line\">\t<span class=\"comment\">// g.selectDone must be CAS&#x27;d to win the wake-up race.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 标记select</span></span><br><span class=\"line\">\tisSelect <span class=\"type\">bool</span></span><br><span class=\"line\">\tnext     *sudog</span><br><span class=\"line\">\tprev     *sudog</span><br><span class=\"line\">\telem     unsafe.Pointer <span class=\"comment\">// data element (may point to stack)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The following fields are never accessed concurrently.</span></span><br><span class=\"line\">\t<span class=\"comment\">// For channels, waitlink is only accessed by g.</span></span><br><span class=\"line\">\t<span class=\"comment\">// For semaphores, all fields (including the ones above)</span></span><br><span class=\"line\">\t<span class=\"comment\">// are only accessed when holding a semaRoot lock.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tacquiretime <span class=\"type\">int64</span></span><br><span class=\"line\">\treleasetime <span class=\"type\">int64</span></span><br><span class=\"line\">\tticket      <span class=\"type\">uint32</span></span><br><span class=\"line\">\tparent      *sudog <span class=\"comment\">// semaRoot binary tree</span></span><br><span class=\"line\">\twaitlink    *sudog <span class=\"comment\">// g.waiting list or semaRoot</span></span><br><span class=\"line\">\twaittail    *sudog <span class=\"comment\">// semaRoot</span></span><br><span class=\"line\">\tc           *hchan <span class=\"comment\">// channel</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"g\"><a class=\"header-anchor\" href=\"#g\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L395\">g</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// panic结构</span></span><br><span class=\"line\">_panic\t\t*_panic</span><br><span class=\"line\"><span class=\"comment\">// defer函数结构</span></span><br><span class=\"line\">_defer\t\t*_defer</span><br><span class=\"line\"><span class=\"comment\">// 绑定的m</span></span><br><span class=\"line\">m     \t\t *m</span><br><span class=\"line\"><span class=\"comment\">// goid序号</span></span><br><span class=\"line\">goid\t\t <span class=\"type\">int64</span></span><br><span class=\"line\"><span class=\"comment\">// 抢占关系 </span></span><br><span class=\"line\">preempt\t\t <span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"comment\">// 等待的队列</span></span><br><span class=\"line\">waiting\t\t *sudog</span><br><span class=\"line\"><span class=\"comment\">//cached for time.sleep</span></span><br><span class=\"line\">timer\t\t *timer</span><br><span class=\"line\">.....</span><br><span class=\"line\">....</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"m\"><a class=\"header-anchor\" href=\"#m\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L477\">m</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g0 \t\t*g</span><br><span class=\"line\">currg \t*g</span><br><span class=\"line\">procid  <span class=\"type\">uint64</span></span><br><span class=\"line\"><span class=\"comment\">// 自旋</span></span><br><span class=\"line\">spinning <span class=\"type\">bool</span> </span><br><span class=\"line\"><span class=\"comment\">// 随机数</span></span><br><span class=\"line\">fastrand [<span class=\"number\">2</span>]<span class=\"type\">uint32</span></span><br><span class=\"line\"></span><br><span class=\"line\">park     note</span><br><span class=\"line\">alllink *m</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"p\"><a class=\"header-anchor\" href=\"#p\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L556\">p</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id\t\t<span class=\"type\">int32</span></span><br><span class=\"line\">status \t<span class=\"type\">uint32</span></span><br><span class=\"line\">m \t\t*m</span><br><span class=\"line\"><span class=\"comment\">// timer使用相关</span></span><br><span class=\"line\">timerslock mutex</span><br><span class=\"line\">timers []*timer</span><br><span class=\"line\">numTimers <span class=\"type\">uint32</span></span><br><span class=\"line\"><span class=\"comment\">// 抢占关系</span></span><br><span class=\"line\">preempt <span class=\"type\">bool</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"defer\"><a class=\"header-anchor\" href=\"#defer\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865\">_defer</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">fn        *funcval <span class=\"comment\">// can be nil for open-coded defers</span></span><br><span class=\"line\">_panic    *_panic  <span class=\"comment\">// panic that is running defer</span></span><br><span class=\"line\">link      *_defer</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"panic\"><a class=\"header-anchor\" href=\"#panic\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903\">_panic</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A _panic holds information about an active panic.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// A _panic value must only ever live on the stack.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The argp and link fields are stack pointers, but don&#x27;t need special</span></span><br><span class=\"line\"><span class=\"comment\">// handling during stack growth: because they are pointer-typed and</span></span><br><span class=\"line\"><span class=\"comment\">// _panic values only live on the stack, regular stack pointer</span></span><br><span class=\"line\"><span class=\"comment\">// adjustment takes care of them.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _panic <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// function</span></span><br><span class=\"line\">\targp      unsafe.Pointer <span class=\"comment\">// pointer to arguments of deferred call run during panic; cannot move - known to liblink</span></span><br><span class=\"line\">\t<span class=\"comment\">// 参数</span></span><br><span class=\"line\">\targ       <span class=\"keyword\">interface</span>&#123;&#125;    <span class=\"comment\">// argument to panic</span></span><br><span class=\"line\">\t<span class=\"comment\">// link to _panic</span></span><br><span class=\"line\">\tlink      *_panic        <span class=\"comment\">// link to earlier panic</span></span><br><span class=\"line\">\tpc        <span class=\"type\">uintptr</span>        <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\tsp        unsafe.Pointer <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\t<span class=\"comment\">// recover标志</span></span><br><span class=\"line\">\trecovered <span class=\"type\">bool</span>           <span class=\"comment\">// whether this panic is over</span></span><br><span class=\"line\">\taborted   <span class=\"type\">bool</span>           <span class=\"comment\">// the panic was aborted</span></span><br><span class=\"line\">\tgoexit    <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>\n","site":{"data":{}},"excerpt":"<p>主要从以下几个方面：</p>\n<ul>\n<li>变量的含义和存在的作用</li>\n<li>方法的用途</li>\n<li>设计方式分析</li>\n</ul>","more":"<h3 id=\"变量作用：\"><a class=\"header-anchor\" href=\"#变量作用：\">¶</a>变量作用：</h3>\n<h4 id=\"全局的\"><a class=\"header-anchor\" href=\"#全局的\">¶</a>全局的</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 全局m</span></span><br><span class=\"line\">\tallm       *m</span><br><span class=\"line\">\t<span class=\"comment\">// proc最大值</span></span><br><span class=\"line\">\tgomaxprocs <span class=\"type\">int32</span></span><br><span class=\"line\">\t<span class=\"comment\">// cpu数量</span></span><br><span class=\"line\">\tncpu       <span class=\"type\">int32</span></span><br><span class=\"line\">\tforcegc    forcegcstate</span><br><span class=\"line\">\t<span class=\"comment\">// 调度过程中的结构体</span></span><br><span class=\"line\">\tsched      schedt</span><br><span class=\"line\">\t<span class=\"comment\">// gomaxprocs数量</span></span><br><span class=\"line\">\tnewprocs   <span class=\"type\">int32</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// allpLock protects P-less reads and size changes of allp, idlepMask,</span></span><br><span class=\"line\">\t<span class=\"comment\">// and timerpMask, and all writes to allp.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 全局p对应的lock</span></span><br><span class=\"line\">\tallpLock mutex</span><br><span class=\"line\">\t<span class=\"comment\">// len(allp) == gomaxprocs; may change at safe points, otherwise</span></span><br><span class=\"line\">\t<span class=\"comment\">// immutable.</span></span><br><span class=\"line\">\t<span class=\"comment\">// P的全局队列</span></span><br><span class=\"line\">\tallp []*p</span><br><span class=\"line\">\t......</span><br><span class=\"line\">\t....</span><br><span class=\"line\">\t...</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h4 id=\"G的状态：\"><a class=\"header-anchor\" href=\"#G的状态：\">¶</a>G的状态：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Gidle</span><br><span class=\"line\">_Grunnable</span><br><span class=\"line\">_Grunning</span><br><span class=\"line\">_Gsyscall</span><br><span class=\"line\">_Gwaiting</span><br><span class=\"line\">_Gdead</span><br><span class=\"line\">_Gcopystack</span><br><span class=\"line\">_Gpreempted</span><br><span class=\"line\">_Gscan = <span class=\"number\">0x1000</span></span><br><span class=\"line\">_Gscanrunnable</span><br><span class=\"line\">_Gscansyscall</span><br><span class=\"line\">_Gscanwaiting</span><br><span class=\"line\">_Gscanpreempted</span><br></pre></td></tr></table></figure>\n<h4 id=\"P的状态：\"><a class=\"header-anchor\" href=\"#P的状态：\">¶</a>P的状态：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_Pidle</span><br><span class=\"line\">_Prunning</span><br><span class=\"line\">_Psyscall</span><br><span class=\"line\">_Pgcstop</span><br><span class=\"line\">_Pdead</span><br></pre></td></tr></table></figure>\n<h4 id=\"sudog\"><a class=\"header-anchor\" href=\"#sudog\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L332\">sudog</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sudog represents a g in a wait list, such as for sending/receiving</span></span><br><span class=\"line\"><span class=\"comment\">// on a channel.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// sudog is necessary because the g ↔ synchronization object relation</span></span><br><span class=\"line\"><span class=\"comment\">// is many-to-many. A g can be on many wait lists, so there may be</span></span><br><span class=\"line\"><span class=\"comment\">// many sudogs for one g; and many gs may be waiting on the same</span></span><br><span class=\"line\"><span class=\"comment\">// synchronization object, so there may be many sudogs for one object.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// sudogs are allocated from a special pool. Use acquireSudog and</span></span><br><span class=\"line\"><span class=\"comment\">// releaseSudog to allocate and free them.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> sudog <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// The following fields are protected by the hchan.lock of the</span></span><br><span class=\"line\">\t<span class=\"comment\">// channel this sudog is blocking on. shrinkstack depends on</span></span><br><span class=\"line\">\t<span class=\"comment\">// this for sudogs involved in channel ops.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 当前处于goroutine</span></span><br><span class=\"line\">\tg *g </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// isSelect indicates g is participating in a select, so</span></span><br><span class=\"line\">\t<span class=\"comment\">// g.selectDone must be CAS&#x27;d to win the wake-up race.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 标记select</span></span><br><span class=\"line\">\tisSelect <span class=\"type\">bool</span></span><br><span class=\"line\">\tnext     *sudog</span><br><span class=\"line\">\tprev     *sudog</span><br><span class=\"line\">\telem     unsafe.Pointer <span class=\"comment\">// data element (may point to stack)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// The following fields are never accessed concurrently.</span></span><br><span class=\"line\">\t<span class=\"comment\">// For channels, waitlink is only accessed by g.</span></span><br><span class=\"line\">\t<span class=\"comment\">// For semaphores, all fields (including the ones above)</span></span><br><span class=\"line\">\t<span class=\"comment\">// are only accessed when holding a semaRoot lock.</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tacquiretime <span class=\"type\">int64</span></span><br><span class=\"line\">\treleasetime <span class=\"type\">int64</span></span><br><span class=\"line\">\tticket      <span class=\"type\">uint32</span></span><br><span class=\"line\">\tparent      *sudog <span class=\"comment\">// semaRoot binary tree</span></span><br><span class=\"line\">\twaitlink    *sudog <span class=\"comment\">// g.waiting list or semaRoot</span></span><br><span class=\"line\">\twaittail    *sudog <span class=\"comment\">// semaRoot</span></span><br><span class=\"line\">\tc           *hchan <span class=\"comment\">// channel</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"g\"><a class=\"header-anchor\" href=\"#g\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L395\">g</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// panic结构</span></span><br><span class=\"line\">_panic\t\t*_panic</span><br><span class=\"line\"><span class=\"comment\">// defer函数结构</span></span><br><span class=\"line\">_defer\t\t*_defer</span><br><span class=\"line\"><span class=\"comment\">// 绑定的m</span></span><br><span class=\"line\">m     \t\t *m</span><br><span class=\"line\"><span class=\"comment\">// goid序号</span></span><br><span class=\"line\">goid\t\t <span class=\"type\">int64</span></span><br><span class=\"line\"><span class=\"comment\">// 抢占关系 </span></span><br><span class=\"line\">preempt\t\t <span class=\"type\">bool</span></span><br><span class=\"line\"><span class=\"comment\">// 等待的队列</span></span><br><span class=\"line\">waiting\t\t *sudog</span><br><span class=\"line\"><span class=\"comment\">//cached for time.sleep</span></span><br><span class=\"line\">timer\t\t *timer</span><br><span class=\"line\">.....</span><br><span class=\"line\">....</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"m\"><a class=\"header-anchor\" href=\"#m\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L477\">m</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">g0 \t\t*g</span><br><span class=\"line\">currg \t*g</span><br><span class=\"line\">procid  <span class=\"type\">uint64</span></span><br><span class=\"line\"><span class=\"comment\">// 自旋</span></span><br><span class=\"line\">spinning <span class=\"type\">bool</span> </span><br><span class=\"line\"><span class=\"comment\">// 随机数</span></span><br><span class=\"line\">fastrand [<span class=\"number\">2</span>]<span class=\"type\">uint32</span></span><br><span class=\"line\"></span><br><span class=\"line\">park     note</span><br><span class=\"line\">alllink *m</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"p\"><a class=\"header-anchor\" href=\"#p\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L556\">p</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">id\t\t<span class=\"type\">int32</span></span><br><span class=\"line\">status \t<span class=\"type\">uint32</span></span><br><span class=\"line\">m \t\t*m</span><br><span class=\"line\"><span class=\"comment\">// timer使用相关</span></span><br><span class=\"line\">timerslock mutex</span><br><span class=\"line\">timers []*timer</span><br><span class=\"line\">numTimers <span class=\"type\">uint32</span></span><br><span class=\"line\"><span class=\"comment\">// 抢占关系</span></span><br><span class=\"line\">preempt <span class=\"type\">bool</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"defer\"><a class=\"header-anchor\" href=\"#defer\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L865\">_defer</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">fn        *funcval <span class=\"comment\">// can be nil for open-coded defers</span></span><br><span class=\"line\">_panic    *_panic  <span class=\"comment\">// panic that is running defer</span></span><br><span class=\"line\">link      *_defer</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h4 id=\"panic\"><a class=\"header-anchor\" href=\"#panic\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/runtime2.go#L903\">_panic</a></h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// A _panic holds information about an active panic.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// A _panic value must only ever live on the stack.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// The argp and link fields are stack pointers, but don&#x27;t need special</span></span><br><span class=\"line\"><span class=\"comment\">// handling during stack growth: because they are pointer-typed and</span></span><br><span class=\"line\"><span class=\"comment\">// _panic values only live on the stack, regular stack pointer</span></span><br><span class=\"line\"><span class=\"comment\">// adjustment takes care of them.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> _panic <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// function</span></span><br><span class=\"line\">\targp      unsafe.Pointer <span class=\"comment\">// pointer to arguments of deferred call run during panic; cannot move - known to liblink</span></span><br><span class=\"line\">\t<span class=\"comment\">// 参数</span></span><br><span class=\"line\">\targ       <span class=\"keyword\">interface</span>&#123;&#125;    <span class=\"comment\">// argument to panic</span></span><br><span class=\"line\">\t<span class=\"comment\">// link to _panic</span></span><br><span class=\"line\">\tlink      *_panic        <span class=\"comment\">// link to earlier panic</span></span><br><span class=\"line\">\tpc        <span class=\"type\">uintptr</span>        <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\tsp        unsafe.Pointer <span class=\"comment\">// where to return to in runtime if this panic is bypassed</span></span><br><span class=\"line\">\t<span class=\"comment\">// recover标志</span></span><br><span class=\"line\">\trecovered <span class=\"type\">bool</span>           <span class=\"comment\">// whether this panic is over</span></span><br><span class=\"line\">\taborted   <span class=\"type\">bool</span>           <span class=\"comment\">// the panic was aborted</span></span><br><span class=\"line\">\tgoexit    <span class=\"type\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"持续更新…\"><a class=\"header-anchor\" href=\"#持续更新…\">¶</a>持续更新…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed May 19 2021 21:56:17 GMT+0800 (中国标准时间)","title":"「49」Go runtime操作「持续更新」","path":"archives/3b137bd0.html","eyeCatchImage":null,"excerpt":"<p>主要从以下几个方面：</p>\n<ul>\n<li>变量的含义和存在的作用</li>\n<li>方法的用途</li>\n<li>设计方式分析</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-05-06T13:55:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-06T13:55:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Day","Runtime"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3047},{"title":"「5」Git GPG签署工作","date":"2020-09-02T14:29:40.000Z","updated":"2020-09-02T14:29:40.000Z","keywords":"git,git签署证书,git常用","abbrlink":"580377d0","_content":"\n### GPG场景\n\n Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。\n\n 最终效果：如下图所示\n\n ![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png)\n\n### 安装过程\n\nwindows安装地址： [点击下载](https://www.gnupg.org/)\n\nmac os为例：\n<!-- more -->\n#### 安装GPG\n```\nbrew install gpg\n\n查看结果：\n± gpg --version                                                                                                                                                                                                                                     ⏎\n\ngpg (GnuPG) 2.2.22\nlibgcrypt 1.8.6\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nHome: /Users/gogoowang/.gnupg\n支持的算法：\n公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA\n密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n    CAMELLIA128, CAMELLIA192, CAMELLIA256\n散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\n压缩：  不压缩, ZIP, ZLIB, BZIP2\n\n```\n\n#### 生成密钥\n```\ngpg --full-generate-key\n```\n\n需要填写的地方：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123803.png)\n\n\n#### 查看密钥完整信息\n\n```\ngpg --list-secret-keys --keyid-format LONG\n```\n\n>secret keys（红圈地方后续用到，留意下）：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124016.png)\n\n#### 根据secret keys生成PGP\n\n```\ngpg --armor --export  7BB8CF3593CA174C\n```\n\n生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124305.png)\n\n#### Github账号中设置\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124443.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124527.png)\n\n\n>将上述生成的PGP填入，点击[Add GPG Key]即可\n\n\n#### 配置本地GPG签名信息\n依次执行下面命令\n```\n1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys\n2、git config commit.gpgsign true\n3、git config --global commit.gpgsign true\n```\n\n#### Git PGP生效\n\n>再次提交commit即可生效。产生如下图的签名效果：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png)\n\n#### End","source":"_posts/5-Git-GPG签署工作.md","raw":"---\ntitle: 「5」Git GPG签署工作\ndate: '2020/09/02 22:29:40'\nupdated: '2020/09/02 22:29:40'\nkeywords: 'git,git签署证书,git常用'\ntags:\n  - Git\nabbrlink: 580377d0\n---\n\n### GPG场景\n\n Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。\n\n 最终效果：如下图所示\n\n ![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png)\n\n### 安装过程\n\nwindows安装地址： [点击下载](https://www.gnupg.org/)\n\nmac os为例：\n<!-- more -->\n#### 安装GPG\n```\nbrew install gpg\n\n查看结果：\n± gpg --version                                                                                                                                                                                                                                     ⏎\n\ngpg (GnuPG) 2.2.22\nlibgcrypt 1.8.6\nCopyright (C) 2020 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nHome: /Users/gogoowang/.gnupg\n支持的算法：\n公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA\n密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,\n    CAMELLIA128, CAMELLIA192, CAMELLIA256\n散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224\n压缩：  不压缩, ZIP, ZLIB, BZIP2\n\n```\n\n#### 生成密钥\n```\ngpg --full-generate-key\n```\n\n需要填写的地方：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123803.png)\n\n\n#### 查看密钥完整信息\n\n```\ngpg --list-secret-keys --keyid-format LONG\n```\n\n>secret keys（红圈地方后续用到，留意下）：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124016.png)\n\n#### 根据secret keys生成PGP\n\n```\ngpg --armor --export  7BB8CF3593CA174C\n```\n\n生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124305.png)\n\n#### Github账号中设置\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124443.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124527.png)\n\n\n>将上述生成的PGP填入，点击[Add GPG Key]即可\n\n\n#### 配置本地GPG签名信息\n依次执行下面命令\n```\n1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys\n2、git config commit.gpgsign true\n3、git config --global commit.gpgsign true\n```\n\n#### Git PGP生效\n\n>再次提交commit即可生效。产生如下图的签名效果：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png)\n\n#### End","slug":"5-Git-GPG签署工作","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5g003mzfqx6vgohdue","content":"<h3 id=\"GPG场景\"><a class=\"header-anchor\" href=\"#GPG场景\">¶</a>GPG场景</h3>\n<p>Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n<p>最终效果：如下图所示</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png\" alt=\"\"></p>\n<h3 id=\"安装过程\"><a class=\"header-anchor\" href=\"#安装过程\">¶</a>安装过程</h3>\n<p>windows安装地址： <a href=\"https://www.gnupg.org/\">点击下载</a></p>\n<p>mac os为例：</p>\n<span id=\"more\"></span>\n<h4 id=\"安装GPG\"><a class=\"header-anchor\" href=\"#安装GPG\">¶</a>安装GPG</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gpg</span><br><span class=\"line\"></span><br><span class=\"line\">查看结果：</span><br><span class=\"line\">± gpg --version                                                                                                                                                                                                                                     ⏎</span><br><span class=\"line\"></span><br><span class=\"line\">gpg (GnuPG) 2.2.22</span><br><span class=\"line\">libgcrypt 1.8.6</span><br><span class=\"line\">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\"></span><br><span class=\"line\">Home: /Users/gogoowang/.gnupg</span><br><span class=\"line\">支持的算法：</span><br><span class=\"line\">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class=\"line\">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class=\"line\">    CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class=\"line\">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class=\"line\">压缩：  不压缩, ZIP, ZLIB, BZIP2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密钥\"><a class=\"header-anchor\" href=\"#生成密钥\">¶</a>生成密钥</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --full-generate-key</span><br></pre></td></tr></table></figure>\n<p>需要填写的地方：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123803.png\" alt=\"\"></p>\n<h4 id=\"查看密钥完整信息\"><a class=\"header-anchor\" href=\"#查看密钥完整信息\">¶</a>查看密钥完整信息</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>secret keys（红圈地方后续用到，留意下）：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124016.png\" alt=\"\"></p>\n<h4 id=\"根据secret-keys生成PGP\"><a class=\"header-anchor\" href=\"#根据secret-keys生成PGP\">¶</a>根据secret keys生成PGP</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --armor --export  7BB8CF3593CA174C</span><br></pre></td></tr></table></figure>\n<p>生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124305.png\" alt=\"\"></p>\n<h4 id=\"Github账号中设置\"><a class=\"header-anchor\" href=\"#Github账号中设置\">¶</a>Github账号中设置</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124443.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124527.png\" alt=\"\"></p>\n<blockquote>\n<p>将上述生成的PGP填入，点击[Add GPG Key]即可</p>\n</blockquote>\n<h4 id=\"配置本地GPG签名信息\"><a class=\"header-anchor\" href=\"#配置本地GPG签名信息\">¶</a>配置本地GPG签名信息</h4>\n<p>依次执行下面命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys</span><br><span class=\"line\">2、git config commit.gpgsign true</span><br><span class=\"line\">3、git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-PGP生效\"><a class=\"header-anchor\" href=\"#Git-PGP生效\">¶</a>Git PGP生效</h4>\n<blockquote>\n<p>再次提交commit即可生效。产生如下图的签名效果：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png\" alt=\"\"></p>\n<h4 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h4>\n","site":{"data":{}},"excerpt":"<h3 id=\"GPG场景\"><a class=\"header-anchor\" href=\"#GPG场景\">¶</a>GPG场景</h3>\n<p>Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n<p>最终效果：如下图所示</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png\" alt=\"\"></p>\n<h3 id=\"安装过程\"><a class=\"header-anchor\" href=\"#安装过程\">¶</a>安装过程</h3>\n<p>windows安装地址： <a href=\"https://www.gnupg.org/\">点击下载</a></p>\n<p>mac os为例：</p>","more":"<h4 id=\"安装GPG\"><a class=\"header-anchor\" href=\"#安装GPG\">¶</a>安装GPG</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gpg</span><br><span class=\"line\"></span><br><span class=\"line\">查看结果：</span><br><span class=\"line\">± gpg --version                                                                                                                                                                                                                                     ⏎</span><br><span class=\"line\"></span><br><span class=\"line\">gpg (GnuPG) 2.2.22</span><br><span class=\"line\">libgcrypt 1.8.6</span><br><span class=\"line\">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.</span><br><span class=\"line\"></span><br><span class=\"line\">Home: /Users/gogoowang/.gnupg</span><br><span class=\"line\">支持的算法：</span><br><span class=\"line\">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class=\"line\">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class=\"line\">    CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class=\"line\">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class=\"line\">压缩：  不压缩, ZIP, ZLIB, BZIP2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密钥\"><a class=\"header-anchor\" href=\"#生成密钥\">¶</a>生成密钥</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --full-generate-key</span><br></pre></td></tr></table></figure>\n<p>需要填写的地方：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123803.png\" alt=\"\"></p>\n<h4 id=\"查看密钥完整信息\"><a class=\"header-anchor\" href=\"#查看密钥完整信息\">¶</a>查看密钥完整信息</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --list-secret-keys --keyid-format LONG</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>secret keys（红圈地方后续用到，留意下）：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124016.png\" alt=\"\"></p>\n<h4 id=\"根据secret-keys生成PGP\"><a class=\"header-anchor\" href=\"#根据secret-keys生成PGP\">¶</a>根据secret keys生成PGP</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gpg --armor --export  7BB8CF3593CA174C</span><br></pre></td></tr></table></figure>\n<p>生成的PGP结果，后续需要将此结果导入到Github账号的配置信息中<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124305.png\" alt=\"\"></p>\n<h4 id=\"Github账号中设置\"><a class=\"header-anchor\" href=\"#Github账号中设置\">¶</a>Github账号中设置</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124443.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902124527.png\" alt=\"\"></p>\n<blockquote>\n<p>将上述生成的PGP填入，点击[Add GPG Key]即可</p>\n</blockquote>\n<h4 id=\"配置本地GPG签名信息\"><a class=\"header-anchor\" href=\"#配置本地GPG签名信息\">¶</a>配置本地GPG签名信息</h4>\n<p>依次执行下面命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、git config --global user.signingkey 7BB8CF3593CA174C  #此处的7BB8CF3593CA174C为生成的secret keys</span><br><span class=\"line\">2、git config commit.gpgsign true</span><br><span class=\"line\">3、git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure>\n<h4 id=\"Git-PGP生效\"><a class=\"header-anchor\" href=\"#Git-PGP生效\">¶</a>Git PGP生效</h4>\n<blockquote>\n<p>再次提交commit即可生效。产生如下图的签名效果：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png\" alt=\"\"></p>\n<h4 id=\"End\"><a class=\"header-anchor\" href=\"#End\">¶</a>End</h4>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png","popularPost_tmp_gaData":{"updated":"Wed Sep 02 2020 22:29:40 GMT+0800 (中国标准时间)","title":"「5」Git GPG签署工作","path":"archives/580377d0.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png","excerpt":"<h3 id=\"GPG场景\"><a class=\"header-anchor\" href=\"#GPG场景\">¶</a>GPG场景</h3>\n<p>Git 虽然是密码级安全的，但它不是万无一失的。 如果你从因特网上的其他人那里拿取工作，并且想要验证提交是不是真正地来自于可信来源， Git 提供了几种通过 GPG 来签署和验证工作的方式。</p>\n<p>最终效果：如下图所示</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902123343.png\" alt=\"\"></p>\n<h3 id=\"安装过程\"><a class=\"header-anchor\" href=\"#安装过程\">¶</a>安装过程</h3>\n<p>windows安装地址： <a href=\"https://www.gnupg.org/\">点击下载</a></p>\n<p>mac os为例：</p>","date":{"_isAMomentObject":true,"_i":"2020-09-02T14:29:40.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-02T14:29:40.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1120},{"title":"「50」Map GC问题","date":"2021-05-12T14:24:19.000Z","updated":"2021-05-12T14:56:17.000Z","keywords":"Go,Map","top":false,"mathjax":true,"abbrlink":"af25fb6c","_content":"\n问题的起因:[「29」map delete Mem不释放问题](https://blog.imrcrab.com/archives/2de36dd7.html)\n\n那么问题来:\n* map内存释放的时机呢？\n* 释放如果map过大，释放内存过程中会不会有GC StopWorld问题?\n\n<!--more-->\n\n### 代码部分：\n\n#### map的value不包含pointer：\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/trace\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc AddMap() {\n\tnow:=time.Now().Unix()\n\tfmt.Println(now)\n\tfor i := 0; i < 10000; i++ {\n\t\tmmp := make(map[string]int)\n\t\tfor ia := 0; ia < 100000; ia++ {\n\t\t\tv := ia\n\t\t\tmmp[strconv.Itoa(ia)] = v\n\t\t}\n\t}\n\tfmt.Println(time.Now().Unix()-now)\n}\n\n\nfunc main() {\n\ttrace.Start(os.Stderr)\n\tdefer trace.Stop()\n\tAddMap()\n}\n```\n\n#### map的value包含pointer：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/trace\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc AddMap() {\n\tnow:=time.Now().Unix()\n\tfmt.Println(now)\n\tfor i := 0; i < 10000; i++ {\n\t\tmmp := make(map[string]*int)\n\t\tfor ia := 0; ia < 100000; ia++ {\n\t\t\tv := ia\n\t\t\tmmp[strconv.Itoa(ia)] = &v\n\t\t}\n\t}\n\tfmt.Println(time.Now().Unix()-now)\n}\n\n\nfunc main() {\n\ttrace.Start(os.Stderr)\n\tdefer trace.Stop()\n\tAddMap()\n}\n```\n\n### trace结果：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210512_113756.png)\n\n### 初步方案：\n\n\n### Slice替代Map方案：\n\n\n### Test\n\n### benchmark\n\n### 待更新\n\n","source":"_posts/50-map影响GC问题.md","raw":"---\ntitle: 「50」Map GC问题\ndate: '2021/05/12 22:24:19'\nupdated: '2021/05/12 22:56:17'\nkeywords: 'Go,Map'\ntop: false\ntags:\n  - Runtime\n  - Day\n  - Go\n  - Go源码\nmathjax: true\nabbrlink: af25fb6c\n---\n\n问题的起因:[「29」map delete Mem不释放问题](https://blog.imrcrab.com/archives/2de36dd7.html)\n\n那么问题来:\n* map内存释放的时机呢？\n* 释放如果map过大，释放内存过程中会不会有GC StopWorld问题?\n\n<!--more-->\n\n### 代码部分：\n\n#### map的value不包含pointer：\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/trace\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc AddMap() {\n\tnow:=time.Now().Unix()\n\tfmt.Println(now)\n\tfor i := 0; i < 10000; i++ {\n\t\tmmp := make(map[string]int)\n\t\tfor ia := 0; ia < 100000; ia++ {\n\t\t\tv := ia\n\t\t\tmmp[strconv.Itoa(ia)] = v\n\t\t}\n\t}\n\tfmt.Println(time.Now().Unix()-now)\n}\n\n\nfunc main() {\n\ttrace.Start(os.Stderr)\n\tdefer trace.Stop()\n\tAddMap()\n}\n```\n\n#### map的value包含pointer：\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"runtime/trace\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc AddMap() {\n\tnow:=time.Now().Unix()\n\tfmt.Println(now)\n\tfor i := 0; i < 10000; i++ {\n\t\tmmp := make(map[string]*int)\n\t\tfor ia := 0; ia < 100000; ia++ {\n\t\t\tv := ia\n\t\t\tmmp[strconv.Itoa(ia)] = &v\n\t\t}\n\t}\n\tfmt.Println(time.Now().Unix()-now)\n}\n\n\nfunc main() {\n\ttrace.Start(os.Stderr)\n\tdefer trace.Stop()\n\tAddMap()\n}\n```\n\n### trace结果：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210512_113756.png)\n\n### 初步方案：\n\n\n### Slice替代Map方案：\n\n\n### Test\n\n### benchmark\n\n### 待更新\n\n","slug":"50-map影响GC问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5g003ozfqxdf1fhs7u","content":"<p>问题的起因:<a href=\"https://blog.imrcrab.com/archives/2de36dd7.html\">「29」map delete Mem不释放问题</a></p>\n<p>那么问题来:</p>\n<ul>\n<li>map内存释放的时机呢？</li>\n<li>释放如果map过大，释放内存过程中会不会有GC StopWorld问题?</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"代码部分：\"><a class=\"header-anchor\" href=\"#代码部分：\">¶</a>代码部分：</h3>\n<h4 id=\"map的value不包含pointer：\"><a class=\"header-anchor\" href=\"#map的value不包含pointer：\">¶</a>map的value不包含pointer：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime/trace&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow:=time.Now().Unix()</span><br><span class=\"line\">\tfmt.Println(now)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\tmmp := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; <span class=\"number\">100000</span>; ia++ &#123;</span><br><span class=\"line\">\t\t\tv := ia</span><br><span class=\"line\">\t\t\tmmp[strconv.Itoa(ia)] = v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(time.Now().Unix()-now)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace.Start(os.Stderr)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> trace.Stop()</span><br><span class=\"line\">\tAddMap()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map的value包含pointer：\"><a class=\"header-anchor\" href=\"#map的value包含pointer：\">¶</a>map的value包含pointer：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime/trace&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow:=time.Now().Unix()</span><br><span class=\"line\">\tfmt.Println(now)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\tmmp := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; <span class=\"number\">100000</span>; ia++ &#123;</span><br><span class=\"line\">\t\t\tv := ia</span><br><span class=\"line\">\t\t\tmmp[strconv.Itoa(ia)] = &amp;v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(time.Now().Unix()-now)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace.Start(os.Stderr)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> trace.Stop()</span><br><span class=\"line\">\tAddMap()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"trace结果：\"><a class=\"header-anchor\" href=\"#trace结果：\">¶</a>trace结果：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210512_113756.png\" alt=\"\"></p>\n<h3 id=\"初步方案：\"><a class=\"header-anchor\" href=\"#初步方案：\">¶</a>初步方案：</h3>\n<h3 id=\"Slice替代Map方案：\"><a class=\"header-anchor\" href=\"#Slice替代Map方案：\">¶</a>Slice替代Map方案：</h3>\n<h3 id=\"Test\"><a class=\"header-anchor\" href=\"#Test\">¶</a>Test</h3>\n<h3 id=\"benchmark\"><a class=\"header-anchor\" href=\"#benchmark\">¶</a>benchmark</h3>\n<h3 id=\"待更新\"><a class=\"header-anchor\" href=\"#待更新\">¶</a>待更新</h3>\n","site":{"data":{}},"excerpt":"<p>问题的起因:<a href=\"https://blog.imrcrab.com/archives/2de36dd7.html\">「29」map delete Mem不释放问题</a></p>\n<p>那么问题来:</p>\n<ul>\n<li>map内存释放的时机呢？</li>\n<li>释放如果map过大，释放内存过程中会不会有GC StopWorld问题?</li>\n</ul>","more":"<h3 id=\"代码部分：\"><a class=\"header-anchor\" href=\"#代码部分：\">¶</a>代码部分：</h3>\n<h4 id=\"map的value不包含pointer：\"><a class=\"header-anchor\" href=\"#map的value不包含pointer：\">¶</a>map的value不包含pointer：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime/trace&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow:=time.Now().Unix()</span><br><span class=\"line\">\tfmt.Println(now)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\tmmp := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; <span class=\"number\">100000</span>; ia++ &#123;</span><br><span class=\"line\">\t\t\tv := ia</span><br><span class=\"line\">\t\t\tmmp[strconv.Itoa(ia)] = v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(time.Now().Unix()-now)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace.Start(os.Stderr)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> trace.Stop()</span><br><span class=\"line\">\tAddMap()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"map的value包含pointer：\"><a class=\"header-anchor\" href=\"#map的value包含pointer：\">¶</a>map的value包含pointer：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime/trace&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strconv&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AddMap</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnow:=time.Now().Unix()</span><br><span class=\"line\">\tfmt.Println(now)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10000</span>; i++ &#123;</span><br><span class=\"line\">\t\tmmp := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*<span class=\"type\">int</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> ia := <span class=\"number\">0</span>; ia &lt; <span class=\"number\">100000</span>; ia++ &#123;</span><br><span class=\"line\">\t\t\tv := ia</span><br><span class=\"line\">\t\t\tmmp[strconv.Itoa(ia)] = &amp;v</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(time.Now().Unix()-now)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ttrace.Start(os.Stderr)</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> trace.Stop()</span><br><span class=\"line\">\tAddMap()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"trace结果：\"><a class=\"header-anchor\" href=\"#trace结果：\">¶</a>trace结果：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210512_113756.png\" alt=\"\"></p>\n<h3 id=\"初步方案：\"><a class=\"header-anchor\" href=\"#初步方案：\">¶</a>初步方案：</h3>\n<h3 id=\"Slice替代Map方案：\"><a class=\"header-anchor\" href=\"#Slice替代Map方案：\">¶</a>Slice替代Map方案：</h3>\n<h3 id=\"Test\"><a class=\"header-anchor\" href=\"#Test\">¶</a>Test</h3>\n<h3 id=\"benchmark\"><a class=\"header-anchor\" href=\"#benchmark\">¶</a>benchmark</h3>\n<h3 id=\"待更新\"><a class=\"header-anchor\" href=\"#待更新\">¶</a>待更新</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210512_113756.png","popularPost_tmp_gaData":{"updated":"Wed May 12 2021 22:56:17 GMT+0800 (中国标准时间)","title":"「50」Map GC问题","path":"archives/af25fb6c.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210512_113756.png","excerpt":"<p>问题的起因:<a href=\"https://blog.imrcrab.com/archives/2de36dd7.html\">「29」map delete Mem不释放问题</a></p>\n<p>那么问题来:</p>\n<ul>\n<li>map内存释放的时机呢？</li>\n<li>释放如果map过大，释放内存过程中会不会有GC StopWorld问题?</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-05-12T14:24:19.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-12T14:24:19.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Day","Runtime"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1075},{"title":"「51」getg()函数实现源码","date":"2021-05-13T14:30:30.000Z","updated":"2021-05-13T15:20:17.000Z","keywords":"Go,GPM,G0,M0","mathjax":true,"abbrlink":"82f0ffe7","_content":"\n在学习[👉🏾schedinit()函数](https://blog.imrcrab.com/archives/a90dcb34.html#call-schedinit%E5%87%BD%E6%95%B0)过程中发现有这个么函数：\n>getg()\n\n多处都有使用的情况，但是问题来了，到底是如何实现的，如何获取的G呢？\n\n<!--more-->\n\n### 定义\n源码中的定义：[🙌🏽  func getg() *g](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/stubs.go#L18)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_113610.png)\n\n\n### 使用：\n\n从上面的结果来看，主要from TLS or 编译器:\n\n[👉🏾1.14呈现：](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/amd64/ssa.go#L895)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_114619.png)\n\n\n>根据是否使用TLS分两种：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_115015.png)\n\n### END","source":"_posts/51-getg-函数实现.md","raw":"---\ntitle: 「51」getg()函数实现源码\ndate: '2021/05/13 22:30:30'\nupdated: '2021/05/13 23:20:17'\nkeywords: 'Go,GPM,G0,M0'\ntags:\n  - GPM\n  - Day\n  - Go\n  - Go源码\nmathjax: true\nabbrlink: 82f0ffe7\n---\n\n在学习[👉🏾schedinit()函数](https://blog.imrcrab.com/archives/a90dcb34.html#call-schedinit%E5%87%BD%E6%95%B0)过程中发现有这个么函数：\n>getg()\n\n多处都有使用的情况，但是问题来了，到底是如何实现的，如何获取的G呢？\n\n<!--more-->\n\n### 定义\n源码中的定义：[🙌🏽  func getg() *g](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/stubs.go#L18)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_113610.png)\n\n\n### 使用：\n\n从上面的结果来看，主要from TLS or 编译器:\n\n[👉🏾1.14呈现：](https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/amd64/ssa.go#L895)\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_114619.png)\n\n\n>根据是否使用TLS分两种：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_115015.png)\n\n### END","slug":"51-getg-函数实现","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5h003rzfqxhae70fsy","content":"<p>在学习<a href=\"https://blog.imrcrab.com/archives/a90dcb34.html#call-schedinit%E5%87%BD%E6%95%B0\">👉🏾schedinit()函数</a>过程中发现有这个么函数：</p>\n<blockquote>\n<p>getg()</p>\n</blockquote>\n<p>多处都有使用的情况，但是问题来了，到底是如何实现的，如何获取的G呢？</p>\n<span id=\"more\"></span>\n<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p>源码中的定义：<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/stubs.go#L18\">🙌🏽  func getg() *g</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_113610.png\" alt=\"\"></p>\n<h3 id=\"使用：\"><a class=\"header-anchor\" href=\"#使用：\">¶</a>使用：</h3>\n<p>从上面的结果来看，主要from TLS or 编译器:</p>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/amd64/ssa.go#L895\">👉🏾1.14呈现：</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_114619.png\" alt=\"\"></p>\n<blockquote>\n<p>根据是否使用TLS分两种：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_115015.png\" alt=\"\"></p>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>在学习<a href=\"https://blog.imrcrab.com/archives/a90dcb34.html#call-schedinit%E5%87%BD%E6%95%B0\">👉🏾schedinit()函数</a>过程中发现有这个么函数：</p>\n<blockquote>\n<p>getg()</p>\n</blockquote>\n<p>多处都有使用的情况，但是问题来了，到底是如何实现的，如何获取的G呢？</p>","more":"<h3 id=\"定义\"><a class=\"header-anchor\" href=\"#定义\">¶</a>定义</h3>\n<p>源码中的定义：<a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/stubs.go#L18\">🙌🏽  func getg() *g</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_113610.png\" alt=\"\"></p>\n<h3 id=\"使用：\"><a class=\"header-anchor\" href=\"#使用：\">¶</a>使用：</h3>\n<p>从上面的结果来看，主要from TLS or 编译器:</p>\n<p><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/cmd/compile/internal/amd64/ssa.go#L895\">👉🏾1.14呈现：</a></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_114619.png\" alt=\"\"></p>\n<blockquote>\n<p>根据是否使用TLS分两种：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_115015.png\" alt=\"\"></p>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_113610.png","popularPost_tmp_gaData":{"updated":"Thu May 13 2021 23:20:17 GMT+0800 (中国标准时间)","title":"「51」getg()函数实现源码","path":"archives/82f0ffe7.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210513_113610.png","excerpt":"<p>在学习<a href=\"https://blog.imrcrab.com/archives/a90dcb34.html#call-schedinit%E5%87%BD%E6%95%B0\">👉🏾schedinit()函数</a>过程中发现有这个么函数：</p>\n<blockquote>\n<p>getg()</p>\n</blockquote>\n<p>多处都有使用的情况，但是问题来了，到底是如何实现的，如何获取的G呢？</p>","date":{"_isAMomentObject":true,"_i":"2021-05-13T14:30:30.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-13T14:30:30.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","GPM","Go源码","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":154},{"title":"「52」Mysql Top N问题","date":"2021-05-18T16:50:51.000Z","updated":"2021-05-18T16:51:51.000Z","mathjax":true,"abbrlink":"2dfee217","_content":"\n\n### 问题是这样的：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png)\n\n>求不同的age分组，按照createTime正序「从小到大」排序的前N个。\n\n<!--more-->\n\n### 解决办法：\n\n```go\n\nSELECT\n        t1.*\n    FROM\n    table_a t1\n    where (SELECT count(*) + 1 FROM table_a t2 WHERE t2.age = t1.age AND t2.create_time > t1.create_time ) <=1 order by create_time desc\n\n```\n\n#### 结果：\n\n> 按照age分组，createTime正序排序的Top 2数据\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125510.png)\n\n\n### END\n\n","source":"_posts/52-Mysql-top-N问题.md","raw":"---\ntitle: 「52」Mysql Top N问题\ndate: '2021/05/19 00:50:51'\nupdated: '2021/05/19 00:51:51'\nmathjax: true\ntags:\n  - Day\n  - MySQL\nabbrlink: 2dfee217\n---\n\n\n### 问题是这样的：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png)\n\n>求不同的age分组，按照createTime正序「从小到大」排序的前N个。\n\n<!--more-->\n\n### 解决办法：\n\n```go\n\nSELECT\n        t1.*\n    FROM\n    table_a t1\n    where (SELECT count(*) + 1 FROM table_a t2 WHERE t2.age = t1.age AND t2.create_time > t1.create_time ) <=1 order by create_time desc\n\n```\n\n#### 结果：\n\n> 按照age分组，createTime正序排序的Top 2数据\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125510.png)\n\n\n### END\n\n","slug":"52-Mysql-top-N问题","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5i003tzfqx4u681tav","content":"<h3 id=\"问题是这样的：\"><a class=\"header-anchor\" href=\"#问题是这样的：\">¶</a>问题是这样的：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png\" alt=\"\"></p>\n<blockquote>\n<p>求不同的age分组，按照createTime正序「从小到大」排序的前N个。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"解决办法：\"><a class=\"header-anchor\" href=\"#解决办法：\">¶</a>解决办法：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT</span><br><span class=\"line\">        t1.*</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">    table_a t1</span><br><span class=\"line\">    where (SELECT count(*) + <span class=\"number\">1</span> FROM table_a t2 WHERE t2.age = t1.age AND t2.create_time &gt; t1.create_time ) &lt;=<span class=\"number\">1</span> order by create_time desc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"结果：\"><a class=\"header-anchor\" href=\"#结果：\">¶</a>结果：</h4>\n<blockquote>\n<p>按照age分组，createTime正序排序的Top 2数据</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125510.png\" alt=\"\"></p>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题是这样的：\"><a class=\"header-anchor\" href=\"#问题是这样的：\">¶</a>问题是这样的：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png\" alt=\"\"></p>\n<blockquote>\n<p>求不同的age分组，按照createTime正序「从小到大」排序的前N个。</p>\n</blockquote>","more":"<h3 id=\"解决办法：\"><a class=\"header-anchor\" href=\"#解决办法：\">¶</a>解决办法：</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">SELECT</span><br><span class=\"line\">        t1.*</span><br><span class=\"line\">    FROM</span><br><span class=\"line\">    table_a t1</span><br><span class=\"line\">    where (SELECT count(*) + <span class=\"number\">1</span> FROM table_a t2 WHERE t2.age = t1.age AND t2.create_time &gt; t1.create_time ) &lt;=<span class=\"number\">1</span> order by create_time desc</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"结果：\"><a class=\"header-anchor\" href=\"#结果：\">¶</a>结果：</h4>\n<blockquote>\n<p>按照age分组，createTime正序排序的Top 2数据</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125510.png\" alt=\"\"></p>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png","popularPost_tmp_gaData":{"updated":"Wed May 19 2021 00:51:51 GMT+0800 (中国标准时间)","title":"「52」Mysql Top N问题","path":"archives/2dfee217.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png","excerpt":"<h3 id=\"问题是这样的：\"><a class=\"header-anchor\" href=\"#问题是这样的：\">¶</a>问题是这样的：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210519_125155.png\" alt=\"\"></p>\n<blockquote>\n<p>求不同的age分组，按照createTime正序「从小到大」排序的前N个。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2021-05-18T16:50:51.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-18T16:50:51.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","MySQL"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":235},{"title":"「53」dfs bfs 01背包","date":"2021-05-20T12:05:13.000Z","updated":"2021-05-20T13:20:17.000Z","keywords":"BFS,DFS,01背包","mathjax":true,"abbrlink":"517092f1","_content":"\n算法篇👉🏻[一]\n\n<!--more-->\n\n### DFS问题\n\n\n#### 无重复数组总和问题[👉🏿#39](https://leetcode-cn.com/problems/combination-sum/)\n\n##### [👉🏿问题描述：#39](https://leetcode-cn.com/problems/combination-sum/)\n\n```go\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的数字可以无限制重复被选取。\n\n说明：\n\n所有数字（包括 target）都是正整数。\n解集不能包含重复的组合。 \n示例 1：\n\n输入：candidates = [2,3,6,7], target = 7,\n所求解集为：\n[\n  [7],\n  [2,2,3]\n]\n示例 2：\n\n输入：candidates = [2,3,5], target = 8,\n所求解集为：\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n\n##### 解决思路\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113008.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113224.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113257.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113320.png)\n\n##### coding：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tn := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tcombineDFS(n, 16)\n}\n\nvar res [][]int = make([][]int, 0)\n\nfunc combineDFS(num []int, target int) (result [][]int) {\n\tif len(num) == 0 {\n\t\treturn\n\t}\n\n\tdfs(target, 0, []int{}, num)\n\tfmt.Println(res)\n\treturn res\n}\n\nfunc dfs(target int, index int, pre []int, num []int) {\n\tif target == 0 {\n\t\tpp := make([]int, len(pre))\n\t\tcopy(pp, pre)\n\t\tres = append(res, pp)\n\t\treturn\n\t}\n\n\tfor i := index; i < len(num); i++ {\n\t\tif num[i] > target {\n\t\t\tbreak\n\t\t}\n\n\t\tpre = append(pre, num[i])\n    // i+1 则跳过重复的元素使用的情况\n\t\t//dfs(target-num[i], i+1, pre, num)\n\t\tdfs(target-num[i], i, pre, num)\n\t\tpre = pre[:len(pre)-1]\n\t}\n}\n```\n\n\n### 待续....","source":"_posts/53-dfs-bfs-01背包.md","raw":"---\ntitle: 「53」dfs bfs 01背包\ndate: '2021/05/20 20:05:13'\nupdated: '2021/05/20 21:20:17'\nkeywords: 'BFS,DFS,01背包'\ntags:\n  - 算法\n  - Day\nmathjax: true\nabbrlink: 517092f1\n---\n\n算法篇👉🏻[一]\n\n<!--more-->\n\n### DFS问题\n\n\n#### 无重复数组总和问题[👉🏿#39](https://leetcode-cn.com/problems/combination-sum/)\n\n##### [👉🏿问题描述：#39](https://leetcode-cn.com/problems/combination-sum/)\n\n```go\n给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。\n\ncandidates 中的数字可以无限制重复被选取。\n\n说明：\n\n所有数字（包括 target）都是正整数。\n解集不能包含重复的组合。 \n示例 1：\n\n输入：candidates = [2,3,6,7], target = 7,\n所求解集为：\n[\n  [7],\n  [2,2,3]\n]\n示例 2：\n\n输入：candidates = [2,3,5], target = 8,\n所求解集为：\n[\n  [2,2,2,2],\n  [2,3,3],\n  [3,5]\n]\n```\n\n\n##### 解决思路\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113008.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113224.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113257.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113320.png)\n\n##### coding：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tn := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\tcombineDFS(n, 16)\n}\n\nvar res [][]int = make([][]int, 0)\n\nfunc combineDFS(num []int, target int) (result [][]int) {\n\tif len(num) == 0 {\n\t\treturn\n\t}\n\n\tdfs(target, 0, []int{}, num)\n\tfmt.Println(res)\n\treturn res\n}\n\nfunc dfs(target int, index int, pre []int, num []int) {\n\tif target == 0 {\n\t\tpp := make([]int, len(pre))\n\t\tcopy(pp, pre)\n\t\tres = append(res, pp)\n\t\treturn\n\t}\n\n\tfor i := index; i < len(num); i++ {\n\t\tif num[i] > target {\n\t\t\tbreak\n\t\t}\n\n\t\tpre = append(pre, num[i])\n    // i+1 则跳过重复的元素使用的情况\n\t\t//dfs(target-num[i], i+1, pre, num)\n\t\tdfs(target-num[i], i, pre, num)\n\t\tpre = pre[:len(pre)-1]\n\t}\n}\n```\n\n\n### 待续....","slug":"53-dfs-bfs-01背包","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5j003wzfqx0opj4oz3","content":"<p>算法篇👉🏻[一]</p>\n<span id=\"more\"></span>\n<h3 id=\"DFS问题\"><a class=\"header-anchor\" href=\"#DFS问题\">¶</a>DFS问题</h3>\n<h4 id=\"无重复数组总和问题👉🏿-39\"><a class=\"header-anchor\" href=\"#无重复数组总和问题👉🏿-39\">¶</a>无重复数组总和问题<a href=\"https://leetcode-cn.com/problems/combination-sum/\">👉🏿#39</a></h4>\n<h5 id=\"👉🏿问题描述：-39\"><a class=\"header-anchor\" href=\"#👉🏿问题描述：-39\">¶</a><a href=\"https://leetcode-cn.com/problems/combination-sum/\">👉🏿问题描述：#39</a></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</span><br><span class=\"line\"></span><br><span class=\"line\">candidates 中的数字可以无限制重复被选取。</span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\"></span><br><span class=\"line\">所有数字（包括 target）都是正整数。</span><br><span class=\"line\">解集不能包含重复的组合。 </span><br><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], target = <span class=\"number\">7</span>,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">7</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">示例 <span class=\"number\">2</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>], target = <span class=\"number\">8</span>,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决思路\"><a class=\"header-anchor\" href=\"#解决思路\">¶</a>解决思路</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113008.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113224.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113257.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113320.png\" alt=\"\"></p>\n<h5 id=\"coding：\"><a class=\"header-anchor\" href=\"#coding：\">¶</a>coding：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tn := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\tcombineDFS(n, <span class=\"number\">16</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res [][]<span class=\"type\">int</span> = <span class=\"built_in\">make</span>([][]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combineDFS</span><span class=\"params\">(num []<span class=\"type\">int</span>, target <span class=\"type\">int</span>)</span></span> (result [][]<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(num) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdfs(target, <span class=\"number\">0</span>, []<span class=\"type\">int</span>&#123;&#125;, num)</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(target <span class=\"type\">int</span>, index <span class=\"type\">int</span>, pre []<span class=\"type\">int</span>, num []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> target == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tpp := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(pre))</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(pp, pre)</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, pp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := index; i &lt; <span class=\"built_in\">len</span>(num); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num[i] &gt; target &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpre = <span class=\"built_in\">append</span>(pre, num[i])</span><br><span class=\"line\">    <span class=\"comment\">// i+1 则跳过重复的元素使用的情况</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//dfs(target-num[i], i+1, pre, num)</span></span><br><span class=\"line\">\t\tdfs(target-num[i], i, pre, num)</span><br><span class=\"line\">\t\tpre = pre[:<span class=\"built_in\">len</span>(pre)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"待续…\"><a class=\"header-anchor\" href=\"#待续…\">¶</a>待续…</h3>\n","site":{"data":{}},"excerpt":"<p>算法篇👉🏻[一]</p>","more":"<h3 id=\"DFS问题\"><a class=\"header-anchor\" href=\"#DFS问题\">¶</a>DFS问题</h3>\n<h4 id=\"无重复数组总和问题👉🏿-39\"><a class=\"header-anchor\" href=\"#无重复数组总和问题👉🏿-39\">¶</a>无重复数组总和问题<a href=\"https://leetcode-cn.com/problems/combination-sum/\">👉🏿#39</a></h4>\n<h5 id=\"👉🏿问题描述：-39\"><a class=\"header-anchor\" href=\"#👉🏿问题描述：-39\">¶</a><a href=\"https://leetcode-cn.com/problems/combination-sum/\">👉🏿问题描述：#39</a></h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</span><br><span class=\"line\"></span><br><span class=\"line\">candidates 中的数字可以无限制重复被选取。</span><br><span class=\"line\"></span><br><span class=\"line\">说明：</span><br><span class=\"line\"></span><br><span class=\"line\">所有数字（包括 target）都是正整数。</span><br><span class=\"line\">解集不能包含重复的组合。 </span><br><span class=\"line\">示例 <span class=\"number\">1</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>], target = <span class=\"number\">7</span>,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">7</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">]</span><br><span class=\"line\">示例 <span class=\"number\">2</span>：</span><br><span class=\"line\"></span><br><span class=\"line\">输入：candidates = [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>], target = <span class=\"number\">8</span>,</span><br><span class=\"line\">所求解集为：</span><br><span class=\"line\">[</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决思路\"><a class=\"header-anchor\" href=\"#解决思路\">¶</a>解决思路</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113008.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113224.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113257.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113320.png\" alt=\"\"></p>\n<h5 id=\"coding：\"><a class=\"header-anchor\" href=\"#coding：\">¶</a>coding：</h5>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tn := []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>&#125;</span><br><span class=\"line\">\tcombineDFS(n, <span class=\"number\">16</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> res [][]<span class=\"type\">int</span> = <span class=\"built_in\">make</span>([][]<span class=\"type\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">combineDFS</span><span class=\"params\">(num []<span class=\"type\">int</span>, target <span class=\"type\">int</span>)</span></span> (result [][]<span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(num) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdfs(target, <span class=\"number\">0</span>, []<span class=\"type\">int</span>&#123;&#125;, num)</span><br><span class=\"line\">\tfmt.Println(res)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dfs</span><span class=\"params\">(target <span class=\"type\">int</span>, index <span class=\"type\">int</span>, pre []<span class=\"type\">int</span>, num []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> target == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tpp := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"built_in\">len</span>(pre))</span><br><span class=\"line\">\t\t<span class=\"built_in\">copy</span>(pp, pre)</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">append</span>(res, pp)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := index; i &lt; <span class=\"built_in\">len</span>(num); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> num[i] &gt; target &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpre = <span class=\"built_in\">append</span>(pre, num[i])</span><br><span class=\"line\">    <span class=\"comment\">// i+1 则跳过重复的元素使用的情况</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//dfs(target-num[i], i+1, pre, num)</span></span><br><span class=\"line\">\t\tdfs(target-num[i], i, pre, num)</span><br><span class=\"line\">\t\tpre = pre[:<span class=\"built_in\">len</span>(pre)<span class=\"number\">-1</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"待续…\"><a class=\"header-anchor\" href=\"#待续…\">¶</a>待续…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113008.png","popularPost_tmp_gaData":{"updated":"Thu May 20 2021 21:20:17 GMT+0800 (中国标准时间)","title":"「53」dfs bfs 01背包","path":"archives/517092f1.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210520_113008.png","excerpt":"<p>算法篇👉🏻[一]</p>","date":{"_isAMomentObject":true,"_i":"2021-05-20T12:05:13.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-20T12:05:13.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","算法"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1053},{"title":"「54」GoSched函数","date":"2021-05-25T23:00:26.000Z","keywords":"Go,Golang,GoSched","mathjax":true,"abbrlink":"10a41c81","_content":"\n\nGoSched 干嘛的？ 看看官方说明：\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png)\n\n>两点：\n* 让出processor\n* 可以自动恢复g，执行中的任务\n\n<!--more-->\n\n### [👉🏻 goschedImpl](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L2746)\n\n```go\nfunc goschedImpl(gp *g) {\n    // 获取g状态\n\tstatus := readgstatus(gp)\n\tif status&^_Gscan != _Grunning {\n        // 非运行中就throw\n\t\tdumpgstatus(gp)\n\t\tthrow(\"bad g status\")\n\t}\n    //改变G状态\n\tcasgstatus(gp, _Grunning, _Grunnable)\n    //重置M和G的状态\n\tdropg()\n\tlock(&sched.lock)\n    // 将G重新放回队列中\n\tglobrunqput(gp)\n\tunlock(&sched.lock)\n\n    // 正常调度\n\tschedule()\n}\n```\n\n>一个个看看，GMP到底如果配合调度的?\n\n#### 👉🏿 readgstatus\n\n```go\n\n// All reads and writes of g's status go through readgstatus, casgstatus\n// castogscanstatus, casfrom_Gscanstatus.\n//go:nosplit\nfunc readgstatus(gp *g) uint32 {\n\treturn atomic.Load(&gp.atomicstatus)\n}\n```\n\n>atomicstatus变量的作用：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_052742.png)\n\n#### 👉🏿 casgstatus\n\n```go\n// If asked to move to or from a Gscanstatus this will throw. Use the castogscanstatus\n// and casfrom_Gscanstatus instead.\n// casgstatus will loop if the g->atomicstatus is in a Gscan status until the routine that\n// put it in the Gscan state is finished.\n//go:nosplit\nfunc casgstatus(gp *g, oldval, newval uint32) {\n\tif (oldval&_Gscan != 0) || (newval&_Gscan != 0) || oldval == newval {\n\t\tsystemstack(func() {\n\t\t\tprint(\"runtime: casgstatus: oldval=\", hex(oldval), \" newval=\", hex(newval), \"\\n\")\n\t\t\tthrow(\"casgstatus: bad incoming values\")\n\t\t})\n\t}\n\n\t// See https://golang.org/cl/21503 for justification of the yield delay.\n\tconst yieldDelay = 5 * 1000\n\tvar nextYield int64\n\n\t// loop if gp->atomicstatus is in a scan state giving\n\t// GC time to finish and change the state to oldval.\n\t// 等待GC完成后变成_Grunning，然后再改变值，变为_Grunnable\n\tfor i := 0; !atomic.Cas(&gp.atomicstatus, oldval, newval); i++ {\n\t\tif oldval == _Gwaiting && gp.atomicstatus == _Grunnable {\n\t\t\tthrow(\"casgstatus: waiting for Gwaiting but is Grunnable\")\n\t\t}\n\t\tif i == 0 {\n\t\t\tnextYield = nanotime() + yieldDelay\n\t\t}\n\t\tif nanotime() < nextYield {\n\t\t\tfor x := 0; x < 10 && gp.atomicstatus != oldval; x++ {\n\t\t\t\tprocyield(1)\n\t\t\t}\n\t\t} else {\n\t\t\tosyield()\n\t\t\tnextYield = nanotime() + yieldDelay/2\n\t\t}\n\t}\n}\n```\n\n#### 👉🏿 dropg\n\n```go\n// dropg removes the association between m and the current goroutine m->curg (gp for short).\n// Typically a caller sets gp's status away from Grunning and then\n// immediately calls dropg to finish the job. The caller is also responsible\n// for arranging that gp will be restarted using ready at an\n// appropriate time. After calling dropg and arranging for gp to be\n// readied later, the caller can do other work but eventually should\n// call schedule to restart the scheduling of goroutines on this m.\nfunc dropg() {\n\t_g_ := getg()\n\n\t// 解绑M\n\tsetMNoWB(&_g_.m.curg.m, nil)\n\t// 解绑G\n\tsetGNoWB(&_g_.m.curg, nil)\n}\n```\n\n#### 👉🏿 globrunqput\n\n```go\n// Put gp on the global runnable queue.\n// Sched must be locked.\n// May run during STW, so write barriers are not allowed.\n//go:nowritebarrierrec\nfunc globrunqput(gp *g) {\n\t//将G放回全局队列中\n\tsched.runq.pushBack(gp)\n\tsched.runqsize++\n}\n\n```\n\n#### 👉🏿 schedule\n\n##### 作用：\n\n>find a runnable goroutine and execute it.\n","source":"_posts/54-GoSched函数.md","raw":"---\ntitle: 「54」GoSched函数\ndate: '2021/05/26 07:00:26'\nkeywords: 'Go,Golang,GoSched'\ntags:\n  - Go\n  - Day\n  - Go源码\nmathjax: true\nabbrlink: 10a41c81\n---\n\n\nGoSched 干嘛的？ 看看官方说明：\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png)\n\n>两点：\n* 让出processor\n* 可以自动恢复g，执行中的任务\n\n<!--more-->\n\n### [👉🏻 goschedImpl](https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L2746)\n\n```go\nfunc goschedImpl(gp *g) {\n    // 获取g状态\n\tstatus := readgstatus(gp)\n\tif status&^_Gscan != _Grunning {\n        // 非运行中就throw\n\t\tdumpgstatus(gp)\n\t\tthrow(\"bad g status\")\n\t}\n    //改变G状态\n\tcasgstatus(gp, _Grunning, _Grunnable)\n    //重置M和G的状态\n\tdropg()\n\tlock(&sched.lock)\n    // 将G重新放回队列中\n\tglobrunqput(gp)\n\tunlock(&sched.lock)\n\n    // 正常调度\n\tschedule()\n}\n```\n\n>一个个看看，GMP到底如果配合调度的?\n\n#### 👉🏿 readgstatus\n\n```go\n\n// All reads and writes of g's status go through readgstatus, casgstatus\n// castogscanstatus, casfrom_Gscanstatus.\n//go:nosplit\nfunc readgstatus(gp *g) uint32 {\n\treturn atomic.Load(&gp.atomicstatus)\n}\n```\n\n>atomicstatus变量的作用：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_052742.png)\n\n#### 👉🏿 casgstatus\n\n```go\n// If asked to move to or from a Gscanstatus this will throw. Use the castogscanstatus\n// and casfrom_Gscanstatus instead.\n// casgstatus will loop if the g->atomicstatus is in a Gscan status until the routine that\n// put it in the Gscan state is finished.\n//go:nosplit\nfunc casgstatus(gp *g, oldval, newval uint32) {\n\tif (oldval&_Gscan != 0) || (newval&_Gscan != 0) || oldval == newval {\n\t\tsystemstack(func() {\n\t\t\tprint(\"runtime: casgstatus: oldval=\", hex(oldval), \" newval=\", hex(newval), \"\\n\")\n\t\t\tthrow(\"casgstatus: bad incoming values\")\n\t\t})\n\t}\n\n\t// See https://golang.org/cl/21503 for justification of the yield delay.\n\tconst yieldDelay = 5 * 1000\n\tvar nextYield int64\n\n\t// loop if gp->atomicstatus is in a scan state giving\n\t// GC time to finish and change the state to oldval.\n\t// 等待GC完成后变成_Grunning，然后再改变值，变为_Grunnable\n\tfor i := 0; !atomic.Cas(&gp.atomicstatus, oldval, newval); i++ {\n\t\tif oldval == _Gwaiting && gp.atomicstatus == _Grunnable {\n\t\t\tthrow(\"casgstatus: waiting for Gwaiting but is Grunnable\")\n\t\t}\n\t\tif i == 0 {\n\t\t\tnextYield = nanotime() + yieldDelay\n\t\t}\n\t\tif nanotime() < nextYield {\n\t\t\tfor x := 0; x < 10 && gp.atomicstatus != oldval; x++ {\n\t\t\t\tprocyield(1)\n\t\t\t}\n\t\t} else {\n\t\t\tosyield()\n\t\t\tnextYield = nanotime() + yieldDelay/2\n\t\t}\n\t}\n}\n```\n\n#### 👉🏿 dropg\n\n```go\n// dropg removes the association between m and the current goroutine m->curg (gp for short).\n// Typically a caller sets gp's status away from Grunning and then\n// immediately calls dropg to finish the job. The caller is also responsible\n// for arranging that gp will be restarted using ready at an\n// appropriate time. After calling dropg and arranging for gp to be\n// readied later, the caller can do other work but eventually should\n// call schedule to restart the scheduling of goroutines on this m.\nfunc dropg() {\n\t_g_ := getg()\n\n\t// 解绑M\n\tsetMNoWB(&_g_.m.curg.m, nil)\n\t// 解绑G\n\tsetGNoWB(&_g_.m.curg, nil)\n}\n```\n\n#### 👉🏿 globrunqput\n\n```go\n// Put gp on the global runnable queue.\n// Sched must be locked.\n// May run during STW, so write barriers are not allowed.\n//go:nowritebarrierrec\nfunc globrunqput(gp *g) {\n\t//将G放回全局队列中\n\tsched.runq.pushBack(gp)\n\tsched.runqsize++\n}\n\n```\n\n#### 👉🏿 schedule\n\n##### 作用：\n\n>find a runnable goroutine and execute it.\n","slug":"54-GoSched函数","published":1,"updated":"2021-05-27T02:28:13.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5k003yzfqx4aiya7ou","content":"<p>GoSched 干嘛的？ 看看官方说明：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png\" alt=\"\"></p>\n<blockquote>\n<p>两点：</p>\n</blockquote>\n<ul>\n<li>让出processor</li>\n<li>可以自动恢复g，执行中的任务</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"👉🏻-goschedImpl\"><a class=\"header-anchor\" href=\"#👉🏻-goschedImpl\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L2746\">👉🏻 goschedImpl</a></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">goschedImpl</span><span class=\"params\">(gp *g)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取g状态</span></span><br><span class=\"line\">\tstatus := readgstatus(gp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> status&amp;^_Gscan != _Grunning &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非运行中就throw</span></span><br><span class=\"line\">\t\tdumpgstatus(gp)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;bad g status&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//改变G状态</span></span><br><span class=\"line\">\tcasgstatus(gp, _Grunning, _Grunnable)</span><br><span class=\"line\">    <span class=\"comment\">//重置M和G的状态</span></span><br><span class=\"line\">\tdropg()</span><br><span class=\"line\">\tlock(&amp;sched.lock)</span><br><span class=\"line\">    <span class=\"comment\">// 将G重新放回队列中</span></span><br><span class=\"line\">\tglobrunqput(gp)</span><br><span class=\"line\">\tunlock(&amp;sched.lock)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 正常调度</span></span><br><span class=\"line\">\tschedule()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个个看看，GMP到底如果配合调度的?</p>\n</blockquote>\n<h4 id=\"👉🏿-readgstatus\"><a class=\"header-anchor\" href=\"#👉🏿-readgstatus\">¶</a>👉🏿 readgstatus</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All reads and writes of g&#x27;s status go through readgstatus, casgstatus</span></span><br><span class=\"line\"><span class=\"comment\">// castogscanstatus, casfrom_Gscanstatus.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readgstatus</span><span class=\"params\">(gp *g)</span></span> <span class=\"type\">uint32</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> atomic.Load(&amp;gp.atomicstatus)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>atomicstatus变量的作用：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_052742.png\" alt=\"\"></p>\n<h4 id=\"👉🏿-casgstatus\"><a class=\"header-anchor\" href=\"#👉🏿-casgstatus\">¶</a>👉🏿 casgstatus</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If asked to move to or from a Gscanstatus this will throw. Use the castogscanstatus</span></span><br><span class=\"line\"><span class=\"comment\">// and casfrom_Gscanstatus instead.</span></span><br><span class=\"line\"><span class=\"comment\">// casgstatus will loop if the g-&gt;atomicstatus is in a Gscan status until the routine that</span></span><br><span class=\"line\"><span class=\"comment\">// put it in the Gscan state is finished.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">casgstatus</span><span class=\"params\">(gp *g, oldval, newval <span class=\"type\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (oldval&amp;_Gscan != <span class=\"number\">0</span>) || (newval&amp;_Gscan != <span class=\"number\">0</span>) || oldval == newval &#123;</span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;runtime: casgstatus: oldval=&quot;</span>, hex(oldval), <span class=\"string\">&quot; newval=&quot;</span>, hex(newval), <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;casgstatus: bad incoming values&quot;</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// See https://golang.org/cl/21503 for justification of the yield delay.</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> yieldDelay = <span class=\"number\">5</span> * <span class=\"number\">1000</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextYield <span class=\"type\">int64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// loop if gp-&gt;atomicstatus is in a scan state giving</span></span><br><span class=\"line\">\t<span class=\"comment\">// GC time to finish and change the state to oldval.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 等待GC完成后变成_Grunning，然后再改变值，变为_Grunnable</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; !atomic.Cas(&amp;gp.atomicstatus, oldval, newval); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> oldval == _Gwaiting &amp;&amp; gp.atomicstatus == _Grunnable &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;casgstatus: waiting for Gwaiting but is Grunnable&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tnextYield = nanotime() + yieldDelay</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nanotime() &lt; nextYield &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span> &amp;&amp; gp.atomicstatus != oldval; x++ &#123;</span><br><span class=\"line\">\t\t\t\tprocyield(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tosyield()</span><br><span class=\"line\">\t\t\tnextYield = nanotime() + yieldDelay/<span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"👉🏿-dropg\"><a class=\"header-anchor\" href=\"#👉🏿-dropg\">¶</a>👉🏿 dropg</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dropg removes the association between m and the current goroutine m-&gt;curg (gp for short).</span></span><br><span class=\"line\"><span class=\"comment\">// Typically a caller sets gp&#x27;s status away from Grunning and then</span></span><br><span class=\"line\"><span class=\"comment\">// immediately calls dropg to finish the job. The caller is also responsible</span></span><br><span class=\"line\"><span class=\"comment\">// for arranging that gp will be restarted using ready at an</span></span><br><span class=\"line\"><span class=\"comment\">// appropriate time. After calling dropg and arranging for gp to be</span></span><br><span class=\"line\"><span class=\"comment\">// readied later, the caller can do other work but eventually should</span></span><br><span class=\"line\"><span class=\"comment\">// call schedule to restart the scheduling of goroutines on this m.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dropg</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 解绑M</span></span><br><span class=\"line\">\tsetMNoWB(&amp;_g_.m.curg.m, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 解绑G</span></span><br><span class=\"line\">\tsetGNoWB(&amp;_g_.m.curg, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"👉🏿-globrunqput\"><a class=\"header-anchor\" href=\"#👉🏿-globrunqput\">¶</a>👉🏿 globrunqput</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Put gp on the global runnable queue.</span></span><br><span class=\"line\"><span class=\"comment\">// Sched must be locked.</span></span><br><span class=\"line\"><span class=\"comment\">// May run during STW, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">globrunqput</span><span class=\"params\">(gp *g)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将G放回全局队列中</span></span><br><span class=\"line\">\tsched.runq.pushBack(gp)</span><br><span class=\"line\">\tsched.runqsize++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"👉🏿-schedule\"><a class=\"header-anchor\" href=\"#👉🏿-schedule\">¶</a>👉🏿 schedule</h4>\n<h5 id=\"作用：\"><a class=\"header-anchor\" href=\"#作用：\">¶</a>作用：</h5>\n<blockquote>\n<p>find a runnable goroutine and execute it.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>GoSched 干嘛的？ 看看官方说明：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png\" alt=\"\"></p>\n<blockquote>\n<p>两点：</p>\n</blockquote>\n<ul>\n<li>让出processor</li>\n<li>可以自动恢复g，执行中的任务</li>\n</ul>","more":"<h3 id=\"👉🏻-goschedImpl\"><a class=\"header-anchor\" href=\"#👉🏻-goschedImpl\">¶</a><a href=\"https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/proc.go#L2746\">👉🏻 goschedImpl</a></h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">goschedImpl</span><span class=\"params\">(gp *g)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取g状态</span></span><br><span class=\"line\">\tstatus := readgstatus(gp)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> status&amp;^_Gscan != _Grunning &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非运行中就throw</span></span><br><span class=\"line\">\t\tdumpgstatus(gp)</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;bad g status&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//改变G状态</span></span><br><span class=\"line\">\tcasgstatus(gp, _Grunning, _Grunnable)</span><br><span class=\"line\">    <span class=\"comment\">//重置M和G的状态</span></span><br><span class=\"line\">\tdropg()</span><br><span class=\"line\">\tlock(&amp;sched.lock)</span><br><span class=\"line\">    <span class=\"comment\">// 将G重新放回队列中</span></span><br><span class=\"line\">\tglobrunqput(gp)</span><br><span class=\"line\">\tunlock(&amp;sched.lock)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 正常调度</span></span><br><span class=\"line\">\tschedule()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个个看看，GMP到底如果配合调度的?</p>\n</blockquote>\n<h4 id=\"👉🏿-readgstatus\"><a class=\"header-anchor\" href=\"#👉🏿-readgstatus\">¶</a>👉🏿 readgstatus</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// All reads and writes of g&#x27;s status go through readgstatus, casgstatus</span></span><br><span class=\"line\"><span class=\"comment\">// castogscanstatus, casfrom_Gscanstatus.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readgstatus</span><span class=\"params\">(gp *g)</span></span> <span class=\"type\">uint32</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> atomic.Load(&amp;gp.atomicstatus)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>atomicstatus变量的作用：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_052742.png\" alt=\"\"></p>\n<h4 id=\"👉🏿-casgstatus\"><a class=\"header-anchor\" href=\"#👉🏿-casgstatus\">¶</a>👉🏿 casgstatus</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If asked to move to or from a Gscanstatus this will throw. Use the castogscanstatus</span></span><br><span class=\"line\"><span class=\"comment\">// and casfrom_Gscanstatus instead.</span></span><br><span class=\"line\"><span class=\"comment\">// casgstatus will loop if the g-&gt;atomicstatus is in a Gscan status until the routine that</span></span><br><span class=\"line\"><span class=\"comment\">// put it in the Gscan state is finished.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nosplit</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">casgstatus</span><span class=\"params\">(gp *g, oldval, newval <span class=\"type\">uint32</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (oldval&amp;_Gscan != <span class=\"number\">0</span>) || (newval&amp;_Gscan != <span class=\"number\">0</span>) || oldval == newval &#123;</span><br><span class=\"line\">\t\tsystemstack(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;runtime: casgstatus: oldval=&quot;</span>, hex(oldval), <span class=\"string\">&quot; newval=&quot;</span>, hex(newval), <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;casgstatus: bad incoming values&quot;</span>)</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// See https://golang.org/cl/21503 for justification of the yield delay.</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> yieldDelay = <span class=\"number\">5</span> * <span class=\"number\">1000</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> nextYield <span class=\"type\">int64</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// loop if gp-&gt;atomicstatus is in a scan state giving</span></span><br><span class=\"line\">\t<span class=\"comment\">// GC time to finish and change the state to oldval.</span></span><br><span class=\"line\">\t<span class=\"comment\">// 等待GC完成后变成_Grunning，然后再改变值，变为_Grunnable</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; !atomic.Cas(&amp;gp.atomicstatus, oldval, newval); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> oldval == _Gwaiting &amp;&amp; gp.atomicstatus == _Grunnable &#123;</span><br><span class=\"line\">\t\t\tthrow(<span class=\"string\">&quot;casgstatus: waiting for Gwaiting but is Grunnable&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tnextYield = nanotime() + yieldDelay</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> nanotime() &lt; nextYield &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span> &amp;&amp; gp.atomicstatus != oldval; x++ &#123;</span><br><span class=\"line\">\t\t\t\tprocyield(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tosyield()</span><br><span class=\"line\">\t\t\tnextYield = nanotime() + yieldDelay/<span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"👉🏿-dropg\"><a class=\"header-anchor\" href=\"#👉🏿-dropg\">¶</a>👉🏿 dropg</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dropg removes the association between m and the current goroutine m-&gt;curg (gp for short).</span></span><br><span class=\"line\"><span class=\"comment\">// Typically a caller sets gp&#x27;s status away from Grunning and then</span></span><br><span class=\"line\"><span class=\"comment\">// immediately calls dropg to finish the job. The caller is also responsible</span></span><br><span class=\"line\"><span class=\"comment\">// for arranging that gp will be restarted using ready at an</span></span><br><span class=\"line\"><span class=\"comment\">// appropriate time. After calling dropg and arranging for gp to be</span></span><br><span class=\"line\"><span class=\"comment\">// readied later, the caller can do other work but eventually should</span></span><br><span class=\"line\"><span class=\"comment\">// call schedule to restart the scheduling of goroutines on this m.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">dropg</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t_g_ := getg()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 解绑M</span></span><br><span class=\"line\">\tsetMNoWB(&amp;_g_.m.curg.m, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 解绑G</span></span><br><span class=\"line\">\tsetGNoWB(&amp;_g_.m.curg, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"👉🏿-globrunqput\"><a class=\"header-anchor\" href=\"#👉🏿-globrunqput\">¶</a>👉🏿 globrunqput</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Put gp on the global runnable queue.</span></span><br><span class=\"line\"><span class=\"comment\">// Sched must be locked.</span></span><br><span class=\"line\"><span class=\"comment\">// May run during STW, so write barriers are not allowed.</span></span><br><span class=\"line\"><span class=\"comment\">//go:nowritebarrierrec</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">globrunqput</span><span class=\"params\">(gp *g)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//将G放回全局队列中</span></span><br><span class=\"line\">\tsched.runq.pushBack(gp)</span><br><span class=\"line\">\tsched.runqsize++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"👉🏿-schedule\"><a class=\"header-anchor\" href=\"#👉🏿-schedule\">¶</a>👉🏿 schedule</h4>\n<h5 id=\"作用：\"><a class=\"header-anchor\" href=\"#作用：\">¶</a>作用：</h5>\n<blockquote>\n<p>find a runnable goroutine and execute it.</p>\n</blockquote>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png","popularPost_tmp_gaData":{"updated":"Thu May 27 2021 10:28:13 GMT+0800 (中国标准时间)","title":"「54」GoSched函数","path":"archives/10a41c81.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png","excerpt":"<p>GoSched 干嘛的？ 看看官方说明：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210526_051405.png\" alt=\"\"></p>\n<blockquote>\n<p>两点：</p>\n</blockquote>\n<ul>\n<li>让出processor</li>\n<li>可以自动恢复g，执行中的任务</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-05-25T23:00:26.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-25T23:00:26.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Day"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2765},{"title":"「55」Go 1.18 pre","keywords":"Go,Golang,GoSched","date":"2021-05-27T02:53:22.000Z","mathjax":true,"abbrlink":"517e6fa6","_content":"\n最近看到1.18已经提上日程了，虽然很遥远，\n但还是需要关注下改善点和新特性。\n\n<!--more-->\n\n\n### 改善点：\n\n#### [👉🏻 runtime: helloworld net/http asks 700MB VSS on mips32](https://github.com/golang/go/issues/43699)\n\n##### 简述：\n\n>一个helloworld net程序跑起来后 VSS 占用过高问题\n\n##### Depends on:\n\n[proposal: runtime: GC pacer redesign](https://github.com/golang/go/issues/44167)\n\n#### [👉🏻 runtime: 10ms-26ms latency from GC in go1.14rc1, possibly due to 'GC (idle)' work](https://github.com/golang/go/issues/37116)\n\n##### 简述：\n\n>gc idle空闲时间过长问题\n\n##### 解决办法：\n\n[👉🏿 runtime: remove idle GC workers](https://github.com/golang/go/issues/44163)\n[👉🏿 proposal: runtime: GC pacer redesign ](https://github.com/golang/go/issues/44167)\n\n\n### proposal\n\n#### [👉🏻 GC Redesign](https://github.com/golang/proposal/blob/329650d4723a558c2b76b81b4995fc5c267e6bc1/design/44167-gc-pacer-redesign.md)\n#### [👉 runtime/pprof: NewCPUProfile + cpuProfile.Start to allow profile configuration](https://github.com/golang/go/issues/42502)\n\n### Deprecated\n\n#### [👉🏿 runtime: deprecate SetCPUProfileRate and replace body with panic](https://github.com/golang/go/issues/40094)","source":"_posts/55-Go-1-18-pre.md","raw":"---\ntitle: 「55」Go 1.18 pre\nkeywords: 'Go,Golang,GoSched'\ndate: 2021/05/27 10:53:22\ntags:\n  - Go\n  - Day\n  - Go源码\n  - v1.18\nmathjax: true\nabbrlink: 517e6fa6\n\n---\n\n最近看到1.18已经提上日程了，虽然很遥远，\n但还是需要关注下改善点和新特性。\n\n<!--more-->\n\n\n### 改善点：\n\n#### [👉🏻 runtime: helloworld net/http asks 700MB VSS on mips32](https://github.com/golang/go/issues/43699)\n\n##### 简述：\n\n>一个helloworld net程序跑起来后 VSS 占用过高问题\n\n##### Depends on:\n\n[proposal: runtime: GC pacer redesign](https://github.com/golang/go/issues/44167)\n\n#### [👉🏻 runtime: 10ms-26ms latency from GC in go1.14rc1, possibly due to 'GC (idle)' work](https://github.com/golang/go/issues/37116)\n\n##### 简述：\n\n>gc idle空闲时间过长问题\n\n##### 解决办法：\n\n[👉🏿 runtime: remove idle GC workers](https://github.com/golang/go/issues/44163)\n[👉🏿 proposal: runtime: GC pacer redesign ](https://github.com/golang/go/issues/44167)\n\n\n### proposal\n\n#### [👉🏻 GC Redesign](https://github.com/golang/proposal/blob/329650d4723a558c2b76b81b4995fc5c267e6bc1/design/44167-gc-pacer-redesign.md)\n#### [👉 runtime/pprof: NewCPUProfile + cpuProfile.Start to allow profile configuration](https://github.com/golang/go/issues/42502)\n\n### Deprecated\n\n#### [👉🏿 runtime: deprecate SetCPUProfileRate and replace body with panic](https://github.com/golang/go/issues/40094)","slug":"55-Go-1-18-pre","published":1,"updated":"2021-05-28T02:24:03.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5k0041zfqxgi62b64t","content":"<p>最近看到1.18已经提上日程了，虽然很遥远，<br>\n但还是需要关注下改善点和新特性。</p>\n<span id=\"more\"></span>\n<h3 id=\"改善点：\"><a class=\"header-anchor\" href=\"#改善点：\">¶</a>改善点：</h3>\n<h4 id=\"👉🏻-runtime-helloworld-net-http-asks-700MB-VSS-on-mips32\"><a class=\"header-anchor\" href=\"#👉🏻-runtime-helloworld-net-http-asks-700MB-VSS-on-mips32\">¶</a><a href=\"https://github.com/golang/go/issues/43699\">👉🏻 runtime: helloworld net/http asks 700MB VSS on mips32</a></h4>\n<h5 id=\"简述：\"><a class=\"header-anchor\" href=\"#简述：\">¶</a>简述：</h5>\n<blockquote>\n<p>一个helloworld net程序跑起来后 VSS 占用过高问题</p>\n</blockquote>\n<h5 id=\"Depends-on\"><a class=\"header-anchor\" href=\"#Depends-on\">¶</a>Depends on:</h5>\n<p><a href=\"https://github.com/golang/go/issues/44167\">proposal: runtime: GC pacer redesign</a></p>\n<h4 id=\"👉🏻-runtime-10ms-26ms-latency-from-GC-in-go1-14rc1-possibly-due-to-‘GC-idle-’-work\"><a class=\"header-anchor\" href=\"#👉🏻-runtime-10ms-26ms-latency-from-GC-in-go1-14rc1-possibly-due-to-‘GC-idle-’-work\">¶</a><a href=\"https://github.com/golang/go/issues/37116\">👉🏻 runtime: 10ms-26ms latency from GC in go1.14rc1, possibly due to ‘GC (idle)’ work</a></h4>\n<h5 id=\"简述：-v2\"><a class=\"header-anchor\" href=\"#简述：-v2\">¶</a>简述：</h5>\n<blockquote>\n<p>gc idle空闲时间过长问题</p>\n</blockquote>\n<h5 id=\"解决办法：\"><a class=\"header-anchor\" href=\"#解决办法：\">¶</a>解决办法：</h5>\n<p><a href=\"https://github.com/golang/go/issues/44163\">👉🏿 runtime: remove idle GC workers</a><br>\n<a href=\"https://github.com/golang/go/issues/44167\">👉🏿 proposal: runtime: GC pacer redesign </a></p>\n<h3 id=\"proposal\"><a class=\"header-anchor\" href=\"#proposal\">¶</a>proposal</h3>\n<h4 id=\"👉🏻-GC-Redesign\"><a class=\"header-anchor\" href=\"#👉🏻-GC-Redesign\">¶</a><a href=\"https://github.com/golang/proposal/blob/329650d4723a558c2b76b81b4995fc5c267e6bc1/design/44167-gc-pacer-redesign.md\">👉🏻 GC Redesign</a></h4>\n<h4 id=\"👉-runtime-pprof-NewCPUProfile-cpuProfile-Start-to-allow-profile-configuration\"><a class=\"header-anchor\" href=\"#👉-runtime-pprof-NewCPUProfile-cpuProfile-Start-to-allow-profile-configuration\">¶</a><a href=\"https://github.com/golang/go/issues/42502\">👉 runtime/pprof: NewCPUProfile + cpuProfile.Start to allow profile configuration</a></h4>\n<h3 id=\"Deprecated\"><a class=\"header-anchor\" href=\"#Deprecated\">¶</a>Deprecated</h3>\n<h4 id=\"👉🏿-runtime-deprecate-SetCPUProfileRate-and-replace-body-with-panic\"><a class=\"header-anchor\" href=\"#👉🏿-runtime-deprecate-SetCPUProfileRate-and-replace-body-with-panic\">¶</a><a href=\"https://github.com/golang/go/issues/40094\">👉🏿 runtime: deprecate SetCPUProfileRate and replace body with panic</a></h4>\n","site":{"data":{}},"excerpt":"<p>最近看到1.18已经提上日程了，虽然很遥远，<br>\n但还是需要关注下改善点和新特性。</p>","more":"<h3 id=\"改善点：\"><a class=\"header-anchor\" href=\"#改善点：\">¶</a>改善点：</h3>\n<h4 id=\"👉🏻-runtime-helloworld-net-http-asks-700MB-VSS-on-mips32\"><a class=\"header-anchor\" href=\"#👉🏻-runtime-helloworld-net-http-asks-700MB-VSS-on-mips32\">¶</a><a href=\"https://github.com/golang/go/issues/43699\">👉🏻 runtime: helloworld net/http asks 700MB VSS on mips32</a></h4>\n<h5 id=\"简述：\"><a class=\"header-anchor\" href=\"#简述：\">¶</a>简述：</h5>\n<blockquote>\n<p>一个helloworld net程序跑起来后 VSS 占用过高问题</p>\n</blockquote>\n<h5 id=\"Depends-on\"><a class=\"header-anchor\" href=\"#Depends-on\">¶</a>Depends on:</h5>\n<p><a href=\"https://github.com/golang/go/issues/44167\">proposal: runtime: GC pacer redesign</a></p>\n<h4 id=\"👉🏻-runtime-10ms-26ms-latency-from-GC-in-go1-14rc1-possibly-due-to-‘GC-idle-’-work\"><a class=\"header-anchor\" href=\"#👉🏻-runtime-10ms-26ms-latency-from-GC-in-go1-14rc1-possibly-due-to-‘GC-idle-’-work\">¶</a><a href=\"https://github.com/golang/go/issues/37116\">👉🏻 runtime: 10ms-26ms latency from GC in go1.14rc1, possibly due to ‘GC (idle)’ work</a></h4>\n<h5 id=\"简述：-v2\"><a class=\"header-anchor\" href=\"#简述：-v2\">¶</a>简述：</h5>\n<blockquote>\n<p>gc idle空闲时间过长问题</p>\n</blockquote>\n<h5 id=\"解决办法：\"><a class=\"header-anchor\" href=\"#解决办法：\">¶</a>解决办法：</h5>\n<p><a href=\"https://github.com/golang/go/issues/44163\">👉🏿 runtime: remove idle GC workers</a><br>\n<a href=\"https://github.com/golang/go/issues/44167\">👉🏿 proposal: runtime: GC pacer redesign </a></p>\n<h3 id=\"proposal\"><a class=\"header-anchor\" href=\"#proposal\">¶</a>proposal</h3>\n<h4 id=\"👉🏻-GC-Redesign\"><a class=\"header-anchor\" href=\"#👉🏻-GC-Redesign\">¶</a><a href=\"https://github.com/golang/proposal/blob/329650d4723a558c2b76b81b4995fc5c267e6bc1/design/44167-gc-pacer-redesign.md\">👉🏻 GC Redesign</a></h4>\n<h4 id=\"👉-runtime-pprof-NewCPUProfile-cpuProfile-Start-to-allow-profile-configuration\"><a class=\"header-anchor\" href=\"#👉-runtime-pprof-NewCPUProfile-cpuProfile-Start-to-allow-profile-configuration\">¶</a><a href=\"https://github.com/golang/go/issues/42502\">👉 runtime/pprof: NewCPUProfile + cpuProfile.Start to allow profile configuration</a></h4>\n<h3 id=\"Deprecated\"><a class=\"header-anchor\" href=\"#Deprecated\">¶</a>Deprecated</h3>\n<h4 id=\"👉🏿-runtime-deprecate-SetCPUProfileRate-and-replace-body-with-panic\"><a class=\"header-anchor\" href=\"#👉🏿-runtime-deprecate-SetCPUProfileRate-and-replace-body-with-panic\">¶</a><a href=\"https://github.com/golang/go/issues/40094\">👉🏿 runtime: deprecate SetCPUProfileRate and replace body with panic</a></h4>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 28 2021 10:24:03 GMT+0800 (中国标准时间)","title":"「55」Go 1.18 pre","path":"archives/517e6fa6.html","eyeCatchImage":null,"excerpt":"<p>最近看到1.18已经提上日程了，虽然很遥远，<br>\n但还是需要关注下改善点和新特性。</p>","date":{"_isAMomentObject":true,"_i":"2021-05-27T02:53:22.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-27T02:53:22.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Day","v1.18"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":507},{"title":"「56」List Stack Tree","date":"2021-05-28T00:23:00.000Z","updated":"2021-05-28T00:23:17.000Z","keywords":"list,linkedlist,doublelinkedlist,tree","mathjax":true,"abbrlink":"b0be3190","_content":"\n算法篇👉🏻[二]\n\n### LinkedList\n\n#### 定义：\n\n是链表的一种，其特点是链表的连接方向是单向的，对链表的访问要从头开始，依次往下。\n\n#### 相关题目\n* 反转单向链表\n  * 反转单向链表的[N,M]\n* 删除链表重复元素\n* 合并两个有序链表\n* 旋转链表\n* 排序链表\n* 两数相加 \n\n### 待续....","source":"_posts/56-list-stack-tree.md","raw":"---\ntitle: 「56」List Stack Tree\ndate: '2021/05/28 08:23:00'\nupdated: '2021/05/28 08:23:17'\nkeywords: 'list,linkedlist,doublelinkedlist,tree'\ntags:\n  - 算法\n  - Day\nmathjax: true\nabbrlink: b0be3190\n---\n\n算法篇👉🏻[二]\n\n### LinkedList\n\n#### 定义：\n\n是链表的一种，其特点是链表的连接方向是单向的，对链表的访问要从头开始，依次往下。\n\n#### 相关题目\n* 反转单向链表\n  * 反转单向链表的[N,M]\n* 删除链表重复元素\n* 合并两个有序链表\n* 旋转链表\n* 排序链表\n* 两数相加 \n\n### 待续....","slug":"56-list-stack-tree","published":1,"_id":"cl82u8d5l0043zfqx6g0wf9j1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>算法篇👉🏻[二]</p>\n<h3 id=\"LinkedList\"><a class=\"header-anchor\" href=\"#LinkedList\">¶</a>LinkedList</h3>\n<h4 id=\"定义：\"><a class=\"header-anchor\" href=\"#定义：\">¶</a>定义：</h4>\n<p>是链表的一种，其特点是链表的连接方向是单向的，对链表的访问要从头开始，依次往下。</p>\n<h4 id=\"相关题目\"><a class=\"header-anchor\" href=\"#相关题目\">¶</a>相关题目</h4>\n<ul>\n<li>反转单向链表\n<ul>\n<li>反转单向链表的[N,M]</li>\n</ul>\n</li>\n<li>删除链表重复元素</li>\n<li>合并两个有序链表</li>\n<li>旋转链表</li>\n<li>排序链表</li>\n<li>两数相加</li>\n</ul>\n<h3 id=\"待续…\"><a class=\"header-anchor\" href=\"#待续…\">¶</a>待续…</h3>\n","site":{"data":{}},"excerpt":"","more":"<p>算法篇👉🏻[二]</p>\n<h3 id=\"LinkedList\"><a class=\"header-anchor\" href=\"#LinkedList\">¶</a>LinkedList</h3>\n<h4 id=\"定义：\"><a class=\"header-anchor\" href=\"#定义：\">¶</a>定义：</h4>\n<p>是链表的一种，其特点是链表的连接方向是单向的，对链表的访问要从头开始，依次往下。</p>\n<h4 id=\"相关题目\"><a class=\"header-anchor\" href=\"#相关题目\">¶</a>相关题目</h4>\n<ul>\n<li>反转单向链表\n<ul>\n<li>反转单向链表的[N,M]</li>\n</ul>\n</li>\n<li>删除链表重复元素</li>\n<li>合并两个有序链表</li>\n<li>旋转链表</li>\n<li>排序链表</li>\n<li>两数相加</li>\n</ul>\n<h3 id=\"待续…\"><a class=\"header-anchor\" href=\"#待续…\">¶</a>待续…</h3>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri May 28 2021 08:23:17 GMT+0800 (中国标准时间)","title":"「56」List Stack Tree","path":"archives/b0be3190.html","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2021-05-28T00:23:00.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-28T00:23:00.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Day","算法"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":120},{"title":"「6」git 初阶:安装配置 ～1","date":"2020-09-02T14:38:44.000Z","updated":"2020-09-02T14:38:44.000Z","keywords":"git,git使用,git常用","abbrlink":"bddc30f6","_content":"\n\n>自盘古开天辟地～～～～\n>扯远了......\n>完整的分享下Git的使用和学习的知识点，之前章节中的[Git常用技巧](http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/)是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。\n\n\n## 前景\n\nSVN估计是家喻户晓了，一直被用作`'版本管理'`和`代码仓库`。（ps:不算是完整的`版本管理`.）\nGit的出现，是linus之父休假时产出的“作品”,`版本管理` & `代码仓库`的作用。总而言之，用熟练Git了，就再也回不去了。\n<!-- more -->\n\n## 目标：\n\n>最终可以顺利的提交代码即可。\n\n## 此篇只分享两个知识点：\n\n>安装Git和Git基本配置\n\n### Git安装\n\n说安装其实就是去官网下载软件，安装到你选定地方即可。\n\n在此附上官网的下载链接： [点击进入](https://git-scm.com/download/)\n\n选择对应平台windows?linux?macos?  \n\nps:别选错了，那就very尴尬了。\n\n### 基本配置\n\n说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。\n\n#### 前期基本配置\n主要分三个地方：\n```\n1、/etc/gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。\n2、~/.gitconfig 或 ~/.config/git/config 文件： 只针对当前用户生效。 [global配置]\n3、当前使用仓库的Git配置： .git/config文件，仅仅对当前仓库配置生效。    [local配置]\n```\n\n\n>ps: 优先机制：3 > 2 > 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]\n\n##### 注意：\n```\nwindows下的~/.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称\n```\n\n##### 查看所有配置命令\n```\ngit config --list --show-origin\n```\n\n#### 生成密钥&关联Github/Gitlab\n\n##### 生成密钥\n>根据邮箱，会要求输入密码，连续3个回车即可。\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到id_rsa和id_rsa.pub两个文件。\n\n这里用到的是你的 公钥`id_rsa.pub`文件，复制文件里面的内容到github密钥的界面：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902075825.png)\n\n添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。\n\n##### 拓展\n>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902080130.png)\n\n#### global配置（全局配置）或 local配置（当前仓库配置）\n\n##### global配置（针对你只有一个git账户的情况）\n```\n查看命令：\ngit config --global --list\n\n全局配置：\n\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --global https.proxy http://127.0.0.1:1080 \n# sock\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --global --unset http.proxy\n```\n\n##### local配置 (建议本地仓库配置，这样比较灵活)\n\n```\n查看命令：\ngit config --local --list\n\n全局配置：\n\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --local https.proxy http://127.0.0.1:1080 \n# sock\ngit config --local http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --local --unset http.proxy\n```\n\n#### 配置完成，clone/commit代码\n\n##### clone仓库代码\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902081306.png)\n\n```\ngit clone https://github.com/crab21/blog.git\n```\n##### commit代码\n>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。\n\n### END","source":"_posts/6-git 初阶:安装配置 ～1.md","raw":"---\ntitle: '「6」git 初阶:安装配置 ～1'\ndate: '2020/09/02 22:38:44'\nupdated: '2020/09/02 22:38:44'\nkeywords: 'git,git使用,git常用'\ntags:\n  - Git\nabbrlink: bddc30f6\n---\n\n\n>自盘古开天辟地～～～～\n>扯远了......\n>完整的分享下Git的使用和学习的知识点，之前章节中的[Git常用技巧](http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/)是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。\n\n\n## 前景\n\nSVN估计是家喻户晓了，一直被用作`'版本管理'`和`代码仓库`。（ps:不算是完整的`版本管理`.）\nGit的出现，是linus之父休假时产出的“作品”,`版本管理` & `代码仓库`的作用。总而言之，用熟练Git了，就再也回不去了。\n<!-- more -->\n\n## 目标：\n\n>最终可以顺利的提交代码即可。\n\n## 此篇只分享两个知识点：\n\n>安装Git和Git基本配置\n\n### Git安装\n\n说安装其实就是去官网下载软件，安装到你选定地方即可。\n\n在此附上官网的下载链接： [点击进入](https://git-scm.com/download/)\n\n选择对应平台windows?linux?macos?  \n\nps:别选错了，那就very尴尬了。\n\n### 基本配置\n\n说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。\n\n#### 前期基本配置\n主要分三个地方：\n```\n1、/etc/gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。\n2、~/.gitconfig 或 ~/.config/git/config 文件： 只针对当前用户生效。 [global配置]\n3、当前使用仓库的Git配置： .git/config文件，仅仅对当前仓库配置生效。    [local配置]\n```\n\n\n>ps: 优先机制：3 > 2 > 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]\n\n##### 注意：\n```\nwindows下的~/.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称\n```\n\n##### 查看所有配置命令\n```\ngit config --list --show-origin\n```\n\n#### 生成密钥&关联Github/Gitlab\n\n##### 生成密钥\n>根据邮箱，会要求输入密码，连续3个回车即可。\n```\nssh-keygen -t rsa -C \"这里换上你的邮箱\"\n```\n\n最后得到id_rsa和id_rsa.pub两个文件。\n\n这里用到的是你的 公钥`id_rsa.pub`文件，复制文件里面的内容到github密钥的界面：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902075825.png)\n\n添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。\n\n##### 拓展\n>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902080130.png)\n\n#### global配置（全局配置）或 local配置（当前仓库配置）\n\n##### global配置（针对你只有一个git账户的情况）\n```\n查看命令：\ngit config --global --list\n\n全局配置：\n\ngit config --global user.name \"crab\"\ngit config --global user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --global https.proxy http://127.0.0.1:1080 \n# sock\ngit config --global http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --global --unset http.proxy\n```\n\n##### local配置 (建议本地仓库配置，这样比较灵活)\n\n```\n查看命令：\ngit config --local --list\n\n全局配置：\n\ngit config --local user.name \"crab\"\ngit config --local user.email \"imrcrab@163.com\"\n\n代理配置（按需可选）\n# http\ngit config --local https.proxy http://127.0.0.1:1080 \n# sock\ngit config --local http.proxy 'socks5://127.0.0.1:1080' \n\n取消代理：\ngit config --local --unset http.proxy\n```\n\n#### 配置完成，clone/commit代码\n\n##### clone仓库代码\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902081306.png)\n\n```\ngit clone https://github.com/crab21/blog.git\n```\n##### commit代码\n>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。\n\n### END","slug":"6-git 初阶:安装配置 ～1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5m0046zfqxa5xw4rej","content":"<blockquote>\n<p>自盘古开天辟地～～～～<br>\n扯远了…<br>\n完整的分享下Git的使用和学习的知识点，之前章节中的<a href=\"http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/\">Git常用技巧</a>是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。</p>\n</blockquote>\n<h2 id=\"前景\"><a class=\"header-anchor\" href=\"#前景\">¶</a>前景</h2>\n<p>SVN估计是家喻户晓了，一直被用作<code>'版本管理'</code>和<code>代码仓库</code>。（ps:不算是完整的<code>版本管理</code>.）<br>\nGit的出现，是linus之父休假时产出的“作品”,<code>版本管理</code> &amp; <code>代码仓库</code>的作用。总而言之，用熟练Git了，就再也回不去了。</p>\n<span id=\"more\"></span>\n<h2 id=\"目标：\"><a class=\"header-anchor\" href=\"#目标：\">¶</a>目标：</h2>\n<blockquote>\n<p>最终可以顺利的提交代码即可。</p>\n</blockquote>\n<h2 id=\"此篇只分享两个知识点：\"><a class=\"header-anchor\" href=\"#此篇只分享两个知识点：\">¶</a>此篇只分享两个知识点：</h2>\n<blockquote>\n<p>安装Git和Git基本配置</p>\n</blockquote>\n<h3 id=\"Git安装\"><a class=\"header-anchor\" href=\"#Git安装\">¶</a>Git安装</h3>\n<p>说安装其实就是去官网下载软件，安装到你选定地方即可。</p>\n<p>在此附上官网的下载链接： <a href=\"https://git-scm.com/download/\">点击进入</a></p>\n<p>选择对应平台windows?linux?macos?</p>\n<p>ps:别选错了，那就very尴尬了。</p>\n<h3 id=\"基本配置\"><a class=\"header-anchor\" href=\"#基本配置\">¶</a>基本配置</h3>\n<p>说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。</p>\n<h4 id=\"前期基本配置\"><a class=\"header-anchor\" href=\"#前期基本配置\">¶</a>前期基本配置</h4>\n<p>主要分三个地方：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、/etc/gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。</span><br><span class=\"line\">2、~/.gitconfig 或 ~/.config/git/config 文件： 只针对当前用户生效。 [global配置]</span><br><span class=\"line\">3、当前使用仓库的Git配置： .git/config文件，仅仅对当前仓库配置生效。    [local配置]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ps: 优先机制：3 &gt; 2 &gt; 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]</p>\n</blockquote>\n<h5 id=\"注意：\"><a class=\"header-anchor\" href=\"#注意：\">¶</a>注意：</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows下的~/.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看所有配置命令\"><a class=\"header-anchor\" href=\"#查看所有配置命令\">¶</a>查看所有配置命令</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --show-origin</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密钥-关联Github-Gitlab\"><a class=\"header-anchor\" href=\"#生成密钥-关联Github-Gitlab\">¶</a>生成密钥&amp;关联Github/Gitlab</h4>\n<h5 id=\"生成密钥\"><a class=\"header-anchor\" href=\"#生成密钥\">¶</a>生成密钥</h5>\n<blockquote>\n<p>根据邮箱，会要求输入密码，连续3个回车即可。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>最后得到id_rsa和id_rsa.pub两个文件。</p>\n<p>这里用到的是你的 公钥<code>id_rsa.pub</code>文件，复制文件里面的内容到github密钥的界面：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902075825.png\" alt=\"\"></p>\n<p>添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。</p>\n<h5 id=\"拓展\"><a class=\"header-anchor\" href=\"#拓展\">¶</a>拓展</h5>\n<blockquote>\n<p>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902080130.png\" alt=\"\"></p>\n<h4 id=\"global配置（全局配置）或-local配置（当前仓库配置）\"><a class=\"header-anchor\" href=\"#global配置（全局配置）或-local配置（当前仓库配置）\">¶</a>global配置（全局配置）或 local配置（当前仓库配置）</h4>\n<h5 id=\"global配置（针对你只有一个git账户的情况）\"><a class=\"header-anchor\" href=\"#global配置（针对你只有一个git账户的情况）\">¶</a>global配置（针对你只有一个git账户的情况）</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --global https.proxy http://127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>\n<h5 id=\"local配置-建议本地仓库配置，这样比较灵活\"><a class=\"header-anchor\" href=\"#local配置-建议本地仓库配置，这样比较灵活\">¶</a>local配置 (建议本地仓库配置，这样比较灵活)</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --local --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --local https.proxy http://127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --local http.proxy &#x27;socks5://127.0.0.1:1080&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --local --unset http.proxy</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置完成，clone-commit代码\"><a class=\"header-anchor\" href=\"#配置完成，clone-commit代码\">¶</a>配置完成，clone/commit代码</h4>\n<h5 id=\"clone仓库代码\"><a class=\"header-anchor\" href=\"#clone仓库代码\">¶</a>clone仓库代码</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902081306.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/crab21/blog.git</span><br></pre></td></tr></table></figure>\n<h5 id=\"commit代码\"><a class=\"header-anchor\" href=\"#commit代码\">¶</a>commit代码</h5>\n<blockquote>\n<p>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。</p>\n</blockquote>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>自盘古开天辟地～～～～<br>\n扯远了…<br>\n完整的分享下Git的使用和学习的知识点，之前章节中的<a href=\"http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/\">Git常用技巧</a>是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。</p>\n</blockquote>\n<h2 id=\"前景\"><a class=\"header-anchor\" href=\"#前景\">¶</a>前景</h2>\n<p>SVN估计是家喻户晓了，一直被用作<code>'版本管理'</code>和<code>代码仓库</code>。（ps:不算是完整的<code>版本管理</code>.）<br>\nGit的出现，是linus之父休假时产出的“作品”,<code>版本管理</code> &amp; <code>代码仓库</code>的作用。总而言之，用熟练Git了，就再也回不去了。</p>","more":"<h2 id=\"目标：\"><a class=\"header-anchor\" href=\"#目标：\">¶</a>目标：</h2>\n<blockquote>\n<p>最终可以顺利的提交代码即可。</p>\n</blockquote>\n<h2 id=\"此篇只分享两个知识点：\"><a class=\"header-anchor\" href=\"#此篇只分享两个知识点：\">¶</a>此篇只分享两个知识点：</h2>\n<blockquote>\n<p>安装Git和Git基本配置</p>\n</blockquote>\n<h3 id=\"Git安装\"><a class=\"header-anchor\" href=\"#Git安装\">¶</a>Git安装</h3>\n<p>说安装其实就是去官网下载软件，安装到你选定地方即可。</p>\n<p>在此附上官网的下载链接： <a href=\"https://git-scm.com/download/\">点击进入</a></p>\n<p>选择对应平台windows?linux?macos?</p>\n<p>ps:别选错了，那就very尴尬了。</p>\n<h3 id=\"基本配置\"><a class=\"header-anchor\" href=\"#基本配置\">¶</a>基本配置</h3>\n<p>说到基本配置，大多数都会有，更何况是如此强大的版本控制软件。</p>\n<h4 id=\"前期基本配置\"><a class=\"header-anchor\" href=\"#前期基本配置\">¶</a>前期基本配置</h4>\n<p>主要分三个地方：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、/etc/gitconfig 文件: 系统上每一个用户及其他们的仓库配置文件。</span><br><span class=\"line\">2、~/.gitconfig 或 ~/.config/git/config 文件： 只针对当前用户生效。 [global配置]</span><br><span class=\"line\">3、当前使用仓库的Git配置： .git/config文件，仅仅对当前仓库配置生效。    [local配置]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ps: 优先机制：3 &gt; 2 &gt; 1  [.git/config覆盖~/.gitconfig、  ~/.gitconfig覆盖/etc/gitconfig]</p>\n</blockquote>\n<h5 id=\"注意：\"><a class=\"header-anchor\" href=\"#注意：\">¶</a>注意：</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">windows下的~/.gitconfig路径为：C:\\Users\\$USER下；$USER指当前电脑用户名称</span><br></pre></td></tr></table></figure>\n<h5 id=\"查看所有配置命令\"><a class=\"header-anchor\" href=\"#查看所有配置命令\">¶</a>查看所有配置命令</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list --show-origin</span><br></pre></td></tr></table></figure>\n<h4 id=\"生成密钥-关联Github-Gitlab\"><a class=\"header-anchor\" href=\"#生成密钥-关联Github-Gitlab\">¶</a>生成密钥&amp;关联Github/Gitlab</h4>\n<h5 id=\"生成密钥\"><a class=\"header-anchor\" href=\"#生成密钥\">¶</a>生成密钥</h5>\n<blockquote>\n<p>根据邮箱，会要求输入密码，连续3个回车即可。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n<p>最后得到id_rsa和id_rsa.pub两个文件。</p>\n<p>这里用到的是你的 公钥<code>id_rsa.pub</code>文件，复制文件里面的内容到github密钥的界面：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902075825.png\" alt=\"\"></p>\n<p>添加SSH完了之后，就绑定了你本机器和github的关联关系，相当于授权成功。</p>\n<h5 id=\"拓展\"><a class=\"header-anchor\" href=\"#拓展\">¶</a>拓展</h5>\n<blockquote>\n<p>上述生成密钥时也可以自定义文件名称.此种情况针对你有多个github账号时，提交公钥文件时，找出自定义名称的文件即可。（下图自定义生成文件名称pywang112,则公钥为pywang112.pub，看好你生成的路径哦）</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902080130.png\" alt=\"\"></p>\n<h4 id=\"global配置（全局配置）或-local配置（当前仓库配置）\"><a class=\"header-anchor\" href=\"#global配置（全局配置）或-local配置（当前仓库配置）\">¶</a>global配置（全局配置）或 local配置（当前仓库配置）</h4>\n<h5 id=\"global配置（针对你只有一个git账户的情况）\"><a class=\"header-anchor\" href=\"#global配置（针对你只有一个git账户的情况）\">¶</a>global配置（针对你只有一个git账户的情况）</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --global --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global user.name &quot;crab&quot;</span><br><span class=\"line\">git config --global user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --global https.proxy http://127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure>\n<h5 id=\"local配置-建议本地仓库配置，这样比较灵活\"><a class=\"header-anchor\" href=\"#local配置-建议本地仓库配置，这样比较灵活\">¶</a>local配置 (建议本地仓库配置，这样比较灵活)</h5>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">查看命令：</span><br><span class=\"line\">git config --local --list</span><br><span class=\"line\"></span><br><span class=\"line\">全局配置：</span><br><span class=\"line\"></span><br><span class=\"line\">git config --local user.name &quot;crab&quot;</span><br><span class=\"line\">git config --local user.email &quot;imrcrab@163.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">代理配置（按需可选）</span><br><span class=\"line\"># http</span><br><span class=\"line\">git config --local https.proxy http://127.0.0.1:1080 </span><br><span class=\"line\"># sock</span><br><span class=\"line\">git config --local http.proxy &#x27;socks5://127.0.0.1:1080&#x27; </span><br><span class=\"line\"></span><br><span class=\"line\">取消代理：</span><br><span class=\"line\">git config --local --unset http.proxy</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置完成，clone-commit代码\"><a class=\"header-anchor\" href=\"#配置完成，clone-commit代码\">¶</a>配置完成，clone/commit代码</h4>\n<h5 id=\"clone仓库代码\"><a class=\"header-anchor\" href=\"#clone仓库代码\">¶</a>clone仓库代码</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902081306.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/crab21/blog.git</span><br></pre></td></tr></table></figure>\n<h5 id=\"commit代码\"><a class=\"header-anchor\" href=\"#commit代码\">¶</a>commit代码</h5>\n<blockquote>\n<p>按照如上配置完成后，就可以完成基本的push和pull仓库代码了。</p>\n</blockquote>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902075825.png","popularPost_tmp_gaData":{"updated":"Wed Sep 02 2020 22:38:44 GMT+0800 (中国标准时间)","title":"「6」git 初阶:安装配置 ～1","path":"archives/bddc30f6.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200902075825.png","excerpt":"<blockquote>\n<p>自盘古开天辟地～～～～<br>\n扯远了…<br>\n完整的分享下Git的使用和学习的知识点，之前章节中的<a href=\"http://blog.imrcrab.com/2020/09/01/Git%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/\">Git常用技巧</a>是我之前部分快速使用的场景，适合于有经验的开发者，现在来系统的分享下对于Git的理解，也算是自己学习的记录。</p>\n</blockquote>\n<h2 id=\"前景\"><a class=\"header-anchor\" href=\"#前景\">¶</a>前景</h2>\n<p>SVN估计是家喻户晓了，一直被用作<code>'版本管理'</code>和<code>代码仓库</code>。（ps:不算是完整的<code>版本管理</code>.）<br>\nGit的出现，是linus之父休假时产出的“作品”,<code>版本管理</code> &amp; <code>代码仓库</code>的作用。总而言之，用熟练Git了，就再也回不去了。</p>","date":{"_isAMomentObject":true,"_i":"2020-09-02T14:38:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-02T14:38:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1873},{"title":"「57」算法(二) → 链表","date":"2021-05-28T02:36:44.000Z","updated":"2021-06-01T12:51:51.000Z","abbrlink":"afe7994b","_content":"\n\n* 反转单向链表\n  * 反转单向链表的[N,M]\n* 删除链表重复元素\n* 合并两个有序链表\n* 旋转链表\n* 排序链表\n* 两数相加 \n....\n<!--more-->\n\n### 反转单向链表\n\n#### 要求\n```go\n给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n#### 思路分析：\n\n##### 变量暂存替换法\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031731.png)\n\n```go\nfunc ReserveList(head *ListNode) *ListNode {\n\tif head == nil || head.next == nil {\n\t\treturn head\n\t}\n\tvar pre *ListNode\n\tfor head != nil {\n        // 简化版：\n        // head, head.next, pre = head.next, pre, head\n\t\tnextNode := head.next\n\t\thead.next = pre\n\t\tpre = head\n\t\thead = nextNode\n\t}\n\treturn pre\n}\n```\n\n##### 双头指针法\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031843.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031913.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031933.png)\n\n\n```go\nfunc ReserveList(head *ListNode) *ListNode {\n\tif head == nil || head.next == nil {\n\t\treturn head\n\t}\n\tcur := head\n\tfor head.next != nil {\n\t\ttmp := head.next.next\n\t\thead.next.next = cur\n\t\tcur = head.next\n\t\thead.next = tmp\n\t}\n\treturn cur\n}\n```\n\n### 反转单向链表前N个\n\n#### 要求：\n\n#### 思路：\n\n#### coding:\n\n\n```go\nvar nochange *ListNode\n\nfunc ReserveListN(head *ListNode, n int) *ListNode {\n\n\tif n == 1 {\n\t\tnochange = head.next\n\t\treturn head\n\t}\n\tlast := ReserveListN(head.next, n-1)\n\thead.next.next = head\n\thead.next = nochange\n\treturn last\n}\n```\n\n\n### 反转单向链表N~M之间的\n\n#### 要求：\n\n#### 思路：\n\n#### coding:\n\n\n```go\n//翻转[N,M]范围内的元素\nfunc ReserveListNM(head *ListNode, n, m int) *ListNode {\n\n\tif n == 1 {\n\t\treturn ReserveListN(head, m)\n\t}\n\thead.next = ReserveListNM(head.next, n-1, m-1)\n\treturn head\n}\n```\n\n### 待更新...","source":"_posts/57-算法-二-链表.md","raw":"---\ntitle: 「57」算法(二) → 链表\ndate: '2021/05/28 10:36:44'\nupdated: '2021/06/01 20:51:51'\nabbrlink: afe7994b\ntags:\n---\n\n\n* 反转单向链表\n  * 反转单向链表的[N,M]\n* 删除链表重复元素\n* 合并两个有序链表\n* 旋转链表\n* 排序链表\n* 两数相加 \n....\n<!--more-->\n\n### 反转单向链表\n\n#### 要求\n```go\n给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。\n输入：head = [1,2,3,4,5]\n输出：[5,4,3,2,1]\n```\n\n#### 思路分析：\n\n##### 变量暂存替换法\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031731.png)\n\n```go\nfunc ReserveList(head *ListNode) *ListNode {\n\tif head == nil || head.next == nil {\n\t\treturn head\n\t}\n\tvar pre *ListNode\n\tfor head != nil {\n        // 简化版：\n        // head, head.next, pre = head.next, pre, head\n\t\tnextNode := head.next\n\t\thead.next = pre\n\t\tpre = head\n\t\thead = nextNode\n\t}\n\treturn pre\n}\n```\n\n##### 双头指针法\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031843.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031913.png)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031933.png)\n\n\n```go\nfunc ReserveList(head *ListNode) *ListNode {\n\tif head == nil || head.next == nil {\n\t\treturn head\n\t}\n\tcur := head\n\tfor head.next != nil {\n\t\ttmp := head.next.next\n\t\thead.next.next = cur\n\t\tcur = head.next\n\t\thead.next = tmp\n\t}\n\treturn cur\n}\n```\n\n### 反转单向链表前N个\n\n#### 要求：\n\n#### 思路：\n\n#### coding:\n\n\n```go\nvar nochange *ListNode\n\nfunc ReserveListN(head *ListNode, n int) *ListNode {\n\n\tif n == 1 {\n\t\tnochange = head.next\n\t\treturn head\n\t}\n\tlast := ReserveListN(head.next, n-1)\n\thead.next.next = head\n\thead.next = nochange\n\treturn last\n}\n```\n\n\n### 反转单向链表N~M之间的\n\n#### 要求：\n\n#### 思路：\n\n#### coding:\n\n\n```go\n//翻转[N,M]范围内的元素\nfunc ReserveListNM(head *ListNode, n, m int) *ListNode {\n\n\tif n == 1 {\n\t\treturn ReserveListN(head, m)\n\t}\n\thead.next = ReserveListNM(head.next, n-1, m-1)\n\treturn head\n}\n```\n\n### 待更新...","slug":"57-算法-二-链表","published":1,"_id":"cl82u8d5m0048zfqx0x8e1skp","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li>反转单向链表\n<ul>\n<li>反转单向链表的[N,M]</li>\n</ul>\n</li>\n<li>删除链表重复元素</li>\n<li>合并两个有序链表</li>\n<li>旋转链表</li>\n<li>排序链表</li>\n<li>两数相加<br>\n…</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"反转单向链表\"><a class=\"header-anchor\" href=\"#反转单向链表\">¶</a>反转单向链表</h3>\n<h4 id=\"要求\"><a class=\"header-anchor\" href=\"#要求\">¶</a>要求</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</span><br><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\">¶</a>思路分析：</h4>\n<h5 id=\"变量暂存替换法\"><a class=\"header-anchor\" href=\"#变量暂存替换法\">¶</a>变量暂存替换法</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031731.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveList</span><span class=\"params\">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> head == <span class=\"literal\">nil</span> || head.next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pre *ListNode</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> head != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 简化版：</span></span><br><span class=\"line\">        <span class=\"comment\">// head, head.next, pre = head.next, pre, head</span></span><br><span class=\"line\">\t\tnextNode := head.next</span><br><span class=\"line\">\t\thead.next = pre</span><br><span class=\"line\">\t\tpre = head</span><br><span class=\"line\">\t\thead = nextNode</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"双头指针法\"><a class=\"header-anchor\" href=\"#双头指针法\">¶</a>双头指针法</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031843.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031913.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031933.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveList</span><span class=\"params\">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> head == <span class=\"literal\">nil</span> || head.next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcur := head</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> head.next != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\ttmp := head.next.next</span><br><span class=\"line\">\t\thead.next.next = cur</span><br><span class=\"line\">\t\tcur = head.next</span><br><span class=\"line\">\t\thead.next = tmp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转单向链表前N个\"><a class=\"header-anchor\" href=\"#反转单向链表前N个\">¶</a>反转单向链表前N个</h3>\n<h4 id=\"要求：\"><a class=\"header-anchor\" href=\"#要求：\">¶</a>要求：</h4>\n<h4 id=\"思路：\"><a class=\"header-anchor\" href=\"#思路：\">¶</a>思路：</h4>\n<h4 id=\"coding\"><a class=\"header-anchor\" href=\"#coding\">¶</a>coding:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nochange *ListNode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveListN</span><span class=\"params\">(head *ListNode, n <span class=\"type\">int</span>)</span></span> *ListNode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tnochange = head.next</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlast := ReserveListN(head.next, n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\thead.next.next = head</span><br><span class=\"line\">\thead.next = nochange</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> last</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转单向链表N-M之间的\"><a class=\"header-anchor\" href=\"#反转单向链表N-M之间的\">¶</a>反转单向链表N~M之间的</h3>\n<h4 id=\"要求：-v2\"><a class=\"header-anchor\" href=\"#要求：-v2\">¶</a>要求：</h4>\n<h4 id=\"思路：-v2\"><a class=\"header-anchor\" href=\"#思路：-v2\">¶</a>思路：</h4>\n<h4 id=\"coding-v2\"><a class=\"header-anchor\" href=\"#coding-v2\">¶</a>coding:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//翻转[N,M]范围内的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveListNM</span><span class=\"params\">(head *ListNode, n, m <span class=\"type\">int</span>)</span></span> *ListNode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ReserveListN(head, m)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead.next = ReserveListNM(head.next, n<span class=\"number\">-1</span>, m<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"待更新…\"><a class=\"header-anchor\" href=\"#待更新…\">¶</a>待更新…</h3>\n","site":{"data":{}},"excerpt":"<ul>\n<li>反转单向链表\n<ul>\n<li>反转单向链表的[N,M]</li>\n</ul>\n</li>\n<li>删除链表重复元素</li>\n<li>合并两个有序链表</li>\n<li>旋转链表</li>\n<li>排序链表</li>\n<li>两数相加<br>\n…</li>\n</ul>","more":"<h3 id=\"反转单向链表\"><a class=\"header-anchor\" href=\"#反转单向链表\">¶</a>反转单向链表</h3>\n<h4 id=\"要求\"><a class=\"header-anchor\" href=\"#要求\">¶</a>要求</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给你单链表的头节点 head ，请你反转链表，并返回反转后的链表。</span><br><span class=\"line\">输入：head = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">输出：[<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"思路分析：\"><a class=\"header-anchor\" href=\"#思路分析：\">¶</a>思路分析：</h4>\n<h5 id=\"变量暂存替换法\"><a class=\"header-anchor\" href=\"#变量暂存替换法\">¶</a>变量暂存替换法</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031731.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveList</span><span class=\"params\">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> head == <span class=\"literal\">nil</span> || head.next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> pre *ListNode</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> head != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 简化版：</span></span><br><span class=\"line\">        <span class=\"comment\">// head, head.next, pre = head.next, pre, head</span></span><br><span class=\"line\">\t\tnextNode := head.next</span><br><span class=\"line\">\t\thead.next = pre</span><br><span class=\"line\">\t\tpre = head</span><br><span class=\"line\">\t\thead = nextNode</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pre</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"双头指针法\"><a class=\"header-anchor\" href=\"#双头指针法\">¶</a>双头指针法</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031843.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031913.png\" alt=\"\"></p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031933.png\" alt=\"\"></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveList</span><span class=\"params\">(head *ListNode)</span></span> *ListNode &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> head == <span class=\"literal\">nil</span> || head.next == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcur := head</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> head.next != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\ttmp := head.next.next</span><br><span class=\"line\">\t\thead.next.next = cur</span><br><span class=\"line\">\t\tcur = head.next</span><br><span class=\"line\">\t\thead.next = tmp</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> cur</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转单向链表前N个\"><a class=\"header-anchor\" href=\"#反转单向链表前N个\">¶</a>反转单向链表前N个</h3>\n<h4 id=\"要求：\"><a class=\"header-anchor\" href=\"#要求：\">¶</a>要求：</h4>\n<h4 id=\"思路：\"><a class=\"header-anchor\" href=\"#思路：\">¶</a>思路：</h4>\n<h4 id=\"coding\"><a class=\"header-anchor\" href=\"#coding\">¶</a>coding:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nochange *ListNode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveListN</span><span class=\"params\">(head *ListNode, n <span class=\"type\">int</span>)</span></span> *ListNode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\tnochange = head.next</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlast := ReserveListN(head.next, n<span class=\"number\">-1</span>)</span><br><span class=\"line\">\thead.next.next = head</span><br><span class=\"line\">\thead.next = nochange</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> last</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"反转单向链表N-M之间的\"><a class=\"header-anchor\" href=\"#反转单向链表N-M之间的\">¶</a>反转单向链表N~M之间的</h3>\n<h4 id=\"要求：-v2\"><a class=\"header-anchor\" href=\"#要求：-v2\">¶</a>要求：</h4>\n<h4 id=\"思路：-v2\"><a class=\"header-anchor\" href=\"#思路：-v2\">¶</a>思路：</h4>\n<h4 id=\"coding-v2\"><a class=\"header-anchor\" href=\"#coding-v2\">¶</a>coding:</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//翻转[N,M]范围内的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReserveListNM</span><span class=\"params\">(head *ListNode, n, m <span class=\"type\">int</span>)</span></span> *ListNode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> n == <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ReserveListN(head, m)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\thead.next = ReserveListNM(head.next, n<span class=\"number\">-1</span>, m<span class=\"number\">-1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> head</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"待更新…\"><a class=\"header-anchor\" href=\"#待更新…\">¶</a>待更新…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031731.png","popularPost_tmp_gaData":{"updated":"Tue Jun 01 2021 20:51:51 GMT+0800 (中国标准时间)","title":"「57」算法(二) → 链表","path":"archives/afe7994b.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210528_031731.png","excerpt":"<ul>\n<li>反转单向链表\n<ul>\n<li>反转单向链表的[N,M]</li>\n</ul>\n</li>\n<li>删除链表重复元素</li>\n<li>合并两个有序链表</li>\n<li>旋转链表</li>\n<li>排序链表</li>\n<li>两数相加<br>\n…</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-05-28T02:36:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-05-28T02:36:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1098},{"title":"「60」wireshark usage","abbrlink":"8afe733","date":"2021-07-19T02:43:34.000Z","_content":"\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png)\n\n<!--more-->\n\n### [👉🏿wireshark介绍](https://baike.baidu.com/item/Wireshark/10876564)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_112815.png)\n### Modules\n\n#### [👉👉http](https://www.wireshark.org/docs/dfref/h/http.html)\n\n##### http.accept\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_095722.png)\n\n#### http.request.method\n>http.request.method==GET\n\n>http.request.method==POST\n\n>......\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100002.png)\n\n##### http.response\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100229.png)\n\n##### http.response.code\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100414.png)\n\n##### http.request.uri\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100519.png)\n\n##### http.request.full_uri\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100739.png)\n\n\n##### other\n\n参考上面的例子，使用其余的字段值。\n\n#### ip\n\n##### ip.addr\n>addr:127.0.0.1     http请求    port:8001\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_105408.png)\n\n##### ip.host\n\n>官方解释：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110147.png)\n\n>eg：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110319.png)\n\n##### ip.proto\n\n>[→→→→官方文档：](https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110553.png)\n\n>eg: ICMP\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110643.png)\n\n>eg: UDP\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_111049.png)\n\n##### ip.version\n\n>官方文档\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113128.png)\n\n>eg: IPV4\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113100.png)\n\n##### ip.ttl\n\n>eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113728.png)\n\n#### tcp\n\n##### tcp.dstport\n\n>eg: 9026\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114812.png)\n\n##### tcp.port\n\n>eg: 9026\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114949.png)\n\n##### tcp.stream\n\n>eg: ==0\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_120621.png)\n\n#### tls\n\n##### tls.alert_message\n>[👉🏻👉🏻官方参考值](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.3)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051727.png)\n\n>eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052127.png)\n\n##### tls.compress_certificate.algorithm\n\n>[👉🏻👉🏻官方参考值](https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.4.1)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051250.png)\n\n\n>eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_050807.png)\n\n\n##### tls.handshake.version\n\n>[👉🏿👉🏿官方参考](https://tlsfingerprint.io/top/versions)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052921.png)\n\n### Import/Export package\n\n>导入和导出方法异曲同工\n\n#### export\n\n##### 方法一：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101005.png)\n\n##### 方法二：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101111.png)\n\n#### import\n\n##### 方法一：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101232.png)\n\n##### 方法二：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101322.png)\n\n\n### Preferences\n\n#### Resolve IP to {domain name}\n\n>勾选此选项\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_074453.png)\n\n> eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075010.png)\n\n#### Follow TCP stream\n\n>方式一：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075630.png)\n\n>方式二：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075943.png)\n\n>任选一个 eg: TCP stream「http stream方式相同，不再演示」\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_080616.png)\n\n\n### Others\n\n\n\n#### \"TCP segment of reassembled PDU\"\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_040500.png)\n\n>关于这个网上有很多种解释，可以自行百度参考[👉🏿👉🏿👉🏿TCP segment of reassembled PDU](https://www.google.com.hk/search?newwindow=1&lei=oHX2YOmaPMiFr7wPj76ViAg&q=tcp%20segment%20of%20a%20reassembled%20pdu%E5%8E%9F%E5%9B%A0&ved=2ahUKEwjp6v7iivHxAhXIwosBHQ9fBYEQsKwBKAF6BAgwEAI&biw=2560&bih=1253)\n\n>关于这个问题，抓包看看，ack是一样的，当前的next sequence number是下一个的sequence number.\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_041222.png)\n\n### Reference\n\n* [☞ wireshark官网](https://www.wireshark.org/)\n\n* [→→datatracker](https://datatracker.ietf.org/doc/html/rfc5246#section-7.3)\n\n* [→→micrsoft](https://techcommunity.microsoft.com/t5/iis-support-blog/ssl-tls-alert-protocol-and-the-alert-codes/ba-p/377132)\n\n* [→→tls finger print](https://tlsfingerprint.io/top/versions)\n* [→→tls version](https://tlsfingerprint.io/top/versions)\n* [→→List of IP protocol numbers](https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers)\n\n* [👉🏻 module: tls](https://www.wireshark.org/docs/dfref/t/tls.html)\n* [👉🏻 module: IP](https://www.wireshark.org/docs/dfref/i/ip.html)\n* [👉🏻 module: HTTP](https://www.wireshark.org/docs/dfref/h/http.html)\n\n* [☛ wireshak过滤规则](https://www.cnblogs.com/v1vvwv/p/Wireshark-filtering-rules.html)\n\n* [☛ wireshark基本用法及过滤规则](https://www.jianshu.com/p/d4d7ad6cc95f)\n\n\n","source":"_posts/60-wireshark-使用.md","raw":"---\ntitle: 「60」wireshark usage\nabbrlink: 8afe733\ndate: 2021-07-19 10:43:34\ntags:\n---\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png)\n\n<!--more-->\n\n### [👉🏿wireshark介绍](https://baike.baidu.com/item/Wireshark/10876564)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_112815.png)\n### Modules\n\n#### [👉👉http](https://www.wireshark.org/docs/dfref/h/http.html)\n\n##### http.accept\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_095722.png)\n\n#### http.request.method\n>http.request.method==GET\n\n>http.request.method==POST\n\n>......\n\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100002.png)\n\n##### http.response\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100229.png)\n\n##### http.response.code\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100414.png)\n\n##### http.request.uri\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100519.png)\n\n##### http.request.full_uri\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100739.png)\n\n\n##### other\n\n参考上面的例子，使用其余的字段值。\n\n#### ip\n\n##### ip.addr\n>addr:127.0.0.1     http请求    port:8001\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_105408.png)\n\n##### ip.host\n\n>官方解释：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110147.png)\n\n>eg：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110319.png)\n\n##### ip.proto\n\n>[→→→→官方文档：](https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110553.png)\n\n>eg: ICMP\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110643.png)\n\n>eg: UDP\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_111049.png)\n\n##### ip.version\n\n>官方文档\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113128.png)\n\n>eg: IPV4\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113100.png)\n\n##### ip.ttl\n\n>eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113728.png)\n\n#### tcp\n\n##### tcp.dstport\n\n>eg: 9026\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114812.png)\n\n##### tcp.port\n\n>eg: 9026\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114949.png)\n\n##### tcp.stream\n\n>eg: ==0\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_120621.png)\n\n#### tls\n\n##### tls.alert_message\n>[👉🏻👉🏻官方参考值](https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.3)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051727.png)\n\n>eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052127.png)\n\n##### tls.compress_certificate.algorithm\n\n>[👉🏻👉🏻官方参考值](https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.4.1)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051250.png)\n\n\n>eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_050807.png)\n\n\n##### tls.handshake.version\n\n>[👉🏿👉🏿官方参考](https://tlsfingerprint.io/top/versions)\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052921.png)\n\n### Import/Export package\n\n>导入和导出方法异曲同工\n\n#### export\n\n##### 方法一：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101005.png)\n\n##### 方法二：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101111.png)\n\n#### import\n\n##### 方法一：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101232.png)\n\n##### 方法二：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101322.png)\n\n\n### Preferences\n\n#### Resolve IP to {domain name}\n\n>勾选此选项\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_074453.png)\n\n> eg:\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075010.png)\n\n#### Follow TCP stream\n\n>方式一：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075630.png)\n\n>方式二：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075943.png)\n\n>任选一个 eg: TCP stream「http stream方式相同，不再演示」\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_080616.png)\n\n\n### Others\n\n\n\n#### \"TCP segment of reassembled PDU\"\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_040500.png)\n\n>关于这个网上有很多种解释，可以自行百度参考[👉🏿👉🏿👉🏿TCP segment of reassembled PDU](https://www.google.com.hk/search?newwindow=1&lei=oHX2YOmaPMiFr7wPj76ViAg&q=tcp%20segment%20of%20a%20reassembled%20pdu%E5%8E%9F%E5%9B%A0&ved=2ahUKEwjp6v7iivHxAhXIwosBHQ9fBYEQsKwBKAF6BAgwEAI&biw=2560&bih=1253)\n\n>关于这个问题，抓包看看，ack是一样的，当前的next sequence number是下一个的sequence number.\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_041222.png)\n\n### Reference\n\n* [☞ wireshark官网](https://www.wireshark.org/)\n\n* [→→datatracker](https://datatracker.ietf.org/doc/html/rfc5246#section-7.3)\n\n* [→→micrsoft](https://techcommunity.microsoft.com/t5/iis-support-blog/ssl-tls-alert-protocol-and-the-alert-codes/ba-p/377132)\n\n* [→→tls finger print](https://tlsfingerprint.io/top/versions)\n* [→→tls version](https://tlsfingerprint.io/top/versions)\n* [→→List of IP protocol numbers](https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers)\n\n* [👉🏻 module: tls](https://www.wireshark.org/docs/dfref/t/tls.html)\n* [👉🏻 module: IP](https://www.wireshark.org/docs/dfref/i/ip.html)\n* [👉🏻 module: HTTP](https://www.wireshark.org/docs/dfref/h/http.html)\n\n* [☛ wireshak过滤规则](https://www.cnblogs.com/v1vvwv/p/Wireshark-filtering-rules.html)\n\n* [☛ wireshark基本用法及过滤规则](https://www.jianshu.com/p/d4d7ad6cc95f)\n\n\n","slug":"60-wireshark-使用","published":1,"updated":"2022-09-15T09:16:56.171Z","_id":"cl82u8d5n004azfqx8w67fjcu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png\" alt=\"\"></p>\n<span id=\"more\"></span>\n<h3 id=\"👉🏿wireshark介绍\"><a class=\"header-anchor\" href=\"#👉🏿wireshark介绍\">¶</a><a href=\"https://baike.baidu.com/item/Wireshark/10876564\">👉🏿wireshark介绍</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_112815.png\" alt=\"\"></p>\n<h3 id=\"Modules\"><a class=\"header-anchor\" href=\"#Modules\">¶</a>Modules</h3>\n<h4 id=\"👉👉http\"><a class=\"header-anchor\" href=\"#👉👉http\">¶</a><a href=\"https://www.wireshark.org/docs/dfref/h/http.html\">👉👉http</a></h4>\n<h5 id=\"http-accept\"><a class=\"header-anchor\" href=\"#http-accept\">¶</a>http.accept</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_095722.png\" alt=\"\"></p>\n<h4 id=\"http-request-method\"><a class=\"header-anchor\" href=\"#http-request-method\">¶</a>http.request.method</h4>\n<blockquote>\n<p>http.request.method==GET</p>\n</blockquote>\n<blockquote>\n<p>http.request.method==POST</p>\n</blockquote>\n<blockquote>\n<p>…</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100002.png\" alt=\"\"></p>\n<h5 id=\"http-response\"><a class=\"header-anchor\" href=\"#http-response\">¶</a>http.response</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100229.png\" alt=\"\"></p>\n<h5 id=\"http-response-code\"><a class=\"header-anchor\" href=\"#http-response-code\">¶</a>http.response.code</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100414.png\" alt=\"\"></p>\n<h5 id=\"http-request-uri\"><a class=\"header-anchor\" href=\"#http-request-uri\">¶</a>http.request.uri</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100519.png\" alt=\"\"></p>\n<h5 id=\"http-request-full-uri\"><a class=\"header-anchor\" href=\"#http-request-full-uri\">¶</a>http.request.full_uri</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100739.png\" alt=\"\"></p>\n<h5 id=\"other\"><a class=\"header-anchor\" href=\"#other\">¶</a>other</h5>\n<p>参考上面的例子，使用其余的字段值。</p>\n<h4 id=\"ip\"><a class=\"header-anchor\" href=\"#ip\">¶</a>ip</h4>\n<h5 id=\"ip-addr\"><a class=\"header-anchor\" href=\"#ip-addr\">¶</a>ip.addr</h5>\n<blockquote>\n<p>addr:127.0.0.1     http请求    port:8001<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_105408.png\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"ip-host\"><a class=\"header-anchor\" href=\"#ip-host\">¶</a>ip.host</h5>\n<blockquote>\n<p>官方解释：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110147.png\" alt=\"\"></p>\n<blockquote>\n<p>eg：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110319.png\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"ip-proto\"><a class=\"header-anchor\" href=\"#ip-proto\">¶</a>ip.proto</h5>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers\">→→→→官方文档：</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110553.png\" alt=\"\"></p>\n<blockquote>\n<p>eg: ICMP</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110643.png\" alt=\"\"></p>\n<blockquote>\n<p>eg: UDP</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_111049.png\" alt=\"\"></p>\n<h5 id=\"ip-version\"><a class=\"header-anchor\" href=\"#ip-version\">¶</a>ip.version</h5>\n<blockquote>\n<p>官方文档<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113128.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>eg: IPV4</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113100.png\" alt=\"\"></p>\n<h5 id=\"ip-ttl\"><a class=\"header-anchor\" href=\"#ip-ttl\">¶</a>ip.ttl</h5>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113728.png\" alt=\"\"></p>\n<h4 id=\"tcp\"><a class=\"header-anchor\" href=\"#tcp\">¶</a>tcp</h4>\n<h5 id=\"tcp-dstport\"><a class=\"header-anchor\" href=\"#tcp-dstport\">¶</a>tcp.dstport</h5>\n<blockquote>\n<p>eg: 9026<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114812.png\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"tcp-port\"><a class=\"header-anchor\" href=\"#tcp-port\">¶</a>tcp.port</h5>\n<blockquote>\n<p>eg: 9026</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114949.png\" alt=\"\"></p>\n<h5 id=\"tcp-stream\"><a class=\"header-anchor\" href=\"#tcp-stream\">¶</a>tcp.stream</h5>\n<blockquote>\n<p>eg: ==0<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_120621.png\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"tls\"><a class=\"header-anchor\" href=\"#tls\">¶</a>tls</h4>\n<h5 id=\"tls-alert-message\"><a class=\"header-anchor\" href=\"#tls-alert-message\">¶</a>tls.alert_message</h5>\n<blockquote>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.3\">👉🏻👉🏻官方参考值</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051727.png\" alt=\"\"></p>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052127.png\" alt=\"\"></p>\n<h5 id=\"tls-compress-certificate-algorithm\"><a class=\"header-anchor\" href=\"#tls-compress-certificate-algorithm\">¶</a>tls.compress_certificate.algorithm</h5>\n<blockquote>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.4.1\">👉🏻👉🏻官方参考值</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051250.png\" alt=\"\"></p>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_050807.png\" alt=\"\"></p>\n<h5 id=\"tls-handshake-version\"><a class=\"header-anchor\" href=\"#tls-handshake-version\">¶</a>tls.handshake.version</h5>\n<blockquote>\n<p><a href=\"https://tlsfingerprint.io/top/versions\">👉🏿👉🏿官方参考</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052921.png\" alt=\"\"></p>\n<h3 id=\"Import-Export-package\"><a class=\"header-anchor\" href=\"#Import-Export-package\">¶</a>Import/Export package</h3>\n<blockquote>\n<p>导入和导出方法异曲同工</p>\n</blockquote>\n<h4 id=\"export\"><a class=\"header-anchor\" href=\"#export\">¶</a>export</h4>\n<h5 id=\"方法一：\"><a class=\"header-anchor\" href=\"#方法一：\">¶</a>方法一：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101005.png\" alt=\"\"></p>\n<h5 id=\"方法二：\"><a class=\"header-anchor\" href=\"#方法二：\">¶</a>方法二：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101111.png\" alt=\"\"></p>\n<h4 id=\"import\"><a class=\"header-anchor\" href=\"#import\">¶</a>import</h4>\n<h5 id=\"方法一：-v2\"><a class=\"header-anchor\" href=\"#方法一：-v2\">¶</a>方法一：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101232.png\" alt=\"\"></p>\n<h5 id=\"方法二：-v2\"><a class=\"header-anchor\" href=\"#方法二：-v2\">¶</a>方法二：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101322.png\" alt=\"\"></p>\n<h3 id=\"Preferences\"><a class=\"header-anchor\" href=\"#Preferences\">¶</a>Preferences</h3>\n<h4 id=\"Resolve-IP-to-domain-name\"><a class=\"header-anchor\" href=\"#Resolve-IP-to-domain-name\">¶</a>Resolve IP to {domain name}</h4>\n<blockquote>\n<p>勾选此选项</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_074453.png\" alt=\"\"></p>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075010.png\" alt=\"\"></p>\n<h4 id=\"Follow-TCP-stream\"><a class=\"header-anchor\" href=\"#Follow-TCP-stream\">¶</a>Follow TCP stream</h4>\n<blockquote>\n<p>方式一：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075630.png\" alt=\"\"></p>\n<blockquote>\n<p>方式二：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075943.png\" alt=\"\"></p>\n<blockquote>\n<p>任选一个 eg: TCP stream「http stream方式相同，不再演示」</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_080616.png\" alt=\"\"></p>\n<h3 id=\"Others\"><a class=\"header-anchor\" href=\"#Others\">¶</a>Others</h3>\n<h4 id=\"“TCP-segment-of-reassembled-PDU”\"><a class=\"header-anchor\" href=\"#“TCP-segment-of-reassembled-PDU”\">¶</a>“TCP segment of reassembled PDU”</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_040500.png\" alt=\"\"></p>\n<blockquote>\n<p>关于这个网上有很多种解释，可以自行百度参考<a href=\"https://www.google.com.hk/search?newwindow=1&amp;lei=oHX2YOmaPMiFr7wPj76ViAg&amp;q=tcp%20segment%20of%20a%20reassembled%20pdu%E5%8E%9F%E5%9B%A0&amp;ved=2ahUKEwjp6v7iivHxAhXIwosBHQ9fBYEQsKwBKAF6BAgwEAI&amp;biw=2560&amp;bih=1253\">👉🏿👉🏿👉🏿TCP segment of reassembled PDU</a></p>\n</blockquote>\n<blockquote>\n<p>关于这个问题，抓包看看，ack是一样的，当前的next sequence number是下一个的sequence number.<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_041222.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li>\n<p><a href=\"https://www.wireshark.org/\">☞ wireshark官网</a></p>\n</li>\n<li>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc5246#section-7.3\">→→datatracker</a></p>\n</li>\n<li>\n<p><a href=\"https://techcommunity.microsoft.com/t5/iis-support-blog/ssl-tls-alert-protocol-and-the-alert-codes/ba-p/377132\">→→micrsoft</a></p>\n</li>\n<li>\n<p><a href=\"https://tlsfingerprint.io/top/versions\">→→tls finger print</a></p>\n</li>\n<li>\n<p><a href=\"https://tlsfingerprint.io/top/versions\">→→tls version</a></p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers\">→→List of IP protocol numbers</a></p>\n</li>\n<li>\n<p><a href=\"https://www.wireshark.org/docs/dfref/t/tls.html\">👉🏻 module: tls</a></p>\n</li>\n<li>\n<p><a href=\"https://www.wireshark.org/docs/dfref/i/ip.html\">👉🏻 module: IP</a></p>\n</li>\n<li>\n<p><a href=\"https://www.wireshark.org/docs/dfref/h/http.html\">👉🏻 module: HTTP</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cnblogs.com/v1vvwv/p/Wireshark-filtering-rules.html\">☛ wireshak过滤规则</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/d4d7ad6cc95f\">☛ wireshark基本用法及过滤规则</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png\" alt=\"\"></p>","more":"<h3 id=\"👉🏿wireshark介绍\"><a class=\"header-anchor\" href=\"#👉🏿wireshark介绍\">¶</a><a href=\"https://baike.baidu.com/item/Wireshark/10876564\">👉🏿wireshark介绍</a></h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_112815.png\" alt=\"\"></p>\n<h3 id=\"Modules\"><a class=\"header-anchor\" href=\"#Modules\">¶</a>Modules</h3>\n<h4 id=\"👉👉http\"><a class=\"header-anchor\" href=\"#👉👉http\">¶</a><a href=\"https://www.wireshark.org/docs/dfref/h/http.html\">👉👉http</a></h4>\n<h5 id=\"http-accept\"><a class=\"header-anchor\" href=\"#http-accept\">¶</a>http.accept</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_095722.png\" alt=\"\"></p>\n<h4 id=\"http-request-method\"><a class=\"header-anchor\" href=\"#http-request-method\">¶</a>http.request.method</h4>\n<blockquote>\n<p>http.request.method==GET</p>\n</blockquote>\n<blockquote>\n<p>http.request.method==POST</p>\n</blockquote>\n<blockquote>\n<p>…</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100002.png\" alt=\"\"></p>\n<h5 id=\"http-response\"><a class=\"header-anchor\" href=\"#http-response\">¶</a>http.response</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100229.png\" alt=\"\"></p>\n<h5 id=\"http-response-code\"><a class=\"header-anchor\" href=\"#http-response-code\">¶</a>http.response.code</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100414.png\" alt=\"\"></p>\n<h5 id=\"http-request-uri\"><a class=\"header-anchor\" href=\"#http-request-uri\">¶</a>http.request.uri</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100519.png\" alt=\"\"></p>\n<h5 id=\"http-request-full-uri\"><a class=\"header-anchor\" href=\"#http-request-full-uri\">¶</a>http.request.full_uri</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_100739.png\" alt=\"\"></p>\n<h5 id=\"other\"><a class=\"header-anchor\" href=\"#other\">¶</a>other</h5>\n<p>参考上面的例子，使用其余的字段值。</p>\n<h4 id=\"ip\"><a class=\"header-anchor\" href=\"#ip\">¶</a>ip</h4>\n<h5 id=\"ip-addr\"><a class=\"header-anchor\" href=\"#ip-addr\">¶</a>ip.addr</h5>\n<blockquote>\n<p>addr:127.0.0.1     http请求    port:8001<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_105408.png\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"ip-host\"><a class=\"header-anchor\" href=\"#ip-host\">¶</a>ip.host</h5>\n<blockquote>\n<p>官方解释：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110147.png\" alt=\"\"></p>\n<blockquote>\n<p>eg：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110319.png\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"ip-proto\"><a class=\"header-anchor\" href=\"#ip-proto\">¶</a>ip.proto</h5>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers\">→→→→官方文档：</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110553.png\" alt=\"\"></p>\n<blockquote>\n<p>eg: ICMP</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_110643.png\" alt=\"\"></p>\n<blockquote>\n<p>eg: UDP</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_111049.png\" alt=\"\"></p>\n<h5 id=\"ip-version\"><a class=\"header-anchor\" href=\"#ip-version\">¶</a>ip.version</h5>\n<blockquote>\n<p>官方文档<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113128.png\" alt=\"\"></p>\n</blockquote>\n<blockquote>\n<p>eg: IPV4</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113100.png\" alt=\"\"></p>\n<h5 id=\"ip-ttl\"><a class=\"header-anchor\" href=\"#ip-ttl\">¶</a>ip.ttl</h5>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_113728.png\" alt=\"\"></p>\n<h4 id=\"tcp\"><a class=\"header-anchor\" href=\"#tcp\">¶</a>tcp</h4>\n<h5 id=\"tcp-dstport\"><a class=\"header-anchor\" href=\"#tcp-dstport\">¶</a>tcp.dstport</h5>\n<blockquote>\n<p>eg: 9026<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114812.png\" alt=\"\"></p>\n</blockquote>\n<h5 id=\"tcp-port\"><a class=\"header-anchor\" href=\"#tcp-port\">¶</a>tcp.port</h5>\n<blockquote>\n<p>eg: 9026</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_114949.png\" alt=\"\"></p>\n<h5 id=\"tcp-stream\"><a class=\"header-anchor\" href=\"#tcp-stream\">¶</a>tcp.stream</h5>\n<blockquote>\n<p>eg: ==0<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_120621.png\" alt=\"\"></p>\n</blockquote>\n<h4 id=\"tls\"><a class=\"header-anchor\" href=\"#tls\">¶</a>tls</h4>\n<h5 id=\"tls-alert-message\"><a class=\"header-anchor\" href=\"#tls-alert-message\">¶</a>tls.alert_message</h5>\n<blockquote>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc5246#appendix-A.3\">👉🏻👉🏻官方参考值</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051727.png\" alt=\"\"></p>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052127.png\" alt=\"\"></p>\n<h5 id=\"tls-compress-certificate-algorithm\"><a class=\"header-anchor\" href=\"#tls-compress-certificate-algorithm\">¶</a>tls.compress_certificate.algorithm</h5>\n<blockquote>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc5246#section-7.4.1.4.1\">👉🏻👉🏻官方参考值</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_051250.png\" alt=\"\"></p>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_050807.png\" alt=\"\"></p>\n<h5 id=\"tls-handshake-version\"><a class=\"header-anchor\" href=\"#tls-handshake-version\">¶</a>tls.handshake.version</h5>\n<blockquote>\n<p><a href=\"https://tlsfingerprint.io/top/versions\">👉🏿👉🏿官方参考</a></p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_052921.png\" alt=\"\"></p>\n<h3 id=\"Import-Export-package\"><a class=\"header-anchor\" href=\"#Import-Export-package\">¶</a>Import/Export package</h3>\n<blockquote>\n<p>导入和导出方法异曲同工</p>\n</blockquote>\n<h4 id=\"export\"><a class=\"header-anchor\" href=\"#export\">¶</a>export</h4>\n<h5 id=\"方法一：\"><a class=\"header-anchor\" href=\"#方法一：\">¶</a>方法一：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101005.png\" alt=\"\"></p>\n<h5 id=\"方法二：\"><a class=\"header-anchor\" href=\"#方法二：\">¶</a>方法二：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101111.png\" alt=\"\"></p>\n<h4 id=\"import\"><a class=\"header-anchor\" href=\"#import\">¶</a>import</h4>\n<h5 id=\"方法一：-v2\"><a class=\"header-anchor\" href=\"#方法一：-v2\">¶</a>方法一：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101232.png\" alt=\"\"></p>\n<h5 id=\"方法二：-v2\"><a class=\"header-anchor\" href=\"#方法二：-v2\">¶</a>方法二：</h5>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210719_101322.png\" alt=\"\"></p>\n<h3 id=\"Preferences\"><a class=\"header-anchor\" href=\"#Preferences\">¶</a>Preferences</h3>\n<h4 id=\"Resolve-IP-to-domain-name\"><a class=\"header-anchor\" href=\"#Resolve-IP-to-domain-name\">¶</a>Resolve IP to {domain name}</h4>\n<blockquote>\n<p>勾选此选项</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_074453.png\" alt=\"\"></p>\n<blockquote>\n<p>eg:</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075010.png\" alt=\"\"></p>\n<h4 id=\"Follow-TCP-stream\"><a class=\"header-anchor\" href=\"#Follow-TCP-stream\">¶</a>Follow TCP stream</h4>\n<blockquote>\n<p>方式一：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075630.png\" alt=\"\"></p>\n<blockquote>\n<p>方式二：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_075943.png\" alt=\"\"></p>\n<blockquote>\n<p>任选一个 eg: TCP stream「http stream方式相同，不再演示」</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210721_080616.png\" alt=\"\"></p>\n<h3 id=\"Others\"><a class=\"header-anchor\" href=\"#Others\">¶</a>Others</h3>\n<h4 id=\"“TCP-segment-of-reassembled-PDU”\"><a class=\"header-anchor\" href=\"#“TCP-segment-of-reassembled-PDU”\">¶</a>“TCP segment of reassembled PDU”</h4>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_040500.png\" alt=\"\"></p>\n<blockquote>\n<p>关于这个网上有很多种解释，可以自行百度参考<a href=\"https://www.google.com.hk/search?newwindow=1&amp;lei=oHX2YOmaPMiFr7wPj76ViAg&amp;q=tcp%20segment%20of%20a%20reassembled%20pdu%E5%8E%9F%E5%9B%A0&amp;ved=2ahUKEwjp6v7iivHxAhXIwosBHQ9fBYEQsKwBKAF6BAgwEAI&amp;biw=2560&amp;bih=1253\">👉🏿👉🏿👉🏿TCP segment of reassembled PDU</a></p>\n</blockquote>\n<blockquote>\n<p>关于这个问题，抓包看看，ack是一样的，当前的next sequence number是下一个的sequence number.<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_041222.png\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li>\n<p><a href=\"https://www.wireshark.org/\">☞ wireshark官网</a></p>\n</li>\n<li>\n<p><a href=\"https://datatracker.ietf.org/doc/html/rfc5246#section-7.3\">→→datatracker</a></p>\n</li>\n<li>\n<p><a href=\"https://techcommunity.microsoft.com/t5/iis-support-blog/ssl-tls-alert-protocol-and-the-alert-codes/ba-p/377132\">→→micrsoft</a></p>\n</li>\n<li>\n<p><a href=\"https://tlsfingerprint.io/top/versions\">→→tls finger print</a></p>\n</li>\n<li>\n<p><a href=\"https://tlsfingerprint.io/top/versions\">→→tls version</a></p>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_IP_protocol_numbers\">→→List of IP protocol numbers</a></p>\n</li>\n<li>\n<p><a href=\"https://www.wireshark.org/docs/dfref/t/tls.html\">👉🏻 module: tls</a></p>\n</li>\n<li>\n<p><a href=\"https://www.wireshark.org/docs/dfref/i/ip.html\">👉🏻 module: IP</a></p>\n</li>\n<li>\n<p><a href=\"https://www.wireshark.org/docs/dfref/h/http.html\">👉🏻 module: HTTP</a></p>\n</li>\n<li>\n<p><a href=\"https://www.cnblogs.com/v1vvwv/p/Wireshark-filtering-rules.html\">☛ wireshak过滤规则</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/d4d7ad6cc95f\">☛ wireshark基本用法及过滤规则</a></p>\n</li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png","popularPost_tmp_gaData":{"updated":"Thu Sep 15 2022 17:16:56 GMT+0800 (中国标准时间)","title":"「60」wireshark usage","path":"archives/8afe733.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png","excerpt":"<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210720_090654.png\" alt=\"\"></p>","date":{"_isAMomentObject":true,"_i":"2021-07-19T02:43:34.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-07-19T02:43:34.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1007},{"title":"「61」redis hash解读","date":"2021-08-17T04:36:44.000Z","updated":"2021-08-17T04:36:44.000Z","abbrlink":"68b4ef49","_content":"\n### 前序\n\nhash在日常开发中上镜频率还是比较高，例：\n\n```\n1、java中的Hashmap...\n2、Go中的Map...\n3、分布式的节点分布...\n3、Redis中的hash\n```\n\n### 好奇点\n\n* Redis的hash结构到底是怎么存的呢？\n* Redis hash如果做到高效的？\n* Rehash操作，do what?\n* \"XX\" vs ht「hashtable」?Why?\n\n<!--more-->\n\n>一个个来看吧：\n\n### hash结构：\n\n```c++\ntypedef struct dictht {\n    dictEntry **table;\n    unsigned long size;\n    unsigned long sizemask;\n    unsigned long used;\n} dictht;\n\ntypedef struct dict {\n    dictType *type;\n    void *privdata;\n    dictht ht[2];\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n    int16_t pauserehash; /* If >0 rehashing is paused (<0 indicates coding error) */\n} dict;\n```\n\n>用一张图来描述\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_094456.png)\n\n### redis的hash为何高效？\n\n>讲道理，不是最高效的，但是适合大众场景。\n\n```go\nhset hello w 1\nhset hello wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww 1\n```\n\n这2条命令在redis中的存储方式决定了是否高效。\n\n其实Redis提供了[👉🏻两种存hash编码](https://github.com/redis/redis/blob/6.2/src/server.h#L701)的结构：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_095231.png)\n\n#### 类型转换关键点\n\n* hash_max_ziplist_value [👉🏿 源码判断](https://github.com/redis/redis/blob/6.2/src/t_hash.c#L47)\n* hash_max_ziplist_entries [👉🏿 源码判断](https://github.com/redis/redis/blob/6.2/src/t_hash.c#L235)\n\n```go\n\n满足以下条件之一的，会将hash的类型从ziplist转换为hashtable。\n\n1、当hset的value大小超过设置的「hash_max_ziplist_value」，默认512字节. \n2、当key的个数超过指定个数：「hash_max_ziplist_entries」，默认64个.\n```\n\n\n\n### rehash\n\n* 产生原因：\n\n```go\n负载因子不在一个合理的范围内，简单的说：\n1、产生hash冲突\n2、单个table节点过长或者分布不均衡。\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_104655.png)\n\n\n* 触发的时机\n\n```go\n1、定时任务。\n2、对dict的find/delete/add等操作时触发。\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png)\n>具体rehash过程，后续会讲到。\n\n### ZIPLIST VS HASHTABLE\n\ntodo 数据采集中.....\n\n理论上分析：\n\nZIPLIST:   get操作是 O(N)+1\nHASHTABLE: get操作是 O(1)","source":"_posts/61-redis-hash.md","raw":"---\ntitle: 「61」redis hash解读\ndate: '2021/08/17 12:36:44'\nupdated: '2021/08/17 12:36:44'\ntags:\n  - Redis\n  - Hash\n  - 源码\nabbrlink: 68b4ef49\n---\n\n### 前序\n\nhash在日常开发中上镜频率还是比较高，例：\n\n```\n1、java中的Hashmap...\n2、Go中的Map...\n3、分布式的节点分布...\n3、Redis中的hash\n```\n\n### 好奇点\n\n* Redis的hash结构到底是怎么存的呢？\n* Redis hash如果做到高效的？\n* Rehash操作，do what?\n* \"XX\" vs ht「hashtable」?Why?\n\n<!--more-->\n\n>一个个来看吧：\n\n### hash结构：\n\n```c++\ntypedef struct dictht {\n    dictEntry **table;\n    unsigned long size;\n    unsigned long sizemask;\n    unsigned long used;\n} dictht;\n\ntypedef struct dict {\n    dictType *type;\n    void *privdata;\n    dictht ht[2];\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n    int16_t pauserehash; /* If >0 rehashing is paused (<0 indicates coding error) */\n} dict;\n```\n\n>用一张图来描述\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_094456.png)\n\n### redis的hash为何高效？\n\n>讲道理，不是最高效的，但是适合大众场景。\n\n```go\nhset hello w 1\nhset hello wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww 1\n```\n\n这2条命令在redis中的存储方式决定了是否高效。\n\n其实Redis提供了[👉🏻两种存hash编码](https://github.com/redis/redis/blob/6.2/src/server.h#L701)的结构：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_095231.png)\n\n#### 类型转换关键点\n\n* hash_max_ziplist_value [👉🏿 源码判断](https://github.com/redis/redis/blob/6.2/src/t_hash.c#L47)\n* hash_max_ziplist_entries [👉🏿 源码判断](https://github.com/redis/redis/blob/6.2/src/t_hash.c#L235)\n\n```go\n\n满足以下条件之一的，会将hash的类型从ziplist转换为hashtable。\n\n1、当hset的value大小超过设置的「hash_max_ziplist_value」，默认512字节. \n2、当key的个数超过指定个数：「hash_max_ziplist_entries」，默认64个.\n```\n\n\n\n### rehash\n\n* 产生原因：\n\n```go\n负载因子不在一个合理的范围内，简单的说：\n1、产生hash冲突\n2、单个table节点过长或者分布不均衡。\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_104655.png)\n\n\n* 触发的时机\n\n```go\n1、定时任务。\n2、对dict的find/delete/add等操作时触发。\n```\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png)\n>具体rehash过程，后续会讲到。\n\n### ZIPLIST VS HASHTABLE\n\ntodo 数据采集中.....\n\n理论上分析：\n\nZIPLIST:   get操作是 O(N)+1\nHASHTABLE: get操作是 O(1)","slug":"61-redis-hash","published":1,"_id":"cl82u8d5o004dzfqx2rnh42ug","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>hash在日常开发中上镜频率还是比较高，例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、java中的Hashmap...</span><br><span class=\"line\">2、Go中的Map...</span><br><span class=\"line\">3、分布式的节点分布...</span><br><span class=\"line\">3、Redis中的hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"好奇点\"><a class=\"header-anchor\" href=\"#好奇点\">¶</a>好奇点</h3>\n<ul>\n<li>Redis的hash结构到底是怎么存的呢？</li>\n<li>Redis hash如果做到高效的？</li>\n<li>Rehash操作，do what?</li>\n<li>“XX” vs ht「hashtable」?Why?</li>\n</ul>\n<span id=\"more\"></span>\n<blockquote>\n<p>一个个来看吧：</p>\n</blockquote>\n<h3 id=\"hash结构：\"><a class=\"header-anchor\" href=\"#hash结构：\">¶</a>hash结构：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">dictht</span> &#123;</span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> size;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> sizemask;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> used;</span><br><span class=\"line\">&#125; dictht;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">dict</span> &#123;</span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"type\">void</span> *privdata;</span><br><span class=\"line\">    dictht ht[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">long</span> rehashidx; <span class=\"comment\">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class=\"line\">    <span class=\"type\">int16_t</span> pauserehash; <span class=\"comment\">/* If &gt;0 rehashing is paused (&lt;0 indicates coding error) */</span></span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用一张图来描述</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_094456.png\" alt=\"\"></p>\n<h3 id=\"redis的hash为何高效？\"><a class=\"header-anchor\" href=\"#redis的hash为何高效？\">¶</a>redis的hash为何高效？</h3>\n<blockquote>\n<p>讲道理，不是最高效的，但是适合大众场景。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset hello w <span class=\"number\">1</span></span><br><span class=\"line\">hset hello wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这2条命令在redis中的存储方式决定了是否高效。</p>\n<p>其实Redis提供了<a href=\"https://github.com/redis/redis/blob/6.2/src/server.h#L701\">👉🏻两种存hash编码</a>的结构：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_095231.png\" alt=\"\"></p>\n<h4 id=\"类型转换关键点\"><a class=\"header-anchor\" href=\"#类型转换关键点\">¶</a>类型转换关键点</h4>\n<ul>\n<li>hash_max_ziplist_value <a href=\"https://github.com/redis/redis/blob/6.2/src/t_hash.c#L47\">👉🏿 源码判断</a></li>\n<li>hash_max_ziplist_entries <a href=\"https://github.com/redis/redis/blob/6.2/src/t_hash.c#L235\">👉🏿 源码判断</a></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">满足以下条件之一的，会将hash的类型从ziplist转换为hashtable。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、当hset的value大小超过设置的「hash_max_ziplist_value」，默认<span class=\"number\">512</span>字节. </span><br><span class=\"line\"><span class=\"number\">2</span>、当key的个数超过指定个数：「hash_max_ziplist_entries」，默认<span class=\"number\">64</span>个.</span><br></pre></td></tr></table></figure>\n<h3 id=\"rehash\"><a class=\"header-anchor\" href=\"#rehash\">¶</a>rehash</h3>\n<ul>\n<li>产生原因：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载因子不在一个合理的范围内，简单的说：</span><br><span class=\"line\"><span class=\"number\">1</span>、产生hash冲突</span><br><span class=\"line\"><span class=\"number\">2</span>、单个table节点过长或者分布不均衡。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_104655.png\" alt=\"\"></p>\n<ul>\n<li>触发的时机</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、定时任务。</span><br><span class=\"line\"><span class=\"number\">2</span>、对dict的find/<span class=\"built_in\">delete</span>/add等操作时触发。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png\" alt=\"\"></p>\n<blockquote>\n<p>具体rehash过程，后续会讲到。</p>\n</blockquote>\n<h3 id=\"ZIPLIST-VS-HASHTABLE\"><a class=\"header-anchor\" href=\"#ZIPLIST-VS-HASHTABLE\">¶</a>ZIPLIST VS HASHTABLE</h3>\n<p>todo 数据采集中…</p>\n<p>理论上分析：</p>\n<p>ZIPLIST:   get操作是 O(N)+1<br>\nHASHTABLE: get操作是 O(1)</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>hash在日常开发中上镜频率还是比较高，例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、java中的Hashmap...</span><br><span class=\"line\">2、Go中的Map...</span><br><span class=\"line\">3、分布式的节点分布...</span><br><span class=\"line\">3、Redis中的hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"好奇点\"><a class=\"header-anchor\" href=\"#好奇点\">¶</a>好奇点</h3>\n<ul>\n<li>Redis的hash结构到底是怎么存的呢？</li>\n<li>Redis hash如果做到高效的？</li>\n<li>Rehash操作，do what?</li>\n<li>“XX” vs ht「hashtable」?Why?</li>\n</ul>","more":"<blockquote>\n<p>一个个来看吧：</p>\n</blockquote>\n<h3 id=\"hash结构：\"><a class=\"header-anchor\" href=\"#hash结构：\">¶</a>hash结构：</h3>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">dictht</span> &#123;</span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> size;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> sizemask;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> used;</span><br><span class=\"line\">&#125; dictht;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"title class_\">dict</span> &#123;</span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"type\">void</span> *privdata;</span><br><span class=\"line\">    dictht ht[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"type\">long</span> rehashidx; <span class=\"comment\">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class=\"line\">    <span class=\"type\">int16_t</span> pauserehash; <span class=\"comment\">/* If &gt;0 rehashing is paused (&lt;0 indicates coding error) */</span></span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>用一张图来描述</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_094456.png\" alt=\"\"></p>\n<h3 id=\"redis的hash为何高效？\"><a class=\"header-anchor\" href=\"#redis的hash为何高效？\">¶</a>redis的hash为何高效？</h3>\n<blockquote>\n<p>讲道理，不是最高效的，但是适合大众场景。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hset hello w <span class=\"number\">1</span></span><br><span class=\"line\">hset hello wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>这2条命令在redis中的存储方式决定了是否高效。</p>\n<p>其实Redis提供了<a href=\"https://github.com/redis/redis/blob/6.2/src/server.h#L701\">👉🏻两种存hash编码</a>的结构：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_095231.png\" alt=\"\"></p>\n<h4 id=\"类型转换关键点\"><a class=\"header-anchor\" href=\"#类型转换关键点\">¶</a>类型转换关键点</h4>\n<ul>\n<li>hash_max_ziplist_value <a href=\"https://github.com/redis/redis/blob/6.2/src/t_hash.c#L47\">👉🏿 源码判断</a></li>\n<li>hash_max_ziplist_entries <a href=\"https://github.com/redis/redis/blob/6.2/src/t_hash.c#L235\">👉🏿 源码判断</a></li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">满足以下条件之一的，会将hash的类型从ziplist转换为hashtable。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、当hset的value大小超过设置的「hash_max_ziplist_value」，默认<span class=\"number\">512</span>字节. </span><br><span class=\"line\"><span class=\"number\">2</span>、当key的个数超过指定个数：「hash_max_ziplist_entries」，默认<span class=\"number\">64</span>个.</span><br></pre></td></tr></table></figure>\n<h3 id=\"rehash\"><a class=\"header-anchor\" href=\"#rehash\">¶</a>rehash</h3>\n<ul>\n<li>产生原因：</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">负载因子不在一个合理的范围内，简单的说：</span><br><span class=\"line\"><span class=\"number\">1</span>、产生hash冲突</span><br><span class=\"line\"><span class=\"number\">2</span>、单个table节点过长或者分布不均衡。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_104655.png\" alt=\"\"></p>\n<ul>\n<li>触发的时机</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、定时任务。</span><br><span class=\"line\"><span class=\"number\">2</span>、对dict的find/<span class=\"built_in\">delete</span>/add等操作时触发。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png\" alt=\"\"></p>\n<blockquote>\n<p>具体rehash过程，后续会讲到。</p>\n</blockquote>\n<h3 id=\"ZIPLIST-VS-HASHTABLE\"><a class=\"header-anchor\" href=\"#ZIPLIST-VS-HASHTABLE\">¶</a>ZIPLIST VS HASHTABLE</h3>\n<p>todo 数据采集中…</p>\n<p>理论上分析：</p>\n<p>ZIPLIST:   get操作是 O(N)+1<br>\nHASHTABLE: get操作是 O(1)</p>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_094456.png","popularPost_tmp_gaData":{"updated":"Tue Aug 17 2021 12:36:44 GMT+0800 (中国标准时间)","title":"「61」redis hash解读","path":"archives/68b4ef49.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_094456.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<p>hash在日常开发中上镜频率还是比较高，例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、java中的Hashmap...</span><br><span class=\"line\">2、Go中的Map...</span><br><span class=\"line\">3、分布式的节点分布...</span><br><span class=\"line\">3、Redis中的hash</span><br></pre></td></tr></table></figure>\n<h3 id=\"好奇点\"><a class=\"header-anchor\" href=\"#好奇点\">¶</a>好奇点</h3>\n<ul>\n<li>Redis的hash结构到底是怎么存的呢？</li>\n<li>Redis hash如果做到高效的？</li>\n<li>Rehash操作，do what?</li>\n<li>“XX” vs ht「hashtable」?Why?</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-08-17T04:36:44.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-08-17T04:36:44.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Hash","Redis","源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1127},{"title":"「62」redis rehash过程","date":"2021-08-28T10:01:32.000Z","updated":"2021-08-28T10:36:44.000Z","abbrlink":"f733f408","_content":"\n### 前序\n\n>之前有提到过[👉🏿 redis 中hash的介绍](https://blog.imrcrab.com/archives/68b4ef49.html#more),如果不了解可以先看看 热热身。\n\n\n### rehash\n\n#### 时机：\n\n```go\n1、定时任务。\n2、对dict的find/delete/add等操作时触发。\n```\n<!--more-->\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png)\n\n\n#### 源码分析：\n\n```c++\n\n/* Performs N steps of incremental rehashing. Returns 1 if there are still\n * keys to move from the old to the new hash table, otherwise 0 is returned.\n *\n * Note that a rehashing step consists in moving a bucket (that may have more\n * than one key as we use chaining) from the old to the new hash table, however\n * since part of the hash table may be composed of empty spaces, it is not\n * guaranteed that this function will rehash even a single bucket, since it\n * will visit at max N*10 empty buckets in total, otherwise the amount of\n * work it does would be unbound and the function may block for a long time. */\nint dictRehash(dict *d, int n) {\n    // 最大可以接受的空bucket数量\n    int empty_visits = n*10; /* Max number of empty buckets to visit. */\n    if (!dictIsRehashing(d)) return 0;\n    // ht第一个位置放的未rehash「没有转移前」的数据，第二个位置放的rehash后的数据。\n    while(n-- && d->ht_used[0] != 0) {\n        dictEntry *de, *nextde;\n\n        /* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */\n         // rehashidx的值不能超过最大值，发生溢出\n        assert(DICTHT_SIZE(d->ht_size_exp[0]) > (unsigned long)d->rehashidx);\n        while(d->ht_table[0][d->rehashidx] == NULL) {\n            // 跳过空bucket\n            d->rehashidx++;\n            if (--empty_visits == 0) return 1;\n        }\n        // 取出数组的rehashidx下标对应的值，\n        de = d->ht_table[0][d->rehashidx];\n        /* Move all the keys in this bucket from the old to the new hash HT */\n        while(de) {\n            uint64_t h;\n\n            nextde = de->next;\n            /* Get the index in the new hash table */\n            // 计算hash值\n            h = dictHashKey(d, de->key) & DICTHT_SIZE_MASK(d->ht_size_exp[1]);\n            de->next = d->ht_table[1][h];\n            d->ht_table[1][h] = de;\n            d->ht_used[0]--;\n            d->ht_used[1]++;\n            // de指向下一个\n            de = nextde;\n        }\n        // 把ht【0】置空\n        d->ht_table[0][d->rehashidx] = NULL;\n        d->rehashidx++;\n    }\n\n    /* Check if we already rehashed the whole table... */\n    if (d->ht_used[0] == 0) {\n         // chek ht,并释放，ht第一个元素为空，则把 ht[0] = ht[1],这个时候ht[1]为空，ht[0]为整体rehash后的值\n        zfree(d->ht_table[0]);\n        /* Copy the new ht onto the old one */\n        d->ht_table[0] = d->ht_table[1];\n        d->ht_used[0] = d->ht_used[1];\n        d->ht_size_exp[0] = d->ht_size_exp[1];\n        _dictReset(d, 1);\n        d->rehashidx = -1;\n        return 0;\n    }\n\n    /* More to rehash... */\n    return 1;\n}\n```\n\n### doing....","source":"_posts/62-redis-rehash过程.md","raw":"---\ntitle: 「62」redis rehash过程\ndate: '2021/08/28 18:01:32'\nupdated: '2021/08/28 18:36:44'\ntags:\n  - Redis\n  - Hash\n  - 源码\nabbrlink: f733f408\n---\n\n### 前序\n\n>之前有提到过[👉🏿 redis 中hash的介绍](https://blog.imrcrab.com/archives/68b4ef49.html#more),如果不了解可以先看看 热热身。\n\n\n### rehash\n\n#### 时机：\n\n```go\n1、定时任务。\n2、对dict的find/delete/add等操作时触发。\n```\n<!--more-->\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png)\n\n\n#### 源码分析：\n\n```c++\n\n/* Performs N steps of incremental rehashing. Returns 1 if there are still\n * keys to move from the old to the new hash table, otherwise 0 is returned.\n *\n * Note that a rehashing step consists in moving a bucket (that may have more\n * than one key as we use chaining) from the old to the new hash table, however\n * since part of the hash table may be composed of empty spaces, it is not\n * guaranteed that this function will rehash even a single bucket, since it\n * will visit at max N*10 empty buckets in total, otherwise the amount of\n * work it does would be unbound and the function may block for a long time. */\nint dictRehash(dict *d, int n) {\n    // 最大可以接受的空bucket数量\n    int empty_visits = n*10; /* Max number of empty buckets to visit. */\n    if (!dictIsRehashing(d)) return 0;\n    // ht第一个位置放的未rehash「没有转移前」的数据，第二个位置放的rehash后的数据。\n    while(n-- && d->ht_used[0] != 0) {\n        dictEntry *de, *nextde;\n\n        /* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */\n         // rehashidx的值不能超过最大值，发生溢出\n        assert(DICTHT_SIZE(d->ht_size_exp[0]) > (unsigned long)d->rehashidx);\n        while(d->ht_table[0][d->rehashidx] == NULL) {\n            // 跳过空bucket\n            d->rehashidx++;\n            if (--empty_visits == 0) return 1;\n        }\n        // 取出数组的rehashidx下标对应的值，\n        de = d->ht_table[0][d->rehashidx];\n        /* Move all the keys in this bucket from the old to the new hash HT */\n        while(de) {\n            uint64_t h;\n\n            nextde = de->next;\n            /* Get the index in the new hash table */\n            // 计算hash值\n            h = dictHashKey(d, de->key) & DICTHT_SIZE_MASK(d->ht_size_exp[1]);\n            de->next = d->ht_table[1][h];\n            d->ht_table[1][h] = de;\n            d->ht_used[0]--;\n            d->ht_used[1]++;\n            // de指向下一个\n            de = nextde;\n        }\n        // 把ht【0】置空\n        d->ht_table[0][d->rehashidx] = NULL;\n        d->rehashidx++;\n    }\n\n    /* Check if we already rehashed the whole table... */\n    if (d->ht_used[0] == 0) {\n         // chek ht,并释放，ht第一个元素为空，则把 ht[0] = ht[1],这个时候ht[1]为空，ht[0]为整体rehash后的值\n        zfree(d->ht_table[0]);\n        /* Copy the new ht onto the old one */\n        d->ht_table[0] = d->ht_table[1];\n        d->ht_used[0] = d->ht_used[1];\n        d->ht_size_exp[0] = d->ht_size_exp[1];\n        _dictReset(d, 1);\n        d->rehashidx = -1;\n        return 0;\n    }\n\n    /* More to rehash... */\n    return 1;\n}\n```\n\n### doing....","slug":"62-redis-rehash过程","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5o004fzfqx9roygfxh","content":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<blockquote>\n<p>之前有提到过<a href=\"https://blog.imrcrab.com/archives/68b4ef49.html#more\">👉🏿 redis 中hash的介绍</a>,如果不了解可以先看看 热热身。</p>\n</blockquote>\n<h3 id=\"rehash\"><a class=\"header-anchor\" href=\"#rehash\">¶</a>rehash</h3>\n<h4 id=\"时机：\"><a class=\"header-anchor\" href=\"#时机：\">¶</a>时机：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、定时任务。</span><br><span class=\"line\"><span class=\"number\">2</span>、对dict的find/<span class=\"built_in\">delete</span>/add等操作时触发。</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png\" alt=\"\"></p>\n<h4 id=\"源码分析：\"><a class=\"header-anchor\" href=\"#源码分析：\">¶</a>源码分析：</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Performs N steps of incremental rehashing. Returns 1 if there are still</span></span><br><span class=\"line\"><span class=\"comment\"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that a rehashing step consists in moving a bucket (that may have more</span></span><br><span class=\"line\"><span class=\"comment\"> * than one key as we use chaining) from the old to the new hash table, however</span></span><br><span class=\"line\"><span class=\"comment\"> * since part of the hash table may be composed of empty spaces, it is not</span></span><br><span class=\"line\"><span class=\"comment\"> * guaranteed that this function will rehash even a single bucket, since it</span></span><br><span class=\"line\"><span class=\"comment\"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span></span><br><span class=\"line\"><span class=\"comment\"> * work it does would be unbound and the function may block for a long time. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dictRehash</span><span class=\"params\">(dict *d, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最大可以接受的空bucket数量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> empty_visits = n*<span class=\"number\">10</span>; <span class=\"comment\">/* Max number of empty buckets to visit. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">dictIsRehashing</span>(d)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ht第一个位置放的未rehash「没有转移前」的数据，第二个位置放的rehash后的数据。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n-- &amp;&amp; d-&gt;ht_used[<span class=\"number\">0</span>] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dictEntry *de, *nextde;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Note that rehashidx can&#x27;t overflow as we are sure there are more</span></span><br><span class=\"line\"><span class=\"comment\">         * elements because ht[0].used != 0 */</span></span><br><span class=\"line\">         <span class=\"comment\">// rehashidx的值不能超过最大值，发生溢出</span></span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"built_in\">DICTHT_SIZE</span>(d-&gt;ht_size_exp[<span class=\"number\">0</span>]) &gt; (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)d-&gt;rehashidx);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(d-&gt;ht_table[<span class=\"number\">0</span>][d-&gt;rehashidx] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 跳过空bucket</span></span><br><span class=\"line\">            d-&gt;rehashidx++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--empty_visits == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数组的rehashidx下标对应的值，</span></span><br><span class=\"line\">        de = d-&gt;ht_table[<span class=\"number\">0</span>][d-&gt;rehashidx];</span><br><span class=\"line\">        <span class=\"comment\">/* Move all the keys in this bucket from the old to the new hash HT */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(de) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint64_t</span> h;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextde = de-&gt;next;</span><br><span class=\"line\">            <span class=\"comment\">/* Get the index in the new hash table */</span></span><br><span class=\"line\">            <span class=\"comment\">// 计算hash值</span></span><br><span class=\"line\">            h = <span class=\"built_in\">dictHashKey</span>(d, de-&gt;key) &amp; <span class=\"built_in\">DICTHT_SIZE_MASK</span>(d-&gt;ht_size_exp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            de-&gt;next = d-&gt;ht_table[<span class=\"number\">1</span>][h];</span><br><span class=\"line\">            d-&gt;ht_table[<span class=\"number\">1</span>][h] = de;</span><br><span class=\"line\">            d-&gt;ht_used[<span class=\"number\">0</span>]--;</span><br><span class=\"line\">            d-&gt;ht_used[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">            <span class=\"comment\">// de指向下一个</span></span><br><span class=\"line\">            de = nextde;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把ht【0】置空</span></span><br><span class=\"line\">        d-&gt;ht_table[<span class=\"number\">0</span>][d-&gt;rehashidx] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        d-&gt;rehashidx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if we already rehashed the whole table... */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d-&gt;ht_used[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// chek ht,并释放，ht第一个元素为空，则把 ht[0] = ht[1],这个时候ht[1]为空，ht[0]为整体rehash后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">zfree</span>(d-&gt;ht_table[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"comment\">/* Copy the new ht onto the old one */</span></span><br><span class=\"line\">        d-&gt;ht_table[<span class=\"number\">0</span>] = d-&gt;ht_table[<span class=\"number\">1</span>];</span><br><span class=\"line\">        d-&gt;ht_used[<span class=\"number\">0</span>] = d-&gt;ht_used[<span class=\"number\">1</span>];</span><br><span class=\"line\">        d-&gt;ht_size_exp[<span class=\"number\">0</span>] = d-&gt;ht_size_exp[<span class=\"number\">1</span>];</span><br><span class=\"line\">        _dictReset(d, <span class=\"number\">1</span>);</span><br><span class=\"line\">        d-&gt;rehashidx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* More to rehash... */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"doing…\"><a class=\"header-anchor\" href=\"#doing…\">¶</a>doing…</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<blockquote>\n<p>之前有提到过<a href=\"https://blog.imrcrab.com/archives/68b4ef49.html#more\">👉🏿 redis 中hash的介绍</a>,如果不了解可以先看看 热热身。</p>\n</blockquote>\n<h3 id=\"rehash\"><a class=\"header-anchor\" href=\"#rehash\">¶</a>rehash</h3>\n<h4 id=\"时机：\"><a class=\"header-anchor\" href=\"#时机：\">¶</a>时机：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、定时任务。</span><br><span class=\"line\"><span class=\"number\">2</span>、对dict的find/<span class=\"built_in\">delete</span>/add等操作时触发。</span><br></pre></td></tr></table></figure>","more":"<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png\" alt=\"\"></p>\n<h4 id=\"源码分析：\"><a class=\"header-anchor\" href=\"#源码分析：\">¶</a>源码分析：</h4>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Performs N steps of incremental rehashing. Returns 1 if there are still</span></span><br><span class=\"line\"><span class=\"comment\"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that a rehashing step consists in moving a bucket (that may have more</span></span><br><span class=\"line\"><span class=\"comment\"> * than one key as we use chaining) from the old to the new hash table, however</span></span><br><span class=\"line\"><span class=\"comment\"> * since part of the hash table may be composed of empty spaces, it is not</span></span><br><span class=\"line\"><span class=\"comment\"> * guaranteed that this function will rehash even a single bucket, since it</span></span><br><span class=\"line\"><span class=\"comment\"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span></span><br><span class=\"line\"><span class=\"comment\"> * work it does would be unbound and the function may block for a long time. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dictRehash</span><span class=\"params\">(dict *d, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 最大可以接受的空bucket数量</span></span><br><span class=\"line\">    <span class=\"type\">int</span> empty_visits = n*<span class=\"number\">10</span>; <span class=\"comment\">/* Max number of empty buckets to visit. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">dictIsRehashing</span>(d)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// ht第一个位置放的未rehash「没有转移前」的数据，第二个位置放的rehash后的数据。</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n-- &amp;&amp; d-&gt;ht_used[<span class=\"number\">0</span>] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dictEntry *de, *nextde;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Note that rehashidx can&#x27;t overflow as we are sure there are more</span></span><br><span class=\"line\"><span class=\"comment\">         * elements because ht[0].used != 0 */</span></span><br><span class=\"line\">         <span class=\"comment\">// rehashidx的值不能超过最大值，发生溢出</span></span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(<span class=\"built_in\">DICTHT_SIZE</span>(d-&gt;ht_size_exp[<span class=\"number\">0</span>]) &gt; (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)d-&gt;rehashidx);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(d-&gt;ht_table[<span class=\"number\">0</span>][d-&gt;rehashidx] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 跳过空bucket</span></span><br><span class=\"line\">            d-&gt;rehashidx++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--empty_visits == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 取出数组的rehashidx下标对应的值，</span></span><br><span class=\"line\">        de = d-&gt;ht_table[<span class=\"number\">0</span>][d-&gt;rehashidx];</span><br><span class=\"line\">        <span class=\"comment\">/* Move all the keys in this bucket from the old to the new hash HT */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(de) &#123;</span><br><span class=\"line\">            <span class=\"type\">uint64_t</span> h;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextde = de-&gt;next;</span><br><span class=\"line\">            <span class=\"comment\">/* Get the index in the new hash table */</span></span><br><span class=\"line\">            <span class=\"comment\">// 计算hash值</span></span><br><span class=\"line\">            h = <span class=\"built_in\">dictHashKey</span>(d, de-&gt;key) &amp; <span class=\"built_in\">DICTHT_SIZE_MASK</span>(d-&gt;ht_size_exp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            de-&gt;next = d-&gt;ht_table[<span class=\"number\">1</span>][h];</span><br><span class=\"line\">            d-&gt;ht_table[<span class=\"number\">1</span>][h] = de;</span><br><span class=\"line\">            d-&gt;ht_used[<span class=\"number\">0</span>]--;</span><br><span class=\"line\">            d-&gt;ht_used[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">            <span class=\"comment\">// de指向下一个</span></span><br><span class=\"line\">            de = nextde;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把ht【0】置空</span></span><br><span class=\"line\">        d-&gt;ht_table[<span class=\"number\">0</span>][d-&gt;rehashidx] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        d-&gt;rehashidx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if we already rehashed the whole table... */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d-&gt;ht_used[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// chek ht,并释放，ht第一个元素为空，则把 ht[0] = ht[1],这个时候ht[1]为空，ht[0]为整体rehash后的值</span></span><br><span class=\"line\">        <span class=\"built_in\">zfree</span>(d-&gt;ht_table[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"comment\">/* Copy the new ht onto the old one */</span></span><br><span class=\"line\">        d-&gt;ht_table[<span class=\"number\">0</span>] = d-&gt;ht_table[<span class=\"number\">1</span>];</span><br><span class=\"line\">        d-&gt;ht_used[<span class=\"number\">0</span>] = d-&gt;ht_used[<span class=\"number\">1</span>];</span><br><span class=\"line\">        d-&gt;ht_size_exp[<span class=\"number\">0</span>] = d-&gt;ht_size_exp[<span class=\"number\">1</span>];</span><br><span class=\"line\">        _dictReset(d, <span class=\"number\">1</span>);</span><br><span class=\"line\">        d-&gt;rehashidx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* More to rehash... */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"doing…\"><a class=\"header-anchor\" href=\"#doing…\">¶</a>doing…</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png","popularPost_tmp_gaData":{"updated":"Sat Aug 28 2021 18:36:44 GMT+0800 (中国标准时间)","title":"「62」redis rehash过程","path":"archives/f733f408.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20210817_115402.png","excerpt":"<h3 id=\"前序\"><a class=\"header-anchor\" href=\"#前序\">¶</a>前序</h3>\n<blockquote>\n<p>之前有提到过<a href=\"https://blog.imrcrab.com/archives/68b4ef49.html#more\">👉🏿 redis 中hash的介绍</a>,如果不了解可以先看看 热热身。</p>\n</blockquote>\n<h3 id=\"rehash\"><a class=\"header-anchor\" href=\"#rehash\">¶</a>rehash</h3>\n<h4 id=\"时机：\"><a class=\"header-anchor\" href=\"#时机：\">¶</a>时机：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、定时任务。</span><br><span class=\"line\"><span class=\"number\">2</span>、对dict的find/<span class=\"built_in\">delete</span>/add等操作时触发。</span><br></pre></td></tr></table></figure>","date":{"_isAMomentObject":true,"_i":"2021-08-28T10:01:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-08-28T10:01:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Hash","Redis","源码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2123},{"title":"「8」go rwmutex解读","date":"2020-09-16T17:24:32.000Z","updated":"2020-09-21T13:24:32.000Z","keywords":"golang,go 源码,go 读写锁, rwmutex 解读","abbrlink":"3038b6c3","_content":"\n    好久没有更新文章了，表达能力生疏了许多😄....\n    今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n    从锁的结构设计-->加锁的过程--->加锁的粒度---->解锁释放，整个生命周期来看rwmutex的具体实现。\n<!-- more -->\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 同向对比rwmutex锁的设计\n    java实现：AQS(AbstractQueuedSynchronizer)\n\n### 结构设计\n>原则：读写互斥，优先写。\n\n```go\ntype RWMutex struct {\n\tw           Mutex  // held if there are pending writers\n\twriterSem   uint32 // semaphore for writers to wait for completing readers  写信号量\n\treaderSem   uint32 // semaphore for readers to wait for completing writers  读信号量\n\treaderCount int32  // number of pending readers 读计数\n\treaderWait  int32  // number of departing readers   读等待（write进行）\n}\n\nconst rwmutexMaxReaders = 1 << 30   //最大读锁的个数\n```\n\n其它再分类就是四个主要的函数：\n\n```\nRLock\nRUnLock\nLock\nUnLock\n```\n### 加锁过程\n\n#### RLock过程\n\n```go\nfunc (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n    }\n    //如果写锁被获取的，则readerCount<0的，阻塞状态\n    //如果写锁没有被获取，则readerCount >0的，获取读锁，不阻塞\n\tif atomic.AddInt32(&rw.readerCount, 1) < 0 {\n        // A writer is pending, wait for it. \n        //写锁被获取了，加到G队列后面，挂起。\n\t\truntime_SemacquireMutex(&rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t}\n}\n```\n\n#### Lock过程\n\n```go\n// Lock locks rw for writing.\n// If the lock is already locked for reading or writing,\n// Lock blocks until the lock is available.\nfunc (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n    // First, resolve competition with other writers.\n    //使用mutex锁\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := atomic.AddInt32(&rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 && atomic.AddInt32(&rw.readerWait, r) != 0 {\n        //等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。\n\t\truntime_SemacquireMutex(&rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(&rw.writerSem))\n\t}\n}\n```\n\n### 加锁的粒度\n> 读 & 写 互不干扰.\n\n### 解锁释放\n\n#### RUnLock\n\n```go\nfunc (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(&rw.writerSem))\n\t\trace.Disable()\n    }\n    // 写锁等待状态，检查当前是否可以进行获取\n\tif r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n\nfunc (rw *RWMutex) rUnlockSlow(r int32) {\n    // r + 1 == 0表示直接执行RUnlock()\n\t// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()\n\tif r+1 == 0 || r+1 == -rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: RUnlock of unlocked RWMutex\")\n\t}\n    // A writer is pending.\n    // 当读锁释放完毕后，通知写锁\n\tif atomic.AddInt32(&rw.readerWait, -1) == 0 {\n\t\t// The last reader unblocks the writer.\n\t\truntime_Semrelease(&rw.writerSem, false, 1)\n\t}\n}\n```\n\n#### UnLock\n\n```go\nfunc (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(&rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n    r := atomic.AddInt32(&rw.readerCount, rwmutexMaxReaders)\n    //说明这个没有枷锁，没法再次释放\n\tif r >= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: Unlock of unlocked RWMutex\")\n\t}\n    // Unblock blocked readers, if any.\n    //释放所有的锁。\n\tfor i := 0; i < int(r); i++ {\n\t\truntime_Semrelease(&rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n```\n### 总结\n\n>读&写，互不干扰。\n\n* 读锁不能阻塞读锁，引入readerCount.\n\n* 读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.\n\n* 写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.\n\n* 写锁需要阻塞写锁，引入Metux.\n\n### END","source":"_posts/8-go-rwmutex解读.md","raw":"---\ntitle: 「8」go rwmutex解读\ndate: '2020/09/17 01:24:32'\nupdated: '2020/09/21 21:24:32'\nkeywords: 'golang,go 源码,go 读写锁, rwmutex 解读'\ntags:\n  - Go\n  - Go源码\n  - Go Package\n  - 锁\nabbrlink: 3038b6c3\n---\n\n    好久没有更新文章了，表达能力生疏了许多😄....\n    今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n    从锁的结构设计-->加锁的过程--->加锁的粒度---->解锁释放，整个生命周期来看rwmutex的具体实现。\n<!-- more -->\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 同向对比rwmutex锁的设计\n    java实现：AQS(AbstractQueuedSynchronizer)\n\n### 结构设计\n>原则：读写互斥，优先写。\n\n```go\ntype RWMutex struct {\n\tw           Mutex  // held if there are pending writers\n\twriterSem   uint32 // semaphore for writers to wait for completing readers  写信号量\n\treaderSem   uint32 // semaphore for readers to wait for completing writers  读信号量\n\treaderCount int32  // number of pending readers 读计数\n\treaderWait  int32  // number of departing readers   读等待（write进行）\n}\n\nconst rwmutexMaxReaders = 1 << 30   //最大读锁的个数\n```\n\n其它再分类就是四个主要的函数：\n\n```\nRLock\nRUnLock\nLock\nUnLock\n```\n### 加锁过程\n\n#### RLock过程\n\n```go\nfunc (rw *RWMutex) RLock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n    }\n    //如果写锁被获取的，则readerCount<0的，阻塞状态\n    //如果写锁没有被获取，则readerCount >0的，获取读锁，不阻塞\n\tif atomic.AddInt32(&rw.readerCount, 1) < 0 {\n        // A writer is pending, wait for it. \n        //写锁被获取了，加到G队列后面，挂起。\n\t\truntime_SemacquireMutex(&rw.readerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t}\n}\n```\n\n#### Lock过程\n\n```go\n// Lock locks rw for writing.\n// If the lock is already locked for reading or writing,\n// Lock blocks until the lock is available.\nfunc (rw *RWMutex) Lock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Disable()\n\t}\n    // First, resolve competition with other writers.\n    //使用mutex锁\n\trw.w.Lock()\n\t// Announce to readers there is a pending writer.\n\tr := atomic.AddInt32(&rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders\n\t// Wait for active readers.\n\tif r != 0 && atomic.AddInt32(&rw.readerWait, r) != 0 {\n        //等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。\n\t\truntime_SemacquireMutex(&rw.writerSem, false, 0)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t\trace.Acquire(unsafe.Pointer(&rw.readerSem))\n\t\trace.Acquire(unsafe.Pointer(&rw.writerSem))\n\t}\n}\n```\n\n### 加锁的粒度\n> 读 & 写 互不干扰.\n\n### 解锁释放\n\n#### RUnLock\n\n```go\nfunc (rw *RWMutex) RUnlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.ReleaseMerge(unsafe.Pointer(&rw.writerSem))\n\t\trace.Disable()\n    }\n    // 写锁等待状态，检查当前是否可以进行获取\n\tif r := atomic.AddInt32(&rw.readerCount, -1); r < 0 {\n\t\t// Outlined slow-path to allow the fast-path to be inlined\n\t\trw.rUnlockSlow(r)\n\t}\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n\nfunc (rw *RWMutex) rUnlockSlow(r int32) {\n    // r + 1 == 0表示直接执行RUnlock()\n\t// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()\n\tif r+1 == 0 || r+1 == -rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: RUnlock of unlocked RWMutex\")\n\t}\n    // A writer is pending.\n    // 当读锁释放完毕后，通知写锁\n\tif atomic.AddInt32(&rw.readerWait, -1) == 0 {\n\t\t// The last reader unblocks the writer.\n\t\truntime_Semrelease(&rw.writerSem, false, 1)\n\t}\n}\n```\n\n#### UnLock\n\n```go\nfunc (rw *RWMutex) Unlock() {\n\tif race.Enabled {\n\t\t_ = rw.w.state\n\t\trace.Release(unsafe.Pointer(&rw.readerSem))\n\t\trace.Disable()\n\t}\n\n\t// Announce to readers there is no active writer.\n    r := atomic.AddInt32(&rw.readerCount, rwmutexMaxReaders)\n    //说明这个没有枷锁，没法再次释放\n\tif r >= rwmutexMaxReaders {\n\t\trace.Enable()\n\t\tthrow(\"sync: Unlock of unlocked RWMutex\")\n\t}\n    // Unblock blocked readers, if any.\n    //释放所有的锁。\n\tfor i := 0; i < int(r); i++ {\n\t\truntime_Semrelease(&rw.readerSem, false, 0)\n\t}\n\t// Allow other writers to proceed.\n\trw.w.Unlock()\n\tif race.Enabled {\n\t\trace.Enable()\n\t}\n}\n```\n### 总结\n\n>读&写，互不干扰。\n\n* 读锁不能阻塞读锁，引入readerCount.\n\n* 读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.\n\n* 写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.\n\n* 写锁需要阻塞写锁，引入Metux.\n\n### END","slug":"8-go-rwmutex解读","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5p004izfqxdnuseg3k","content":"<pre><code>好久没有更新文章了，表达能力生疏了许多😄....\n今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n从锁的结构设计--&gt;加锁的过程---&gt;加锁的粒度----&gt;解锁释放，整个生命周期来看rwmutex的具体实现。\n</code></pre>\n<span id=\"more\"></span>\n<h3 id=\"版本\"><a class=\"header-anchor\" href=\"#版本\">¶</a>版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"同向对比rwmutex锁的设计\"><a class=\"header-anchor\" href=\"#同向对比rwmutex锁的设计\">¶</a>同向对比rwmutex锁的设计</h3>\n<pre><code>java实现：AQS(AbstractQueuedSynchronizer)\n</code></pre>\n<h3 id=\"结构设计\"><a class=\"header-anchor\" href=\"#结构设计\">¶</a>结构设计</h3>\n<blockquote>\n<p>原则：读写互斥，优先写。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RWMutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tw           Mutex  <span class=\"comment\">// held if there are pending writers</span></span><br><span class=\"line\">\twriterSem   <span class=\"type\">uint32</span> <span class=\"comment\">// semaphore for writers to wait for completing readers  写信号量</span></span><br><span class=\"line\">\treaderSem   <span class=\"type\">uint32</span> <span class=\"comment\">// semaphore for readers to wait for completing writers  读信号量</span></span><br><span class=\"line\">\treaderCount <span class=\"type\">int32</span>  <span class=\"comment\">// number of pending readers 读计数</span></span><br><span class=\"line\">\treaderWait  <span class=\"type\">int32</span>  <span class=\"comment\">// number of departing readers   读等待（write进行）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rwmutexMaxReaders = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>   <span class=\"comment\">//最大读锁的个数</span></span><br></pre></td></tr></table></figure>\n<p>其它再分类就是四个主要的函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RLock</span><br><span class=\"line\">RUnLock</span><br><span class=\"line\">Lock</span><br><span class=\"line\">UnLock</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁过程\"><a class=\"header-anchor\" href=\"#加锁过程\">¶</a>加锁过程</h3>\n<h4 id=\"RLock过程\"><a class=\"header-anchor\" href=\"#RLock过程\">¶</a>RLock过程</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> RLock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果写锁被获取的，则readerCount&lt;0的，阻塞状态</span></span><br><span class=\"line\">    <span class=\"comment\">//如果写锁没有被获取，则readerCount &gt;0的，获取读锁，不阻塞</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A writer is pending, wait for it. </span></span><br><span class=\"line\">        <span class=\"comment\">//写锁被获取了，加到G队列后面，挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Lock过程\"><a class=\"header-anchor\" href=\"#Lock过程\">¶</a>Lock过程</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Lock locks rw for writing.</span></span><br><span class=\"line\"><span class=\"comment\">// If the lock is already locked for reading or writing,</span></span><br><span class=\"line\"><span class=\"comment\">// Lock blocks until the lock is available.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> Lock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// First, resolve competition with other writers.</span></span><br><span class=\"line\">    <span class=\"comment\">//使用mutex锁</span></span><br><span class=\"line\">\trw.w.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is a pending writer.</span></span><br><span class=\"line\">\tr := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders</span><br><span class=\"line\">\t<span class=\"comment\">// Wait for active readers.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r != <span class=\"number\">0</span> &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁的粒度\"><a class=\"header-anchor\" href=\"#加锁的粒度\">¶</a>加锁的粒度</h3>\n<blockquote>\n<p>读 &amp; 写 互不干扰.</p>\n</blockquote>\n<h3 id=\"解锁释放\"><a class=\"header-anchor\" href=\"#解锁释放\">¶</a>解锁释放</h3>\n<h4 id=\"RUnLock\"><a class=\"header-anchor\" href=\"#RUnLock\">¶</a>RUnLock</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> RUnlock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.ReleaseMerge(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写锁等待状态，检查当前是否可以进行获取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r := atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">-1</span>); r &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Outlined slow-path to allow the fast-path to be inlined</span></span><br><span class=\"line\">\t\trw.rUnlockSlow(r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> rUnlockSlow(r <span class=\"type\">int32</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// r + 1 == 0表示直接执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"comment\">// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r+<span class=\"number\">1</span> == <span class=\"number\">0</span> || r+<span class=\"number\">1</span> == -rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: RUnlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// A writer is pending.</span></span><br><span class=\"line\">    <span class=\"comment\">// 当读锁释放完毕后，通知写锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerWait, <span class=\"number\">-1</span>) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The last reader unblocks the writer.</span></span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"UnLock\"><a class=\"header-anchor\" href=\"#UnLock\">¶</a>UnLock</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> Unlock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Release(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is no active writer.</span></span><br><span class=\"line\">    r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders)</span><br><span class=\"line\">    <span class=\"comment\">//说明这个没有枷锁，没法再次释放</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r &gt;= rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: Unlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// Unblock blocked readers, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">//释放所有的锁。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"type\">int</span>(r); i++ &#123;</span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Allow other writers to proceed.</span></span><br><span class=\"line\">\trw.w.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"header-anchor\" href=\"#总结\">¶</a>总结</h3>\n<blockquote>\n<p>读&amp;写，互不干扰。</p>\n</blockquote>\n<ul>\n<li>\n<p>读锁不能阻塞读锁，引入readerCount.</p>\n</li>\n<li>\n<p>读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.</p>\n</li>\n<li>\n<p>写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.</p>\n</li>\n<li>\n<p>写锁需要阻塞写锁，引入Metux.</p>\n</li>\n</ul>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<pre><code>好久没有更新文章了，表达能力生疏了许多😄....\n今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n从锁的结构设计--&gt;加锁的过程---&gt;加锁的粒度----&gt;解锁释放，整个生命周期来看rwmutex的具体实现。\n</code></pre>","more":"<h3 id=\"版本\"><a class=\"header-anchor\" href=\"#版本\">¶</a>版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"同向对比rwmutex锁的设计\"><a class=\"header-anchor\" href=\"#同向对比rwmutex锁的设计\">¶</a>同向对比rwmutex锁的设计</h3>\n<pre><code>java实现：AQS(AbstractQueuedSynchronizer)\n</code></pre>\n<h3 id=\"结构设计\"><a class=\"header-anchor\" href=\"#结构设计\">¶</a>结构设计</h3>\n<blockquote>\n<p>原则：读写互斥，优先写。</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RWMutex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tw           Mutex  <span class=\"comment\">// held if there are pending writers</span></span><br><span class=\"line\">\twriterSem   <span class=\"type\">uint32</span> <span class=\"comment\">// semaphore for writers to wait for completing readers  写信号量</span></span><br><span class=\"line\">\treaderSem   <span class=\"type\">uint32</span> <span class=\"comment\">// semaphore for readers to wait for completing writers  读信号量</span></span><br><span class=\"line\">\treaderCount <span class=\"type\">int32</span>  <span class=\"comment\">// number of pending readers 读计数</span></span><br><span class=\"line\">\treaderWait  <span class=\"type\">int32</span>  <span class=\"comment\">// number of departing readers   读等待（write进行）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rwmutexMaxReaders = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">30</span>   <span class=\"comment\">//最大读锁的个数</span></span><br></pre></td></tr></table></figure>\n<p>其它再分类就是四个主要的函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RLock</span><br><span class=\"line\">RUnLock</span><br><span class=\"line\">Lock</span><br><span class=\"line\">UnLock</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁过程\"><a class=\"header-anchor\" href=\"#加锁过程\">¶</a>加锁过程</h3>\n<h4 id=\"RLock过程\"><a class=\"header-anchor\" href=\"#RLock过程\">¶</a>RLock过程</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> RLock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//如果写锁被获取的，则readerCount&lt;0的，阻塞状态</span></span><br><span class=\"line\">    <span class=\"comment\">//如果写锁没有被获取，则readerCount &gt;0的，获取读锁，不阻塞</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">1</span>) &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// A writer is pending, wait for it. </span></span><br><span class=\"line\">        <span class=\"comment\">//写锁被获取了，加到G队列后面，挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Lock过程\"><a class=\"header-anchor\" href=\"#Lock过程\">¶</a>Lock过程</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Lock locks rw for writing.</span></span><br><span class=\"line\"><span class=\"comment\">// If the lock is already locked for reading or writing,</span></span><br><span class=\"line\"><span class=\"comment\">// Lock blocks until the lock is available.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> Lock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// First, resolve competition with other writers.</span></span><br><span class=\"line\">    <span class=\"comment\">//使用mutex锁</span></span><br><span class=\"line\">\trw.w.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is a pending writer.</span></span><br><span class=\"line\">\tr := atomic.AddInt32(&amp;rw.readerCount, -rwmutexMaxReaders) + rwmutexMaxReaders</span><br><span class=\"line\">\t<span class=\"comment\">// Wait for active readers.</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r != <span class=\"number\">0</span> &amp;&amp; atomic.AddInt32(&amp;rw.readerWait, r) != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//等待活跃的reader结束后，再给一个写的信号量，保证此刻之后的reader挂起。</span></span><br><span class=\"line\">\t\truntime_SemacquireMutex(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Acquire(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"加锁的粒度\"><a class=\"header-anchor\" href=\"#加锁的粒度\">¶</a>加锁的粒度</h3>\n<blockquote>\n<p>读 &amp; 写 互不干扰.</p>\n</blockquote>\n<h3 id=\"解锁释放\"><a class=\"header-anchor\" href=\"#解锁释放\">¶</a>解锁释放</h3>\n<h4 id=\"RUnLock\"><a class=\"header-anchor\" href=\"#RUnLock\">¶</a>RUnLock</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> RUnlock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.ReleaseMerge(unsafe.Pointer(&amp;rw.writerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 写锁等待状态，检查当前是否可以进行获取</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r := atomic.AddInt32(&amp;rw.readerCount, <span class=\"number\">-1</span>); r &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Outlined slow-path to allow the fast-path to be inlined</span></span><br><span class=\"line\">\t\trw.rUnlockSlow(r)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> rUnlockSlow(r <span class=\"type\">int32</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// r + 1 == 0表示直接执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"comment\">// r + 1 == -rwmutexMaxReaders表示执行Lock()再执行RUnlock()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r+<span class=\"number\">1</span> == <span class=\"number\">0</span> || r+<span class=\"number\">1</span> == -rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: RUnlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// A writer is pending.</span></span><br><span class=\"line\">    <span class=\"comment\">// 当读锁释放完毕后，通知写锁</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> atomic.AddInt32(&amp;rw.readerWait, <span class=\"number\">-1</span>) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// The last reader unblocks the writer.</span></span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.writerSem, <span class=\"literal\">false</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"UnLock\"><a class=\"header-anchor\" href=\"#UnLock\">¶</a>UnLock</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(rw *RWMutex)</span></span> Unlock() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\t_ = rw.w.state</span><br><span class=\"line\">\t\trace.Release(unsafe.Pointer(&amp;rw.readerSem))</span><br><span class=\"line\">\t\trace.Disable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Announce to readers there is no active writer.</span></span><br><span class=\"line\">    r := atomic.AddInt32(&amp;rw.readerCount, rwmutexMaxReaders)</span><br><span class=\"line\">    <span class=\"comment\">//说明这个没有枷锁，没法再次释放</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> r &gt;= rwmutexMaxReaders &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t\tthrow(<span class=\"string\">&quot;sync: Unlock of unlocked RWMutex&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// Unblock blocked readers, if any.</span></span><br><span class=\"line\">    <span class=\"comment\">//释放所有的锁。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"type\">int</span>(r); i++ &#123;</span><br><span class=\"line\">\t\truntime_Semrelease(&amp;rw.readerSem, <span class=\"literal\">false</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Allow other writers to proceed.</span></span><br><span class=\"line\">\trw.w.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> race.Enabled &#123;</span><br><span class=\"line\">\t\trace.Enable()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a class=\"header-anchor\" href=\"#总结\">¶</a>总结</h3>\n<blockquote>\n<p>读&amp;写，互不干扰。</p>\n</blockquote>\n<ul>\n<li>\n<p>读锁不能阻塞读锁，引入readerCount.</p>\n</li>\n<li>\n<p>读锁需要阻塞写锁，直到所以读锁都释放，引入readerSem.</p>\n</li>\n<li>\n<p>写锁需要阻塞读锁，直到所以写锁都释放，引入wirterSem.</p>\n</li>\n<li>\n<p>写锁需要阻塞写锁，引入Metux.</p>\n</li>\n</ul>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Sep 21 2020 21:24:32 GMT+0800 (中国标准时间)","title":"「8」go rwmutex解读","path":"archives/3038b6c3.html","eyeCatchImage":null,"excerpt":"<pre><code>好久没有更新文章了，表达能力生疏了许多😄....\n今天扯扯:rwmutex 被称为读写锁。一说到【锁】最直接的联想可能就是lock()、Rlock()、unlock()、Runlock()之类的，但是作为程序猿，还是要了解下底层的设计和相关的逻辑实现，以便于把这种锁的设计思想应用到其它场景中，好了，不废话了，开题吧。\n从锁的结构设计--&gt;加锁的过程---&gt;加锁的粒度----&gt;解锁释放，整个生命周期来看rwmutex的具体实现。\n</code></pre>","date":{"_isAMomentObject":true,"_i":"2020-09-16T17:24:32.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-16T17:24:32.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go源码","Go Package","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3418},{"title":"「7」Go Context包使用","date":"2020-09-07T14:21:52.000Z","updated":"2020-09-07T14:21:52.000Z","keywords":"golang,go context包,golang context WithCancel,golang context WithDeadline,go WithTimeout.","abbrlink":"410dfaec","_content":"\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 用Go的都离不开Context，引用官网的一句话来描述Context包：\n\n>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n主要掌握四个方法的使用\n```\nWithCancel\nWithDeadline\nWithTimeout\nWithValue\n```\n### 前期ready\n\n要用下面的方法，先了解下部分结构和逻辑：\n\n>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。\n<!-- more -->\n\n>具体的取消设计结构\n```\ntype cancelCtx struct {\n\tContext\n\n\tmu       sync.Mutex            // protects following fields  加锁用\n\tdone     chan struct{}         // created lazily, closed by first cancel call   控制channel\n\tchildren map[canceler]struct{} // set to nil by the first cancel call  cancel函数调用后，释放子类\n\terr      error                 // set to non-nil by the first cancel call\n}\n```\n\n>timer控制死锁时间结构：\n```\n// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to\n// implement Done and Err. It implements cancel by stopping its timer then\n// delegating to cancelCtx.cancel.\n\ntype timerCtx struct {\n\tcancelCtx  \n\ttimer *time.Timer // Under cancelCtx.mu.\n\n\tdeadline time.Time\n}\n```\n\n### WithCancel\n\n```\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {  //日常判空\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n\tc := newCancelCtx(parent) //cancelCtx new\n\tpropagateCancel(parent, &c)  //循环传播取消函数for ctx\n\treturn &c, func() { c.cancel(true, Canceled) }\n}\n```\n>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路： \nTODO \n\n引用官方的语言：\n```\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\n\n\nWithcancel 返回的是一个parent的镜像/复制，伴随一个Done channel通道。\nDone关闭状态取决于\n1、返回的cancel函数。\n2、parent的Done Channel关闭。\n这两个哪个先符合条件了。\n```\n\n### WithDeadline/WithTimeout\n\n自己梳理的逻辑执行顺序：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200907-152032.png)\n\n```\nDeadline/WithTimeout区别：\n\n* deadline:的入参是一个具体的截止时间：Time.time\n* withTimeout:入参是一个多少时间后超时：Time.Duration\n```\n\n### WithValue\n\n>Withvalue和value是成对出现的:\n\n```\n1、给ctx设置k,v：withvalue(ctx,k,v)\n2、获取ctx中k的值value(ctx,k)\n```\n### TODO\n#### timerCtx详细的设计思路和结构文档\n#### 框架图整理\n\n\n### END","source":"_posts/7-Go-Context包使用.md","raw":"---\ntitle: 「7」Go Context包使用\ndate: '2020/09/07 22:21:52'\nupdated: '2020/09/07 22:21:52'\nkeywords: golang,go context包,golang context WithCancel,golang context WithDeadline,go\n  WithTimeout.\ntags:\n  - Go\n  - Go Package\nabbrlink: 410dfaec\n---\n\n### 版本\n```\n◯  go version\ngo version go1.14.9 darwin/amd64\n```\n\n### 用Go的都离不开Context，引用官网的一句话来描述Context包：\n\n>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\n主要掌握四个方法的使用\n```\nWithCancel\nWithDeadline\nWithTimeout\nWithValue\n```\n### 前期ready\n\n要用下面的方法，先了解下部分结构和逻辑：\n\n>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。\n<!-- more -->\n\n>具体的取消设计结构\n```\ntype cancelCtx struct {\n\tContext\n\n\tmu       sync.Mutex            // protects following fields  加锁用\n\tdone     chan struct{}         // created lazily, closed by first cancel call   控制channel\n\tchildren map[canceler]struct{} // set to nil by the first cancel call  cancel函数调用后，释放子类\n\terr      error                 // set to non-nil by the first cancel call\n}\n```\n\n>timer控制死锁时间结构：\n```\n// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to\n// implement Done and Err. It implements cancel by stopping its timer then\n// delegating to cancelCtx.cancel.\n\ntype timerCtx struct {\n\tcancelCtx  \n\ttimer *time.Timer // Under cancelCtx.mu.\n\n\tdeadline time.Time\n}\n```\n\n### WithCancel\n\n```\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n    if parent == nil {  //日常判空\n\t\tpanic(\"cannot create context from nil parent\")\n\t}\n\tc := newCancelCtx(parent) //cancelCtx new\n\tpropagateCancel(parent, &c)  //循环传播取消函数for ctx\n\treturn &c, func() { c.cancel(true, Canceled) }\n}\n```\n>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路： \nTODO \n\n引用官方的语言：\n```\n// WithCancel returns a copy of parent with a new Done channel. The returned\n// context's Done channel is closed when the returned cancel function is called\n// or when the parent context's Done channel is closed, whichever happens first.\n//\n// Canceling this context releases resources associated with it, so code should\n// call cancel as soon as the operations running in this Context complete.\n\n\nWithcancel 返回的是一个parent的镜像/复制，伴随一个Done channel通道。\nDone关闭状态取决于\n1、返回的cancel函数。\n2、parent的Done Channel关闭。\n这两个哪个先符合条件了。\n```\n\n### WithDeadline/WithTimeout\n\n自己梳理的逻辑执行顺序：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200907-152032.png)\n\n```\nDeadline/WithTimeout区别：\n\n* deadline:的入参是一个具体的截止时间：Time.time\n* withTimeout:入参是一个多少时间后超时：Time.Duration\n```\n\n### WithValue\n\n>Withvalue和value是成对出现的:\n\n```\n1、给ctx设置k,v：withvalue(ctx,k,v)\n2、获取ctx中k的值value(ctx,k)\n```\n### TODO\n#### timerCtx详细的设计思路和结构文档\n#### 框架图整理\n\n\n### END","slug":"7-Go-Context包使用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d5q004kzfqx29tkg6q1","content":"<h3 id=\"版本\"><a class=\"header-anchor\" href=\"#版本\">¶</a>版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"><a class=\"header-anchor\" href=\"#用Go的都离不开Context，引用官网的一句话来描述Context包：\">¶</a>用Go的都离不开Context，引用官网的一句话来描述Context包：</h3>\n<blockquote>\n<p>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote>\n<p>主要掌握四个方法的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WithCancel</span><br><span class=\"line\">WithDeadline</span><br><span class=\"line\">WithTimeout</span><br><span class=\"line\">WithValue</span><br></pre></td></tr></table></figure>\n<h3 id=\"前期ready\"><a class=\"header-anchor\" href=\"#前期ready\">¶</a>前期ready</h3>\n<p>要用下面的方法，先了解下部分结构和逻辑：</p>\n<blockquote>\n<p>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。</p>\n</blockquote>\n<span id=\"more\"></span>\n<blockquote>\n<p>具体的取消设计结构</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type cancelCtx struct &#123;</span><br><span class=\"line\">\tContext</span><br><span class=\"line\"></span><br><span class=\"line\">\tmu       sync.Mutex            // protects following fields  加锁用</span><br><span class=\"line\">\tdone     chan struct&#123;&#125;         // created lazily, closed by first cancel call   控制channel</span><br><span class=\"line\">\tchildren map[canceler]struct&#123;&#125; // set to nil by the first cancel call  cancel函数调用后，释放子类</span><br><span class=\"line\">\terr      error                 // set to non-nil by the first cancel call</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>timer控制死锁时间结构：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span><br><span class=\"line\">// implement Done and Err. It implements cancel by stopping its timer then</span><br><span class=\"line\">// delegating to cancelCtx.cancel.</span><br><span class=\"line\"></span><br><span class=\"line\">type timerCtx struct &#123;</span><br><span class=\"line\">\tcancelCtx  </span><br><span class=\"line\">\ttimer *time.Timer // Under cancelCtx.mu.</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeadline time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WithCancel\"><a class=\"header-anchor\" href=\"#WithCancel\">¶</a>WithCancel</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc) &#123;</span><br><span class=\"line\">    if parent == nil &#123;  //日常判空</span><br><span class=\"line\">\t\tpanic(&quot;cannot create context from nil parent&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc := newCancelCtx(parent) //cancelCtx new</span><br><span class=\"line\">\tpropagateCancel(parent, &amp;c)  //循环传播取消函数for ctx</span><br><span class=\"line\">\treturn &amp;c, func() &#123; c.cancel(true, Canceled) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路：<br>\nTODO</p>\n</blockquote>\n<p>引用官方的语言：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// WithCancel returns a copy of parent with a new Done channel. The returned</span><br><span class=\"line\">// context&#x27;s Done channel is closed when the returned cancel function is called</span><br><span class=\"line\">// or when the parent context&#x27;s Done channel is closed, whichever happens first.</span><br><span class=\"line\">//</span><br><span class=\"line\">// Canceling this context releases resources associated with it, so code should</span><br><span class=\"line\">// call cancel as soon as the operations running in this Context complete.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Withcancel 返回的是一个parent的镜像/复制，伴随一个Done channel通道。</span><br><span class=\"line\">Done关闭状态取决于</span><br><span class=\"line\">1、返回的cancel函数。</span><br><span class=\"line\">2、parent的Done Channel关闭。</span><br><span class=\"line\">这两个哪个先符合条件了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"WithDeadline-WithTimeout\"><a class=\"header-anchor\" href=\"#WithDeadline-WithTimeout\">¶</a>WithDeadline/WithTimeout</h3>\n<p>自己梳理的逻辑执行顺序：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200907-152032.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deadline/WithTimeout区别：</span><br><span class=\"line\"></span><br><span class=\"line\">* deadline:的入参是一个具体的截止时间：Time.time</span><br><span class=\"line\">* withTimeout:入参是一个多少时间后超时：Time.Duration</span><br></pre></td></tr></table></figure>\n<h3 id=\"WithValue\"><a class=\"header-anchor\" href=\"#WithValue\">¶</a>WithValue</h3>\n<blockquote>\n<p>Withvalue和value是成对出现的:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、给ctx设置k,v：withvalue(ctx,k,v)</span><br><span class=\"line\">2、获取ctx中k的值value(ctx,k)</span><br></pre></td></tr></table></figure>\n<h3 id=\"TODO\"><a class=\"header-anchor\" href=\"#TODO\">¶</a>TODO</h3>\n<h4 id=\"timerCtx详细的设计思路和结构文档\"><a class=\"header-anchor\" href=\"#timerCtx详细的设计思路和结构文档\">¶</a>timerCtx详细的设计思路和结构文档</h4>\n<h4 id=\"框架图整理\"><a class=\"header-anchor\" href=\"#框架图整理\">¶</a>框架图整理</h4>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<h3 id=\"版本\"><a class=\"header-anchor\" href=\"#版本\">¶</a>版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"><a class=\"header-anchor\" href=\"#用Go的都离不开Context，引用官网的一句话来描述Context包：\">¶</a>用Go的都离不开Context，引用官网的一句话来描述Context包：</h3>\n<blockquote>\n<p>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote>\n<p>主要掌握四个方法的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WithCancel</span><br><span class=\"line\">WithDeadline</span><br><span class=\"line\">WithTimeout</span><br><span class=\"line\">WithValue</span><br></pre></td></tr></table></figure>\n<h3 id=\"前期ready\"><a class=\"header-anchor\" href=\"#前期ready\">¶</a>前期ready</h3>\n<p>要用下面的方法，先了解下部分结构和逻辑：</p>\n<blockquote>\n<p>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。</p>\n</blockquote>","more":"<blockquote>\n<p>具体的取消设计结构</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type cancelCtx struct &#123;</span><br><span class=\"line\">\tContext</span><br><span class=\"line\"></span><br><span class=\"line\">\tmu       sync.Mutex            // protects following fields  加锁用</span><br><span class=\"line\">\tdone     chan struct&#123;&#125;         // created lazily, closed by first cancel call   控制channel</span><br><span class=\"line\">\tchildren map[canceler]struct&#123;&#125; // set to nil by the first cancel call  cancel函数调用后，释放子类</span><br><span class=\"line\">\terr      error                 // set to non-nil by the first cancel call</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>timer控制死锁时间结构：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// A timerCtx carries a timer and a deadline. It embeds a cancelCtx to</span><br><span class=\"line\">// implement Done and Err. It implements cancel by stopping its timer then</span><br><span class=\"line\">// delegating to cancelCtx.cancel.</span><br><span class=\"line\"></span><br><span class=\"line\">type timerCtx struct &#123;</span><br><span class=\"line\">\tcancelCtx  </span><br><span class=\"line\">\ttimer *time.Timer // Under cancelCtx.mu.</span><br><span class=\"line\"></span><br><span class=\"line\">\tdeadline time.Time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"WithCancel\"><a class=\"header-anchor\" href=\"#WithCancel\">¶</a>WithCancel</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc) &#123;</span><br><span class=\"line\">    if parent == nil &#123;  //日常判空</span><br><span class=\"line\">\t\tpanic(&quot;cannot create context from nil parent&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc := newCancelCtx(parent) //cancelCtx new</span><br><span class=\"line\">\tpropagateCancel(parent, &amp;c)  //循环传播取消函数for ctx</span><br><span class=\"line\">\treturn &amp;c, func() &#123; c.cancel(true, Canceled) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>看似很简单，四行解决，但是更重要的是学会看注释说明和相关的设计思路：<br>\nTODO</p>\n</blockquote>\n<p>引用官方的语言：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// WithCancel returns a copy of parent with a new Done channel. The returned</span><br><span class=\"line\">// context&#x27;s Done channel is closed when the returned cancel function is called</span><br><span class=\"line\">// or when the parent context&#x27;s Done channel is closed, whichever happens first.</span><br><span class=\"line\">//</span><br><span class=\"line\">// Canceling this context releases resources associated with it, so code should</span><br><span class=\"line\">// call cancel as soon as the operations running in this Context complete.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Withcancel 返回的是一个parent的镜像/复制，伴随一个Done channel通道。</span><br><span class=\"line\">Done关闭状态取决于</span><br><span class=\"line\">1、返回的cancel函数。</span><br><span class=\"line\">2、parent的Done Channel关闭。</span><br><span class=\"line\">这两个哪个先符合条件了。</span><br></pre></td></tr></table></figure>\n<h3 id=\"WithDeadline-WithTimeout\"><a class=\"header-anchor\" href=\"#WithDeadline-WithTimeout\">¶</a>WithDeadline/WithTimeout</h3>\n<p>自己梳理的逻辑执行顺序：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200907-152032.png\" alt=\"\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deadline/WithTimeout区别：</span><br><span class=\"line\"></span><br><span class=\"line\">* deadline:的入参是一个具体的截止时间：Time.time</span><br><span class=\"line\">* withTimeout:入参是一个多少时间后超时：Time.Duration</span><br></pre></td></tr></table></figure>\n<h3 id=\"WithValue\"><a class=\"header-anchor\" href=\"#WithValue\">¶</a>WithValue</h3>\n<blockquote>\n<p>Withvalue和value是成对出现的:</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、给ctx设置k,v：withvalue(ctx,k,v)</span><br><span class=\"line\">2、获取ctx中k的值value(ctx,k)</span><br></pre></td></tr></table></figure>\n<h3 id=\"TODO\"><a class=\"header-anchor\" href=\"#TODO\">¶</a>TODO</h3>\n<h4 id=\"timerCtx详细的设计思路和结构文档\"><a class=\"header-anchor\" href=\"#timerCtx详细的设计思路和结构文档\">¶</a>timerCtx详细的设计思路和结构文档</h4>\n<h4 id=\"框架图整理\"><a class=\"header-anchor\" href=\"#框架图整理\">¶</a>框架图整理</h4>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200907-152032.png","popularPost_tmp_gaData":{"updated":"Mon Sep 07 2020 22:21:52 GMT+0800 (中国标准时间)","title":"「7」Go Context包使用","path":"archives/410dfaec.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200907-152032.png","excerpt":"<h3 id=\"版本\"><a class=\"header-anchor\" href=\"#版本\">¶</a>版本</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">◯  go version</span><br><span class=\"line\">go version go1.14.9 darwin/amd64</span><br></pre></td></tr></table></figure>\n<h3 id=\"用Go的都离不开Context，引用官网的一句话来描述Context包：\"><a class=\"header-anchor\" href=\"#用Go的都离不开Context，引用官网的一句话来描述Context包：\">¶</a>用Go的都离不开Context，引用官网的一句话来描述Context包：</h3>\n<blockquote>\n<p>Package context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.</p>\n</blockquote>\n<p>主要掌握四个方法的使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WithCancel</span><br><span class=\"line\">WithDeadline</span><br><span class=\"line\">WithTimeout</span><br><span class=\"line\">WithValue</span><br></pre></td></tr></table></figure>\n<h3 id=\"前期ready\"><a class=\"header-anchor\" href=\"#前期ready\">¶</a>前期ready</h3>\n<p>要用下面的方法，先了解下部分结构和逻辑：</p>\n<blockquote>\n<p>既然context全部都是和取消相关的，最起码Go在设计时会有这么一个结构。</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-09-07T14:21:52.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-07T14:21:52.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go Package"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1989},{"title":"「82」openwrt 折腾记","date":"2021-11-07T10:38:24.000Z","abbrlink":"977b6995","_content":"\n\n最近买了个switch，因某些需求用到软路由，so....来折腾下。\n\n<!--more-->\n\n\n### openwrt 地址\n\n[👉🏿 esir GDQ版本 :](https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh)\n\n具体选择见下图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/1161636220122_.pic_hd.jpg)\n\n\n### 配置问题：\n\n我这里采用docker跑的程序，so....需要镜像 \n客户端：imrcrab/naive-client:v0.1.95\n服务端：imrcrab/naive-server:v0.2\n\n\n>具体的可以在hub.docker.com里面搜索。\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065042.png)\n\n#### 服务端：\n\n>这里不多说，具体看教程：[Naive server搭建](https://hub.docker.com/r/imrcrab/naive-server)\n\n#### 客户端：\n\n```go\n两步：\n1、创建网络\n2、docker run.....\n```\n\n##### 网络创建方式：\n\n>三步完成：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065902.png)\n\n\n##### 具体命令\nopenwrt装好后，直接跑docker命令即可：\n\n```go\ndocker run -itd --restart=always --network=gogo -m 300m --kernel-memory 310m --name naive95-client -p 10899:10800 -v /etc/localtime:/etc/localtime  imrcrab/naive-client:v0.1.95.2\n```\n\n```markdown\n    这里有一点很重要:\n        --network参数: 代表需要桥接的网络,我这里采用的是上一步自建的gogo\n```\n\n\n#### openwrt连接\n\n```go\n找一个可以sock5 proxy的软件，填上上面的proxy port: 10800。\n\n确认好即可。\n```\n\n### 目前网络图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_070906.png)\n\n### 致谢\n * [LEDE](https://github.com/coolsnowwolf/lede)\n * [esirplayground](https://github.com/esirplayground/AutoBuild-OpenWrt)\n * [Naive](https://github.com/klzgrad/naiveproxy)","source":"_posts/82-openwrt-折腾记.md","raw":"---\ntitle: 「82」openwrt 折腾记\ndate: '2021/11/07 18:38:24'\ntags:\n  - openwrt\n  - 软路由\n  - 网络\nabbrlink: 977b6995\n---\n\n\n最近买了个switch，因某些需求用到软路由，so....来折腾下。\n\n<!--more-->\n\n\n### openwrt 地址\n\n[👉🏿 esir GDQ版本 :](https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh)\n\n具体选择见下图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/1161636220122_.pic_hd.jpg)\n\n\n### 配置问题：\n\n我这里采用docker跑的程序，so....需要镜像 \n客户端：imrcrab/naive-client:v0.1.95\n服务端：imrcrab/naive-server:v0.2\n\n\n>具体的可以在hub.docker.com里面搜索。\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065042.png)\n\n#### 服务端：\n\n>这里不多说，具体看教程：[Naive server搭建](https://hub.docker.com/r/imrcrab/naive-server)\n\n#### 客户端：\n\n```go\n两步：\n1、创建网络\n2、docker run.....\n```\n\n##### 网络创建方式：\n\n>三步完成：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065902.png)\n\n\n##### 具体命令\nopenwrt装好后，直接跑docker命令即可：\n\n```go\ndocker run -itd --restart=always --network=gogo -m 300m --kernel-memory 310m --name naive95-client -p 10899:10800 -v /etc/localtime:/etc/localtime  imrcrab/naive-client:v0.1.95.2\n```\n\n```markdown\n    这里有一点很重要:\n        --network参数: 代表需要桥接的网络,我这里采用的是上一步自建的gogo\n```\n\n\n#### openwrt连接\n\n```go\n找一个可以sock5 proxy的软件，填上上面的proxy port: 10800。\n\n确认好即可。\n```\n\n### 目前网络图：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_070906.png)\n\n### 致谢\n * [LEDE](https://github.com/coolsnowwolf/lede)\n * [esirplayground](https://github.com/esirplayground/AutoBuild-OpenWrt)\n * [Naive](https://github.com/klzgrad/naiveproxy)","slug":"82-openwrt-折腾记","published":1,"updated":"2022-09-15T09:16:56.172Z","_id":"cl82u8d5r004nzfqxbfns6ci2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近买了个switch，因某些需求用到软路由，so…来折腾下。</p>\n<span id=\"more\"></span>\n<h3 id=\"openwrt-地址\"><a class=\"header-anchor\" href=\"#openwrt-地址\">¶</a>openwrt 地址</h3>\n<p><a href=\"https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh\">👉🏿 esir GDQ版本 :</a></p>\n<p>具体选择见下图：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/1161636220122_.pic_hd.jpg\" alt=\"\"></p>\n<h3 id=\"配置问题：\"><a class=\"header-anchor\" href=\"#配置问题：\">¶</a>配置问题：</h3>\n<p>我这里采用docker跑的程序，so…需要镜像<br>\n客户端：imrcrab/naive-client:v0.1.95<br>\n服务端：imrcrab/naive-server:v0.2</p>\n<blockquote>\n<p>具体的可以在hub.docker.com里面搜索。</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065042.png\" alt=\"\"></p>\n<h4 id=\"服务端：\"><a class=\"header-anchor\" href=\"#服务端：\">¶</a>服务端：</h4>\n<blockquote>\n<p>这里不多说，具体看教程：<a href=\"https://hub.docker.com/r/imrcrab/naive-server\">Naive server搭建</a></p>\n</blockquote>\n<h4 id=\"客户端：\"><a class=\"header-anchor\" href=\"#客户端：\">¶</a>客户端：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两步：</span><br><span class=\"line\"><span class=\"number\">1</span>、创建网络</span><br><span class=\"line\"><span class=\"number\">2</span>、docker run.....</span><br></pre></td></tr></table></figure>\n<h5 id=\"网络创建方式：\"><a class=\"header-anchor\" href=\"#网络创建方式：\">¶</a>网络创建方式：</h5>\n<blockquote>\n<p>三步完成：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065902.png\" alt=\"\"></p>\n<h5 id=\"具体命令\"><a class=\"header-anchor\" href=\"#具体命令\">¶</a>具体命令</h5>\n<p>openwrt装好后，直接跑docker命令即可：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --restart=always --network=gogo -m <span class=\"number\">300</span>m --kernel-memory <span class=\"number\">310</span>m --name naive95-client -p <span class=\"number\">10899</span>:<span class=\"number\">10800</span> -v /etc/localtime:/etc/localtime  imrcrab/naive-client:v0<span class=\"number\">.1</span><span class=\"number\">.95</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里有一点很重要:</span><br><span class=\"line\"><span class=\"code\">    --network参数: 代表需要桥接的网络,我这里采用的是上一步自建的gogo</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"openwrt连接\"><a class=\"header-anchor\" href=\"#openwrt连接\">¶</a>openwrt连接</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找一个可以sock5 proxy的软件，填上上面的proxy port: <span class=\"number\">10800</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">确认好即可。</span><br></pre></td></tr></table></figure>\n<h3 id=\"目前网络图：\"><a class=\"header-anchor\" href=\"#目前网络图：\">¶</a>目前网络图：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_070906.png\" alt=\"\"></p>\n<h3 id=\"致谢\"><a class=\"header-anchor\" href=\"#致谢\">¶</a>致谢</h3>\n<ul>\n<li><a href=\"https://github.com/coolsnowwolf/lede\">LEDE</a></li>\n<li><a href=\"https://github.com/esirplayground/AutoBuild-OpenWrt\">esirplayground</a></li>\n<li><a href=\"https://github.com/klzgrad/naiveproxy\">Naive</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>最近买了个switch，因某些需求用到软路由，so…来折腾下。</p>","more":"<h3 id=\"openwrt-地址\"><a class=\"header-anchor\" href=\"#openwrt-地址\">¶</a>openwrt 地址</h3>\n<p><a href=\"https://drive.google.com/drive/folders/1dqNUrMf9n7i3y1aSh68U5Yf44WQ3KCuh\">👉🏿 esir GDQ版本 :</a></p>\n<p>具体选择见下图：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/1161636220122_.pic_hd.jpg\" alt=\"\"></p>\n<h3 id=\"配置问题：\"><a class=\"header-anchor\" href=\"#配置问题：\">¶</a>配置问题：</h3>\n<p>我这里采用docker跑的程序，so…需要镜像<br>\n客户端：imrcrab/naive-client:v0.1.95<br>\n服务端：imrcrab/naive-server:v0.2</p>\n<blockquote>\n<p>具体的可以在hub.docker.com里面搜索。</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065042.png\" alt=\"\"></p>\n<h4 id=\"服务端：\"><a class=\"header-anchor\" href=\"#服务端：\">¶</a>服务端：</h4>\n<blockquote>\n<p>这里不多说，具体看教程：<a href=\"https://hub.docker.com/r/imrcrab/naive-server\">Naive server搭建</a></p>\n</blockquote>\n<h4 id=\"客户端：\"><a class=\"header-anchor\" href=\"#客户端：\">¶</a>客户端：</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">两步：</span><br><span class=\"line\"><span class=\"number\">1</span>、创建网络</span><br><span class=\"line\"><span class=\"number\">2</span>、docker run.....</span><br></pre></td></tr></table></figure>\n<h5 id=\"网络创建方式：\"><a class=\"header-anchor\" href=\"#网络创建方式：\">¶</a>网络创建方式：</h5>\n<blockquote>\n<p>三步完成：</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_065902.png\" alt=\"\"></p>\n<h5 id=\"具体命令\"><a class=\"header-anchor\" href=\"#具体命令\">¶</a>具体命令</h5>\n<p>openwrt装好后，直接跑docker命令即可：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -itd --restart=always --network=gogo -m <span class=\"number\">300</span>m --kernel-memory <span class=\"number\">310</span>m --name naive95-client -p <span class=\"number\">10899</span>:<span class=\"number\">10800</span> -v /etc/localtime:/etc/localtime  imrcrab/naive-client:v0<span class=\"number\">.1</span><span class=\"number\">.95</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这里有一点很重要:</span><br><span class=\"line\"><span class=\"code\">    --network参数: 代表需要桥接的网络,我这里采用的是上一步自建的gogo</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"openwrt连接\"><a class=\"header-anchor\" href=\"#openwrt连接\">¶</a>openwrt连接</h4>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">找一个可以sock5 proxy的软件，填上上面的proxy port: <span class=\"number\">10800</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">确认好即可。</span><br></pre></td></tr></table></figure>\n<h3 id=\"目前网络图：\"><a class=\"header-anchor\" href=\"#目前网络图：\">¶</a>目前网络图：</h3>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/clipboard_20211107_070906.png\" alt=\"\"></p>\n<h3 id=\"致谢\"><a class=\"header-anchor\" href=\"#致谢\">¶</a>致谢</h3>\n<ul>\n<li><a href=\"https://github.com/coolsnowwolf/lede\">LEDE</a></li>\n<li><a href=\"https://github.com/esirplayground/AutoBuild-OpenWrt\">esirplayground</a></li>\n<li><a href=\"https://github.com/klzgrad/naiveproxy\">Naive</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/1161636220122_.pic_hd.jpg","popularPost_tmp_gaData":{"updated":"Thu Sep 15 2022 17:16:56 GMT+0800 (中国标准时间)","title":"「82」openwrt 折腾记","path":"archives/977b6995.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/1161636220122_.pic_hd.jpg","excerpt":"<p>最近买了个switch，因某些需求用到软路由，so…来折腾下。</p>","date":{"_isAMomentObject":true,"_i":"2021-11-07T10:38:24.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-11-07T10:38:24.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["openwrt","软路由","网络"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":589},{"title":"「83」mysql小记","date":"2021-12-30T14:09:37.000Z","abbrlink":"b09eedc6","_content":"\n\nMySQL常见的问题：\n* select \n    * group by、order by、having 、 join等执行顺序\n    * 关于_rowid隐藏列\n    * group by用法\n* MMVC\n    * 解决的问题\n\n* 误区  \n    * group by和having\n\n* 索引不命中情况\n\n* 效率问题\n    * in后面接大量数据效率低问题\n* .......\n<!--more-->\n### select 问题\n\n#### group by、order by、having 、 join等执行顺序\n\n>[摘抄自MySQL ☞ 13.2.10 SELECT Statement](https://dev.mysql.com/doc/refman/8.0/en/select.html)\n```sql\nSELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    [HIGH_PRIORITY]\n    [STRAIGHT_JOIN]\n    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n    select_expr [, select_expr] ...\n    [into_option]\n    [FROM table_references\n      [PARTITION partition_list]]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [WINDOW window_name AS (window_spec)\n        [, window_name AS (window_spec)] ...]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [into_option]\n    [FOR {UPDATE | SHARE}\n        [OF tbl_name [, tbl_name] ...]\n        [NOWAIT | SKIP LOCKED]\n      | LOCK IN SHARE MODE]\n    [into_option]\n\ninto_option: {\n    INTO OUTFILE 'file_name'\n        [CHARACTER SET charset_name]\n        export_options\n  | INTO DUMPFILE 'file_name'\n  | INTO var_name [, var_name] ...\n}\n```\n\n这个看看自然明白：\n\n```\n1. 先连接from后的数据源(若有join，则先执行on后条件，再连接数据源)。\n2. 执行where条件\n3. 执行group by\n4. 执行having\n5. 执行order by\n```\n#### 关于_rowid隐藏列\n\n同样的，先看[☞官方资料](https://dev.mysql.com/doc/refman/8.0/en/create-table.html)\n\n\n>不过有一点需要注意：\n\n>If a table has a PRIMARY KEY or UNIQUE NOT NULL index that consists of a single column that has an integer type, you can use _rowid to refer to the indexed column in SELECT statements, as described in [Unique Indexes](https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-unique).\n\n#### group by用法\n[官方资料: ☞ GROUP BY](https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html)\n\n注意点：\n\n> Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL [5.6 Reference Manual](https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html).\n\n\n### MMVC问题\n\n[☞官方资料](https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html)\n\n这里不做过多解释了，就是个逻辑+锁的实现。\n\n\n\n### 使用误区\n\n#### group by和having\ngroup by 和having的顺序小问题：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220129_060235.png)\n\n```sql\nselect id,name,_rowid from test.table_name having  id>2 group by  id; ❎\nselect id,name,_rowid from test.table_name  group by  id where  id>2; √\nselect id,name,_rowid from test.table_name where  id>2 group by  id;  √\n```\n\n### 索引不命中情况\n\n### 效率问题\n\n#### IN 和 Exists\n\n[IN](https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_in)\n[EXISTS](https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html)\n\n\n看完总结下：\nin：需要遍历后面的数据\nexists: 需要查询数据库\n\nselect * from A where id in(select id from B)\nselect * from A where exists (select 1 from B where A.id=B.id);\n\nB表数据大，推荐用exists。\n\n### 工具使用\n\n### Reference\n\n* [☛ MMVC](https://segmentfault.com/a/1190000037557620)\n* [☛ MySQL隐藏列](https://www.51cto.com/article/680143.html)\n* [☛ 12.20.3 MySQL Handling of GROUP BY](https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html)\n* [☛ 13.2.11.6 Subqueries with EXISTS or NOT EXISTS](https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html)","source":"_posts/83-mysql小记.md","raw":"---\ntitle: 「83」mysql小记\ndate: '2021/12/30 22:09:37'\ntags:\n  - MySQL\n  - 小记\nabbrlink: b09eedc6\n---\n\n\nMySQL常见的问题：\n* select \n    * group by、order by、having 、 join等执行顺序\n    * 关于_rowid隐藏列\n    * group by用法\n* MMVC\n    * 解决的问题\n\n* 误区  \n    * group by和having\n\n* 索引不命中情况\n\n* 效率问题\n    * in后面接大量数据效率低问题\n* .......\n<!--more-->\n### select 问题\n\n#### group by、order by、having 、 join等执行顺序\n\n>[摘抄自MySQL ☞ 13.2.10 SELECT Statement](https://dev.mysql.com/doc/refman/8.0/en/select.html)\n```sql\nSELECT\n    [ALL | DISTINCT | DISTINCTROW ]\n    [HIGH_PRIORITY]\n    [STRAIGHT_JOIN]\n    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]\n    select_expr [, select_expr] ...\n    [into_option]\n    [FROM table_references\n      [PARTITION partition_list]]\n    [WHERE where_condition]\n    [GROUP BY {col_name | expr | position}, ... [WITH ROLLUP]]\n    [HAVING where_condition]\n    [WINDOW window_name AS (window_spec)\n        [, window_name AS (window_spec)] ...]\n    [ORDER BY {col_name | expr | position}\n      [ASC | DESC], ... [WITH ROLLUP]]\n    [LIMIT {[offset,] row_count | row_count OFFSET offset}]\n    [into_option]\n    [FOR {UPDATE | SHARE}\n        [OF tbl_name [, tbl_name] ...]\n        [NOWAIT | SKIP LOCKED]\n      | LOCK IN SHARE MODE]\n    [into_option]\n\ninto_option: {\n    INTO OUTFILE 'file_name'\n        [CHARACTER SET charset_name]\n        export_options\n  | INTO DUMPFILE 'file_name'\n  | INTO var_name [, var_name] ...\n}\n```\n\n这个看看自然明白：\n\n```\n1. 先连接from后的数据源(若有join，则先执行on后条件，再连接数据源)。\n2. 执行where条件\n3. 执行group by\n4. 执行having\n5. 执行order by\n```\n#### 关于_rowid隐藏列\n\n同样的，先看[☞官方资料](https://dev.mysql.com/doc/refman/8.0/en/create-table.html)\n\n\n>不过有一点需要注意：\n\n>If a table has a PRIMARY KEY or UNIQUE NOT NULL index that consists of a single column that has an integer type, you can use _rowid to refer to the indexed column in SELECT statements, as described in [Unique Indexes](https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-unique).\n\n#### group by用法\n[官方资料: ☞ GROUP BY](https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html)\n\n注意点：\n\n> Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL [5.6 Reference Manual](https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html).\n\n\n### MMVC问题\n\n[☞官方资料](https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html)\n\n这里不做过多解释了，就是个逻辑+锁的实现。\n\n\n\n### 使用误区\n\n#### group by和having\ngroup by 和having的顺序小问题：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220129_060235.png)\n\n```sql\nselect id,name,_rowid from test.table_name having  id>2 group by  id; ❎\nselect id,name,_rowid from test.table_name  group by  id where  id>2; √\nselect id,name,_rowid from test.table_name where  id>2 group by  id;  √\n```\n\n### 索引不命中情况\n\n### 效率问题\n\n#### IN 和 Exists\n\n[IN](https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_in)\n[EXISTS](https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html)\n\n\n看完总结下：\nin：需要遍历后面的数据\nexists: 需要查询数据库\n\nselect * from A where id in(select id from B)\nselect * from A where exists (select 1 from B where A.id=B.id);\n\nB表数据大，推荐用exists。\n\n### 工具使用\n\n### Reference\n\n* [☛ MMVC](https://segmentfault.com/a/1190000037557620)\n* [☛ MySQL隐藏列](https://www.51cto.com/article/680143.html)\n* [☛ 12.20.3 MySQL Handling of GROUP BY](https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html)\n* [☛ 13.2.11.6 Subqueries with EXISTS or NOT EXISTS](https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html)","slug":"83-mysql小记","published":1,"updated":"2022-09-15T09:16:56.172Z","_id":"cl82u8d5s004pzfqx8eg6hisk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>MySQL常见的问题：</p>\n<ul>\n<li>\n<p>select</p>\n<ul>\n<li>group by、order by、having 、 join等执行顺序</li>\n<li>关于_rowid隐藏列</li>\n<li>group by用法</li>\n</ul>\n</li>\n<li>\n<p>MMVC</p>\n<ul>\n<li>解决的问题</li>\n</ul>\n</li>\n<li>\n<p>误区</p>\n<ul>\n<li>group by和having</li>\n</ul>\n</li>\n<li>\n<p>索引不命中情况</p>\n</li>\n<li>\n<p>效率问题</p>\n<ul>\n<li>in后面接大量数据效率低问题</li>\n</ul>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"select-问题\"><a class=\"header-anchor\" href=\"#select-问题\">¶</a>select 问题</h3>\n<h4 id=\"group-by、order-by、having-、-join等执行顺序\"><a class=\"header-anchor\" href=\"#group-by、order-by、having-、-join等执行顺序\">¶</a>group by、order by、having 、 join等执行顺序</h4>\n<blockquote>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\">摘抄自MySQL ☞ 13.2.10 SELECT Statement</a></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    [<span class=\"keyword\">ALL</span> <span class=\"operator\">|</span> <span class=\"keyword\">DISTINCT</span> <span class=\"operator\">|</span> DISTINCTROW ]</span><br><span class=\"line\">    [HIGH_PRIORITY]</span><br><span class=\"line\">    [STRAIGHT_JOIN]</span><br><span class=\"line\">    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]</span><br><span class=\"line\">    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]</span><br><span class=\"line\">    select_expr [, select_expr] ...</span><br><span class=\"line\">    [into_option]</span><br><span class=\"line\">    [<span class=\"keyword\">FROM</span> table_references</span><br><span class=\"line\">      [<span class=\"keyword\">PARTITION</span> partition_list]]</span><br><span class=\"line\">    [<span class=\"keyword\">WHERE</span> where_condition]</span><br><span class=\"line\">    [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &#123;col_name <span class=\"operator\">|</span> expr <span class=\"operator\">|</span> position&#125;, ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">    [<span class=\"keyword\">HAVING</span> where_condition]</span><br><span class=\"line\">    [<span class=\"keyword\">WINDOW</span> window_name <span class=\"keyword\">AS</span> (window_spec)</span><br><span class=\"line\">        [, window_name <span class=\"keyword\">AS</span> (window_spec)] ...]</span><br><span class=\"line\">    [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &#123;col_name <span class=\"operator\">|</span> expr <span class=\"operator\">|</span> position&#125;</span><br><span class=\"line\">      [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>], ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">    [LIMIT &#123;[<span class=\"keyword\">offset</span>,] row_count <span class=\"operator\">|</span> row_count <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>&#125;]</span><br><span class=\"line\">    [into_option]</span><br><span class=\"line\">    [<span class=\"keyword\">FOR</span> &#123;<span class=\"keyword\">UPDATE</span> <span class=\"operator\">|</span> SHARE&#125;</span><br><span class=\"line\">        [<span class=\"keyword\">OF</span> tbl_name [, tbl_name] ...]</span><br><span class=\"line\">        [NOWAIT <span class=\"operator\">|</span> <span class=\"keyword\">SKIP</span> LOCKED]</span><br><span class=\"line\">      <span class=\"operator\">|</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE]</span><br><span class=\"line\">    [into_option]</span><br><span class=\"line\"></span><br><span class=\"line\">into_option: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">INTO</span> OUTFILE <span class=\"string\">&#x27;file_name&#x27;</span></span><br><span class=\"line\">        [<span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> charset_name]</span><br><span class=\"line\">        export_options</span><br><span class=\"line\">  <span class=\"operator\">|</span> <span class=\"keyword\">INTO</span> DUMPFILE <span class=\"string\">&#x27;file_name&#x27;</span></span><br><span class=\"line\">  <span class=\"operator\">|</span> <span class=\"keyword\">INTO</span> var_name [, var_name] ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个看看自然明白：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 先连接from后的数据源(若有join，则先执行on后条件，再连接数据源)。</span><br><span class=\"line\">2. 执行where条件</span><br><span class=\"line\">3. 执行group by</span><br><span class=\"line\">4. 执行having</span><br><span class=\"line\">5. 执行order by</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于-rowid隐藏列\"><a class=\"header-anchor\" href=\"#关于-rowid隐藏列\">¶</a>关于_rowid隐藏列</h4>\n<p>同样的，先看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-table.html\">☞官方资料</a></p>\n<blockquote>\n<p>不过有一点需要注意：</p>\n</blockquote>\n<blockquote>\n<p>If a table has a PRIMARY KEY or UNIQUE NOT NULL index that consists of a single column that has an integer type, you can use _rowid to refer to the indexed column in SELECT statements, as described in <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-unique\">Unique Indexes</a>.</p>\n</blockquote>\n<h4 id=\"group-by用法\"><a class=\"header-anchor\" href=\"#group-by用法\">¶</a>group by用法</h4>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html\">官方资料: ☞ GROUP BY</a></p>\n<p>注意点：</p>\n<blockquote>\n<p>Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html\">5.6 Reference Manual</a>.</p>\n</blockquote>\n<h3 id=\"MMVC问题\"><a class=\"header-anchor\" href=\"#MMVC问题\">¶</a>MMVC问题</h3>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html\">☞官方资料</a></p>\n<p>这里不做过多解释了，就是个逻辑+锁的实现。</p>\n<h3 id=\"使用误区\"><a class=\"header-anchor\" href=\"#使用误区\">¶</a>使用误区</h3>\n<h4 id=\"group-by和having\"><a class=\"header-anchor\" href=\"#group-by和having\">¶</a>group by和having</h4>\n<p>group by 和having的顺序小问题：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220129_060235.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,name,_rowid <span class=\"keyword\">from</span> test.table_name <span class=\"keyword\">having</span>  id<span class=\"operator\">&gt;</span><span class=\"number\">2</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  id; ❎</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,_rowid <span class=\"keyword\">from</span> test.table_name  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  id <span class=\"keyword\">where</span>  id<span class=\"operator\">&gt;</span><span class=\"number\">2</span>; √</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,_rowid <span class=\"keyword\">from</span> test.table_name <span class=\"keyword\">where</span>  id<span class=\"operator\">&gt;</span><span class=\"number\">2</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  id;  √</span><br></pre></td></tr></table></figure>\n<h3 id=\"索引不命中情况\"><a class=\"header-anchor\" href=\"#索引不命中情况\">¶</a>索引不命中情况</h3>\n<h3 id=\"效率问题\"><a class=\"header-anchor\" href=\"#效率问题\">¶</a>效率问题</h3>\n<h4 id=\"IN-和-Exists\"><a class=\"header-anchor\" href=\"#IN-和-Exists\">¶</a>IN 和 Exists</h4>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_in\">IN</a><br>\n<a href=\"https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html\">EXISTS</a></p>\n<p>看完总结下：<br>\nin：需要遍历后面的数据<br>\nexists: 需要查询数据库</p>\n<p>select * from A where id in(select id from B)<br>\nselect * from A where exists (select 1 from B where A.id=B.id);</p>\n<p>B表数据大，推荐用exists。</p>\n<h3 id=\"工具使用\"><a class=\"header-anchor\" href=\"#工具使用\">¶</a>工具使用</h3>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000037557620\">☛ MMVC</a></li>\n<li><a href=\"https://www.51cto.com/article/680143.html\">☛ MySQL隐藏列</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html\">☛ 12.20.3 MySQL Handling of GROUP BY</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html\">☛ 13.2.11.6 Subqueries with EXISTS or NOT EXISTS</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>MySQL常见的问题：</p>\n<ul>\n<li>\n<p>select</p>\n<ul>\n<li>group by、order by、having 、 join等执行顺序</li>\n<li>关于_rowid隐藏列</li>\n<li>group by用法</li>\n</ul>\n</li>\n<li>\n<p>MMVC</p>\n<ul>\n<li>解决的问题</li>\n</ul>\n</li>\n<li>\n<p>误区</p>\n<ul>\n<li>group by和having</li>\n</ul>\n</li>\n<li>\n<p>索引不命中情况</p>\n</li>\n<li>\n<p>效率问题</p>\n<ul>\n<li>in后面接大量数据效率低问题</li>\n</ul>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>","more":"<h3 id=\"select-问题\"><a class=\"header-anchor\" href=\"#select-问题\">¶</a>select 问题</h3>\n<h4 id=\"group-by、order-by、having-、-join等执行顺序\"><a class=\"header-anchor\" href=\"#group-by、order-by、having-、-join等执行顺序\">¶</a>group by、order by、having 、 join等执行顺序</h4>\n<blockquote>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/select.html\">摘抄自MySQL ☞ 13.2.10 SELECT Statement</a></p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">    [<span class=\"keyword\">ALL</span> <span class=\"operator\">|</span> <span class=\"keyword\">DISTINCT</span> <span class=\"operator\">|</span> DISTINCTROW ]</span><br><span class=\"line\">    [HIGH_PRIORITY]</span><br><span class=\"line\">    [STRAIGHT_JOIN]</span><br><span class=\"line\">    [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]</span><br><span class=\"line\">    [SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]</span><br><span class=\"line\">    select_expr [, select_expr] ...</span><br><span class=\"line\">    [into_option]</span><br><span class=\"line\">    [<span class=\"keyword\">FROM</span> table_references</span><br><span class=\"line\">      [<span class=\"keyword\">PARTITION</span> partition_list]]</span><br><span class=\"line\">    [<span class=\"keyword\">WHERE</span> where_condition]</span><br><span class=\"line\">    [<span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> &#123;col_name <span class=\"operator\">|</span> expr <span class=\"operator\">|</span> position&#125;, ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">    [<span class=\"keyword\">HAVING</span> where_condition]</span><br><span class=\"line\">    [<span class=\"keyword\">WINDOW</span> window_name <span class=\"keyword\">AS</span> (window_spec)</span><br><span class=\"line\">        [, window_name <span class=\"keyword\">AS</span> (window_spec)] ...]</span><br><span class=\"line\">    [<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> &#123;col_name <span class=\"operator\">|</span> expr <span class=\"operator\">|</span> position&#125;</span><br><span class=\"line\">      [<span class=\"keyword\">ASC</span> <span class=\"operator\">|</span> <span class=\"keyword\">DESC</span>], ... [<span class=\"keyword\">WITH</span> <span class=\"keyword\">ROLLUP</span>]]</span><br><span class=\"line\">    [LIMIT &#123;[<span class=\"keyword\">offset</span>,] row_count <span class=\"operator\">|</span> row_count <span class=\"keyword\">OFFSET</span> <span class=\"keyword\">offset</span>&#125;]</span><br><span class=\"line\">    [into_option]</span><br><span class=\"line\">    [<span class=\"keyword\">FOR</span> &#123;<span class=\"keyword\">UPDATE</span> <span class=\"operator\">|</span> SHARE&#125;</span><br><span class=\"line\">        [<span class=\"keyword\">OF</span> tbl_name [, tbl_name] ...]</span><br><span class=\"line\">        [NOWAIT <span class=\"operator\">|</span> <span class=\"keyword\">SKIP</span> LOCKED]</span><br><span class=\"line\">      <span class=\"operator\">|</span> LOCK <span class=\"keyword\">IN</span> SHARE MODE]</span><br><span class=\"line\">    [into_option]</span><br><span class=\"line\"></span><br><span class=\"line\">into_option: &#123;</span><br><span class=\"line\">    <span class=\"keyword\">INTO</span> OUTFILE <span class=\"string\">&#x27;file_name&#x27;</span></span><br><span class=\"line\">        [<span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> charset_name]</span><br><span class=\"line\">        export_options</span><br><span class=\"line\">  <span class=\"operator\">|</span> <span class=\"keyword\">INTO</span> DUMPFILE <span class=\"string\">&#x27;file_name&#x27;</span></span><br><span class=\"line\">  <span class=\"operator\">|</span> <span class=\"keyword\">INTO</span> var_name [, var_name] ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个看看自然明白：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 先连接from后的数据源(若有join，则先执行on后条件，再连接数据源)。</span><br><span class=\"line\">2. 执行where条件</span><br><span class=\"line\">3. 执行group by</span><br><span class=\"line\">4. 执行having</span><br><span class=\"line\">5. 执行order by</span><br></pre></td></tr></table></figure>\n<h4 id=\"关于-rowid隐藏列\"><a class=\"header-anchor\" href=\"#关于-rowid隐藏列\">¶</a>关于_rowid隐藏列</h4>\n<p>同样的，先看<a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-table.html\">☞官方资料</a></p>\n<blockquote>\n<p>不过有一点需要注意：</p>\n</blockquote>\n<blockquote>\n<p>If a table has a PRIMARY KEY or UNIQUE NOT NULL index that consists of a single column that has an integer type, you can use _rowid to refer to the indexed column in SELECT statements, as described in <a href=\"https://dev.mysql.com/doc/refman/8.0/en/create-index.html#create-index-unique\">Unique Indexes</a>.</p>\n</blockquote>\n<h4 id=\"group-by用法\"><a class=\"header-anchor\" href=\"#group-by用法\">¶</a>group by用法</h4>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html\">官方资料: ☞ GROUP BY</a></p>\n<p>注意点：</p>\n<blockquote>\n<p>Before 5.7.5, MySQL does not detect functional dependency and ONLY_FULL_GROUP_BY is not enabled by default. For a description of pre-5.7.5 behavior, see the MySQL <a href=\"https://dev.mysql.com/doc/refman/5.6/en/sql-mode.html\">5.6 Reference Manual</a>.</p>\n</blockquote>\n<h3 id=\"MMVC问题\"><a class=\"header-anchor\" href=\"#MMVC问题\">¶</a>MMVC问题</h3>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html\">☞官方资料</a></p>\n<p>这里不做过多解释了，就是个逻辑+锁的实现。</p>\n<h3 id=\"使用误区\"><a class=\"header-anchor\" href=\"#使用误区\">¶</a>使用误区</h3>\n<h4 id=\"group-by和having\"><a class=\"header-anchor\" href=\"#group-by和having\">¶</a>group by和having</h4>\n<p>group by 和having的顺序小问题：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220129_060235.png\" alt=\"\"></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> id,name,_rowid <span class=\"keyword\">from</span> test.table_name <span class=\"keyword\">having</span>  id<span class=\"operator\">&gt;</span><span class=\"number\">2</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  id; ❎</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,_rowid <span class=\"keyword\">from</span> test.table_name  <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  id <span class=\"keyword\">where</span>  id<span class=\"operator\">&gt;</span><span class=\"number\">2</span>; √</span><br><span class=\"line\"><span class=\"keyword\">select</span> id,name,_rowid <span class=\"keyword\">from</span> test.table_name <span class=\"keyword\">where</span>  id<span class=\"operator\">&gt;</span><span class=\"number\">2</span> <span class=\"keyword\">group</span> <span class=\"keyword\">by</span>  id;  √</span><br></pre></td></tr></table></figure>\n<h3 id=\"索引不命中情况\"><a class=\"header-anchor\" href=\"#索引不命中情况\">¶</a>索引不命中情况</h3>\n<h3 id=\"效率问题\"><a class=\"header-anchor\" href=\"#效率问题\">¶</a>效率问题</h3>\n<h4 id=\"IN-和-Exists\"><a class=\"header-anchor\" href=\"#IN-和-Exists\">¶</a>IN 和 Exists</h4>\n<p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/comparison-operators.html#operator_in\">IN</a><br>\n<a href=\"https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html\">EXISTS</a></p>\n<p>看完总结下：<br>\nin：需要遍历后面的数据<br>\nexists: 需要查询数据库</p>\n<p>select * from A where id in(select id from B)<br>\nselect * from A where exists (select 1 from B where A.id=B.id);</p>\n<p>B表数据大，推荐用exists。</p>\n<h3 id=\"工具使用\"><a class=\"header-anchor\" href=\"#工具使用\">¶</a>工具使用</h3>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000037557620\">☛ MMVC</a></li>\n<li><a href=\"https://www.51cto.com/article/680143.html\">☛ MySQL隐藏列</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/group-by-handling.html\">☛ 12.20.3 MySQL Handling of GROUP BY</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/exists-and-not-exists-subqueries.html\">☛ 13.2.11.6 Subqueries with EXISTS or NOT EXISTS</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220129_060235.png","popularPost_tmp_gaData":{"updated":"Thu Sep 15 2022 17:16:56 GMT+0800 (中国标准时间)","title":"「83」mysql小记","path":"archives/b09eedc6.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220129_060235.png","excerpt":"<p>MySQL常见的问题：</p>\n<ul>\n<li>\n<p>select</p>\n<ul>\n<li>group by、order by、having 、 join等执行顺序</li>\n<li>关于_rowid隐藏列</li>\n<li>group by用法</li>\n</ul>\n</li>\n<li>\n<p>MMVC</p>\n<ul>\n<li>解决的问题</li>\n</ul>\n</li>\n<li>\n<p>误区</p>\n<ul>\n<li>group by和having</li>\n</ul>\n</li>\n<li>\n<p>索引不命中情况</p>\n</li>\n<li>\n<p>效率问题</p>\n<ul>\n<li>in后面接大量数据效率低问题</li>\n</ul>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>","date":{"_isAMomentObject":true,"_i":"2021-12-30T14:09:37.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2021-12-30T14:09:37.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["MySQL","小记"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2079},{"title":"「84」tcpdump & wireshark","abbrlink":"a4b12394","date":"2022-02-03T10:00:37.000Z","_content":"\n\n[☞ tcpdump：](https://zh.wikipedia.org/wiki/Tcpdump)命令行下的转包工具。\n\n<!--more-->\n\n### 官方定义\n[→ tcpdump官网](https://www.tcpdump.org/)\n\n### 使用场景\n\n```go\n# -s 数据包的大小 port代表端口\ntcpdump  -s 0 port 443\n\ntcpdump -vvv -i eth0 \n```\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_061422.png)\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_062657.png)\n........\n.......\n.....\n\n* 查看端口流量\n* 抓取指定端口数据包，可用wireshark分析\n* icmp/tcp/udp等抓包分析\n* ....\n\n### 基本用法\n\n#### help用法\n\n```\nroot@VM-4-8-debian:~# tcpdump --help\ntcpdump version 4.99.0\nlibpcap version 1.10.0 (with TPACKET_V3)\nOpenSSL 1.1.1k  25 Mar 2021\nUsage: tcpdump [-AbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ] [--count]\n\t\t[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]\n\t\t[ -i interface ] [ --immediate-mode ] [ -j tstamptype ]\n\t\t[ -M secret ] [ --number ] [ --print ] [ -Q in|out|inout ]\n\t\t[ -r file ] [ -s snaplen ] [ -T type ] [ --version ]\n\t\t[ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ]\n\t\t[ --time-stamp-precision precision ] [ --micro ] [ --nano ]\n\t\t[ -z postrotate-command ] [ -Z user ] [ expression ]\n```\n\n>这么多的用法，不可能一个个说，可以见名知意的就不解释了。\n\n这里有全部的命令行用法：\n\n[⚡️ tcpdump library](https://packetlife.net/media/library/12/tcpdump.pdf)\n\n#### 常见使用\n\n```\n# -e 打印header\ntcpdump -e -i eth0  \n\n# tcp-ack类型的\ntcpdump -vv 'tcp-ack!=0' \n```\n\n\n#### 高阶用法\n\n[☞ tcpdump advanced](https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/)\n\n```shell\n\nroot@VM-4-8-debian:~# tcpdump -vv 'tcp-ack!=0'\ntcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n18:47:10.998761 IP (tos 0x10, ttl 64, id 23027, offset 0, flags [DF], proto TCP (6), length 164)\n\n    10.0.4.8.ssh > 111.18.5.47.8452: Flags [P.], cksum 0x82df (incorrect -> 0x3eec), seq 96990242:96990366, ack 1856675240, win 83, length 124\n18:47:11.032067 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    111.18.5.47.8452 > 10.0.4.8.ssh: Flags [.], cksum 0x86f1 (correct), seq 1, ack 0, win 32579, length 0\n18:47:11.043267 IP (tos 0x1c, ttl 249, id 8009, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54339 > 10.0.4.8.https: Flags [.], cksum 0xa0b6 (correct), seq 252872041, ack 855940619, win 65535, length 0\n18:47:11.043320 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54339: Flags [R], cksum 0x353e (correct), seq 855940619, win 0, length 0\n18:47:11.053616 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    111.18.5.47.8452 > 10.0.4.8.ssh: Flags [.], cksum 0x8676 (correct), seq 1, ack 124, win 32578, length 0\n18:47:11.081297 IP (tos 0x10, ttl 64, id 23028, offset 0, flags [DF], proto TCP (6), length 172)\n    10.0.4.8.ssh > 111.18.5.47.8452: Flags [P.], cksum 0x82e7 (incorrect -> 0x965f), seq 124:256, ack 1, win 83, length 132\n18:47:11.081595 IP (tos 0x0, ttl 64, id 12233, offset 0, flags [DF], proto UDP (17), length 70)\n    10.0.4.8.51812 > 183.60.83.19.domain: [bad udp cksum 0x189b -> 0xd360!] 24857+ PTR? 47.5.18.111.in-addr.arpa. (42)\n18:47:11.117741 IP (tos 0x1c, ttl 249, id 57452, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54340 > 10.0.4.8.https: Flags [.], cksum 0xcd05 (correct), seq 1279984176, ack 855947195, win 65535, length 0\n18:47:11.117792 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54340: Flags [R], cksum 0x1b8d (correct), seq 855947195, win 0, length 0\n18:47:11.138039 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    111.18.5.47.8452 > 10.0.4.8.ssh: Flags [.], cksum 0x85f3 (correct), seq 1, ack 256, win 32577, length 0\n18:47:11.192735 IP (tos 0x1c, ttl 249, id 22872, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54341 > 10.0.4.8.https: Flags [.], cksum 0x94a7 (correct), seq 1967847389, ack 855953771, win 65535, length 0\n18:47:11.192787 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54341: Flags [R], cksum 0x01dc (correct), seq 855953771, win 0, length 0\n18:47:11.268178 IP (tos 0x1c, ttl 249, id 1432, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54342 > 10.0.4.8.https: Flags [.], cksum 0x7592 (correct), seq 1082733059, ack 855960347, win 65535, length 0\n18:47:11.268235 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54342: Flags [R], cksum 0xe82a (correct), seq 855960347, win 0, length 0\n18:47:11.342841 IP (tos 0x1c, ttl 249, id 3667, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54343 > 10.0.4.8.https: Flags [.], cksum 0x39c7 (correct), seq 1302021899, ack 855966923, win 65535, length 0\n18:47:11.342894 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54343: Flags [R], cksum 0xce79 (correct), seq 855966923, win 0, length 0\n18:47:11.416171 IP (tos 0x1c, ttl 249, id 17285, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54344 > 10.0.4.8.https: Flags [.], cksum 0x9d47 (correct), seq 473889590, ack 855973499, win 65535, length 0\n18:47:11.416224 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54344: Flags [R], cksum 0xb4c8 (correct), seq 855973499, win 0, length 0\n18:47:12.184512 IP (tos 0x60, ttl 247, id 56471, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.159.40.42283 > 10.0.4.8.https: Flags [.], cksum 0x9787 (correct), seq 2042582601, ack 1236197041, win 65535, length 0\n18:47:12.184583 IP (tos 0x60, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.159.40.42283: Flags [R], cksum 0x679c (correct), seq 1236197041, win 0, length 0\n18:47:12.400485 IP (tos 0x0, ttl 64, id 37593, offset 0, flags [DF], proto TCP (6), length 108)\n^C    10.0.4.8.ssh > 157.245.69.244.56074: Flags [P.], cksum 0xf24f (incorrect -> 0x79f5), seq 397565160:397565228, ack 201251358, win 84, length 68\n\n21 packets captured\n1061 packets received by filter\n961 packets dropped by kernel\n```\n\n##### 用法来源：\n\n>按照tcp中划分的字节位来划分\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065122.png)\n\n#### 导出wireshark包：\n\n```shell\ntcpdump -i eth0 -w test.cap/test.pcap\n```\n\n导出后可以直接用wireshark打开，查看具体情况：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065536.png)\n\n### Reference\n\n* [→ tcpdump official](https://www.tcpdump.org/index.html#documentation)\n* [→ tcpdump learn](https://wizardzines.com/zines/tcpdump/)\n* [→ tcpdump cheat sheet](https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/)\n* [→ tcpdump advanced filters](https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/)\n\n\n\n","source":"_posts/84-tcpdump-wireshark.md","raw":"---\ntitle: 「84」tcpdump & wireshark\ntags:\n  - 抓包\n  - 网络\n  - tcpdump\n  - 工具\nabbrlink: a4b12394\ndate: 2022-02-03 18:00:37\n---\n\n\n[☞ tcpdump：](https://zh.wikipedia.org/wiki/Tcpdump)命令行下的转包工具。\n\n<!--more-->\n\n### 官方定义\n[→ tcpdump官网](https://www.tcpdump.org/)\n\n### 使用场景\n\n```go\n# -s 数据包的大小 port代表端口\ntcpdump  -s 0 port 443\n\ntcpdump -vvv -i eth0 \n```\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_061422.png)\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_062657.png)\n........\n.......\n.....\n\n* 查看端口流量\n* 抓取指定端口数据包，可用wireshark分析\n* icmp/tcp/udp等抓包分析\n* ....\n\n### 基本用法\n\n#### help用法\n\n```\nroot@VM-4-8-debian:~# tcpdump --help\ntcpdump version 4.99.0\nlibpcap version 1.10.0 (with TPACKET_V3)\nOpenSSL 1.1.1k  25 Mar 2021\nUsage: tcpdump [-AbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ] [--count]\n\t\t[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]\n\t\t[ -i interface ] [ --immediate-mode ] [ -j tstamptype ]\n\t\t[ -M secret ] [ --number ] [ --print ] [ -Q in|out|inout ]\n\t\t[ -r file ] [ -s snaplen ] [ -T type ] [ --version ]\n\t\t[ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ]\n\t\t[ --time-stamp-precision precision ] [ --micro ] [ --nano ]\n\t\t[ -z postrotate-command ] [ -Z user ] [ expression ]\n```\n\n>这么多的用法，不可能一个个说，可以见名知意的就不解释了。\n\n这里有全部的命令行用法：\n\n[⚡️ tcpdump library](https://packetlife.net/media/library/12/tcpdump.pdf)\n\n#### 常见使用\n\n```\n# -e 打印header\ntcpdump -e -i eth0  \n\n# tcp-ack类型的\ntcpdump -vv 'tcp-ack!=0' \n```\n\n\n#### 高阶用法\n\n[☞ tcpdump advanced](https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/)\n\n```shell\n\nroot@VM-4-8-debian:~# tcpdump -vv 'tcp-ack!=0'\ntcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes\n18:47:10.998761 IP (tos 0x10, ttl 64, id 23027, offset 0, flags [DF], proto TCP (6), length 164)\n\n    10.0.4.8.ssh > 111.18.5.47.8452: Flags [P.], cksum 0x82df (incorrect -> 0x3eec), seq 96990242:96990366, ack 1856675240, win 83, length 124\n18:47:11.032067 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    111.18.5.47.8452 > 10.0.4.8.ssh: Flags [.], cksum 0x86f1 (correct), seq 1, ack 0, win 32579, length 0\n18:47:11.043267 IP (tos 0x1c, ttl 249, id 8009, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54339 > 10.0.4.8.https: Flags [.], cksum 0xa0b6 (correct), seq 252872041, ack 855940619, win 65535, length 0\n18:47:11.043320 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54339: Flags [R], cksum 0x353e (correct), seq 855940619, win 0, length 0\n18:47:11.053616 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    111.18.5.47.8452 > 10.0.4.8.ssh: Flags [.], cksum 0x8676 (correct), seq 1, ack 124, win 32578, length 0\n18:47:11.081297 IP (tos 0x10, ttl 64, id 23028, offset 0, flags [DF], proto TCP (6), length 172)\n    10.0.4.8.ssh > 111.18.5.47.8452: Flags [P.], cksum 0x82e7 (incorrect -> 0x965f), seq 124:256, ack 1, win 83, length 132\n18:47:11.081595 IP (tos 0x0, ttl 64, id 12233, offset 0, flags [DF], proto UDP (17), length 70)\n    10.0.4.8.51812 > 183.60.83.19.domain: [bad udp cksum 0x189b -> 0xd360!] 24857+ PTR? 47.5.18.111.in-addr.arpa. (42)\n18:47:11.117741 IP (tos 0x1c, ttl 249, id 57452, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54340 > 10.0.4.8.https: Flags [.], cksum 0xcd05 (correct), seq 1279984176, ack 855947195, win 65535, length 0\n18:47:11.117792 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54340: Flags [R], cksum 0x1b8d (correct), seq 855947195, win 0, length 0\n18:47:11.138039 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    111.18.5.47.8452 > 10.0.4.8.ssh: Flags [.], cksum 0x85f3 (correct), seq 1, ack 256, win 32577, length 0\n18:47:11.192735 IP (tos 0x1c, ttl 249, id 22872, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54341 > 10.0.4.8.https: Flags [.], cksum 0x94a7 (correct), seq 1967847389, ack 855953771, win 65535, length 0\n18:47:11.192787 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54341: Flags [R], cksum 0x01dc (correct), seq 855953771, win 0, length 0\n18:47:11.268178 IP (tos 0x1c, ttl 249, id 1432, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54342 > 10.0.4.8.https: Flags [.], cksum 0x7592 (correct), seq 1082733059, ack 855960347, win 65535, length 0\n18:47:11.268235 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54342: Flags [R], cksum 0xe82a (correct), seq 855960347, win 0, length 0\n18:47:11.342841 IP (tos 0x1c, ttl 249, id 3667, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54343 > 10.0.4.8.https: Flags [.], cksum 0x39c7 (correct), seq 1302021899, ack 855966923, win 65535, length 0\n18:47:11.342894 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54343: Flags [R], cksum 0xce79 (correct), seq 855966923, win 0, length 0\n18:47:11.416171 IP (tos 0x1c, ttl 249, id 17285, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.249.190.54344 > 10.0.4.8.https: Flags [.], cksum 0x9d47 (correct), seq 473889590, ack 855973499, win 65535, length 0\n18:47:11.416224 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.249.190.54344: Flags [R], cksum 0xb4c8 (correct), seq 855973499, win 0, length 0\n18:47:12.184512 IP (tos 0x60, ttl 247, id 56471, offset 0, flags [none], proto TCP (6), length 40)\n    203.205.159.40.42283 > 10.0.4.8.https: Flags [.], cksum 0x9787 (correct), seq 2042582601, ack 1236197041, win 65535, length 0\n18:47:12.184583 IP (tos 0x60, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)\n    10.0.4.8.https > 203.205.159.40.42283: Flags [R], cksum 0x679c (correct), seq 1236197041, win 0, length 0\n18:47:12.400485 IP (tos 0x0, ttl 64, id 37593, offset 0, flags [DF], proto TCP (6), length 108)\n^C    10.0.4.8.ssh > 157.245.69.244.56074: Flags [P.], cksum 0xf24f (incorrect -> 0x79f5), seq 397565160:397565228, ack 201251358, win 84, length 68\n\n21 packets captured\n1061 packets received by filter\n961 packets dropped by kernel\n```\n\n##### 用法来源：\n\n>按照tcp中划分的字节位来划分\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065122.png)\n\n#### 导出wireshark包：\n\n```shell\ntcpdump -i eth0 -w test.cap/test.pcap\n```\n\n导出后可以直接用wireshark打开，查看具体情况：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065536.png)\n\n### Reference\n\n* [→ tcpdump official](https://www.tcpdump.org/index.html#documentation)\n* [→ tcpdump learn](https://wizardzines.com/zines/tcpdump/)\n* [→ tcpdump cheat sheet](https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/)\n* [→ tcpdump advanced filters](https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/)\n\n\n\n","slug":"84-tcpdump-wireshark","published":1,"updated":"2022-09-15T09:16:56.173Z","_id":"cl82u8d5s004szfqxcygg8d42","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://zh.wikipedia.org/wiki/Tcpdump\">☞ tcpdump：</a>命令行下的转包工具。</p>\n<span id=\"more\"></span>\n<h3 id=\"官方定义\"><a class=\"header-anchor\" href=\"#官方定义\">¶</a>官方定义</h3>\n<p><a href=\"https://www.tcpdump.org/\">→ tcpdump官网</a></p>\n<h3 id=\"使用场景\"><a class=\"header-anchor\" href=\"#使用场景\">¶</a>使用场景</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -s 数据包的大小 port代表端口</span><br><span class=\"line\">tcpdump  -s <span class=\"number\">0</span> port <span class=\"number\">443</span></span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -vvv -i eth0 </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_061422.png\" alt=\"\"><br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_062657.png\" alt=\"\"><br>\n…<br>\n…<br>\n…</p>\n<ul>\n<li>查看端口流量</li>\n<li>抓取指定端口数据包，可用wireshark分析</li>\n<li>icmp/tcp/udp等抓包分析</li>\n<li>…</li>\n</ul>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">¶</a>基本用法</h3>\n<h4 id=\"help用法\"><a class=\"header-anchor\" href=\"#help用法\">¶</a>help用法</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-4-8-debian:~# tcpdump --help</span><br><span class=\"line\">tcpdump version 4.99.0</span><br><span class=\"line\">libpcap version 1.10.0 (with TPACKET_V3)</span><br><span class=\"line\">OpenSSL 1.1.1k  25 Mar 2021</span><br><span class=\"line\">Usage: tcpdump [-AbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ] [--count]</span><br><span class=\"line\">\t\t[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]</span><br><span class=\"line\">\t\t[ -i interface ] [ --immediate-mode ] [ -j tstamptype ]</span><br><span class=\"line\">\t\t[ -M secret ] [ --number ] [ --print ] [ -Q in|out|inout ]</span><br><span class=\"line\">\t\t[ -r file ] [ -s snaplen ] [ -T type ] [ --version ]</span><br><span class=\"line\">\t\t[ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ]</span><br><span class=\"line\">\t\t[ --time-stamp-precision precision ] [ --micro ] [ --nano ]</span><br><span class=\"line\">\t\t[ -z postrotate-command ] [ -Z user ] [ expression ]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这么多的用法，不可能一个个说，可以见名知意的就不解释了。</p>\n</blockquote>\n<p>这里有全部的命令行用法：</p>\n<p><a href=\"https://packetlife.net/media/library/12/tcpdump.pdf\">⚡️ tcpdump library</a></p>\n<h4 id=\"常见使用\"><a class=\"header-anchor\" href=\"#常见使用\">¶</a>常见使用</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -e 打印header</span><br><span class=\"line\">tcpdump -e -i eth0  </span><br><span class=\"line\"></span><br><span class=\"line\"># tcp-ack类型的</span><br><span class=\"line\">tcpdump -vv &#x27;tcp-ack!=0&#x27; </span><br></pre></td></tr></table></figure>\n<h4 id=\"高阶用法\"><a class=\"header-anchor\" href=\"#高阶用法\">¶</a>高阶用法</h4>\n<p><a href=\"https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/\">☞ tcpdump advanced</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">root@VM-4-8-debian:~# tcpdump -vv &#x27;tcp-ack!=0&#x27;</span><br><span class=\"line\">tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span><br><span class=\"line\">18:47:10.998761 IP (tos 0x10, ttl 64, id 23027, offset 0, flags [DF], proto TCP (6), length 164)</span><br><span class=\"line\"></span><br><span class=\"line\">    10.0.4.8.ssh &gt; 111.18.5.47.8452: Flags [P.], cksum 0x82df (incorrect -&gt; 0x3eec), seq 96990242:96990366, ack 1856675240, win 83, length 124</span><br><span class=\"line\">18:47:11.032067 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    111.18.5.47.8452 &gt; 10.0.4.8.ssh: Flags [.], cksum 0x86f1 (correct), seq 1, ack 0, win 32579, length 0</span><br><span class=\"line\">18:47:11.043267 IP (tos 0x1c, ttl 249, id 8009, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54339 &gt; 10.0.4.8.https: Flags [.], cksum 0xa0b6 (correct), seq 252872041, ack 855940619, win 65535, length 0</span><br><span class=\"line\">18:47:11.043320 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54339: Flags [R], cksum 0x353e (correct), seq 855940619, win 0, length 0</span><br><span class=\"line\">18:47:11.053616 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    111.18.5.47.8452 &gt; 10.0.4.8.ssh: Flags [.], cksum 0x8676 (correct), seq 1, ack 124, win 32578, length 0</span><br><span class=\"line\">18:47:11.081297 IP (tos 0x10, ttl 64, id 23028, offset 0, flags [DF], proto TCP (6), length 172)</span><br><span class=\"line\">    10.0.4.8.ssh &gt; 111.18.5.47.8452: Flags [P.], cksum 0x82e7 (incorrect -&gt; 0x965f), seq 124:256, ack 1, win 83, length 132</span><br><span class=\"line\">18:47:11.081595 IP (tos 0x0, ttl 64, id 12233, offset 0, flags [DF], proto UDP (17), length 70)</span><br><span class=\"line\">    10.0.4.8.51812 &gt; 183.60.83.19.domain: [bad udp cksum 0x189b -&gt; 0xd360!] 24857+ PTR? 47.5.18.111.in-addr.arpa. (42)</span><br><span class=\"line\">18:47:11.117741 IP (tos 0x1c, ttl 249, id 57452, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54340 &gt; 10.0.4.8.https: Flags [.], cksum 0xcd05 (correct), seq 1279984176, ack 855947195, win 65535, length 0</span><br><span class=\"line\">18:47:11.117792 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54340: Flags [R], cksum 0x1b8d (correct), seq 855947195, win 0, length 0</span><br><span class=\"line\">18:47:11.138039 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    111.18.5.47.8452 &gt; 10.0.4.8.ssh: Flags [.], cksum 0x85f3 (correct), seq 1, ack 256, win 32577, length 0</span><br><span class=\"line\">18:47:11.192735 IP (tos 0x1c, ttl 249, id 22872, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54341 &gt; 10.0.4.8.https: Flags [.], cksum 0x94a7 (correct), seq 1967847389, ack 855953771, win 65535, length 0</span><br><span class=\"line\">18:47:11.192787 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54341: Flags [R], cksum 0x01dc (correct), seq 855953771, win 0, length 0</span><br><span class=\"line\">18:47:11.268178 IP (tos 0x1c, ttl 249, id 1432, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54342 &gt; 10.0.4.8.https: Flags [.], cksum 0x7592 (correct), seq 1082733059, ack 855960347, win 65535, length 0</span><br><span class=\"line\">18:47:11.268235 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54342: Flags [R], cksum 0xe82a (correct), seq 855960347, win 0, length 0</span><br><span class=\"line\">18:47:11.342841 IP (tos 0x1c, ttl 249, id 3667, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54343 &gt; 10.0.4.8.https: Flags [.], cksum 0x39c7 (correct), seq 1302021899, ack 855966923, win 65535, length 0</span><br><span class=\"line\">18:47:11.342894 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54343: Flags [R], cksum 0xce79 (correct), seq 855966923, win 0, length 0</span><br><span class=\"line\">18:47:11.416171 IP (tos 0x1c, ttl 249, id 17285, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54344 &gt; 10.0.4.8.https: Flags [.], cksum 0x9d47 (correct), seq 473889590, ack 855973499, win 65535, length 0</span><br><span class=\"line\">18:47:11.416224 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54344: Flags [R], cksum 0xb4c8 (correct), seq 855973499, win 0, length 0</span><br><span class=\"line\">18:47:12.184512 IP (tos 0x60, ttl 247, id 56471, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.159.40.42283 &gt; 10.0.4.8.https: Flags [.], cksum 0x9787 (correct), seq 2042582601, ack 1236197041, win 65535, length 0</span><br><span class=\"line\">18:47:12.184583 IP (tos 0x60, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.159.40.42283: Flags [R], cksum 0x679c (correct), seq 1236197041, win 0, length 0</span><br><span class=\"line\">18:47:12.400485 IP (tos 0x0, ttl 64, id 37593, offset 0, flags [DF], proto TCP (6), length 108)</span><br><span class=\"line\">^C    10.0.4.8.ssh &gt; 157.245.69.244.56074: Flags [P.], cksum 0xf24f (incorrect -&gt; 0x79f5), seq 397565160:397565228, ack 201251358, win 84, length 68</span><br><span class=\"line\"></span><br><span class=\"line\">21 packets captured</span><br><span class=\"line\">1061 packets received by filter</span><br><span class=\"line\">961 packets dropped by kernel</span><br></pre></td></tr></table></figure>\n<h5 id=\"用法来源：\"><a class=\"header-anchor\" href=\"#用法来源：\">¶</a>用法来源：</h5>\n<blockquote>\n<p>按照tcp中划分的字节位来划分</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065122.png\" alt=\"\"></p>\n<h4 id=\"导出wireshark包：\"><a class=\"header-anchor\" href=\"#导出wireshark包：\">¶</a>导出wireshark包：</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 -w test.cap/test.pcap</span><br></pre></td></tr></table></figure>\n<p>导出后可以直接用wireshark打开，查看具体情况：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065536.png\" alt=\"\"></p>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li><a href=\"https://www.tcpdump.org/index.html#documentation\">→ tcpdump official</a></li>\n<li><a href=\"https://wizardzines.com/zines/tcpdump/\">→ tcpdump learn</a></li>\n<li><a href=\"https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/\">→ tcpdump cheat sheet</a></li>\n<li><a href=\"https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/\">→ tcpdump advanced filters</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://zh.wikipedia.org/wiki/Tcpdump\">☞ tcpdump：</a>命令行下的转包工具。</p>","more":"<h3 id=\"官方定义\"><a class=\"header-anchor\" href=\"#官方定义\">¶</a>官方定义</h3>\n<p><a href=\"https://www.tcpdump.org/\">→ tcpdump官网</a></p>\n<h3 id=\"使用场景\"><a class=\"header-anchor\" href=\"#使用场景\">¶</a>使用场景</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -s 数据包的大小 port代表端口</span><br><span class=\"line\">tcpdump  -s <span class=\"number\">0</span> port <span class=\"number\">443</span></span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -vvv -i eth0 </span><br></pre></td></tr></table></figure>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_061422.png\" alt=\"\"><br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_062657.png\" alt=\"\"><br>\n…<br>\n…<br>\n…</p>\n<ul>\n<li>查看端口流量</li>\n<li>抓取指定端口数据包，可用wireshark分析</li>\n<li>icmp/tcp/udp等抓包分析</li>\n<li>…</li>\n</ul>\n<h3 id=\"基本用法\"><a class=\"header-anchor\" href=\"#基本用法\">¶</a>基本用法</h3>\n<h4 id=\"help用法\"><a class=\"header-anchor\" href=\"#help用法\">¶</a>help用法</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@VM-4-8-debian:~# tcpdump --help</span><br><span class=\"line\">tcpdump version 4.99.0</span><br><span class=\"line\">libpcap version 1.10.0 (with TPACKET_V3)</span><br><span class=\"line\">OpenSSL 1.1.1k  25 Mar 2021</span><br><span class=\"line\">Usage: tcpdump [-AbdDefhHIJKlLnNOpqStuUvxX#] [ -B size ] [ -c count ] [--count]</span><br><span class=\"line\">\t\t[ -C file_size ] [ -E algo:secret ] [ -F file ] [ -G seconds ]</span><br><span class=\"line\">\t\t[ -i interface ] [ --immediate-mode ] [ -j tstamptype ]</span><br><span class=\"line\">\t\t[ -M secret ] [ --number ] [ --print ] [ -Q in|out|inout ]</span><br><span class=\"line\">\t\t[ -r file ] [ -s snaplen ] [ -T type ] [ --version ]</span><br><span class=\"line\">\t\t[ -V file ] [ -w file ] [ -W filecount ] [ -y datalinktype ]</span><br><span class=\"line\">\t\t[ --time-stamp-precision precision ] [ --micro ] [ --nano ]</span><br><span class=\"line\">\t\t[ -z postrotate-command ] [ -Z user ] [ expression ]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这么多的用法，不可能一个个说，可以见名知意的就不解释了。</p>\n</blockquote>\n<p>这里有全部的命令行用法：</p>\n<p><a href=\"https://packetlife.net/media/library/12/tcpdump.pdf\">⚡️ tcpdump library</a></p>\n<h4 id=\"常见使用\"><a class=\"header-anchor\" href=\"#常见使用\">¶</a>常见使用</h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># -e 打印header</span><br><span class=\"line\">tcpdump -e -i eth0  </span><br><span class=\"line\"></span><br><span class=\"line\"># tcp-ack类型的</span><br><span class=\"line\">tcpdump -vv &#x27;tcp-ack!=0&#x27; </span><br></pre></td></tr></table></figure>\n<h4 id=\"高阶用法\"><a class=\"header-anchor\" href=\"#高阶用法\">¶</a>高阶用法</h4>\n<p><a href=\"https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/\">☞ tcpdump advanced</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">root@VM-4-8-debian:~# tcpdump -vv &#x27;tcp-ack!=0&#x27;</span><br><span class=\"line\">tcpdump: listening on eth0, link-type EN10MB (Ethernet), snapshot length 262144 bytes</span><br><span class=\"line\">18:47:10.998761 IP (tos 0x10, ttl 64, id 23027, offset 0, flags [DF], proto TCP (6), length 164)</span><br><span class=\"line\"></span><br><span class=\"line\">    10.0.4.8.ssh &gt; 111.18.5.47.8452: Flags [P.], cksum 0x82df (incorrect -&gt; 0x3eec), seq 96990242:96990366, ack 1856675240, win 83, length 124</span><br><span class=\"line\">18:47:11.032067 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    111.18.5.47.8452 &gt; 10.0.4.8.ssh: Flags [.], cksum 0x86f1 (correct), seq 1, ack 0, win 32579, length 0</span><br><span class=\"line\">18:47:11.043267 IP (tos 0x1c, ttl 249, id 8009, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54339 &gt; 10.0.4.8.https: Flags [.], cksum 0xa0b6 (correct), seq 252872041, ack 855940619, win 65535, length 0</span><br><span class=\"line\">18:47:11.043320 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54339: Flags [R], cksum 0x353e (correct), seq 855940619, win 0, length 0</span><br><span class=\"line\">18:47:11.053616 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    111.18.5.47.8452 &gt; 10.0.4.8.ssh: Flags [.], cksum 0x8676 (correct), seq 1, ack 124, win 32578, length 0</span><br><span class=\"line\">18:47:11.081297 IP (tos 0x10, ttl 64, id 23028, offset 0, flags [DF], proto TCP (6), length 172)</span><br><span class=\"line\">    10.0.4.8.ssh &gt; 111.18.5.47.8452: Flags [P.], cksum 0x82e7 (incorrect -&gt; 0x965f), seq 124:256, ack 1, win 83, length 132</span><br><span class=\"line\">18:47:11.081595 IP (tos 0x0, ttl 64, id 12233, offset 0, flags [DF], proto UDP (17), length 70)</span><br><span class=\"line\">    10.0.4.8.51812 &gt; 183.60.83.19.domain: [bad udp cksum 0x189b -&gt; 0xd360!] 24857+ PTR? 47.5.18.111.in-addr.arpa. (42)</span><br><span class=\"line\">18:47:11.117741 IP (tos 0x1c, ttl 249, id 57452, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54340 &gt; 10.0.4.8.https: Flags [.], cksum 0xcd05 (correct), seq 1279984176, ack 855947195, win 65535, length 0</span><br><span class=\"line\">18:47:11.117792 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54340: Flags [R], cksum 0x1b8d (correct), seq 855947195, win 0, length 0</span><br><span class=\"line\">18:47:11.138039 IP (tos 0x64, ttl 46, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    111.18.5.47.8452 &gt; 10.0.4.8.ssh: Flags [.], cksum 0x85f3 (correct), seq 1, ack 256, win 32577, length 0</span><br><span class=\"line\">18:47:11.192735 IP (tos 0x1c, ttl 249, id 22872, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54341 &gt; 10.0.4.8.https: Flags [.], cksum 0x94a7 (correct), seq 1967847389, ack 855953771, win 65535, length 0</span><br><span class=\"line\">18:47:11.192787 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54341: Flags [R], cksum 0x01dc (correct), seq 855953771, win 0, length 0</span><br><span class=\"line\">18:47:11.268178 IP (tos 0x1c, ttl 249, id 1432, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54342 &gt; 10.0.4.8.https: Flags [.], cksum 0x7592 (correct), seq 1082733059, ack 855960347, win 65535, length 0</span><br><span class=\"line\">18:47:11.268235 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54342: Flags [R], cksum 0xe82a (correct), seq 855960347, win 0, length 0</span><br><span class=\"line\">18:47:11.342841 IP (tos 0x1c, ttl 249, id 3667, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54343 &gt; 10.0.4.8.https: Flags [.], cksum 0x39c7 (correct), seq 1302021899, ack 855966923, win 65535, length 0</span><br><span class=\"line\">18:47:11.342894 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54343: Flags [R], cksum 0xce79 (correct), seq 855966923, win 0, length 0</span><br><span class=\"line\">18:47:11.416171 IP (tos 0x1c, ttl 249, id 17285, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.249.190.54344 &gt; 10.0.4.8.https: Flags [.], cksum 0x9d47 (correct), seq 473889590, ack 855973499, win 65535, length 0</span><br><span class=\"line\">18:47:11.416224 IP (tos 0x1c, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.249.190.54344: Flags [R], cksum 0xb4c8 (correct), seq 855973499, win 0, length 0</span><br><span class=\"line\">18:47:12.184512 IP (tos 0x60, ttl 247, id 56471, offset 0, flags [none], proto TCP (6), length 40)</span><br><span class=\"line\">    203.205.159.40.42283 &gt; 10.0.4.8.https: Flags [.], cksum 0x9787 (correct), seq 2042582601, ack 1236197041, win 65535, length 0</span><br><span class=\"line\">18:47:12.184583 IP (tos 0x60, ttl 64, id 0, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class=\"line\">    10.0.4.8.https &gt; 203.205.159.40.42283: Flags [R], cksum 0x679c (correct), seq 1236197041, win 0, length 0</span><br><span class=\"line\">18:47:12.400485 IP (tos 0x0, ttl 64, id 37593, offset 0, flags [DF], proto TCP (6), length 108)</span><br><span class=\"line\">^C    10.0.4.8.ssh &gt; 157.245.69.244.56074: Flags [P.], cksum 0xf24f (incorrect -&gt; 0x79f5), seq 397565160:397565228, ack 201251358, win 84, length 68</span><br><span class=\"line\"></span><br><span class=\"line\">21 packets captured</span><br><span class=\"line\">1061 packets received by filter</span><br><span class=\"line\">961 packets dropped by kernel</span><br></pre></td></tr></table></figure>\n<h5 id=\"用法来源：\"><a class=\"header-anchor\" href=\"#用法来源：\">¶</a>用法来源：</h5>\n<blockquote>\n<p>按照tcp中划分的字节位来划分</p>\n</blockquote>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065122.png\" alt=\"\"></p>\n<h4 id=\"导出wireshark包：\"><a class=\"header-anchor\" href=\"#导出wireshark包：\">¶</a>导出wireshark包：</h4>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcpdump -i eth0 -w test.cap/test.pcap</span><br></pre></td></tr></table></figure>\n<p>导出后可以直接用wireshark打开，查看具体情况：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_065536.png\" alt=\"\"></p>\n<h3 id=\"Reference\"><a class=\"header-anchor\" href=\"#Reference\">¶</a>Reference</h3>\n<ul>\n<li><a href=\"https://www.tcpdump.org/index.html#documentation\">→ tcpdump official</a></li>\n<li><a href=\"https://wizardzines.com/zines/tcpdump/\">→ tcpdump learn</a></li>\n<li><a href=\"https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/\">→ tcpdump cheat sheet</a></li>\n<li><a href=\"https://blog.wains.be/2007/2007-10-01-tcpdump-advanced-filters/\">→ tcpdump advanced filters</a></li>\n</ul>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_061422.png","popularPost_tmp_gaData":{"updated":"Thu Sep 15 2022 17:16:56 GMT+0800 (中国标准时间)","title":"「84」tcpdump & wireshark","path":"archives/a4b12394.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/2022/clipboard_20220203_061422.png","excerpt":"<p><a href=\"https://zh.wikipedia.org/wiki/Tcpdump\">☞ tcpdump：</a>命令行下的转包工具。</p>","date":{"_isAMomentObject":true,"_i":"2022-02-03T10:00:37.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-02-03T10:00:37.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["工具","网络","抓包","tcpdump"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5123},{"title":"「90」kubebuilder","date":"2022-03-29T14:13:29.000Z","abbrlink":"675841d","_content":"\n\n\n作为k8s 官方提供的扩展能力，介绍的就不多说了，看这里 [ ☞ Kubebuilder Quick Start](https://book.kubebuilder.io/quick-start.html)\n\n开干吧：\n\n<!--more-->\n\n### 依赖\n\n### init project初始化\n\n```go\nmkdir project\n\ncd project\n\nkubebuilder init --domain imrcrab.com --repo github.com/crab21/k8s-op --skip-go-version-check\n```\n\n>完成后就可以看到这样的目录结构{可能后续版本变化，结构也会变化}：\n\n```markdown\n# tree -L 10\n.\n├── config\n│   ├── default\n│   │   ├── kustomization.yaml\n│   │   ├── manager_auth_proxy_patch.yaml\n│   │   └── manager_config_patch.yaml\n│   ├── manager\n│   │   ├── controller_manager_config.yaml\n│   │   ├── kustomization.yaml\n│   │   └── manager.yaml\n│   ├── prometheus\n│   │   ├── kustomization.yaml\n│   │   └── monitor.yaml\n│   └── rbac\n│       ├── auth_proxy_client_clusterrole.yaml\n│       ├── auth_proxy_role_binding.yaml\n│       ├── auth_proxy_role.yaml\n│       ├── auth_proxy_service.yaml\n│       ├── kustomization.yaml\n│       ├── leader_election_role_binding.yaml\n│       ├── leader_election_role.yaml\n│       ├── role_binding.yaml\n│       └── service_account.yaml\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── hack\n│   └── boilerplate.go.txt\n├── main.go\n├── Makefile\n└── PROJECT\n\n6 directories, 24 files\n```\n\n### create API\n\n>创建一个g: batch     v:v1    kind: CronJob的API\n\n```markdown\nkubebuilder create api --group batch --version v1 --kind CronJob\n```\n\n>完成后的目录结构{可能会随版本变化而变化}\n\n```markdown\n─# tree -L 10\n.\n├── api\n│   └── v1\n│       ├── cronjob_types.go\n│       ├── groupversion_info.go\n│       └── zz_generated.deepcopy.go\n├── bin\n│   └── controller-gen\n├── config\n│   ├── crd\n│   │   ├── kustomization.yaml\n│   │   ├── kustomizeconfig.yaml\n│   │   └── patches\n│   │       ├── cainjection_in_cronjobs.yaml\n│   │       └── webhook_in_cronjobs.yaml\n│   ├── default\n│   │   ├── kustomization.yaml\n│   │   ├── manager_auth_proxy_patch.yaml\n│   │   └── manager_config_patch.yaml\n│   ├── manager\n│   │   ├── controller_manager_config.yaml\n│   │   ├── kustomization.yaml\n│   │   └── manager.yaml\n│   ├── prometheus\n│   │   ├── kustomization.yaml\n│   │   └── monitor.yaml\n│   ├── rbac\n│   │   ├── auth_proxy_client_clusterrole.yaml\n│   │   ├── auth_proxy_role_binding.yaml\n│   │   ├── auth_proxy_role.yaml\n│   │   ├── auth_proxy_service.yaml\n│   │   ├── cronjob_editor_role.yaml\n│   │   ├── cronjob_viewer_role.yaml\n│   │   ├── kustomization.yaml\n│   │   ├── leader_election_role_binding.yaml\n│   │   ├── leader_election_role.yaml\n│   │   ├── role_binding.yaml\n│   │   └── service_account.yaml\n│   └── samples\n│       └── batch_v1_cronjob.yaml\n├── controllers\n│   ├── cronjob_controller.go\n│   └── suite_test.go\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── hack\n│   └── boilerplate.go.txt\n├── main.go\n├── Makefile\n└── PROJECT\n\n13 directories, 37 files\n```","source":"_posts/90-kubebuilder.md","raw":"---\ntitle: 「90」kubebuilder\ndate: '2022/03/29 22:13:29'\ntags:\n  - k8s\n  - operator\n  - kubebuilder\nabbrlink: 675841d\n---\n\n\n\n作为k8s 官方提供的扩展能力，介绍的就不多说了，看这里 [ ☞ Kubebuilder Quick Start](https://book.kubebuilder.io/quick-start.html)\n\n开干吧：\n\n<!--more-->\n\n### 依赖\n\n### init project初始化\n\n```go\nmkdir project\n\ncd project\n\nkubebuilder init --domain imrcrab.com --repo github.com/crab21/k8s-op --skip-go-version-check\n```\n\n>完成后就可以看到这样的目录结构{可能后续版本变化，结构也会变化}：\n\n```markdown\n# tree -L 10\n.\n├── config\n│   ├── default\n│   │   ├── kustomization.yaml\n│   │   ├── manager_auth_proxy_patch.yaml\n│   │   └── manager_config_patch.yaml\n│   ├── manager\n│   │   ├── controller_manager_config.yaml\n│   │   ├── kustomization.yaml\n│   │   └── manager.yaml\n│   ├── prometheus\n│   │   ├── kustomization.yaml\n│   │   └── monitor.yaml\n│   └── rbac\n│       ├── auth_proxy_client_clusterrole.yaml\n│       ├── auth_proxy_role_binding.yaml\n│       ├── auth_proxy_role.yaml\n│       ├── auth_proxy_service.yaml\n│       ├── kustomization.yaml\n│       ├── leader_election_role_binding.yaml\n│       ├── leader_election_role.yaml\n│       ├── role_binding.yaml\n│       └── service_account.yaml\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── hack\n│   └── boilerplate.go.txt\n├── main.go\n├── Makefile\n└── PROJECT\n\n6 directories, 24 files\n```\n\n### create API\n\n>创建一个g: batch     v:v1    kind: CronJob的API\n\n```markdown\nkubebuilder create api --group batch --version v1 --kind CronJob\n```\n\n>完成后的目录结构{可能会随版本变化而变化}\n\n```markdown\n─# tree -L 10\n.\n├── api\n│   └── v1\n│       ├── cronjob_types.go\n│       ├── groupversion_info.go\n│       └── zz_generated.deepcopy.go\n├── bin\n│   └── controller-gen\n├── config\n│   ├── crd\n│   │   ├── kustomization.yaml\n│   │   ├── kustomizeconfig.yaml\n│   │   └── patches\n│   │       ├── cainjection_in_cronjobs.yaml\n│   │       └── webhook_in_cronjobs.yaml\n│   ├── default\n│   │   ├── kustomization.yaml\n│   │   ├── manager_auth_proxy_patch.yaml\n│   │   └── manager_config_patch.yaml\n│   ├── manager\n│   │   ├── controller_manager_config.yaml\n│   │   ├── kustomization.yaml\n│   │   └── manager.yaml\n│   ├── prometheus\n│   │   ├── kustomization.yaml\n│   │   └── monitor.yaml\n│   ├── rbac\n│   │   ├── auth_proxy_client_clusterrole.yaml\n│   │   ├── auth_proxy_role_binding.yaml\n│   │   ├── auth_proxy_role.yaml\n│   │   ├── auth_proxy_service.yaml\n│   │   ├── cronjob_editor_role.yaml\n│   │   ├── cronjob_viewer_role.yaml\n│   │   ├── kustomization.yaml\n│   │   ├── leader_election_role_binding.yaml\n│   │   ├── leader_election_role.yaml\n│   │   ├── role_binding.yaml\n│   │   └── service_account.yaml\n│   └── samples\n│       └── batch_v1_cronjob.yaml\n├── controllers\n│   ├── cronjob_controller.go\n│   └── suite_test.go\n├── Dockerfile\n├── go.mod\n├── go.sum\n├── hack\n│   └── boilerplate.go.txt\n├── main.go\n├── Makefile\n└── PROJECT\n\n13 directories, 37 files\n```","slug":"90-kubebuilder","published":1,"updated":"2022-09-15T09:16:56.174Z","_id":"cl82u8d5t004uzfqx9cpm91x8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>作为k8s 官方提供的扩展能力，介绍的就不多说了，看这里 <a href=\"https://book.kubebuilder.io/quick-start.html\"> ☞ Kubebuilder Quick Start</a></p>\n<p>开干吧：</p>\n<span id=\"more\"></span>\n<h3 id=\"依赖\"><a class=\"header-anchor\" href=\"#依赖\">¶</a>依赖</h3>\n<h3 id=\"init-project初始化\"><a class=\"header-anchor\" href=\"#init-project初始化\">¶</a>init project初始化</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir project</span><br><span class=\"line\"></span><br><span class=\"line\">cd project</span><br><span class=\"line\"></span><br><span class=\"line\">kubebuilder init --domain imrcrab.com --repo github.com/crab21/k8s-op --skip-<span class=\"keyword\">go</span>-version-check</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完成后就可以看到这样的目录结构{可能后续版本变化，结构也会变化}：</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># tree -L 10</span></span><br><span class=\"line\">.</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── default</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   ├── manager<span class=\"emphasis\">_auth_</span>proxy<span class=\"emphasis\">_patch.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── manager_</span>config<span class=\"emphasis\">_patch.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── manager</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── controller_</span>manager<span class=\"emphasis\">_config.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── manager.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── prometheus</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── monitor.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── rbac</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── auth_</span>proxy<span class=\"emphasis\">_client_</span>clusterrole.yaml</span><br><span class=\"line\">│       ├── auth<span class=\"emphasis\">_proxy_</span>role<span class=\"emphasis\">_binding.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── auth_</span>proxy<span class=\"emphasis\">_role.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── auth_</span>proxy<span class=\"emphasis\">_service.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── leader_</span>election<span class=\"emphasis\">_role_</span>binding.yaml</span><br><span class=\"line\">│       ├── leader<span class=\"emphasis\">_election_</span>role.yaml</span><br><span class=\"line\">│       ├── role<span class=\"emphasis\">_binding.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       └── service_</span>account.yaml</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── hack</span><br><span class=\"line\">│   └── boilerplate.go.txt</span><br><span class=\"line\">├── main.go</span><br><span class=\"line\">├── Makefile</span><br><span class=\"line\">└── PROJECT</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 24 files</span><br></pre></td></tr></table></figure>\n<h3 id=\"create-API\"><a class=\"header-anchor\" href=\"#create-API\">¶</a>create API</h3>\n<blockquote>\n<p>创建一个g: batch     v:v1    kind: CronJob的API</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubebuilder create api --group batch --version v1 --kind CronJob</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完成后的目录结构{可能会随版本变化而变化}</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">─# tree -L 10</span><br><span class=\"line\">.</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── v1</span><br><span class=\"line\">│       ├── cronjob<span class=\"emphasis\">_types.go</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── groupversion_</span>info.go</span><br><span class=\"line\">│       └── zz<span class=\"emphasis\">_generated.deepcopy.go</span></span><br><span class=\"line\"><span class=\"emphasis\">├── bin</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── controller-gen</span></span><br><span class=\"line\"><span class=\"emphasis\">├── config</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── crd</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomizeconfig.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── patches</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │       ├── cainjection_</span>in<span class=\"emphasis\">_cronjobs.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │       └── webhook_</span>in<span class=\"emphasis\">_cronjobs.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── default</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── manager_</span>auth<span class=\"emphasis\">_proxy_</span>patch.yaml</span><br><span class=\"line\">│   │   └── manager<span class=\"emphasis\">_config_</span>patch.yaml</span><br><span class=\"line\">│   ├── manager</span><br><span class=\"line\">│   │   ├── controller<span class=\"emphasis\">_manager_</span>config.yaml</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   └── manager.yaml</span><br><span class=\"line\">│   ├── prometheus</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   └── monitor.yaml</span><br><span class=\"line\">│   ├── rbac</span><br><span class=\"line\">│   │   ├── auth<span class=\"emphasis\">_proxy_</span>client<span class=\"emphasis\">_clusterrole.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── auth_</span>proxy<span class=\"emphasis\">_role_</span>binding.yaml</span><br><span class=\"line\">│   │   ├── auth<span class=\"emphasis\">_proxy_</span>role.yaml</span><br><span class=\"line\">│   │   ├── auth<span class=\"emphasis\">_proxy_</span>service.yaml</span><br><span class=\"line\">│   │   ├── cronjob<span class=\"emphasis\">_editor_</span>role.yaml</span><br><span class=\"line\">│   │   ├── cronjob<span class=\"emphasis\">_viewer_</span>role.yaml</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   ├── leader<span class=\"emphasis\">_election_</span>role<span class=\"emphasis\">_binding.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── leader_</span>election<span class=\"emphasis\">_role.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── role_</span>binding.yaml</span><br><span class=\"line\">│   │   └── service<span class=\"emphasis\">_account.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── samples</span></span><br><span class=\"line\"><span class=\"emphasis\">│       └── batch_</span>v1<span class=\"emphasis\">_cronjob.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">├── controllers</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── cronjob_</span>controller.go</span><br><span class=\"line\">│   └── suite<span class=\"emphasis\">_test.go</span></span><br><span class=\"line\"><span class=\"emphasis\">├── Dockerfile</span></span><br><span class=\"line\"><span class=\"emphasis\">├── go.mod</span></span><br><span class=\"line\"><span class=\"emphasis\">├── go.sum</span></span><br><span class=\"line\"><span class=\"emphasis\">├── hack</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── boilerplate.go.txt</span></span><br><span class=\"line\"><span class=\"emphasis\">├── main.go</span></span><br><span class=\"line\"><span class=\"emphasis\">├── Makefile</span></span><br><span class=\"line\"><span class=\"emphasis\">└── PROJECT</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">13 directories, 37 files</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>作为k8s 官方提供的扩展能力，介绍的就不多说了，看这里 <a href=\"https://book.kubebuilder.io/quick-start.html\"> ☞ Kubebuilder Quick Start</a></p>\n<p>开干吧：</p>","more":"<h3 id=\"依赖\"><a class=\"header-anchor\" href=\"#依赖\">¶</a>依赖</h3>\n<h3 id=\"init-project初始化\"><a class=\"header-anchor\" href=\"#init-project初始化\">¶</a>init project初始化</h3>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir project</span><br><span class=\"line\"></span><br><span class=\"line\">cd project</span><br><span class=\"line\"></span><br><span class=\"line\">kubebuilder init --domain imrcrab.com --repo github.com/crab21/k8s-op --skip-<span class=\"keyword\">go</span>-version-check</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完成后就可以看到这样的目录结构{可能后续版本变化，结构也会变化}：</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># tree -L 10</span></span><br><span class=\"line\">.</span><br><span class=\"line\">├── config</span><br><span class=\"line\">│   ├── default</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   ├── manager<span class=\"emphasis\">_auth_</span>proxy<span class=\"emphasis\">_patch.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── manager_</span>config<span class=\"emphasis\">_patch.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── manager</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── controller_</span>manager<span class=\"emphasis\">_config.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── manager.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── prometheus</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── monitor.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── rbac</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── auth_</span>proxy<span class=\"emphasis\">_client_</span>clusterrole.yaml</span><br><span class=\"line\">│       ├── auth<span class=\"emphasis\">_proxy_</span>role<span class=\"emphasis\">_binding.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── auth_</span>proxy<span class=\"emphasis\">_role.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── auth_</span>proxy<span class=\"emphasis\">_service.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── leader_</span>election<span class=\"emphasis\">_role_</span>binding.yaml</span><br><span class=\"line\">│       ├── leader<span class=\"emphasis\">_election_</span>role.yaml</span><br><span class=\"line\">│       ├── role<span class=\"emphasis\">_binding.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│       └── service_</span>account.yaml</span><br><span class=\"line\">├── Dockerfile</span><br><span class=\"line\">├── go.mod</span><br><span class=\"line\">├── go.sum</span><br><span class=\"line\">├── hack</span><br><span class=\"line\">│   └── boilerplate.go.txt</span><br><span class=\"line\">├── main.go</span><br><span class=\"line\">├── Makefile</span><br><span class=\"line\">└── PROJECT</span><br><span class=\"line\"></span><br><span class=\"line\">6 directories, 24 files</span><br></pre></td></tr></table></figure>\n<h3 id=\"create-API\"><a class=\"header-anchor\" href=\"#create-API\">¶</a>create API</h3>\n<blockquote>\n<p>创建一个g: batch     v:v1    kind: CronJob的API</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubebuilder create api --group batch --version v1 --kind CronJob</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>完成后的目录结构{可能会随版本变化而变化}</p>\n</blockquote>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">─# tree -L 10</span><br><span class=\"line\">.</span><br><span class=\"line\">├── api</span><br><span class=\"line\">│   └── v1</span><br><span class=\"line\">│       ├── cronjob<span class=\"emphasis\">_types.go</span></span><br><span class=\"line\"><span class=\"emphasis\">│       ├── groupversion_</span>info.go</span><br><span class=\"line\">│       └── zz<span class=\"emphasis\">_generated.deepcopy.go</span></span><br><span class=\"line\"><span class=\"emphasis\">├── bin</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── controller-gen</span></span><br><span class=\"line\"><span class=\"emphasis\">├── config</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── crd</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomizeconfig.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   └── patches</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │       ├── cainjection_</span>in<span class=\"emphasis\">_cronjobs.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │       └── webhook_</span>in<span class=\"emphasis\">_cronjobs.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── default</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── kustomization.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── manager_</span>auth<span class=\"emphasis\">_proxy_</span>patch.yaml</span><br><span class=\"line\">│   │   └── manager<span class=\"emphasis\">_config_</span>patch.yaml</span><br><span class=\"line\">│   ├── manager</span><br><span class=\"line\">│   │   ├── controller<span class=\"emphasis\">_manager_</span>config.yaml</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   └── manager.yaml</span><br><span class=\"line\">│   ├── prometheus</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   └── monitor.yaml</span><br><span class=\"line\">│   ├── rbac</span><br><span class=\"line\">│   │   ├── auth<span class=\"emphasis\">_proxy_</span>client<span class=\"emphasis\">_clusterrole.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── auth_</span>proxy<span class=\"emphasis\">_role_</span>binding.yaml</span><br><span class=\"line\">│   │   ├── auth<span class=\"emphasis\">_proxy_</span>role.yaml</span><br><span class=\"line\">│   │   ├── auth<span class=\"emphasis\">_proxy_</span>service.yaml</span><br><span class=\"line\">│   │   ├── cronjob<span class=\"emphasis\">_editor_</span>role.yaml</span><br><span class=\"line\">│   │   ├── cronjob<span class=\"emphasis\">_viewer_</span>role.yaml</span><br><span class=\"line\">│   │   ├── kustomization.yaml</span><br><span class=\"line\">│   │   ├── leader<span class=\"emphasis\">_election_</span>role<span class=\"emphasis\">_binding.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── leader_</span>election<span class=\"emphasis\">_role.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   │   ├── role_</span>binding.yaml</span><br><span class=\"line\">│   │   └── service<span class=\"emphasis\">_account.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── samples</span></span><br><span class=\"line\"><span class=\"emphasis\">│       └── batch_</span>v1<span class=\"emphasis\">_cronjob.yaml</span></span><br><span class=\"line\"><span class=\"emphasis\">├── controllers</span></span><br><span class=\"line\"><span class=\"emphasis\">│   ├── cronjob_</span>controller.go</span><br><span class=\"line\">│   └── suite<span class=\"emphasis\">_test.go</span></span><br><span class=\"line\"><span class=\"emphasis\">├── Dockerfile</span></span><br><span class=\"line\"><span class=\"emphasis\">├── go.mod</span></span><br><span class=\"line\"><span class=\"emphasis\">├── go.sum</span></span><br><span class=\"line\"><span class=\"emphasis\">├── hack</span></span><br><span class=\"line\"><span class=\"emphasis\">│   └── boilerplate.go.txt</span></span><br><span class=\"line\"><span class=\"emphasis\">├── main.go</span></span><br><span class=\"line\"><span class=\"emphasis\">├── Makefile</span></span><br><span class=\"line\"><span class=\"emphasis\">└── PROJECT</span></span><br><span class=\"line\"><span class=\"emphasis\"></span></span><br><span class=\"line\"><span class=\"emphasis\">13 directories, 37 files</span></span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Sep 15 2022 17:16:56 GMT+0800 (中国标准时间)","title":"「90」kubebuilder","path":"archives/675841d.html","eyeCatchImage":null,"excerpt":"<p>作为k8s 官方提供的扩展能力，介绍的就不多说了，看这里 <a href=\"https://book.kubebuilder.io/quick-start.html\"> ☞ Kubebuilder Quick Start</a></p>\n<p>开干吧：</p>","date":{"_isAMomentObject":true,"_i":"2022-03-29T14:13:29.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-03-29T14:13:29.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["k8s","operator","kubebuilder"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2152},{"title":"「9」Go reflect ~ DeepEqual","date":"2020-09-18T04:35:03.000Z","updated":"2020-09-20T08:16:52.000Z","abbrlink":"e2e7cc4e","_content":"\n今天无意中看到Go101发了一个推特:\n``` go\npackage main\n\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc p(a, b interface{}) {\n  fmt.Print(\":\", reflect.DeepEqual(a, b))\n}\n\nfunc main() {\n  a := [1]func(){func(){}}\n  p(a, a)\n  p(a[:], a[:])\n  b := a\n  p(a[:], b[:])\n}\n```\n\n>输出结果？？ :true:true:false\n\n<!-- more -->\n\n>正确答案 :false:true:false\n\n### 错误来源\n\n```\n第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).\n第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。\n第三个虽然是重新初始化了，所以两个肯定不是deep相等的。\n```\n\n### 思路比对（错在哪里）\n\n查阅文档之后，发现理解错了：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200918-124746.png)\n\n\n\n### DeepEqual正确理解\n>源码也很简洁：\n\n```go\nfunc DeepEqual(x, y interface{}) bool {\n  //同nil\n\tif x == nil || y == nil {\n\t\treturn x == y\n\t}\n\tv1 := ValueOf(x)\n  v2 := ValueOf(y)\n  //属于同一类型\n\tif v1.Type() != v2.Type() {\n\t\treturn false\n\t}\n\treturn deepValueEqual(v1, v2, make(map[visit]bool), 0)\n}\n```\n\n除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：\n\n```go\n// DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.\n// Two values of identical type are deeply equal if one of the following cases applies.\n// Values of distinct types are never deeply equal.\n//  条件：数组深度相等，相应的元素都是相等的。\n// Array values are deeply equal when their corresponding elements are deeply equal.\n//  条件：结构体相对应的字段都是相等的。\n// Struct values are deeply equal if their corresponding fields,\n// both exported and unexported, are deeply equal.\n// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。\n// Func values are deeply equal if both are nil; otherwise they are not deeply equal.\n// \n// 条件：两个interface持有深度相同的值。\n// Interface values are deeply equal if they hold deeply equal concrete values.\n//\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度并且有相同的对象/key对应的值是相等的。\n// Map values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they are the same map object or their corresponding keys\n// (matched using Go equality) map to deeply equal values.\n    条件：用 == 比较或者 point的\n// Pointer values are deeply equal if they are equal using Go's == operator\n// or if they point to deeply equal values.\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。\n    注意：empty和nil slice不是深度相等的。\n// Slice values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they point to the same initial entry of the same underlying array\n// (that is, &x[0] == &y[0]) or their corresponding elements (up to length) are deeply equal.\n// Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))\n// are not deeply equal.\n//\n// Other values - numbers, bools, strings, and channels - are deeply equal\n// if they are equal using Go's == operator.\n//\n// In general DeepEqual is a recursive relaxation of Go's == operator.\n// However, this idea is impossible to implement without some inconsistency.\n// Specifically, it is possible for a value to be unequal to itself,\n// either because it is of func type (uncomparable in general)\n// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),\n// or because it is an array, struct, or interface containing\n// such a value.\n// On the other hand, pointer values are always equal to themselves,\n// even if they point at or contain such problematic values,\n// because they compare equal using Go's == operator, and that\n// is a sufficient condition to be deeply equal, regardless of content.\n// DeepEqual has been defined so that the same short-cut applies\n// to slices and maps: if x and y are the same slice or the same map,\n// they are deeply equal regardless of content.\n//\n// As DeepEqual traverses the data values it may find a cycle. The\n// second and subsequent times that DeepEqual compares two pointer\n// values that have been compared before, it treats the values as\n// equal rather than examining the values to which they point.\n// This ensures that DeepEqual terminates.\n```\n\n再看看详细的deepValueEqual,大致的过程：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200920-103516@2x.png)\n\n\n>大致分为三个过程：\n```\n1、判断类型和值\n2、hard回调\n3、按照kind分类处理\n```\n\n#### 数组：\n比较每一个元素\n```go\n    for i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n#### Slice\n* 比较为nil\n* 比较长度\n* 比较地址\n* 比较每一个元素\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Interface\n* 比较nil\n* 递归比较\n```go\n    if v1.IsNil() || v2.IsNil() {\n\t\t\treturn v1.IsNil() == v2.IsNil()\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n#### Ptr\n* 地址\n* 递归比较\n```go\n    if v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n\n#### struct\n* 比较每一个元素\n```go\n    for i, n := 0, v1.NumField(); i < n; i++ {\n\t\t\tif !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Map\n* 比较Nil\n* 比较长度\n* 地址比较\n* 每一个key对应的value\n\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor _, k := range v1.MapKeys() {\n\t\t\tval1 := v1.MapIndex(k)\n\t\t\tval2 := v2.MapIndex(k)\n\t\t\tif !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Func\n* 非nil，为不等。\n```go\n    if v1.IsNil() && v2.IsNil() {\n\t\t\treturn true\n\t\t}\n\t\t// Can't do better than this:\n\t\treturn false\n```\n\n### painc注意点：\n deepValueEqual函数：\n```go\n  .....\n  ....\n  ...\n  ..\n  .\n  递归次数超过10次则会painc....\n  // if depth > 10 { panic(\"deepValueEqual\") }\t// for debugging\n\n\t// We want to avoid putting more in the visited map than we need to.\n\t// For any possible reference cycle that might be encountered,\n\t// hard(v1, v2) needs to return true for at least one of the types in the cycle,\n\t// and it's safe and valid to get Value's internal pointer.\n\thard := func(v1, v2 Value) bool {\n\t\tswitch v1.Kind() {\n\t\tcase Map, Slice, Ptr, Interface:\n\t\t\t// Nil pointers cannot be cyclic. Avoid putting them in the visited map.\n\t\t\treturn !v1.IsNil() && !v2.IsNil()\n\t\t}\n\t\treturn false\n  }\n  .\n  ..\n  ...\n  ....\n  .....\n  ......\n```\n### END","source":"_posts/9-Go-reflect-DeepEqual.md","raw":"---\ntitle: 「9」Go reflect ~ DeepEqual\ndate: '2020/09/18 12:35:03'\nupdated: '2020/09/20 16:16:52'\ntags:\n  - Go\n  - Go reflect\n  - Go Package\n  - Day\nabbrlink: e2e7cc4e\n---\n\n今天无意中看到Go101发了一个推特:\n``` go\npackage main\n\nimport (\n  \"fmt\"\n  \"reflect\"\n)\n\nfunc p(a, b interface{}) {\n  fmt.Print(\":\", reflect.DeepEqual(a, b))\n}\n\nfunc main() {\n  a := [1]func(){func(){}}\n  p(a, a)\n  p(a[:], a[:])\n  b := a\n  p(a[:], b[:])\n}\n```\n\n>输出结果？？ :true:true:false\n\n<!-- more -->\n\n>正确答案 :false:true:false\n\n### 错误来源\n\n```\n第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).\n第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。\n第三个虽然是重新初始化了，所以两个肯定不是deep相等的。\n```\n\n### 思路比对（错在哪里）\n\n查阅文档之后，发现理解错了：\n\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200918-124746.png)\n\n\n\n### DeepEqual正确理解\n>源码也很简洁：\n\n```go\nfunc DeepEqual(x, y interface{}) bool {\n  //同nil\n\tif x == nil || y == nil {\n\t\treturn x == y\n\t}\n\tv1 := ValueOf(x)\n  v2 := ValueOf(y)\n  //属于同一类型\n\tif v1.Type() != v2.Type() {\n\t\treturn false\n\t}\n\treturn deepValueEqual(v1, v2, make(map[visit]bool), 0)\n}\n```\n\n除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：\n\n```go\n// DeepEqual reports whether x and y are ``deeply equal,'' defined as follows.\n// Two values of identical type are deeply equal if one of the following cases applies.\n// Values of distinct types are never deeply equal.\n//  条件：数组深度相等，相应的元素都是相等的。\n// Array values are deeply equal when their corresponding elements are deeply equal.\n//  条件：结构体相对应的字段都是相等的。\n// Struct values are deeply equal if their corresponding fields,\n// both exported and unexported, are deeply equal.\n// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。\n// Func values are deeply equal if both are nil; otherwise they are not deeply equal.\n// \n// 条件：两个interface持有深度相同的值。\n// Interface values are deeply equal if they hold deeply equal concrete values.\n//\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度并且有相同的对象/key对应的值是相等的。\n// Map values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they are the same map object or their corresponding keys\n// (matched using Go equality) map to deeply equal values.\n    条件：用 == 比较或者 point的\n// Pointer values are deeply equal if they are equal using Go's == operator\n// or if they point to deeply equal values.\n    条件：下面条件为true，则深度相等：\n    两个全是nil，或者全non-nil，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。\n    注意：empty和nil slice不是深度相等的。\n// Slice values are deeply equal when all of the following are true:\n// they are both nil or both non-nil, they have the same length,\n// and either they point to the same initial entry of the same underlying array\n// (that is, &x[0] == &y[0]) or their corresponding elements (up to length) are deeply equal.\n// Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil))\n// are not deeply equal.\n//\n// Other values - numbers, bools, strings, and channels - are deeply equal\n// if they are equal using Go's == operator.\n//\n// In general DeepEqual is a recursive relaxation of Go's == operator.\n// However, this idea is impossible to implement without some inconsistency.\n// Specifically, it is possible for a value to be unequal to itself,\n// either because it is of func type (uncomparable in general)\n// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),\n// or because it is an array, struct, or interface containing\n// such a value.\n// On the other hand, pointer values are always equal to themselves,\n// even if they point at or contain such problematic values,\n// because they compare equal using Go's == operator, and that\n// is a sufficient condition to be deeply equal, regardless of content.\n// DeepEqual has been defined so that the same short-cut applies\n// to slices and maps: if x and y are the same slice or the same map,\n// they are deeply equal regardless of content.\n//\n// As DeepEqual traverses the data values it may find a cycle. The\n// second and subsequent times that DeepEqual compares two pointer\n// values that have been compared before, it treats the values as\n// equal rather than examining the values to which they point.\n// This ensures that DeepEqual terminates.\n```\n\n再看看详细的deepValueEqual,大致的过程：\n![](https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200920-103516@2x.png)\n\n\n>大致分为三个过程：\n```\n1、判断类型和值\n2、hard回调\n3、按照kind分类处理\n```\n\n#### 数组：\n比较每一个元素\n```go\n    for i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n#### Slice\n* 比较为nil\n* 比较长度\n* 比较地址\n* 比较每一个元素\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor i := 0; i < v1.Len(); i++ {\n\t\t\tif !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Interface\n* 比较nil\n* 递归比较\n```go\n    if v1.IsNil() || v2.IsNil() {\n\t\t\treturn v1.IsNil() == v2.IsNil()\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n#### Ptr\n* 地址\n* 递归比较\n```go\n    if v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\treturn deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+1)\n```\n\n#### struct\n* 比较每一个元素\n```go\n    for i, n := 0, v1.NumField(); i < n; i++ {\n\t\t\tif !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Map\n* 比较Nil\n* 比较长度\n* 地址比较\n* 每一个key对应的value\n\n```go\n    if v1.IsNil() != v2.IsNil() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Len() != v2.Len() {\n\t\t\treturn false\n\t\t}\n\t\tif v1.Pointer() == v2.Pointer() {\n\t\t\treturn true\n\t\t}\n\t\tfor _, k := range v1.MapKeys() {\n\t\t\tval1 := v1.MapIndex(k)\n\t\t\tval2 := v2.MapIndex(k)\n\t\t\tif !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+1) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n```\n\n#### Func\n* 非nil，为不等。\n```go\n    if v1.IsNil() && v2.IsNil() {\n\t\t\treturn true\n\t\t}\n\t\t// Can't do better than this:\n\t\treturn false\n```\n\n### painc注意点：\n deepValueEqual函数：\n```go\n  .....\n  ....\n  ...\n  ..\n  .\n  递归次数超过10次则会painc....\n  // if depth > 10 { panic(\"deepValueEqual\") }\t// for debugging\n\n\t// We want to avoid putting more in the visited map than we need to.\n\t// For any possible reference cycle that might be encountered,\n\t// hard(v1, v2) needs to return true for at least one of the types in the cycle,\n\t// and it's safe and valid to get Value's internal pointer.\n\thard := func(v1, v2 Value) bool {\n\t\tswitch v1.Kind() {\n\t\tcase Map, Slice, Ptr, Interface:\n\t\t\t// Nil pointers cannot be cyclic. Avoid putting them in the visited map.\n\t\t\treturn !v1.IsNil() && !v2.IsNil()\n\t\t}\n\t\treturn false\n  }\n  .\n  ..\n  ...\n  ....\n  .....\n  ......\n```\n### END","slug":"9-Go-reflect-DeepEqual","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cl82u8d6j00aczfqxgam49sgy","content":"<p>今天无意中看到Go101发了一个推特:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">p</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">&quot;:&quot;</span>, reflect.DeepEqual(a, b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">1</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;&#125;&#125;</span><br><span class=\"line\">  p(a, a)</span><br><span class=\"line\">  p(a[:], a[:])</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  p(a[:], b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出结果？？ :true:true:false</p>\n</blockquote>\n<span id=\"more\"></span>\n<blockquote>\n<p>正确答案 :false:true:false</p>\n</blockquote>\n<h3 id=\"错误来源\"><a class=\"header-anchor\" href=\"#错误来源\">¶</a>错误来源</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).</span><br><span class=\"line\">第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。</span><br><span class=\"line\">第三个虽然是重新初始化了，所以两个肯定不是deep相等的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路比对（错在哪里）\"><a class=\"header-anchor\" href=\"#思路比对（错在哪里）\">¶</a>思路比对（错在哪里）</h3>\n<p>查阅文档之后，发现理解错了：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200918-124746.png\" alt=\"\"></p>\n<h3 id=\"DeepEqual正确理解\"><a class=\"header-anchor\" href=\"#DeepEqual正确理解\">¶</a>DeepEqual正确理解</h3>\n<blockquote>\n<p>源码也很简洁：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeepEqual</span><span class=\"params\">(x, y <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//同nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"literal\">nil</span> || y == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x == y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv1 := ValueOf(x)</span><br><span class=\"line\">  v2 := ValueOf(y)</span><br><span class=\"line\">  <span class=\"comment\">//属于同一类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v1.Type() != v2.Type() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> deepValueEqual(v1, v2, <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[visit]<span class=\"type\">bool</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DeepEqual reports whether x and y are ``deeply equal,&#x27;&#x27; defined as follows.</span></span><br><span class=\"line\"><span class=\"comment\">// Two values of identical type are deeply equal if one of the following cases applies.</span></span><br><span class=\"line\"><span class=\"comment\">// Values of distinct types are never deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：数组深度相等，相应的元素都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Array values are deeply equal when their corresponding elements are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：结构体相对应的字段都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Struct values are deeply equal if their corresponding fields,</span></span><br><span class=\"line\"><span class=\"comment\">// both exported and unexported, are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Func values are deeply equal if both are nil; otherwise they are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// 条件：两个interface持有深度相同的值。</span></span><br><span class=\"line\"><span class=\"comment\">// Interface values are deeply equal if they hold deeply equal concrete values.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度并且有相同的对象/key对应的值是相等的。</span><br><span class=\"line\"><span class=\"comment\">// Map values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they are the same map object or their corresponding keys</span></span><br><span class=\"line\"><span class=\"comment\">// (matched using Go equality) map to deeply equal values.</span></span><br><span class=\"line\">    条件：用 == 比较或者 point的</span><br><span class=\"line\"><span class=\"comment\">// Pointer values are deeply equal if they are equal using Go&#x27;s == operator</span></span><br><span class=\"line\"><span class=\"comment\">// or if they point to deeply equal values.</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。</span><br><span class=\"line\">    注意：empty和<span class=\"literal\">nil</span> slice不是深度相等的。</span><br><span class=\"line\"><span class=\"comment\">// Slice values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they point to the same initial entry of the same underlying array</span></span><br><span class=\"line\"><span class=\"comment\">// (that is, &amp;x[0] == &amp;y[0]) or their corresponding elements (up to length) are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that a non-nil empty slice and a nil slice (for example, []byte&#123;&#125; and []byte(nil))</span></span><br><span class=\"line\"><span class=\"comment\">// are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Other values - numbers, bools, strings, and channels - are deeply equal</span></span><br><span class=\"line\"><span class=\"comment\">// if they are equal using Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In general DeepEqual is a recursive relaxation of Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">// However, this idea is impossible to implement without some inconsistency.</span></span><br><span class=\"line\"><span class=\"comment\">// Specifically, it is possible for a value to be unequal to itself,</span></span><br><span class=\"line\"><span class=\"comment\">// either because it is of func type (uncomparable in general)</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is an array, struct, or interface containing</span></span><br><span class=\"line\"><span class=\"comment\">// such a value.</span></span><br><span class=\"line\"><span class=\"comment\">// On the other hand, pointer values are always equal to themselves,</span></span><br><span class=\"line\"><span class=\"comment\">// even if they point at or contain such problematic values,</span></span><br><span class=\"line\"><span class=\"comment\">// because they compare equal using Go&#x27;s == operator, and that</span></span><br><span class=\"line\"><span class=\"comment\">// is a sufficient condition to be deeply equal, regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">// DeepEqual has been defined so that the same short-cut applies</span></span><br><span class=\"line\"><span class=\"comment\">// to slices and maps: if x and y are the same slice or the same map,</span></span><br><span class=\"line\"><span class=\"comment\">// they are deeply equal regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// As DeepEqual traverses the data values it may find a cycle. The</span></span><br><span class=\"line\"><span class=\"comment\">// second and subsequent times that DeepEqual compares two pointer</span></span><br><span class=\"line\"><span class=\"comment\">// values that have been compared before, it treats the values as</span></span><br><span class=\"line\"><span class=\"comment\">// equal rather than examining the values to which they point.</span></span><br><span class=\"line\"><span class=\"comment\">// This ensures that DeepEqual terminates.</span></span><br></pre></td></tr></table></figure>\n<p>再看看详细的deepValueEqual,大致的过程：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200920-103516@2x.png\" alt=\"\"></p>\n<blockquote>\n<p>大致分为三个过程：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、判断类型和值</span><br><span class=\"line\">2、hard回调</span><br><span class=\"line\">3、按照kind分类处理</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组：\"><a class=\"header-anchor\" href=\"#数组：\">¶</a>数组：</h4>\n<p>比较每一个元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Slice\"><a class=\"header-anchor\" href=\"#Slice\">¶</a>Slice</h4>\n<ul>\n<li>比较为nil</li>\n<li>比较长度</li>\n<li>比较地址</li>\n<li>比较每一个元素</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Interface\"><a class=\"header-anchor\" href=\"#Interface\">¶</a>Interface</h4>\n<ul>\n<li>比较nil</li>\n<li>递归比较</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() || v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.IsNil() == v2.IsNil()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ptr\"><a class=\"header-anchor\" href=\"#Ptr\">¶</a>Ptr</h4>\n<ul>\n<li>地址</li>\n<li>递归比较</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"struct\"><a class=\"header-anchor\" href=\"#struct\">¶</a>struct</h4>\n<ul>\n<li>比较每一个元素</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i, n := <span class=\"number\">0</span>, v1.NumField(); i &lt; n; i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Map\"><a class=\"header-anchor\" href=\"#Map\">¶</a>Map</h4>\n<ul>\n<li>比较Nil</li>\n<li>比较长度</li>\n<li>地址比较</li>\n<li>每一个key对应的value</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, k := <span class=\"keyword\">range</span> v1.MapKeys() &#123;</span><br><span class=\"line\">\tval1 := v1.MapIndex(k)</span><br><span class=\"line\">\tval2 := v2.MapIndex(k)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Func\"><a class=\"header-anchor\" href=\"#Func\">¶</a>Func</h4>\n<ul>\n<li>非nil，为不等。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() &amp;&amp; v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Can&#x27;t do better than this:</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"painc注意点：\"><a class=\"header-anchor\" href=\"#painc注意点：\">¶</a>painc注意点：</h3>\n<p>deepValueEqual函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .....</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> .</span><br><span class=\"line\"> 递归次数超过<span class=\"number\">10</span>次则会painc....</span><br><span class=\"line\"> <span class=\"comment\">// if depth &gt; 10 &#123; panic(&quot;deepValueEqual&quot;) &#125;\t// for debugging</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We want to avoid putting more in the visited map than we need to.</span></span><br><span class=\"line\"><span class=\"comment\">// For any possible reference cycle that might be encountered,</span></span><br><span class=\"line\"><span class=\"comment\">// hard(v1, v2) needs to return true for at least one of the types in the cycle,</span></span><br><span class=\"line\"><span class=\"comment\">// and it&#x27;s safe and valid to get Value&#x27;s internal pointer.</span></span><br><span class=\"line\">hard := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(v1, v2 Value)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v1.Kind() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Map, Slice, Ptr, Interface:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Nil pointers cannot be cyclic. Avoid putting them in the visited map.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !v1.IsNil() &amp;&amp; !v2.IsNil()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> .....</span><br><span class=\"line\"> ......</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>\n","site":{"data":{}},"excerpt":"<p>今天无意中看到Go101发了一个推特:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">p</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">&quot;:&quot;</span>, reflect.DeepEqual(a, b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">1</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;&#125;&#125;</span><br><span class=\"line\">  p(a, a)</span><br><span class=\"line\">  p(a[:], a[:])</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  p(a[:], b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出结果？？ :true:true:false</p>\n</blockquote>","more":"<blockquote>\n<p>正确答案 :false:true:false</p>\n</blockquote>\n<h3 id=\"错误来源\"><a class=\"header-anchor\" href=\"#错误来源\">¶</a>错误来源</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一个为啥想着为true,第一眼看过去，比较两个a的函数，那两个函数肯定是相等的，这是第一直觉(狗屁直觉).</span><br><span class=\"line\">第二个两个都为nil了，这个是没有什么问题，两个nil肯定是deep相等的。</span><br><span class=\"line\">第三个虽然是重新初始化了，所以两个肯定不是deep相等的。</span><br></pre></td></tr></table></figure>\n<h3 id=\"思路比对（错在哪里）\"><a class=\"header-anchor\" href=\"#思路比对（错在哪里）\">¶</a>思路比对（错在哪里）</h3>\n<p>查阅文档之后，发现理解错了：</p>\n<p><img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200918-124746.png\" alt=\"\"></p>\n<h3 id=\"DeepEqual正确理解\"><a class=\"header-anchor\" href=\"#DeepEqual正确理解\">¶</a>DeepEqual正确理解</h3>\n<blockquote>\n<p>源码也很简洁：</p>\n</blockquote>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">DeepEqual</span><span class=\"params\">(x, y <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//同nil</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x == <span class=\"literal\">nil</span> || y == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x == y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv1 := ValueOf(x)</span><br><span class=\"line\">  v2 := ValueOf(y)</span><br><span class=\"line\">  <span class=\"comment\">//属于同一类型</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v1.Type() != v2.Type() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> deepValueEqual(v1, v2, <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[visit]<span class=\"type\">bool</span>), <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了上面看源码，主要还是要看官方的文档和说明性的，这个算是理解源码的前提把：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DeepEqual reports whether x and y are ``deeply equal,&#x27;&#x27; defined as follows.</span></span><br><span class=\"line\"><span class=\"comment\">// Two values of identical type are deeply equal if one of the following cases applies.</span></span><br><span class=\"line\"><span class=\"comment\">// Values of distinct types are never deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：数组深度相等，相应的元素都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Array values are deeply equal when their corresponding elements are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//  条件：结构体相对应的字段都是相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Struct values are deeply equal if their corresponding fields,</span></span><br><span class=\"line\"><span class=\"comment\">// both exported and unexported, are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// 条件：函数都是nil，则为深度相等，其它情况下都是不相等的。</span></span><br><span class=\"line\"><span class=\"comment\">// Func values are deeply equal if both are nil; otherwise they are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"comment\">// 条件：两个interface持有深度相同的值。</span></span><br><span class=\"line\"><span class=\"comment\">// Interface values are deeply equal if they hold deeply equal concrete values.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度并且有相同的对象/key对应的值是相等的。</span><br><span class=\"line\"><span class=\"comment\">// Map values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they are the same map object or their corresponding keys</span></span><br><span class=\"line\"><span class=\"comment\">// (matched using Go equality) map to deeply equal values.</span></span><br><span class=\"line\">    条件：用 == 比较或者 point的</span><br><span class=\"line\"><span class=\"comment\">// Pointer values are deeply equal if they are equal using Go&#x27;s == operator</span></span><br><span class=\"line\"><span class=\"comment\">// or if they point to deeply equal values.</span></span><br><span class=\"line\">    条件：下面条件为<span class=\"literal\">true</span>，则深度相等：</span><br><span class=\"line\">    两个全是<span class=\"literal\">nil</span>，或者全non-<span class=\"literal\">nil</span>，有相同的长度，指向相同的初始化节点（即：相同的数组）或相同的元素深度相等。</span><br><span class=\"line\">    注意：empty和<span class=\"literal\">nil</span> slice不是深度相等的。</span><br><span class=\"line\"><span class=\"comment\">// Slice values are deeply equal when all of the following are true:</span></span><br><span class=\"line\"><span class=\"comment\">// they are both nil or both non-nil, they have the same length,</span></span><br><span class=\"line\"><span class=\"comment\">// and either they point to the same initial entry of the same underlying array</span></span><br><span class=\"line\"><span class=\"comment\">// (that is, &amp;x[0] == &amp;y[0]) or their corresponding elements (up to length) are deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">// Note that a non-nil empty slice and a nil slice (for example, []byte&#123;&#125; and []byte(nil))</span></span><br><span class=\"line\"><span class=\"comment\">// are not deeply equal.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Other values - numbers, bools, strings, and channels - are deeply equal</span></span><br><span class=\"line\"><span class=\"comment\">// if they are equal using Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// In general DeepEqual is a recursive relaxation of Go&#x27;s == operator.</span></span><br><span class=\"line\"><span class=\"comment\">// However, this idea is impossible to implement without some inconsistency.</span></span><br><span class=\"line\"><span class=\"comment\">// Specifically, it is possible for a value to be unequal to itself,</span></span><br><span class=\"line\"><span class=\"comment\">// either because it is of func type (uncomparable in general)</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is a floating-point NaN value (not equal to itself in floating-point comparison),</span></span><br><span class=\"line\"><span class=\"comment\">// or because it is an array, struct, or interface containing</span></span><br><span class=\"line\"><span class=\"comment\">// such a value.</span></span><br><span class=\"line\"><span class=\"comment\">// On the other hand, pointer values are always equal to themselves,</span></span><br><span class=\"line\"><span class=\"comment\">// even if they point at or contain such problematic values,</span></span><br><span class=\"line\"><span class=\"comment\">// because they compare equal using Go&#x27;s == operator, and that</span></span><br><span class=\"line\"><span class=\"comment\">// is a sufficient condition to be deeply equal, regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">// DeepEqual has been defined so that the same short-cut applies</span></span><br><span class=\"line\"><span class=\"comment\">// to slices and maps: if x and y are the same slice or the same map,</span></span><br><span class=\"line\"><span class=\"comment\">// they are deeply equal regardless of content.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// As DeepEqual traverses the data values it may find a cycle. The</span></span><br><span class=\"line\"><span class=\"comment\">// second and subsequent times that DeepEqual compares two pointer</span></span><br><span class=\"line\"><span class=\"comment\">// values that have been compared before, it treats the values as</span></span><br><span class=\"line\"><span class=\"comment\">// equal rather than examining the values to which they point.</span></span><br><span class=\"line\"><span class=\"comment\">// This ensures that DeepEqual terminates.</span></span><br></pre></td></tr></table></figure>\n<p>再看看详细的deepValueEqual,大致的过程：<br>\n<img src=\"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200920-103516@2x.png\" alt=\"\"></p>\n<blockquote>\n<p>大致分为三个过程：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、判断类型和值</span><br><span class=\"line\">2、hard回调</span><br><span class=\"line\">3、按照kind分类处理</span><br></pre></td></tr></table></figure>\n<h4 id=\"数组：\"><a class=\"header-anchor\" href=\"#数组：\">¶</a>数组：</h4>\n<p>比较每一个元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Slice\"><a class=\"header-anchor\" href=\"#Slice\">¶</a>Slice</h4>\n<ul>\n<li>比较为nil</li>\n<li>比较长度</li>\n<li>比较地址</li>\n<li>比较每一个元素</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; v1.Len(); i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Index(i), v2.Index(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Interface\"><a class=\"header-anchor\" href=\"#Interface\">¶</a>Interface</h4>\n<ul>\n<li>比较nil</li>\n<li>递归比较</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() || v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> v1.IsNil() == v2.IsNil()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ptr\"><a class=\"header-anchor\" href=\"#Ptr\">¶</a>Ptr</h4>\n<ul>\n<li>地址</li>\n<li>递归比较</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> deepValueEqual(v1.Elem(), v2.Elem(), visited, depth+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"struct\"><a class=\"header-anchor\" href=\"#struct\">¶</a>struct</h4>\n<ul>\n<li>比较每一个元素</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">for</span> i, n := <span class=\"number\">0</span>, v1.NumField(); i &lt; n; i++ &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !deepValueEqual(v1.Field(i), v2.Field(i), visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Map\"><a class=\"header-anchor\" href=\"#Map\">¶</a>Map</h4>\n<ul>\n<li>比较Nil</li>\n<li>比较长度</li>\n<li>地址比较</li>\n<li>每一个key对应的value</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() != v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Len() != v2.Len() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> v1.Pointer() == v2.Pointer() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, k := <span class=\"keyword\">range</span> v1.MapKeys() &#123;</span><br><span class=\"line\">\tval1 := v1.MapIndex(k)</span><br><span class=\"line\">\tval2 := v2.MapIndex(k)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !val1.IsValid() || !val2.IsValid() || !deepValueEqual(val1, val2, visited, depth+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Func\"><a class=\"header-anchor\" href=\"#Func\">¶</a>Func</h4>\n<ul>\n<li>非nil，为不等。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> v1.IsNil() &amp;&amp; v2.IsNil() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Can&#x27;t do better than this:</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"painc注意点：\"><a class=\"header-anchor\" href=\"#painc注意点：\">¶</a>painc注意点：</h3>\n<p>deepValueEqual函数：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .....</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> .</span><br><span class=\"line\"> 递归次数超过<span class=\"number\">10</span>次则会painc....</span><br><span class=\"line\"> <span class=\"comment\">// if depth &gt; 10 &#123; panic(&quot;deepValueEqual&quot;) &#125;\t// for debugging</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// We want to avoid putting more in the visited map than we need to.</span></span><br><span class=\"line\"><span class=\"comment\">// For any possible reference cycle that might be encountered,</span></span><br><span class=\"line\"><span class=\"comment\">// hard(v1, v2) needs to return true for at least one of the types in the cycle,</span></span><br><span class=\"line\"><span class=\"comment\">// and it&#x27;s safe and valid to get Value&#x27;s internal pointer.</span></span><br><span class=\"line\">hard := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(v1, v2 Value)</span></span> <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> v1.Kind() &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> Map, Slice, Ptr, Interface:</span><br><span class=\"line\">\t\t<span class=\"comment\">// Nil pointers cannot be cyclic. Avoid putting them in the visited map.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> !v1.IsNil() &amp;&amp; !v2.IsNil()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> .</span><br><span class=\"line\"> ..</span><br><span class=\"line\"> ...</span><br><span class=\"line\"> ....</span><br><span class=\"line\"> .....</span><br><span class=\"line\"> ......</span><br></pre></td></tr></table></figure>\n<h3 id=\"END\"><a class=\"header-anchor\" href=\"#END\">¶</a>END</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200918-124746.png","popularPost_tmp_gaData":{"updated":"Sun Sep 20 2020 16:16:52 GMT+0800 (中国标准时间)","title":"「9」Go reflect ~ DeepEqual","path":"archives/e2e7cc4e.html","eyeCatchImage":"https://crab-1251738482.cos.ap-guangzhou.myqcloud.com/20200918-124746.png","excerpt":"<p>今天无意中看到Go101发了一个推特:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;reflect&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">p</span><span class=\"params\">(a, b <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">  fmt.Print(<span class=\"string\">&quot;:&quot;</span>, reflect.DeepEqual(a, b))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  a := [<span class=\"number\">1</span>]<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;&#125;&#125;</span><br><span class=\"line\">  p(a, a)</span><br><span class=\"line\">  p(a[:], a[:])</span><br><span class=\"line\">  b := a</span><br><span class=\"line\">  p(a[:], b[:])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输出结果？？ :true:true:false</p>\n</blockquote>","date":{"_isAMomentObject":true,"_i":"2020-09-18T04:35:03.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2020-09-18T04:35:03.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":["Go","Go Package","Day","Go reflect"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5557},{"title":"「91」regex","abbrlink":"ff6a07f","date":"2022-08-15T11:10:16.000Z","_content":"\n### 场景：vscode\n```\n搜索空白：\n^\\s*(?=\\r?$)\\n\n\n\n删除某些字符所在的行：\n^.*(string1|string2|string3).*\\n\n\n```\n","source":"_posts/91-regex.md","raw":"---\ntitle: 「91」regex\nabbrlink: ff6a07f\ndate: 2022-08-15 19:10:16\ntags:\n---\n\n### 场景：vscode\n```\n搜索空白：\n^\\s*(?=\\r?$)\\n\n\n\n删除某些字符所在的行：\n^.*(string1|string2|string3).*\\n\n\n```\n","slug":"91-regex","published":1,"updated":"2022-09-15T09:16:56.174Z","_id":"cl82u8d6k00adzfqx8meb5n6e","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"场景：vscode\"><a class=\"header-anchor\" href=\"#场景：vscode\">¶</a>场景：vscode</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搜索空白：</span><br><span class=\"line\">^\\s*(?=\\r?$)\\n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">删除某些字符所在的行：</span><br><span class=\"line\">^.*(string1|string2|string3).*\\n</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"场景：vscode\"><a class=\"header-anchor\" href=\"#场景：vscode\">¶</a>场景：vscode</h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">搜索空白：</span><br><span class=\"line\">^\\s*(?=\\r?$)\\n</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">删除某些字符所在的行：</span><br><span class=\"line\">^.*(string1|string2|string3).*\\n</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Sep 15 2022 17:16:56 GMT+0800 (中国标准时间)","title":"「91」regex","path":"archives/ff6a07f.html","eyeCatchImage":null,"excerpt":null,"date":{"_isAMomentObject":true,"_i":"2022-08-15T11:10:16.000Z","_isUTC":false,"_pf":{"empty":false,"unusedTokens":[],"unusedInput":[],"overflow":-2,"charsLeftOver":0,"nullInput":false,"invalidEra":null,"invalidMonth":null,"invalidFormat":false,"userInvalidated":false,"iso":false,"parsedDateParts":[],"era":null,"meridiem":null,"rfc2822":false,"weekdayMismatch":false},"_locale":{"_calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"_longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"_invalidDate":"Invalid date","_dayOfMonthOrdinalParse":{},"_relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"_months":["January","February","March","April","May","June","July","August","September","October","November","December"],"_monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"_week":{"dow":0,"doy":6},"_weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"_weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"_weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"_meridiemParse":{},"_eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"_abbr":"en","_config":{"calendar":{"sameDay":"[Today at] LT","nextDay":"[Tomorrow at] LT","nextWeek":"dddd [at] LT","lastDay":"[Yesterday at] LT","lastWeek":"[Last] dddd [at] LT","sameElse":"L"},"longDateFormat":{"LTS":"h:mm:ss A","LT":"h:mm A","L":"MM/DD/YYYY","LL":"MMMM D, YYYY","LLL":"MMMM D, YYYY h:mm A","LLLL":"dddd, MMMM D, YYYY h:mm A"},"invalidDate":"Invalid date","dayOfMonthOrdinalParse":{},"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","ss":"%d seconds","m":"a minute","mm":"%d minutes","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","w":"a week","ww":"%d weeks","M":"a month","MM":"%d months","y":"a year","yy":"%d years"},"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"week":{"dow":0,"doy":6},"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysMin":["Su","Mo","Tu","We","Th","Fr","Sa"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"meridiemParse":{},"eras":[{"since":"0001-01-01","until":null,"offset":1,"name":"Anno Domini","narrow":"AD","abbr":"AD"},{"since":"0000-12-31","until":null,"offset":1,"name":"Before Christ","narrow":"BC","abbr":"BC"}],"abbr":"en"},"_dayOfMonthOrdinalParseLenient":{}},"_d":"2022-08-15T11:10:16.000Z","_isValid":true,"_z":null},"pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":79}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cl82u8d470003zfqx6wzfdhtz","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d4h000hzfqxb3ds7yoi"},{"post_id":"cl82u8d470003zfqx6wzfdhtz","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d4h000jzfqx1dxyawol"},{"post_id":"cl82u8d470003zfqx6wzfdhtz","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d4i000mzfqx190k2hef"},{"post_id":"cl82u8d4a0004zfqx1mhu9dir","tag_id":"cl82u8d4g000fzfqxhaf5fkxf","_id":"cl82u8d4j000qzfqx7vb95v8y"},{"post_id":"cl82u8d4a0004zfqx1mhu9dir","tag_id":"cl82u8d4h000kzfqxc6lx5irv","_id":"cl82u8d4k000szfqx1wqu3tf2"},{"post_id":"cl82u8d4e000bzfqxesgmf653","tag_id":"cl82u8d4j000pzfqxcn710knp","_id":"cl82u8d4m000zzfqx32bkapqb"},{"post_id":"cl82u8d4e000bzfqxesgmf653","tag_id":"cl82u8d4k000uzfqxdofq5bfi","_id":"cl82u8d4n0011zfqxaxgy6p4a"},{"post_id":"cl82u8d4f000dzfqx6tbjax9x","tag_id":"cl82u8d4l000xzfqx3d1l762d","_id":"cl82u8d4p0017zfqx0zpggvmk"},{"post_id":"cl82u8d4f000dzfqx6tbjax9x","tag_id":"cl82u8d4n0012zfqxc1bibo4t","_id":"cl82u8d4p0019zfqxf8b1gv52"},{"post_id":"cl82u8d4p0018zfqx8lhf7dv0","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d4q001czfqxa6kw9a32"},{"post_id":"cl82u8d4p0018zfqx8lhf7dv0","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d4q001ezfqxhz0n5g76"},{"post_id":"cl82u8d4p0018zfqx8lhf7dv0","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d4r001hzfqxa0qvh4co"},{"post_id":"cl82u8d4p001azfqx19i3d46l","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d4s001jzfqx5qdj47uj"},{"post_id":"cl82u8d4p001azfqx19i3d46l","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d4t001mzfqxeoiofpby"},{"post_id":"cl82u8d4p001azfqx19i3d46l","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d4u001ozfqx8z8ychdo"},{"post_id":"cl82u8d4f000ezfqxdeyb1x4g","tag_id":"cl82u8d4o0016zfqx0fnq7m1m","_id":"cl82u8d4u001qzfqx12g87h49"},{"post_id":"cl82u8d4f000ezfqxdeyb1x4g","tag_id":"cl82u8d4q001bzfqxgfce7vyv","_id":"cl82u8d4v001tzfqxf7cmf6hf"},{"post_id":"cl82u8d4h000izfqxb8sn4hxi","tag_id":"cl82u8d4r001gzfqxethk2hav","_id":"cl82u8d4v001vzfqx16as7khk"},{"post_id":"cl82u8d4s001kzfqxfcppblt3","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d4w001yzfqxea7k6385"},{"post_id":"cl82u8d4s001kzfqxfcppblt3","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d4x0020zfqx28vo4eu2"},{"post_id":"cl82u8d4s001kzfqxfcppblt3","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d4x0023zfqx2evufo5k"},{"post_id":"cl82u8d4t001nzfqx4u7498g9","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d4y0025zfqx49qpf2cu"},{"post_id":"cl82u8d4t001nzfqx4u7498g9","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d4z0028zfqx9qabgqaj"},{"post_id":"cl82u8d4t001nzfqx4u7498g9","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d50002azfqx1gbs9zsu"},{"post_id":"cl82u8d4u001pzfqx8qp7hvu4","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d50002czfqx0kaje19x"},{"post_id":"cl82u8d4u001pzfqx8qp7hvu4","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d51002fzfqx36i1ef17"},{"post_id":"cl82u8d4u001pzfqx8qp7hvu4","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d52002hzfqxfro14rmg"},{"post_id":"cl82u8d4h000lzfqx658g7i94","tag_id":"cl82u8d4t001lzfqxgfchgque","_id":"cl82u8d54002kzfqxdmk1cabl"},{"post_id":"cl82u8d4u001rzfqx0ctn3rag","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d54002mzfqxc0brgvwc"},{"post_id":"cl82u8d4u001rzfqx0ctn3rag","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d55002pzfqx3ltwdawq"},{"post_id":"cl82u8d4u001rzfqx0ctn3rag","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d56002rzfqx1v2k8q4t"},{"post_id":"cl82u8d4j000rzfqx1a5p8173","tag_id":"cl82u8d4u001szfqx8fzufnzf","_id":"cl82u8d57002uzfqx7fwig70q"},{"post_id":"cl82u8d4y0024zfqxarcr4n5t","tag_id":"cl82u8d4r001gzfqxethk2hav","_id":"cl82u8d57002wzfqx5z1g12uj"},{"post_id":"cl82u8d4k000tzfqx7fqv5pa9","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d58002zzfqxev515lgd"},{"post_id":"cl82u8d4k000tzfqx7fqv5pa9","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d590031zfqx3eu2632u"},{"post_id":"cl82u8d4k000tzfqx7fqv5pa9","tag_id":"cl82u8d4w001xzfqxepw07t9f","_id":"cl82u8d590033zfqx72397tcs"},{"post_id":"cl82u8d4k000tzfqx7fqv5pa9","tag_id":"cl82u8d4x0022zfqxgj8u22vn","_id":"cl82u8d5a0036zfqxaw8e2vh3"},{"post_id":"cl82u8d4k000vzfqx9d2afxr9","tag_id":"cl82u8d4z0027zfqxarth1lzd","_id":"cl82u8d5b0038zfqx3lw8680h"},{"post_id":"cl82u8d4k000vzfqx9d2afxr9","tag_id":"cl82u8d51002ezfqx7shj4glf","_id":"cl82u8d5c003bzfqx13p2a58g"},{"post_id":"cl82u8d4l000wzfqx4dp56nyi","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5d003dzfqx3mhw6yej"},{"post_id":"cl82u8d4l000wzfqx4dp56nyi","tag_id":"cl82u8d4w001xzfqxepw07t9f","_id":"cl82u8d5e003gzfqx0teqfxpw"},{"post_id":"cl82u8d4l000wzfqx4dp56nyi","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5e003izfqxa5rk82mq"},{"post_id":"cl82u8d57002vzfqx05egdjzv","tag_id":"cl82u8d4r001gzfqxethk2hav","_id":"cl82u8d5g003lzfqx9lxec5ly"},{"post_id":"cl82u8d590032zfqx93kn554y","tag_id":"cl82u8d4r001gzfqxethk2hav","_id":"cl82u8d5g003nzfqx5ak6eo28"},{"post_id":"cl82u8d590032zfqx93kn554y","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5h003qzfqxczts61pa"},{"post_id":"cl82u8d4m000yzfqx66k5atn2","tag_id":"cl82u8d56002tzfqx1op3980h","_id":"cl82u8d5i003szfqxarf38kpc"},{"post_id":"cl82u8d4m000yzfqx66k5atn2","tag_id":"cl82u8d58002yzfqx4gm848py","_id":"cl82u8d5j003vzfqxe35s593h"},{"post_id":"cl82u8d4m0010zfqxfs4ie3nw","tag_id":"cl82u8d4z0027zfqxarth1lzd","_id":"cl82u8d5j003xzfqx4rln5l8m"},{"post_id":"cl82u8d5d003ezfqxeg628vwa","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d5k0040zfqx39glbeb5"},{"post_id":"cl82u8d5d003ezfqxeg628vwa","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5l0042zfqxh43k2ygq"},{"post_id":"cl82u8d5d003ezfqxeg628vwa","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5m0045zfqxg32k264q"},{"post_id":"cl82u8d5d003ezfqxeg628vwa","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d5m0047zfqx9a8s7xv9"},{"post_id":"cl82u8d5e003hzfqxgti1chs1","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d5n0049zfqx8xc8a2f6"},{"post_id":"cl82u8d5e003hzfqxgti1chs1","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5o004czfqxay7ahxtw"},{"post_id":"cl82u8d5e003hzfqxgti1chs1","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5o004ezfqxg6fi2qa7"},{"post_id":"cl82u8d5e003hzfqxgti1chs1","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d5p004hzfqx9cxvabc9"},{"post_id":"cl82u8d4n0013zfqxamq75bmz","tag_id":"cl82u8d5c003azfqx3rnx6y2a","_id":"cl82u8d5q004jzfqx7qzx6kz7"},{"post_id":"cl82u8d4n0013zfqxamq75bmz","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5r004mzfqx5iza2u02"},{"post_id":"cl82u8d4n0013zfqxamq75bmz","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5r004ozfqxe4ur6yu0"},{"post_id":"cl82u8d5g003mzfqx6vgohdue","tag_id":"cl82u8d4r001gzfqxethk2hav","_id":"cl82u8d5s004rzfqxda0v0zty"},{"post_id":"cl82u8d4n0014zfqx3ytzgben","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5t004tzfqxh212e6h8"},{"post_id":"cl82u8d4n0014zfqx3ytzgben","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5u004wzfqxdvry8k05"},{"post_id":"cl82u8d5h003rzfqxhae70fsy","tag_id":"cl82u8d4d0009zfqx19j0gox6","_id":"cl82u8d5u004xzfqxebp82jyv"},{"post_id":"cl82u8d5h003rzfqxhae70fsy","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5u004zzfqxfxptbcfj"},{"post_id":"cl82u8d5h003rzfqxhae70fsy","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5u0050zfqx6l31dypb"},{"post_id":"cl82u8d5h003rzfqxhae70fsy","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d5u0052zfqx234bgrw8"},{"post_id":"cl82u8d4o0015zfqxguoyd55p","tag_id":"cl82u8d5h003pzfqxdli105pj","_id":"cl82u8d5v0053zfqx1tyh2wo6"},{"post_id":"cl82u8d4o0015zfqxguoyd55p","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5v0054zfqx2g964h2v"},{"post_id":"cl82u8d5k003yzfqx4aiya7ou","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5v0056zfqx07ulfbez"},{"post_id":"cl82u8d5k003yzfqx4aiya7ou","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5v0057zfqx6yfq403s"},{"post_id":"cl82u8d5k003yzfqx4aiya7ou","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d5w0059zfqxaca4espa"},{"post_id":"cl82u8d5m0046zfqxa5xw4rej","tag_id":"cl82u8d4r001gzfqxethk2hav","_id":"cl82u8d5w005azfqx1d0b7t2f"},{"post_id":"cl82u8d4q001dzfqxewc4co84","tag_id":"cl82u8d5k003zzfqxdyyw6iad","_id":"cl82u8d5w005czfqxf4r21dcj"},{"post_id":"cl82u8d4q001dzfqxewc4co84","tag_id":"cl82u8d5m0044zfqx9u0a4zcm","_id":"cl82u8d5w005dzfqx88x78p2v"},{"post_id":"cl82u8d5p004izfqxdnuseg3k","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5w005fzfqx46oyhvu1"},{"post_id":"cl82u8d5p004izfqxdnuseg3k","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d5w005gzfqx43yz0ymp"},{"post_id":"cl82u8d5p004izfqxdnuseg3k","tag_id":"cl82u8d4w001xzfqxepw07t9f","_id":"cl82u8d5x005izfqx6luv9yoz"},{"post_id":"cl82u8d5p004izfqxdnuseg3k","tag_id":"cl82u8d4x0022zfqxgj8u22vn","_id":"cl82u8d5x005jzfqxhn7pfg49"},{"post_id":"cl82u8d4q001fzfqxfcsf9rfj","tag_id":"cl82u8d5n004bzfqx1njy0wsy","_id":"cl82u8d5x005lzfqxevmjbex3"},{"post_id":"cl82u8d4q001fzfqxfcsf9rfj","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5x005mzfqxcqxtbj4s"},{"post_id":"cl82u8d5q004kzfqx29tkg6q1","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5x005ozfqxdwvohqzg"},{"post_id":"cl82u8d5q004kzfqx29tkg6q1","tag_id":"cl82u8d4w001xzfqxepw07t9f","_id":"cl82u8d5x005pzfqx9fes17je"},{"post_id":"cl82u8d4s001izfqx4y6g5206","tag_id":"cl82u8d56002tzfqx1op3980h","_id":"cl82u8d5y005qzfqxh0k9f7l2"},{"post_id":"cl82u8d4s001izfqx4y6g5206","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5y005szfqx9ud40wdp"},{"post_id":"cl82u8d4v001uzfqxg23i2ef2","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5y005tzfqx8yy1d5mi"},{"post_id":"cl82u8d4v001uzfqxg23i2ef2","tag_id":"cl82u8d5t004vzfqxha5c2dcx","_id":"cl82u8d5y005vzfqxglq8ezxb"},{"post_id":"cl82u8d4v001uzfqxg23i2ef2","tag_id":"cl82u8d5u004yzfqx64c45voa","_id":"cl82u8d5y005wzfqxc2k1akxf"},{"post_id":"cl82u8d4v001wzfqx7evhb9c6","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5y005yzfqxa2hubu6t"},{"post_id":"cl82u8d4v001wzfqx7evhb9c6","tag_id":"cl82u8d5u0051zfqxbbyhbpqx","_id":"cl82u8d5z005zzfqxacwe2ret"},{"post_id":"cl82u8d4v001wzfqx7evhb9c6","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5z0061zfqxafog0swd"},{"post_id":"cl82u8d4w001zzfqx44ys0i5i","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d5z0062zfqxf6yw25j1"},{"post_id":"cl82u8d4w001zzfqx44ys0i5i","tag_id":"cl82u8d5v0058zfqxc5rjhy0w","_id":"cl82u8d5z0064zfqxh0tmha0g"},{"post_id":"cl82u8d4w001zzfqx44ys0i5i","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d5z0065zfqx8fdofg4u"},{"post_id":"cl82u8d4w001zzfqx44ys0i5i","tag_id":"cl82u8d5w005ezfqxaglq3yjc","_id":"cl82u8d5z0067zfqxhgd21c6a"},{"post_id":"cl82u8d4x0021zfqxdnwx5i37","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d600068zfqx8r795s30"},{"post_id":"cl82u8d4x0021zfqxdnwx5i37","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d600069zfqx9rbjgprl"},{"post_id":"cl82u8d4x0021zfqxdnwx5i37","tag_id":"cl82u8d5x005kzfqxgoevdd6j","_id":"cl82u8d60006bzfqxgbbc6m1o"},{"post_id":"cl82u8d4x0021zfqxdnwx5i37","tag_id":"cl82u8d5x005nzfqxal9ycyvv","_id":"cl82u8d60006czfqx7sv2fpx1"},{"post_id":"cl82u8d4y0026zfqx1wy50tnl","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d60006ezfqxcdyf90wp"},{"post_id":"cl82u8d4y0026zfqx1wy50tnl","tag_id":"cl82u8d5y005uzfqx0a0d6h0o","_id":"cl82u8d60006fzfqx41ku596i"},{"post_id":"cl82u8d4y0026zfqx1wy50tnl","tag_id":"cl82u8d5y005xzfqx5gqzgcpf","_id":"cl82u8d60006hzfqx6qy407zp"},{"post_id":"cl82u8d4y0026zfqx1wy50tnl","tag_id":"cl82u8d5z0060zfqx0jww5ys2","_id":"cl82u8d60006izfqxfisvbmdo"},{"post_id":"cl82u8d4z0029zfqxhvklfcd6","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d61006kzfqxec8rhkeb"},{"post_id":"cl82u8d4z0029zfqxhvklfcd6","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d61006lzfqx9wsne8fz"},{"post_id":"cl82u8d4z0029zfqxhvklfcd6","tag_id":"cl82u8d5z0066zfqx2luq5p28","_id":"cl82u8d61006nzfqxh5gx8gm6"},{"post_id":"cl82u8d4z0029zfqxhvklfcd6","tag_id":"cl82u8d60006azfqxftqmhmxh","_id":"cl82u8d61006ozfqxan949r7b"},{"post_id":"cl82u8d4z0029zfqxhvklfcd6","tag_id":"cl82u8d60006dzfqxe05b17jy","_id":"cl82u8d61006pzfqx8kdlgbr8"},{"post_id":"cl82u8d50002bzfqxgiinhgpt","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d61006rzfqx1gbxeypn"},{"post_id":"cl82u8d50002bzfqxgiinhgpt","tag_id":"cl82u8d60006gzfqxgtqbd6k1","_id":"cl82u8d61006szfqxfoht5i4s"},{"post_id":"cl82u8d50002bzfqxgiinhgpt","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d62006uzfqx8cjjgsd5"},{"post_id":"cl82u8d50002bzfqxgiinhgpt","tag_id":"cl82u8d61006mzfqxdnxf75tv","_id":"cl82u8d62006vzfqx22p863lo"},{"post_id":"cl82u8d50002dzfqxetry7cc4","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d62006zzfqxey071djg"},{"post_id":"cl82u8d50002dzfqxetry7cc4","tag_id":"cl82u8d60006dzfqxe05b17jy","_id":"cl82u8d620070zfqxhklb6pl7"},{"post_id":"cl82u8d50002dzfqxetry7cc4","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d630072zfqxcl699rdk"},{"post_id":"cl82u8d50002dzfqxetry7cc4","tag_id":"cl82u8d60006azfqxftqmhmxh","_id":"cl82u8d630073zfqxcuru5mfc"},{"post_id":"cl82u8d50002dzfqxetry7cc4","tag_id":"cl82u8d62006xzfqxc5yaat78","_id":"cl82u8d630075zfqx0vkl8fuc"},{"post_id":"cl82u8d51002gzfqx9reu990v","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d630077zfqxhear9on1"},{"post_id":"cl82u8d51002gzfqx9reu990v","tag_id":"cl82u8d62006yzfqxap9q3ago","_id":"cl82u8d630078zfqx20h4ar6u"},{"post_id":"cl82u8d51002gzfqx9reu990v","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d63007azfqxg85g8r1a"},{"post_id":"cl82u8d51002gzfqx9reu990v","tag_id":"cl82u8d630074zfqxas46d26d","_id":"cl82u8d64007bzfqxb63j0mf6"},{"post_id":"cl82u8d52002izfqxfeu186bn","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d68007ezfqxdgpu61pa"},{"post_id":"cl82u8d52002izfqxfeu186bn","tag_id":"cl82u8d62006yzfqxap9q3ago","_id":"cl82u8d68007fzfqx2b4sghq4"},{"post_id":"cl82u8d52002izfqxfeu186bn","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d68007hzfqxda3hcj94"},{"post_id":"cl82u8d52002izfqxfeu186bn","tag_id":"cl82u8d64007czfqx50ud3pqp","_id":"cl82u8d68007izfqx8gf343w4"},{"post_id":"cl82u8d54002lzfqx965v8q4b","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d69007lzfqx8m4f3vau"},{"post_id":"cl82u8d54002lzfqx965v8q4b","tag_id":"cl82u8d62006yzfqxap9q3ago","_id":"cl82u8d69007mzfqx3p363lud"},{"post_id":"cl82u8d54002lzfqx965v8q4b","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d69007ozfqxfe1x564t"},{"post_id":"cl82u8d54002lzfqx965v8q4b","tag_id":"cl82u8d5z0060zfqx0jww5ys2","_id":"cl82u8d69007pzfqx37pf733q"},{"post_id":"cl82u8d54002nzfqxczny3ggk","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d69007rzfqx2sjt0na6"},{"post_id":"cl82u8d54002nzfqxczny3ggk","tag_id":"cl82u8d68007kzfqx13l2cs2d","_id":"cl82u8d69007szfqxesllduau"},{"post_id":"cl82u8d54002nzfqxczny3ggk","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6a007uzfqx8clfduij"},{"post_id":"cl82u8d55002qzfqx1vj42y42","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6a007vzfqxem9lfpq3"},{"post_id":"cl82u8d55002qzfqx1vj42y42","tag_id":"cl82u8d68007kzfqx13l2cs2d","_id":"cl82u8d6a007xzfqx76x3ea9r"},{"post_id":"cl82u8d55002qzfqx1vj42y42","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6a007yzfqxe3jhfjsn"},{"post_id":"cl82u8d56002szfqxhwbx1btx","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6a0080zfqx1yvpaxcl"},{"post_id":"cl82u8d56002szfqxhwbx1btx","tag_id":"cl82u8d5z0060zfqx0jww5ys2","_id":"cl82u8d6b0081zfqxgcnj03bb"},{"post_id":"cl82u8d56002szfqxhwbx1btx","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6b0083zfqx7hi3hwyh"},{"post_id":"cl82u8d57002xzfqxekk81usk","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6b0084zfqx0rq3d3rt"},{"post_id":"cl82u8d57002xzfqxekk81usk","tag_id":"cl82u8d68007kzfqx13l2cs2d","_id":"cl82u8d6b0086zfqx2oh1fen9"},{"post_id":"cl82u8d57002xzfqxekk81usk","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6b0087zfqx6xf74z1j"},{"post_id":"cl82u8d580030zfqxf0fu2qcn","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6b0089zfqxfarn82qr"},{"post_id":"cl82u8d580030zfqxf0fu2qcn","tag_id":"cl82u8d5z0060zfqx0jww5ys2","_id":"cl82u8d6b008azfqx4nfxg2p1"},{"post_id":"cl82u8d580030zfqxf0fu2qcn","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6c008czfqx6pvn5pfz"},{"post_id":"cl82u8d5a0034zfqx371pfrrb","tag_id":"cl82u8d5y005uzfqx0a0d6h0o","_id":"cl82u8d6c008dzfqx365shdfa"},{"post_id":"cl82u8d5a0034zfqx371pfrrb","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6c008fzfqxh2u53ov0"},{"post_id":"cl82u8d5b0037zfqx6mg75qib","tag_id":"cl82u8d5y005uzfqx0a0d6h0o","_id":"cl82u8d6c008gzfqx1ljjcchg"},{"post_id":"cl82u8d5b0037zfqx6mg75qib","tag_id":"cl82u8d6b0088zfqx37g5blfr","_id":"cl82u8d6c008izfqx15cs79xe"},{"post_id":"cl82u8d5b0039zfqxgaanh9dl","tag_id":"cl82u8d6b008bzfqx3uq61v1v","_id":"cl82u8d6c008jzfqx59pieu7t"},{"post_id":"cl82u8d5b0039zfqxgaanh9dl","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6c008lzfqx936nh2yv"},{"post_id":"cl82u8d5b0039zfqxgaanh9dl","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6d008mzfqx6byn53sx"},{"post_id":"cl82u8d5c003czfqxbtf0g394","tag_id":"cl82u8d6c008ezfqx5l2dbbp2","_id":"cl82u8d6d008ozfqx824x1ttz"},{"post_id":"cl82u8d5c003czfqxbtf0g394","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6d008pzfqxdmdqhd96"},{"post_id":"cl82u8d5c003czfqxbtf0g394","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6d008qzfqx3qhf7ixc"},{"post_id":"cl82u8d5c003czfqxbtf0g394","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d6d008szfqx41wh5pl0"},{"post_id":"cl82u8d5e003jzfqx0k2jc8cw","tag_id":"cl82u8d62006yzfqxap9q3ago","_id":"cl82u8d6d008tzfqx8od82lkg"},{"post_id":"cl82u8d5e003jzfqx0k2jc8cw","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6d008vzfqxc5ha9n3k"},{"post_id":"cl82u8d5e003jzfqx0k2jc8cw","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6d008wzfqxdsay0lo7"},{"post_id":"cl82u8d5e003jzfqx0k2jc8cw","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d6e008yzfqxguoycbfb"},{"post_id":"cl82u8d5g003ozfqxdf1fhs7u","tag_id":"cl82u8d62006yzfqxap9q3ago","_id":"cl82u8d6e008zzfqx445m0hs4"},{"post_id":"cl82u8d5g003ozfqxdf1fhs7u","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6e0091zfqx8jiqdicq"},{"post_id":"cl82u8d5g003ozfqxdf1fhs7u","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6e0092zfqxbmi26oz9"},{"post_id":"cl82u8d5g003ozfqxdf1fhs7u","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d6e0094zfqx5pdee16c"},{"post_id":"cl82u8d5i003tzfqx4u681tav","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6e0095zfqx7mf18lw7"},{"post_id":"cl82u8d5i003tzfqx4u681tav","tag_id":"cl82u8d6d008nzfqxf2xb6rdx","_id":"cl82u8d6f0097zfqxb6799i1t"},{"post_id":"cl82u8d5j003wzfqx0opj4oz3","tag_id":"cl82u8d6d008rzfqx430cdq5w","_id":"cl82u8d6f0098zfqx4q9pgm6f"},{"post_id":"cl82u8d5j003wzfqx0opj4oz3","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6f009azfqxeyxr5z5k"},{"post_id":"cl82u8d5k0041zfqxgi62b64t","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6f009bzfqxdqtvdzvk"},{"post_id":"cl82u8d5k0041zfqxgi62b64t","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6f009dzfqx7h3af81p"},{"post_id":"cl82u8d5k0041zfqxgi62b64t","tag_id":"cl82u8d4e000czfqx86qwftgr","_id":"cl82u8d6f009ezfqx9y7r7zlm"},{"post_id":"cl82u8d5k0041zfqxgi62b64t","tag_id":"cl82u8d6d008uzfqxdedzdqt1","_id":"cl82u8d6f009gzfqx40t39zin"},{"post_id":"cl82u8d5l0043zfqx6g0wf9j1","tag_id":"cl82u8d6d008rzfqx430cdq5w","_id":"cl82u8d6f009hzfqxdjd6hdvh"},{"post_id":"cl82u8d5l0043zfqx6g0wf9j1","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6g009jzfqxcp35fkkf"},{"post_id":"cl82u8d5o004dzfqx2rnh42ug","tag_id":"cl82u8d5y005uzfqx0a0d6h0o","_id":"cl82u8d6g009kzfqx2ca827oz"},{"post_id":"cl82u8d5o004dzfqx2rnh42ug","tag_id":"cl82u8d5x005nzfqxal9ycyvv","_id":"cl82u8d6g009mzfqx6qk8eona"},{"post_id":"cl82u8d5o004dzfqx2rnh42ug","tag_id":"cl82u8d5z0060zfqx0jww5ys2","_id":"cl82u8d6g009nzfqxchq7fs0t"},{"post_id":"cl82u8d5o004fzfqx9roygfxh","tag_id":"cl82u8d5y005uzfqx0a0d6h0o","_id":"cl82u8d6g009ozfqx6fey118w"},{"post_id":"cl82u8d5o004fzfqx9roygfxh","tag_id":"cl82u8d5x005nzfqxal9ycyvv","_id":"cl82u8d6g009qzfqxgy032rwm"},{"post_id":"cl82u8d5o004fzfqx9roygfxh","tag_id":"cl82u8d5z0060zfqx0jww5ys2","_id":"cl82u8d6g009rzfqxbgr224ep"},{"post_id":"cl82u8d5r004nzfqxbfns6ci2","tag_id":"cl82u8d6g009izfqx3w213pf1","_id":"cl82u8d6h009tzfqx0rxog4zk"},{"post_id":"cl82u8d5r004nzfqxbfns6ci2","tag_id":"cl82u8d6g009lzfqxeccy64ab","_id":"cl82u8d6h009uzfqx2edh7qni"},{"post_id":"cl82u8d5r004nzfqxbfns6ci2","tag_id":"cl82u8d6g009pzfqx4b6nel4x","_id":"cl82u8d6h009wzfqxecq89l2c"},{"post_id":"cl82u8d5s004pzfqx8eg6hisk","tag_id":"cl82u8d6d008nzfqxf2xb6rdx","_id":"cl82u8d6h009yzfqxfsmt2pwc"},{"post_id":"cl82u8d5s004pzfqx8eg6hisk","tag_id":"cl82u8d6h009vzfqx2t425l09","_id":"cl82u8d6h009zzfqx33c1eaio"},{"post_id":"cl82u8d5s004szfqxcygg8d42","tag_id":"cl82u8d6h009xzfqx49qahwep","_id":"cl82u8d6i00a3zfqx7183buhi"},{"post_id":"cl82u8d5s004szfqxcygg8d42","tag_id":"cl82u8d6g009pzfqx4b6nel4x","_id":"cl82u8d6i00a4zfqxebo04949"},{"post_id":"cl82u8d5s004szfqxcygg8d42","tag_id":"cl82u8d6h00a1zfqx17dgfbkm","_id":"cl82u8d6i00a6zfqx0i7j6o2n"},{"post_id":"cl82u8d5s004szfqxcygg8d42","tag_id":"cl82u8d5m0044zfqx9u0a4zcm","_id":"cl82u8d6i00a7zfqxguu5bong"},{"post_id":"cl82u8d5t004uzfqx9cpm91x8","tag_id":"cl82u8d6h00a2zfqx9dr8ga3x","_id":"cl82u8d6i00a9zfqx1a3g5wco"},{"post_id":"cl82u8d5t004uzfqx9cpm91x8","tag_id":"cl82u8d6i00a5zfqx7u877bmk","_id":"cl82u8d6i00aazfqxhadzc7lq"},{"post_id":"cl82u8d5t004uzfqx9cpm91x8","tag_id":"cl82u8d6i00a8zfqx9fds4tdv","_id":"cl82u8d6i00abzfqx682odpfc"},{"post_id":"cl82u8d6j00aczfqxgam49sgy","tag_id":"cl82u8d4b0005zfqx7flx8dit","_id":"cl82u8d6k00afzfqxa2z8c10h"},{"post_id":"cl82u8d6j00aczfqxgam49sgy","tag_id":"cl82u8d6k00aezfqx7cxcfwnr","_id":"cl82u8d6k00agzfqxe9et4ws7"},{"post_id":"cl82u8d6j00aczfqxgam49sgy","tag_id":"cl82u8d4w001xzfqxepw07t9f","_id":"cl82u8d6k00ahzfqx8ycm4vj1"},{"post_id":"cl82u8d6j00aczfqxgam49sgy","tag_id":"cl82u8d55002ozfqx24xu7vvv","_id":"cl82u8d6k00aizfqxg3an18qj"}],"Tag":[{"name":"Go","_id":"cl82u8d4b0005zfqx7flx8dit"},{"name":"GPM","_id":"cl82u8d4d0009zfqx19j0gox6"},{"name":"Go源码","_id":"cl82u8d4e000czfqx86qwftgr"},{"name":"RabbitMQ","_id":"cl82u8d4g000fzfqxhaf5fkxf"},{"name":"消息中间件","_id":"cl82u8d4h000kzfqxc6lx5irv"},{"name":"jaeger","_id":"cl82u8d4j000pzfqxcn710knp"},{"name":"监控","_id":"cl82u8d4k000uzfqxdofq5bfi"},{"name":"N个问题","_id":"cl82u8d4l000xzfqx3d1l762d"},{"name":"正态规划","_id":"cl82u8d4n0012zfqxc1bibo4t"},{"name":"TLS","_id":"cl82u8d4o0016zfqx0fnq7m1m"},{"name":"HTTPS","_id":"cl82u8d4q001bzfqxgfce7vyv"},{"name":"Git","_id":"cl82u8d4r001gzfqxethk2hav"},{"name":"Todo","_id":"cl82u8d4t001lzfqxgfchgque"},{"name":"life","_id":"cl82u8d4u001szfqx8fzufnzf"},{"name":"Go Package","_id":"cl82u8d4w001xzfqxepw07t9f"},{"name":"锁","_id":"cl82u8d4x0022zfqxgj8u22vn"},{"name":"hexo","_id":"cl82u8d4z0027zfqxarth1lzd"},{"name":"hexo插件","_id":"cl82u8d51002ezfqx7shj4glf"},{"name":"Day","_id":"cl82u8d55002ozfqx24xu7vvv"},{"name":"Linux","_id":"cl82u8d56002tzfqx1op3980h"},{"name":"进程","_id":"cl82u8d58002yzfqx4gm848py"},{"name":"Plan9","_id":"cl82u8d5c003azfqx3rnx6y2a"},{"name":"chrome","_id":"cl82u8d5h003pzfqxdli105pj"},{"name":"vscode","_id":"cl82u8d5k003zzfqxdyyw6iad"},{"name":"工具","_id":"cl82u8d5m0044zfqx9u0a4zcm"},{"name":"博客","_id":"cl82u8d5n004bzfqx1njy0wsy"},{"name":"Go_1.16","_id":"cl82u8d5t004vzfqxha5c2dcx"},{"name":"encoding/json","_id":"cl82u8d5u004yzfqx64c45voa"},{"name":"time","_id":"cl82u8d5u0051zfqxbbyhbpqx"},{"name":"sync","_id":"cl82u8d5v0058zfqxc5rjhy0w"},{"name":"Mutex","_id":"cl82u8d5w005ezfqxaglq3yjc"},{"name":"Map","_id":"cl82u8d5x005kzfqxgoevdd6j"},{"name":"Hash","_id":"cl82u8d5x005nzfqxal9ycyvv"},{"name":"Redis","_id":"cl82u8d5y005uzfqx0a0d6h0o"},{"name":"RDB","_id":"cl82u8d5y005xzfqx5gqzgcpf"},{"name":"源码","_id":"cl82u8d5z0060zfqx0jww5ys2"},{"name":"Golang","_id":"cl82u8d5z0066zfqx2luq5p28"},{"name":"Float","_id":"cl82u8d60006azfqxftqmhmxh"},{"name":"IEEE","_id":"cl82u8d60006dzfqxe05b17jy"},{"name":"ticker","_id":"cl82u8d60006gzfqxgtqbd6k1"},{"name":"defer","_id":"cl82u8d61006mzfqxdnxf75tv"},{"name":"位运算","_id":"cl82u8d62006xzfqxc5yaat78"},{"name":"Runtime","_id":"cl82u8d62006yzfqxap9q3ago"},{"name":"v1.16","_id":"cl82u8d630074zfqxas46d26d"},{"name":"v1.14","_id":"cl82u8d64007czfqx50ud3pqp"},{"name":"Sort","_id":"cl82u8d68007kzfqx13l2cs2d"},{"name":"SDS","_id":"cl82u8d6b0088zfqx37g5blfr"},{"name":"Go_1.17","_id":"cl82u8d6b008bzfqx3uq61v1v"},{"name":"chan","_id":"cl82u8d6c008ezfqx5l2dbbp2"},{"name":"MySQL","_id":"cl82u8d6d008nzfqxf2xb6rdx"},{"name":"算法","_id":"cl82u8d6d008rzfqx430cdq5w"},{"name":"v1.18","_id":"cl82u8d6d008uzfqxdedzdqt1"},{"name":"openwrt","_id":"cl82u8d6g009izfqx3w213pf1"},{"name":"软路由","_id":"cl82u8d6g009lzfqxeccy64ab"},{"name":"网络","_id":"cl82u8d6g009pzfqx4b6nel4x"},{"name":"小记","_id":"cl82u8d6h009vzfqx2t425l09"},{"name":"抓包","_id":"cl82u8d6h009xzfqx49qahwep"},{"name":"tcpdump","_id":"cl82u8d6h00a1zfqx17dgfbkm"},{"name":"k8s","_id":"cl82u8d6h00a2zfqx9dr8ga3x"},{"name":"operator","_id":"cl82u8d6i00a5zfqx7u877bmk"},{"name":"kubebuilder","_id":"cl82u8d6i00a8zfqx9fds4tdv"},{"name":"Go reflect","_id":"cl82u8d6k00aezfqx7cxcfwnr"}]}}